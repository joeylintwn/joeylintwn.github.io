
/*
jqxcheckbox
*/

(function (a) { a.jqx.jqxWidget("jqxCheckBox", "", {}); a.extend(a.jqx._jqxCheckBox.prototype, { defineInstance: function () { var b = { animationShowDelay: 300, animationHideDelay: 300, width: null, height: null, boxSize: "13px", checked: false, hasThreeStates: false, disabled: false, enableContainerClick: true, locked: false, groupName: "", keyboardCheck: true, enableHover: true, hasInput: true, rtl: false, updated: null, disabledContainer: false, changeType: null, _canFocus: true, aria: { "aria-checked": { name: "checked", type: "boolean" }, "aria-disabled": { name: "disabled", type: "boolean" } }, events: ["checked", "unchecked", "indeterminate", "change"] }; a.extend(true, this, b); return b }, createInstance: function (b) { this.render() }, _addInput: function () { if (this.hasInput) { if (this.input) { this.input.remove() } var b = this.host.attr("name"); this.input = a("<input type='hidden'/>"); this.host.append(this.input); if (b) { this.input.attr("name", b) } this.input.val(this.checked); this.host.attr("role", "checkbox"); a.jqx.aria(this) } }, render: function () { this.init = true; var d = this; this.setSize(); this.propertyChangeMap.width = function (h, j, i, k) { d.setSize() }; this.propertyChangeMap.height = function (h, j, i, k) { d.setSize() }; this._removeHandlers(); if (this.checkbox) { this.checkbox.remove(); this.checkbox = null } if (this.checkMark) { this.checkMark.remove(); this.checkMark = null } if (this.box) { this.box.remove(); this.box = null } if (this.clear) { this.clear.remove(); this.clear = null } if (this.boxSize == null) { this.boxSize = 13 } var g = parseInt(this.boxSize) + "px"; var f = "13px"; var e = Math.floor((parseInt(this.boxSize) - 13) / 2); var b = e; e += "px"; b += "px"; if (this.boxSize != "13px") { this.checkbox = a('<div><div style="width: ' + g + "; height: " + g + ';"><span style="position: relative; left: ' + e + "; top: " + b + "; width: " + f + "; height: " + f + ';"></span></div></div>') } else { this.checkbox = a('<div><div style="width: ' + g + "; height: " + g + ';"><span style="width: ' + g + "; height: " + g + ';"></span></div></div>') } this.host.prepend(this.checkbox); if (!this.disabledContainer) { if (!this.host.attr("tabIndex")) { this.host.attr("tabIndex", 0) } this.clear = a('<div style="clear: both;"></div>'); this.host.append(this.clear) } this.checkMark = a(this.checkbox[0].firstChild.firstChild); this.box = this.checkbox; this.box.addClass(this.toThemeProperty("jqx-checkbox-default") + " " + this.toThemeProperty("jqx-fill-state-normal") + " " + this.toThemeProperty("jqx-rc-all")); if (this.disabled) { this.disable() } if (!this.disabledContainer) { this.host.addClass(this.toThemeProperty("jqx-widget")); this.host.addClass(this.toThemeProperty("jqx-checkbox")) } if (this.locked && !this.disabledContainer) { this.host.css("cursor", "auto") } var c = this.element.getAttribute("checked"); if (c == "checked" || c == "true" || c == true) { this.checked = true } this._addInput(); this._render(); this._addHandlers(); this.init = false }, refresh: function (b) { if (!b) { this.setSize(); this._render() } }, resize: function (c, b) { this.width = c; this.height = b; this.refresh() }, setSize: function () { if (this.width != null && this.width.toString().indexOf("px") != -1) { this.host.width(this.width) } else { if (this.width != undefined && !isNaN(this.width)) { this.host.width(this.width) } } if (this.height != null && this.height.toString().indexOf("px") != -1) { this.host.height(this.height) } else { if (this.height != undefined && !isNaN(this.height)) { this.host.height(this.height) } } }, _addHandlers: function () { var d = this; var c = a.jqx.mobile.isTouchDevice(); var b = "mousedown"; if (c) { b = a.jqx.mobile.getTouchEventName("touchend") } this.addHandler(this.box, b, function (e) { if (!d.disabled && !d.enableContainerClick && !d.locked) { d.changeType = "mouse"; d.toggle(); if (d.updated) { e.owner = d; d.updated(e, d.checked, d.oldChecked) } if (e.preventDefault) { e.preventDefault() } return false } }); if (!this.disabledContainer) { this.addHandler(this.host, "keydown", function (e) { if (!d.disabled && !d.locked && d.keyboardCheck) { if (e.keyCode == 32) { if (!d._canFocus) { return true } d.changeType = "keyboard"; d.toggle(); if (d.updated) { e.owner = d; d.updated(e, d.checked, d.oldChecked) } if (e.preventDefault) { e.preventDefault() } return false } } }); this.addHandler(this.host, b, function (e) { if (!d.disabled && d.enableContainerClick && !d.locked) { d.changeType = "mouse"; d.toggle(); if (e.preventDefault) { e.preventDefault() } if (d._canFocus) { d.focus() } return false } }); this.addHandler(this.host, "selectstart", function (e) { if (!d.disabled && d.enableContainerClick) { if (e.preventDefault) { e.preventDefault() } return false } }); this.addHandler(this.host, "mouseup", function (e) { if (!d.disabled && d.enableContainerClick) { if (e.preventDefault) { e.preventDefault() } } }); this.addHandler(this.host, "focus", function (e) { if (!d.disabled && !d.locked) { if (!d._canFocus) { return true } if (d.enableHover) { d.box.addClass(d.toThemeProperty("jqx-checkbox-hover")) } d.box.addClass(d.toThemeProperty("jqx-fill-state-focus")); if (e.preventDefault) { e.preventDefault() } d.hovered = true; return false } }); this.addHandler(this.host, "blur", function (e) { if (!d.disabled && !d.locked) { if (!d._canFocus) { return true } if (d.enableHover) { d.box.removeClass(d.toThemeProperty("jqx-checkbox-hover")) } d.box.removeClass(d.toThemeProperty("jqx-fill-state-focus")); if (e.preventDefault) { e.preventDefault() } d.hovered = false; return false } }); this.addHandler(this.host, "mouseenter", function (e) { if (d.locked) { d.host.css("cursor", "arrow") } if (d.enableHover) { if (!d.disabled && d.enableContainerClick && !d.locked) { d.box.addClass(d.toThemeProperty("jqx-checkbox-hover")); d.box.addClass(d.toThemeProperty("jqx-fill-state-hover")); if (e.preventDefault) { e.preventDefault() } d.hovered = true; return false } } }); this.addHandler(this.host, "mouseleave", function (e) { if (d.enableHover) { if (!d.disabled && d.enableContainerClick && !d.locked) { d.box.removeClass(d.toThemeProperty("jqx-checkbox-hover")); d.box.removeClass(d.toThemeProperty("jqx-fill-state-hover")); if (e.preventDefault) { e.preventDefault() } d.hovered = false; return false } } }); this.addHandler(this.box, "mouseenter", function () { if (d.locked) { return } if (!d.disabled && !d.enableContainerClick) { d.box.addClass(d.toThemeProperty("jqx-checkbox-hover")); d.box.addClass(d.toThemeProperty("jqx-fill-state-hover")) } }); this.addHandler(this.box, "mouseleave", function () { if (!d.disabled && !d.enableContainerClick) { d.box.removeClass(d.toThemeProperty("jqx-checkbox-hover")); d.box.removeClass(d.toThemeProperty("jqx-fill-state-hover")) } }) } }, focus: function () { try { this.host.focus() } catch (b) { } }, _removeHandlers: function () { var c = a.jqx.mobile.isTouchDevice(); var b = "mousedown"; if (c) { b = "touchend" } if (this.box) { this.removeHandler(this.box, b); this.removeHandler(this.box, "mouseenter"); this.removeHandler(this.box, "mouseleave") } this.removeHandler(this.host, b); this.removeHandler(this.host, "mouseup"); this.removeHandler(this.host, "selectstart"); this.removeHandler(this.host, "mouseenter"); this.removeHandler(this.host, "mouseleave"); this.removeHandler(this.host, "keydown"); this.removeHandler(this.host, "blur"); this.removeHandler(this.host, "focus") }, _render: function () { if (!this.disabled) { if (this.enableContainerClick) { this.host.css("cursor", "pointer") } else { if (!this.init) { this.host.css("cursor", "auto") } } } else { this.disable() } if (this.rtl) { this.box.addClass(this.toThemeProperty("jqx-checkbox-rtl")); this.host.addClass(this.toThemeProperty("jqx-rtl")) } this.updateStates() }, _setState: function (c, b) { if (this.checked != c) { this.checked = c; if (this.checked) { this.checkMark[0].className = this.toThemeProperty("jqx-checkbox-check-checked") } else { if (this.checked == null) { this.checkMark[0].className = this.toThemeProperty("jqx-checkbox-check-indeterminate") } else { this.checkMark[0].className = "" } } } if (b === false || b === true) { this.locked = b } }, val: function (b) { if (arguments.length == 0 || (b != null && typeof (b) == "object")) { return this.checked } if (typeof b == "string") { if (b == "true") { this.check() } if (b == "false") { this.uncheck() } if (b == "") { this.indeterminate() } } else { if (b == true) { this.check() } if (b == false) { this.uncheck() } if (b == null) { this.indeterminate() } } return this.checked }, check: function () { this.checked = true; var b = this; this.checkMark.removeClass(); if (a.jqx.browser.msie || this.animationShowDelay == 0) { this.checkMark.addClass(this.toThemeProperty("jqx-checkbox-check-checked")) } else { this.checkMark.addClass(this.toThemeProperty("jqx-checkbox-check-checked")); this.checkMark.css("opacity", 0); this.checkMark.stop().animate({ opacity: 1 }, this.animationShowDelay, function () { }) } if (this.groupName != null && this.groupName.length > 0) { var c = a.find(this.toThemeProperty(".jqx-checkbox", true)); a.each(c, function () { var d = a(this).jqxCheckBox("groupName"); if (d == b.groupName && this != b.element) { a(this).jqxCheckBox("uncheck") } }) } this._raiseEvent("0", true); this._raiseEvent("3", { checked: true }); if (this.input != undefined) { this.input.val(this.checked); a.jqx.aria(this, "aria-checked", this.checked) } }, uncheck: function () { this.checked = false; var b = this; if (a.jqx.browser.msie || this.animationHideDelay == 0) { if (b.checkMark[0].className != "") { b.checkMark[0].className = "" } } else { this.checkMark.css("opacity", 1); this.checkMark.stop().animate({ opacity: 0 }, this.animationHideDelay, function () { if (b.checkMark[0].className != "") { b.checkMark[0].className = "" } }) } this._raiseEvent("1"); this._raiseEvent("3", { checked: false }); if (this.input != undefined) { this.input.val(this.checked); a.jqx.aria(this, "aria-checked", this.checked) } }, indeterminate: function () { this.checked = null; this.checkMark.removeClass(); if (a.jqx.browser.msie || this.animationShowDelay == 0) { this.checkMark.addClass(this.toThemeProperty("jqx-checkbox-check-indeterminate")) } else { this.checkMark.addClass(this.toThemeProperty("jqx-checkbox-check-indeterminate")); this.checkMark.css("opacity", 0); this.checkMark.stop().animate({ opacity: 1 }, this.animationShowDelay, function () { }) } this._raiseEvent("2"); this._raiseEvent("3", { checked: null }); if (this.input != undefined) { this.input.val(this.checked); a.jqx.aria(this, "aria-checked", "undefined") } }, toggle: function () { if (this.disabled) { return } if (this.locked) { return } if (this.groupName != null && this.groupName.length > 0) { if (this.checked != true) { this.checked = true; this.updateStates() } return } this.oldChecked = this.checked; if (this.checked == true) { this.checked = this.hasThreeStates ? null : false } else { this.checked = this.checked != null } this.updateStates(); if (this.input != undefined) { this.input.val(this.checked) } }, updateStates: function () { if (this.checked) { this.check() } else { if (this.checked == false) { this.uncheck() } else { if (this.checked == null) { this.indeterminate() } } } }, disable: function () { this.disabled = true; if (this.checked == true) { this.checkMark.addClass(this.toThemeProperty("jqx-checkbox-check-disabled")) } else { if (this.checked == null) { this.checkMark.addClass(this.toThemeProperty("jqx-checkbox-check-indeterminate-disabled")) } } this.box.addClass(this.toThemeProperty("jqx-checkbox-disabled-box")); this.host.addClass(this.toThemeProperty("jqx-checkbox-disabled")); this.host.addClass(this.toThemeProperty("jqx-fill-state-disabled")); this.box.addClass(this.toThemeProperty("jqx-checkbox-disabled")); a.jqx.aria(this, "aria-disabled", this.disabled) }, enable: function () { if (this.checked == true) { this.checkMark.removeClass(this.toThemeProperty("jqx-checkbox-check-disabled")) } else { if (this.checked == null) { this.checkMark.removeClass(this.toThemeProperty("jqx-checkbox-check-indeterminate-disabled")) } } this.box.removeClass(this.toThemeProperty("jqx-checkbox-disabled-box")); this.host.removeClass(this.toThemeProperty("jqx-checkbox-disabled")); this.host.removeClass(this.toThemeProperty("jqx-fill-state-disabled")); this.box.removeClass(this.toThemeProperty("jqx-checkbox-disabled")); this.disabled = false; a.jqx.aria(this, "aria-disabled", this.disabled) }, destroy: function () { this.host.remove() }, _raiseEvent: function (g, e) { if (this.init) { return } var c = this.events[g]; var f = new a.Event(c); f.owner = this; if (!e) { e = {} } e.type = this.changeType; this.changeType = null; f.args = e; try { var b = this.host.trigger(f) } catch (d) { } return b }, propertyChangedHandler: function (b, c, e, d) { if (this.isInitialized == undefined || this.isInitialized == false) { return } if (c == "enableContainerClick" && !b.disabled && !b.locked) { if (d) { b.host.css("cursor", "pointer") } else { b.host.css("cursor", "auto") } } if (c == "rtl") { if (d) { b.box.addClass(b.toThemeProperty("jqx-checkbox-rtl")); b.host.addClass(b.toThemeProperty("jqx-rtl")) } else { b.box.removeClass(b.toThemeProperty("jqx-checkbox-rtl")); b.host.removeClass(b.toThemeProperty("jqx-rtl")) } } if (c == "boxSize") { b.render() } if (c == "theme") { a.jqx.utilities.setTheme(e, d, b.host) } if (c == "checked") { if (d != e) { switch (d) { case true: b.check(); break; case false: b.uncheck(); break; case null: b.indeterminate(); break } } } if (c == "disabled") { if (d != e) { if (d) { b.disable() } else { b.enable() } } } } }) })(jqxBaseFramework);


/*
jqxslider
*/

(function (a) { a.jqx.jqxWidget("jqxSlider", "", {}); a.extend(a.jqx._jqxSlider.prototype, { defineInstance: function () { var b = { disabled: false, width: 300, height: 30, step: 1, max: 10, min: 0, int64: false, orientation: "horizontal", showTicks: true, ticksPosition: "both", ticksFrequency: 2, minorTicksFrequency: 1, showMinorTicks: false, showButtons: true, buttonsPosition: "both", mode: "default", showRange: true, rangeSlider: false, value: 0, values: [0, 10], tooltip: false, tooltipFormatFunction: null, tooltipPosition: "near", tooltipHideDelay: 500, sliderButtonSize: 14, tickSize: 7, minorTickSize: 4, showTickLabels: false, tickLabelFormatFunction: null, layout: "normal", rtl: false, changeType: null, _settings: { vertical: { size: "height", oSize: "width", outerOSize: "outerWidth", outerSize: "outerHeight", left: "top", top: "left", start: "_startY", mouse: "_mouseStartY", page: "pageY", opposite: "horizontal" }, horizontal: { size: "width", oSize: "height", outerOSize: "outerHeight", outerSize: "outerWidth", left: "left", top: "top", start: "_startX", mouse: "_mouseStartX", page: "pageX", opposite: "vertical" } }, _touchEvents: { mousedown: a.jqx.mobile.getTouchEventName("touchstart"), click: a.jqx.mobile.getTouchEventName("touchstart"), mouseup: a.jqx.mobile.getTouchEventName("touchend"), mousemove: a.jqx.mobile.getTouchEventName("touchmove"), mouseenter: "mouseenter", mouseleave: "mouseleave" }, _events: ["change", "slide", "slideEnd", "slideStart", "created"], _invalidArgumentExceptions: { invalidWidth: "Invalid width.", invalidHeight: "Invalid height.", invalidStep: "Invalid step.", invalidMaxValue: "Invalid maximum value.", invalidMinValue: "Invalid minimum value.", invalidTickFrequency: "Invalid tick frequency.", invalidValue: "Invalid value.", invalidValues: "Invalid values.", invalidTicksPosition: "Invalid ticksPosition", invalidButtonsPosition: "Invalid buttonsPosition" }, _lastValue: [], _track: null, _leftButton: null, _rightButton: null, _slider: null, _rangeBar: null, _slideEvent: null, _capturedElement: null, _slideStarted: false, aria: { "aria-valuenow": { name: "value", type: "number" }, "aria-valuemin": { name: "min", type: "number" }, "aria-valuemax": { name: "max", type: "number" }, "aria-disabled": { name: "disabled", type: "boolean" } } }; a.extend(true, this, b); return b }, createInstance: function (b) { var c = this; if (c.int64 === true) { if (!a.jqx.longInt) { throw new Error("jqxSlider: Missing reference to jqxdata.js") } a.jqx.longInt(c); c._value64 = new a.jqx.math().fromString(c.value.toString(), 10); c._values64 = [new a.jqx.math().fromString(c.values[0].toString(), 10), new a.jqx.math().fromString(c.values[1].toString(), 10)]; c._min64 = new a.jqx.math().fromString(c.min.toString(), 10); c._max64 = new a.jqx.math().fromString(c.max.toString(), 10); c._step64 = new a.jqx.math().fromString(c.step.toString(), 10); c._ticksFrequency64 = new a.jqx.math().fromString(c.ticksFrequency.toString(), 10); c._minorTicksFrequency64 = new a.jqx.math().fromString(c.minorTicksFrequency.toString(), 10) } this.render() }, render: function () { this.element.innerHTML = ""; this.host.attr("role", "slider"); this.host.addClass(this.toThemeProperty("jqx-slider")); this.host.addClass(this.toThemeProperty("jqx-widget")); a.jqx.aria(this); this._isTouchDevice = a.jqx.mobile.isTouchDevice(); this.host.width(this.width); this.host.height(this.height); this._refresh(); this._raiseEvent(4, { value: this.getValue() }); this._addInput(); var c = this; var b = c.host.attr("tabindex") == null; if (b) { c.host.attr("tabindex", 0) } a.jqx.utilities.resize(this.host, function () { c.__trackSize = null; c.__thumbSize = null; c.host.width(c.width); c.host.height(c.height); c._performLayout(); c._initialSettings() }) }, resize: function (c, b) { this.width = c; this.height = b; this.refresh(); this.host.width(me.width); this.host.height(me.height); this._performLayout(); this._initialSettings() }, focus: function () { try { this.host.focus() } catch (b) { } }, destroy: function () { this.host.remove() }, _addInput: function () { var b = this.host.attr("name"); this.input = a("<input type='hidden'/>"); this.host.append(this.input); if (b) { this.input.attr("name", b) } if (!this.rangeSlider) { this.input.val(this.value.toString()) } else { if (this.values) { this.input.val(this.value.rangeStart.toString() + "-" + this.value.rangeEnd.toString()) } } }, _getSetting: function (b) { return this._settings[this.orientation][b] }, _getEvent: function (b) { if (this._isTouchDevice) { return this._touchEvents[b] } else { return b } }, refresh: function (b) { if (!b) { this._refresh() } }, _refresh: function () { this._render(); this._performLayout(); this._removeEventHandlers(); this._addEventHandlers(); this._initialSettings() }, _render: function () { this._addTrack(); this._addSliders(); this._addTickContainers(); this._addContentWrapper(); this._addButtons(); this._addRangeBar() }, _addTrack: function () { if (this._track === null || this._track.length < 1) { this._track = a('<div class="' + this.toThemeProperty("jqx-slider-track") + '"></div>'); this.host.append(this._track) } this._track.attr("style", ""); this._track.removeClass(this.toThemeProperty("jqx-slider-track-" + this._getSetting("opposite"))); this._track.addClass(this.toThemeProperty("jqx-slider-track-" + this.orientation)); this._track.addClass(this.toThemeProperty("jqx-fill-state-normal")); this._track.addClass(this.toThemeProperty("jqx-rc-all")) }, _addSliders: function () { if (this._slider === null || this._slider.length < 1) { this._slider = {}; this._slider.left = a('<div class="' + this.toThemeProperty("jqx-slider-slider") + '"></div>'); this._track.append(this._slider.left); this._slider.right = a('<div class="' + this.toThemeProperty("jqx-slider-slider") + '"></div>'); this._track.append(this._slider.right) } this._slider.left.removeClass(this.toThemeProperty("jqx-slider-slider-" + this._getSetting("opposite"))); this._slider.left.addClass(this.toThemeProperty("jqx-slider-slider-" + this.orientation)); this._slider.right.removeClass(this.toThemeProperty("jqx-slider-slider-" + this._getSetting("opposite"))); this._slider.right.addClass(this.toThemeProperty("jqx-slider-slider-" + this.orientation)); this._slider.right.addClass(this.toThemeProperty("jqx-fill-state-normal")); this._slider.left.addClass(this.toThemeProperty("jqx-fill-state-normal")) }, _addTickContainers: function () { if (this._bottomTicks !== null || this._bottomTicks.length < 1 || this._topTicks !== null || this._topTicks.length < 1) { this._addTickContainers() } var b = "visible"; if (!this.showTicks) { b = "hidden" } this._bottomTicks.css("visibility", b); this._topTicks.css("visibility", b) }, _addTickContainers: function () { if (typeof this._bottomTicks === "undefined" || this._bottomTicks.length < 1) { this._bottomTicks = a('<div class="' + this.toThemeProperty("jqx-slider-tickscontainer") + '" style=""></div>'); this.host.prepend(this._bottomTicks) } if (typeof this._topTicks === "undefined" || this._topTicks.length < 1) { this._topTicks = a('<div class="' + this.toThemeProperty("jqx-slider-tickscontainer") + '" style=""></div>'); this.host.append(this._topTicks) } }, _addButtons: function () { if (this._leftButton === null || this._leftButton.length < 1 || this._rightButton === null || this._rightButton.length < 1) { this._createButtons() } var b = "block"; if (!this.showButtons || this.rangeSlider) { b = "none" } this._rightButton.css("display", b); this._leftButton.css("display", b) }, _createButtons: function () { this._leftButton = a('<div class="jqx-slider-left"><div style="width: 100%; height: 100%;"></div></div>'); this._rightButton = a('<div class="jqx-slider-right"><div style="width: 100%; height: 100%;"></div></div>'); this.host.prepend(this._rightButton); this.host.prepend(this._leftButton); if (!this.host.jqxRepeatButton) { throw new Error("jqxSlider: Missing reference to jqxbuttons.js.") } this._leftButton.jqxRepeatButton({ theme: this.theme, delay: 50, width: this.sliderButtonSize, height: this.sliderButtonSize }); this._rightButton.jqxRepeatButton({ theme: this.theme, delay: 50, width: this.sliderButtonSize, height: this.sliderButtonSize }) }, _addContentWrapper: function () { if (this._contentWrapper === undefined || this._contentWrapper.length === 0) { this.host.wrapInner("<div></div>"); this._contentWrapper = this.host.children(0) } if (this.orientation === "horizontal") { this._contentWrapper.css("float", "left") } else { this._contentWrapper.css("float", "none") } }, _addTicks: function (c) { if (!this.showTicks) { return } var e = c[this._getSetting("size")](), m, f, n, k, h, o; if (this.int64 === false) { m = this.max - this.min; f = Math.round(m / this.ticksFrequency); n = Math.round(m / this.minorTicksFrequency); h = this.min; o = this.max } else { m = this._max64.subtract(this._min64); f = m.div(this._ticksFrequency64).toNumber(); n = m.div(this._minorTicksFrequency64).toNumber(); h = this._min64.toString(); o = this._max64.toString() } var b = e / f, k = e / n; c.empty(); var r = "", d; if ((this.layout === "normal" && this.orientation === "horizontal") || (this.layout === "reverse" && this.orientation === "vertical")) { d = this.tickLabelFormatFunction ? this.tickLabelFormatFunction(h) : h } else { d = this.tickLabelFormatFunction ? this.tickLabelFormatFunction(o) : o } var q = a("<span style='visibility: hidden;'></span>"); q.addClass(this.toThemeProperty("jqx-widget jqx-widget-content jqx-slider")); q.appendTo(document.body); q.html("0"); var l = { width: q.width(), height: q.height() }; q.detach(); var s = c[this._getSetting("oSize")](); r += this._addTick(c, 0, this.min, s, d, l); for (var j = 1; j < f; j++) { var g = j * b; g = Math.floor(g); var p; if (this.int64 === false) { if ((this.layout === "normal" && this.orientation === "horizontal") || (this.layout === "reverse" && this.orientation === "vertical")) { p = this.min + this.ticksFrequency * j } else { p = this.max - this.ticksFrequency * j } } else { if ((this.layout === "normal" && this.orientation === "horizontal") || (this.layout === "reverse" && this.orientation === "vertical")) { p = this._min64.add(this._ticksFrequency64.multiply(new a.jqx.math().fromString(j.toString(), 10))).toString() } else { p = this._max64.subtract(this._ticksFrequency64.multiply(new a.jqx.math().fromString(j.toString(), 10))).toString() } } var d = this.tickLabelFormatFunction ? this.tickLabelFormatFunction(p) : p; r += this._addTick(c, g, j, s, d, l) } if (this.showMinorTicks) { for (var j = 1; j < n; j++) { var g = j * k; g = Math.floor(g); var d = ""; r += this._addTick(c, g, j, s, d, l, true) } } if ((this.layout === "normal" && this.orientation === "horizontal") || (this.layout === "reverse" && this.orientation === "vertical")) { d = this.tickLabelFormatFunction ? this.tickLabelFormatFunction(o) : o } else { d = this.tickLabelFormatFunction ? this.tickLabelFormatFunction(h) : h } r += this._addTick(c, f * b, this.max, s, d, l); c.append(a(r)) }, _addTick: function (b, i, n, p, c, j, o) { var q = ""; q = this.toThemeProperty("jqx-slider-tick"); q += " " + this.toThemeProperty("jqx-fill-state-pressed"); var e; var l = this._getSetting("top"); var d = "2px"; var f = this.tickSize; if (o) { f = this.minorTickSize } if (b[0] !== this._topTicks[0]) { d = p - f - 2 + "px" } if (this.orientation === "horizontal") { e = '<div style="' + l + ": " + d + "; " + this._getSetting("oSize") + ":  " + f + "px; float: left; position:absolute; left:" + i + 'px;" class="' + this.toThemeProperty("jqx-slider-tick-horizontal") + " " + q + '"></div>'; if (this.showTickLabels) { if (b[0] !== this._topTicks[0]) { d = p - f - j.height - 2 + "px" } else { d = 2 + f + "px" } var m = j.width * c.toString().length; m = m / 2; var k = i - m; e += '<div style="' + l + ": " + d + "; float: left; position:absolute; left:" + k + 'px;">' + c + "</div>" } } else { e = '<div style="' + l + ": " + d + "; " + this._getSetting("oSize") + ":  " + f + "px; float: none; position:absolute; top:" + i + 'px;" class="' + this.toThemeProperty("jqx-slider-tick-vertical") + " " + q + '"></div>'; if (this.showTickLabels) { if (b[0] !== this._topTicks[0]) { d = p - f - c.toString().length * j.width - 6 + "px" } else { d = 6 + f + "px" } var g = j.height; g = g / 2; var k = i - g; e += '<div style="' + l + ": " + d + "; float: none; position:absolute; top:" + k + 'px;">' + c + "</div>" } } return e }, _addRangeBar: function () { if (this._rangeBar === null || this._rangeBar.length < 1) { this._rangeBar = a('<div class="' + this.toThemeProperty("jqx-slider-rangebar") + '"></div>'); this._rangeBar.addClass(this.toThemeProperty("jqx-fill-state-pressed")); this._rangeBar.addClass(this.toThemeProperty("jqx-rc-all")); this._track.append(this._rangeBar) } if (!this.showRange) { this._rangeBar.css("display", "none") } else { this._rangeBar.css("display", "block") } this._thumbSize = this._slider.left.outerWidth() }, _getLeftDisplacement: function () { if (!this.showButtons) { return 0 } if (this.rangeSlider) { return 0 } switch (this.buttonsPosition) { case "left": return this._leftButton[this._getSetting("outerSize")](true) + this._rightButton[this._getSetting("outerSize")](true); case "right": return 0; default: return this._leftButton[this._getSetting("outerSize")](true) } return 0 }, _performLayout: function () { this.host.width(this.width); this.host.height(this.height); var b = this.host.height(); if (this._getSetting("size") == "width") { b = this.host.width() } this._performButtonsLayout(); this._performTrackLayout(b - 1); this._contentWrapper[this._getSetting("size")](this._track[this._getSetting("size")]()); this._contentWrapper[this._getSetting("oSize")](this[this._getSetting("oSize")]); this._performTicksLayout(); this._performRangeBarLayout(); if (this.rangeSlider) { this._slider.left.css("visibility", "visible") } else { this._slider.left.css("visibility", "hidden") } this._refreshRangeBar(); if (this.orientation == "vertical") { if (this.showButtons) { var c = parseInt((this._leftButton.width() - this._track.width()) / 2); this._track.css("margin-left", -3 + c + "px") } } }, _performTrackLayout: function (b) { this._track[this._getSetting("size")](b - ((this.showButtons && !this.rangeSlider) ? this._leftButton[this._getSetting("outerSize")](true) + this._rightButton[this._getSetting("outerSize")](true) : 0)); this._slider.left.css("left", 0); this._slider.left.css("top", 0); this._slider.right.css("left", 0); this._slider.right.css("top", 0) }, _performTicksLayout: function () { this._performTicksContainerLayout(); this._addTicks(this._topTicks); this._addTicks(this._bottomTicks); this._topTicks.css("visibility", "hidden"); this._bottomTicks.css("visibility", "hidden"); if ((this.ticksPosition === "top" || this.ticksPosition === "both") && this.showTicks) { this._bottomTicks.css("visibility", "visible") } if ((this.ticksPosition === "bottom" || this.ticksPosition === "both") && this.showTicks) { this._topTicks.css("visibility", "visible") } }, _performTicksContainerLayout: function () { var f = this._getSetting("size"); var e = this._getSetting("oSize"); var b = this._getSetting("outerOSize"); this._topTicks[f](this._track[f]()); this._bottomTicks[f](this._track[f]()); var d = -2 + (parseInt(this[e]) - this._track[b](true)) / 2; this._topTicks[e](parseInt(d)); var c = -2 + (parseInt(this[e]) - this._track[b](true)) / 2; this._bottomTicks[e](parseInt(c)); if (this.orientation === "vertical") { this._topTicks.css("float", "left"); this._track.css("float", "left"); this._bottomTicks.css("float", "left") } else { this._topTicks.css("float", "none"); this._track.css("float", "none"); this._bottomTicks.css("float", "none") } }, _performButtonsLayout: function () { this._addButtonsStyles(); this._addButtonsClasses(); this._addButtonsHover(); this._orderButtons(); this._centerElement(this._rightButton); this._centerElement(this._leftButton); this._layoutButtons() }, _addButtonsStyles: function () { this._leftButton.css("background-position", "center"); this._rightButton.css("background-position", "center"); if (this.orientation === "vertical") { this._leftButton.css("float", "none"); this._rightButton.css("float", "none") } else { this._leftButton.css("float", "left"); this._rightButton.css("float", "left") } }, _addButtonsClasses: function () { var b = { prev: "left", next: "right" }; if (this.orientation === "vertical") { b = { prev: "up", next: "down" } } this._leftButton.addClass(this.toThemeProperty("jqx-rc-all")); this._rightButton.addClass(this.toThemeProperty("jqx-rc-all")); this._leftButton.addClass(this.toThemeProperty("jqx-slider-button")); this._rightButton.addClass(this.toThemeProperty("jqx-slider-button")); this._leftArrow = this._leftButton.find("div"); this._rightArrow = this._rightButton.find("div"); this._leftArrow.removeClass(this.toThemeProperty("jqx-icon-arrow-left")); this._rightArrow.removeClass(this.toThemeProperty("jqx-icon-arrow-right")); this._leftArrow.removeClass(this.toThemeProperty("jqx-icon-arrow-up")); this._rightArrow.removeClass(this.toThemeProperty("jqx-icon-arrow-down")); this._leftArrow.addClass(this.toThemeProperty("jqx-icon-arrow-" + b.prev)); this._rightArrow.addClass(this.toThemeProperty("jqx-icon-arrow-" + b.next)) }, _addButtonsHover: function () { var c = this, b = { prev: "left", next: "right" }; if (this.orientation === "vertical") { b = { prev: "up", next: "down" } } this.addHandler(a(document), "mouseup.arrow" + this.element.id, function () { c._leftArrow.removeClass(c.toThemeProperty("jqx-icon-arrow-" + b.prev + "-selected")); c._rightArrow.removeClass(c.toThemeProperty("jqx-icon-arrow-" + b.next + "-selected")); if (c.sliderTooltip) { if (c.sliderTooltipTimer) { clearTimeout(c.sliderTooltipTimer) } c.sliderTooltipTimer = setTimeout(function () { c.sliderTooltip.fadeOut("fast"); c._mouseDown = false }, c.tooltipHideDelay) } else { c._mouseDown = false } }); this.addHandler(this._leftButton, "mousedown", function () { if (!c.disabled) { c._leftArrow.addClass(c.toThemeProperty("jqx-icon-arrow-" + b.prev + "-selected")); c._mouseDown = true } }); this.addHandler(this._leftButton, "mouseup", function () { if (!c.disabled) { c._leftArrow.removeClass(c.toThemeProperty("jqx-icon-arrow-" + b.prev + "-selected")) } }); this.addHandler(this._rightButton, "mousedown", function () { if (!c.disabled) { c._rightArrow.addClass(c.toThemeProperty("jqx-icon-arrow-" + b.next + "-selected")); c._mouseDown = true } }); this.addHandler(this._rightButton, "mouseup", function () { if (!c.disabled) { c._rightArrow.removeClass(c.toThemeProperty("jqx-icon-arrow-" + b.next + "-selected")) } }); this._leftButton.hover(function () { if (!c.disabled) { c._leftArrow.addClass(c.toThemeProperty("jqx-icon-arrow-" + b.prev + "-hover")) } }, function () { if (!c.disabled) { c._leftArrow.removeClass(c.toThemeProperty("jqx-icon-arrow-" + b.prev + "-hover")) } }); this._rightButton.hover(function () { if (!c.disabled) { c._rightArrow.addClass(c.toThemeProperty("jqx-icon-arrow-" + b.next + "-hover")) } }, function () { if (!c.disabled) { c._rightArrow.removeClass(c.toThemeProperty("jqx-icon-arrow-" + b.next + "-hover")) } }) }, _layoutButtons: function () { if (this.orientation === "horizontal") { this._horizontalButtonsLayout() } else { this._verticalButtonsLayout() } }, _horizontalButtonsLayout: function () { var b = (2 + Math.ceil(this.sliderButtonSize / 2)); if (this.buttonsPosition == "left") { this._leftButton.css("margin-right", "0px"); this._rightButton.css("margin-right", b) } else { if (this.buttonsPosition == "right") { this._leftButton.css("margin-left", 2 + b); this._rightButton.css("margin-right", "0px") } else { this._leftButton.css("margin-right", b); this._rightButton.css("margin-left", 2 + b) } } }, _verticalButtonsLayout: function () { var c = (2 + Math.ceil(this.sliderButtonSize / 2)); if (this.buttonsPosition == "left") { this._leftButton.css("margin-bottom", "0px"); this._rightButton.css("margin-bottom", c) } else { if (this.buttonsPosition == "right") { this._leftButton.css("margin-top", 2 + c); this._rightButton.css("margin-bottom", "0px") } else { this._leftButton.css("margin-bottom", c); this._rightButton.css("margin-top", 2 + c) } } var b = this._leftButton.css("margin-left"); this._leftButton.css("margin-left", parseInt(b) - 1); this._rightButton.css("margin-left", parseInt(b) - 1) }, _orderButtons: function () { this._rightButton.detach(); this._leftButton.detach(); switch (this.buttonsPosition) { case "left": this.host.prepend(this._rightButton); this.host.prepend(this._leftButton); break; case "right": this.host.append(this._leftButton); this.host.append(this._rightButton); break; case "both": this.host.prepend(this._leftButton); this.host.append(this._rightButton); break } }, _performRangeBarLayout: function () { this._rangeBar[this._getSetting("oSize")](this._track[this._getSetting("oSize")]()); this._rangeBar[this._getSetting("size")](this._track[this._getSetting("size")]()); this._rangeBar.css("position", "absolute"); this._rangeBar.css("left", 0); this._rangeBar.css("top", 0) }, _centerElement: function (c) { var b = -1 + (a(c.parent())[this._getSetting("oSize")]() - c[this._getSetting("outerOSize")]()) / 2; c.css("margin-" + [this._getSetting("left")], 0); c.css("margin-" + [this._getSetting("top")], b); return c }, _raiseEvent: function (f, c) { var d = this._events[f]; var e = new a.Event(d); if (this._triggerEvents === false) { return true } e.args = c; if (f == 0) { e.args.type = this.changeType; this.changeType = null } if (f === 1) { e.args.cancel = false; this._slideEvent = e } this._lastValue[f] = c.value; e.owner = this; var b = this.host.trigger(e); return b }, _initialSettings: function () { if (this.int64 === false) { if (this.rangeSlider) { if (typeof this.value !== "number") { this.setValue(this.value) } else { this.setValue(this.values) } } else { if (this.value == undefined) { this.value = 0 } this.setValue(this.value) } } else { if (this.rangeSlider === false || Array.isArray(this._value64) === true) { this.setValue(this._value64) } else { this.setValue(this._values64) } } if (this.disabled) { this.disable() } }, _addEventHandlers: function () { var b = this; this.addHandler(this._slider.right, this._getEvent("mousedown"), this._startDrag, { self: this }); this.addHandler(this._slider.left, this._getEvent("mousedown"), this._startDrag, { self: this }); this.addHandler(a(document), this._getEvent("mouseup") + "." + this.element.id, function () { b._stopDrag() }); try { if (document.referrer != "" || window.frameElement) { if (window.top != null && window.top != window.self) { var d = function (g) { b._stopDrag() }; var f = null; if (window.parent && document.referrer) { f = document.referrer } if (f && f.indexOf(document.location.host) != -1) { if (window.top.document) { if (window.top.document.addEventListener) { window.top.document.addEventListener("mouseup", d, false) } else { if (window.top.document.attachEvent) { window.top.document.attachEvent("onmouseup", d) } } } } } } } catch (c) { } this.addHandler(a(document), this._getEvent("mousemove") + "." + this.element.id, this._performDrag, { self: this }); var e = this; this.addHandler(this._slider.left, "mouseenter", function () { if (!e.disabled) { b._slider.left.addClass(b.toThemeProperty("jqx-fill-state-hover")) } }); this.addHandler(this._slider.right, "mouseenter", function () { if (!e.disabled) { b._slider.right.addClass(b.toThemeProperty("jqx-fill-state-hover")) } }); this.addHandler(this._slider.left, "mouseleave", function () { if (!e.disabled) { b._slider.left.removeClass(b.toThemeProperty("jqx-fill-state-hover")) } }); this.addHandler(this._slider.right, "mouseleave", function () { if (!e.disabled) { b._slider.right.removeClass(b.toThemeProperty("jqx-fill-state-hover")) } }); this.addHandler(this._slider.left, "mousedown", function () { if (!e.disabled) { b._slider.left.addClass(b.toThemeProperty("jqx-fill-state-pressed")) } }); this.addHandler(this._slider.right, "mousedown", function () { if (!e.disabled) { b._slider.right.addClass(b.toThemeProperty("jqx-fill-state-pressed")) } }); this.addHandler(this._slider.left, "mouseup", function () { if (!e.disabled) { b._slider.left.removeClass(b.toThemeProperty("jqx-fill-state-pressed")) } }); this.addHandler(this._slider.right, "mouseup", function () { if (!e.disabled) { b._slider.right.removeClass(b.toThemeProperty("jqx-fill-state-pressed")) } }); this.addHandler(this._leftButton, this._getEvent("click"), this._leftButtonHandler, { self: this }); this.addHandler(this._rightButton, this._getEvent("click"), this._rightButtonHandler, { self: this }); this.addHandler(this._track, this._getEvent("mousedown"), this._trackMouseDownHandler, { self: this }); this.addHandler(this.host, "focus", function () { b._track.addClass(b.toThemeProperty("jqx-fill-state-focus")); b._leftButton.addClass(b.toThemeProperty("jqx-fill-state-focus")); b._rightButton.addClass(b.toThemeProperty("jqx-fill-state-focus")); b._slider.right.addClass(b.toThemeProperty("jqx-fill-state-focus")); b._slider.left.addClass(b.toThemeProperty("jqx-fill-state-focus")) }); this.addHandler(this.host, "blur", function () { b._leftButton.removeClass(b.toThemeProperty("jqx-fill-state-focus")); b._rightButton.removeClass(b.toThemeProperty("jqx-fill-state-focus")); b._track.removeClass(b.toThemeProperty("jqx-fill-state-focus")); b._slider.right.removeClass(b.toThemeProperty("jqx-fill-state-focus")); b._slider.left.removeClass(b.toThemeProperty("jqx-fill-state-focus")) }); this.element.onselectstart = function () { return false }; this._addMouseWheelListeners(); this._addKeyboardListeners() }, _addMouseWheelListeners: function () { var b = this; this.addHandler(this.host, "mousewheel", function (d) { if (b.disabled) { return true } b.changeType = "mouse"; if (document.activeElement && !a(document.activeElement).ischildof(b.host)) { return true } var c = d.wheelDelta; if (d.originalEvent && d.originalEvent.wheelDelta) { d.wheelDelta = d.originalEvent.wheelDelta } if (!("wheelDelta" in d)) { c = d.detail * -40 } if (c > 0) { b.incrementValue() } else { b.decrementValue() } d.preventDefault() }) }, _addKeyboardListeners: function () { var b = this; this.addHandler(this.host, "keydown", function (c) { b.changeType = "keyboard"; switch (c.keyCode) { case 40: case 37: if (b.layout == "normal" && !b.rtl) { b.decrementValue() } else { b.incrementValue() } return false; case 38: case 39: if (b.layout == "normal" && !b.rtl) { b.incrementValue() } else { b.decrementValue() } return false; case 36: if (b.rangeSlider) { b.setValue([b.values[0], b.max]) } else { b.setValue(b.min) } return false; case 35: if (b.rangeSlider) { b.setValue([b.min, b.values[1]]) } else { b.setValue(b.max) } return false } }) }, _trackMouseDownHandler: function (b) { var e = a.jqx.mobile.getTouches(b); var d = e[0]; var i = b.data.self, b = (i._isTouchDevice) ? d : b, f = i._track.coord()[i._getSetting("left")], h = b[i._getSetting("page")] - i._slider.left[i._getSetting("size")]() / 2, c = i._getClosest(h), j = parseInt(i._track[i._getSetting("size")]()); var g = i._getValueByPosition(h); i._mouseDown = true; i.changeType = "mouse"; i._setValue(g, c); if (i.input) { a.jqx.aria(i, "aria-valuenow", i.input.val()) } }, _getClosest: function (b) { if (!this.rangeSlider) { return this._slider.right } else { b = b - this._track.coord()[this._getSetting("left")] - this._slider.left[this._getSetting("size")]() / 2; if (Math.abs(parseInt(this._slider.left.css(this._getSetting("left")), 10) - b) < Math.abs(parseInt(this._slider.right.css(this._getSetting("left")), 10) - b)) { return this._slider.left } else { return this._slider.right } } }, _removeEventHandlers: function () { this.removeHandler(this._slider.right, this._getEvent("mousedown"), this._startDrag); this.removeHandler(this._slider.left, this._getEvent("mousedown"), this._startDrag); this.removeHandler(a(document), this._getEvent("mouseup") + "." + this.host.attr("id"), this._stopDrag); this.removeHandler(a(document), this._getEvent("mousemove") + "." + this.host.attr("id"), this._performDrag); this.removeHandler(this._leftButton, this._getEvent("click"), this._leftButtonHandler); this.removeHandler(this._rightButton, this._getEvent("click"), this._rightButtonHandler); this.removeHandler(this._track, this._getEvent("mousedown"), this._trackMouseDownHandler); this.element.onselectstart = null; this.removeHandler(this.host, this._getEvent("mousewheel")); this.removeHandler(this.host, this._getEvent("keydown")) }, _rightButtonClick: function () { this.changeType = "mouse"; if (this.orientation == "horizontal" && !this.rtl) { this.incrementValue() } else { this.decrementValue() } }, _leftButtonClick: function () { this.changeType = "mouse"; if (this.orientation == "horizontal" && !this.rtl) { this.decrementValue() } else { this.incrementValue() } }, _rightButtonHandler: function (c) { var b = c.data.self; if (b.layout == "normal") { b._rightButtonClick() } else { b._leftButtonClick() } return false }, _leftButtonHandler: function (c) { var b = c.data.self; if (b.layout == "normal") { b._leftButtonClick() } else { b._rightButtonClick() } return false }, _startDrag: function (d) { var e = a.jqx.mobile.getTouches(d); var f = e[0]; var c = d.data.self; c.changeType = "mouse"; c._capturedElement = a(d.target); c._startX = a(d.target).coord().left; c._startY = a(d.target).coord().top; var b = a.jqx.position(d); c._mouseStartX = b.left; c._mouseStartY = b.top; c._mouseDown = true; if (c.tooltip) { c._showTooltip(c._capturedElement, c.value) } if (c._isTouchDevice) { return false } }, _stopDrag: function () { var b = this; if (b._slideStarted) { b._raiseEvent(2, { value: b.getValue() }) } if (!b._slideStarted || b._capturedElement == null) { b._capturedElement = null; return } if (this.input) { a.jqx.aria(this, "aria-valuenow", this.input.val()) } b._slider.left.removeClass(b.toThemeProperty("jqx-fill-state-pressed")); b._slider.right.removeClass(b.toThemeProperty("jqx-fill-state-pressed")); b._slideStarted = false; b._capturedElement = null; if (b.sliderTooltip) { b.sliderTooltip.fadeOut("fast") } }, _performDrag: function (d) { var c = d.data.self; if (c._capturedElement !== null) { var f = a.jqx.mobile.getTouches(d); var g = f[0]; if (d.which === 0 && a.jqx.browser.msie && a.jqx.browser.version < 9) { c._stopDrag(); return false } var b = a.jqx.position(d); var e = c.orientation == "horizontal" ? b.left : b.top; c._isDragged(e); if (c._slideStarted || c._isTouchDevice) { return c._dragHandler(e) } } }, _isDragged: function (b) { if (Math.abs(b - this[this._getSetting("mouse")]) > 2 && !this._slideStarted) { this._slideStarted = true; if (this._valueChanged(3)) { this._raiseEvent(3, { value: this.getValue() }) } } else { if (this._capturedElement === null) { this._slideStarted = false } } }, _dragHandler: function (b) { b = (b - this[this._getSetting("mouse")]) + this[this._getSetting("start")]; var c = this._getValueByPosition(b); if (this.rangeSlider) { var d = this._slider.right, f = this._slider.left; var e = this._getSetting("left"); if (this._capturedElement[0] === f[0]) { if (parseFloat(b) > d.coord()[e]) { b = d.coord()[e] } } else { if (parseFloat(b) < f.coord()[e]) { b = f.coord()[e] } } } this._setValue(c, this._capturedElement, b); return false }, _getValueByPosition: function (b) { if (this.mode === "default") { return this._getFloatingValueByPosition(b) } else { return this._getFixedValueByPosition(b) } }, _getFloatingValueByPosition: function (b) { var c = b - this._track.coord()[this._getSetting("left")] + this._slider.left.width() / 2, g = c / this._track[this._getSetting("size")](), h; if (c < 0) { c = 0 } if (this.int64 === false) { h = (this.max - this.min) * g + this.min } else { var f = new a.jqx.math().fromNumber(this._track[this._getSetting("size")](), 10); var d = this._max64.subtract(this._min64); var e = Math.round(this._divide64(d, f) * c); h = new a.jqx.math().fromNumber(e, 10).add(this._min64) } if (this.layout == "normal") { if (this.orientation === "horizontal" && !this.rtl) { return h } else { return (this.max + this.min) - h } } else { if (this.orientation === "horizontal" && !this.rtl) { if (this.int64 === false) { return (this.max + this.min) - h } else { return (this._max64.add(this._min64)).subtract(h) } } else { return h } } }, _getThumbSize: function () { if (this.__thumbSize) { return this.__thumbSize } var b = this._slider.left[this._getSetting("size")](); this.__thumbSize = b; return b }, _getTrackSize: function () { if (this.__trackSize) { return this.__trackSize } var b = this._track[this._getSetting("size")](); this.__trackSize = b; return b }, _getFixedValueByPosition: function (f) { var j = this._getTrackSize(), d = this._getThumbSize(), l = { number: -1, distance: Number.MAX_VALUE }, c, h, g, k; if (this.int64 === false) { c = this.step; g = (this.max - this.min) / c; h = (j) / g; k = this._track.coord()[this._getSetting("left")] - d / 2; var i = this.max + this.step; if (this.mode == "fixedRange") { i = this.max } for (var e = this.min; e <= i; e += this.step) { if (Math.abs(l.distance - f) > Math.abs(k - f)) { l.distance = k; l.number = e } k += h } } else { c = this._step64; g = (this._max64.subtract(this._min64)).div(this._step64); h = new a.jqx.math().fromNumber(j, 10).div(g).toNumber(); k = this._track.coord()[this._getSetting("left")] - d / 2; l = { number: new a.jqx.math().fromString(this._min64.toString(), 10), distance: k }; for (var b = new a.jqx.math().fromString(this._min64.toString(), 10) ; this.mode != "fixedRange" ? b.lessThanOrEqual(this._max64.add(this._step64)) : b.lessThanOrEqual(this._max64) ; b = b.add(this._step64)) { if (Math.abs(l.distance - f) > Math.abs(k - f)) { l.distance = k; l.number = new a.jqx.math().fromString(b.toString(), 10) } k += h } } if (this.layout == "normal") { if (this.orientation === "horizontal" && !this.rtl) { return l.number } else { return (this.max + this.min) - l.number } } else { if (this.orientation === "horizontal" && !this.rtl) { return (this.max + this.min) - l.number } else { return l.number } } }, _setValue: function (e, d, b) { if (!this._slideEvent || !this._slideEvent.args.cancel) { e = this._handleValue(e, d); this._setSliderPosition(e, d, b); this._fixZIndexes(); if (this._valueChanged(1)) { var c = this._raiseEvent(1, { value: this.getValue() }) } if (this._valueChanged(0)) { this._raiseEvent(0, { value: this.getValue() }) } if (this.input) { if (!this.rangeSlider) { this.input.val(this.value.toString()) } else { if (this.values) { if (this.value.rangeEnd != undefined && this.value.rangeStart != undefined) { this.input.val(this.value.rangeStart.toString() + "-" + this.value.rangeEnd.toString()) } } } } } }, _valueChanged: function (c) { var b = this.getValue(); return (!this.rangeSlider && this._lastValue[c] !== b) || (this.rangeSlider && (typeof this._lastValue[c] !== "object" || parseFloat(this._lastValue[c].rangeEnd) !== parseFloat(b.rangeEnd) || parseFloat(this._lastValue[c].rangeStart) !== parseFloat(b.rangeStart))) }, _handleValue: function (c, b) { c = this._validateValue(c, b); if (b[0] === this._slider.left[0]) { this.values[0] = this.int64 ? c.toString() : c; if (this.int64 === true) { this._value64[0] = c } } if (b[0] === this._slider.right[0]) { this.values[1] = this.int64 ? c.toString() : c; if (this.int64 === true) { this._values64[1] = c } } if (this.rangeSlider) { this.value = { rangeStart: this.values[0], rangeEnd: this.values[1] }; if (this.int64 === true) { this._value64 = { rangeStart: this._values64[0], rangeEnd: this._values64[1] } } } else { if (this.int64 === false) { this.value = c } else { this.value = c.toString(); this._value64 = c } } return c }, _fixZIndexes: function () { if (this.values[1] - this.values[0] < 0.5 && this.max - this.values[0] < 0.5) { this._slider.left.css("z-index", 20); this._slider.right.css("z-index", 15) } else { this._slider.left.css("z-index", 15); this._slider.right.css("z-index", 20) } }, _refreshRangeBar: function () { var e = this._getSetting("left"); var c = this._getSetting("size"); var d = this.rtl && this.orientation == "horizontal"; if (this.layout == "normal") { var b = this._slider.left.position()[e]; if (this.orientation === "vertical" || d) { b = this._slider.right.position()[e] } } else { var b = this._slider.right.position()[e]; if (this.orientation === "vertical" || d) { var b = this._slider.left.position()[e] } } this._rangeBar.css(e, b + this._slider.left[c]() / 2); this._rangeBar[c](Math.abs(this._slider.right.position()[e] - this._slider.left.position()[e])) }, _validateValue: function (c, b) { if (this.int64 === false) { if (c > this.max) { c = this.max } if (c < this.min) { c = this.min } if (this.rangeSlider) { if (b[0] === this._slider.left[0]) { if (c >= this.values[1]) { c = this.values[1] } } else { if (c <= this.values[0]) { c = this.values[0] } } } } else { if (c.greaterThan(this._max64)) { c = this._max64 } if (c.lessThan(this._min64)) { c = this._min64 } } return c }, _setSliderPosition: function (h, c, b) { var f = this._track[this._getSetting("size")](), e, i; if (b) { b -= this._track.coord()[this._getSetting("left")] } if (this.int64) { if (typeof h === "number") { h = new a.jqx.math().fromNumber(h, 10) } else { if (typeof h === "string") { h = new a.jqx.math().fromString(h, 10) } } if (h.greaterThan(this._max64)) { h = new a.jqx.math().fromString(this._max64.toString(), 10) } if (h.lessThan(this._min64)) { h = new a.jqx.math().fromString(this._min64.toString(), 10) } var g = this._divide64(h.subtract(this._min64), this._max64.subtract(this._min64)); var d = 1 - g; if (this.layout == "normal") { var e = g; if (this.orientation != "horizontal" || (this.orientation == "horizontal" && this.rtl)) { e = d } } else { var e = d; if (this.orientation != "horizontal" || (this.orientation == "horizontal" && this.rtl)) { e = g } } i = f * e - this._slider.left[this._getSetting("size")]() / 2; c.css(this._getSetting("left"), i) } else { if (this.layout == "normal") { var e = (h - this.min) / (this.max - this.min); if (this.orientation != "horizontal" || (this.orientation == "horizontal" && this.rtl)) { e = 1 - ((h - this.min) / (this.max - this.min)) } } else { var e = 1 - ((h - this.min) / (this.max - this.min)); if (this.orientation != "horizontal" || (this.orientation == "horizontal" && this.rtl)) { e = (h - this.min) / (this.max - this.min) } } i = f * e - this._slider.left[this._getSetting("size")]() / 2; c.css(this._getSetting("left"), i) } if (this.tooltip) { this._showTooltip(c, this.value) } this._refreshRangeBar() }, _divide64: function (e, b) { var h, j, c, k, m; h = e.toString(); c = b.toString(); if (c.length > 15) { var l = c.length - 15; c = c.slice(0, 15) + "." + c.slice(15); k = parseFloat(c); if (h.length > l) { var g = h.length - l; h = h.slice(0, g) + "." + h.slice(g) } else { if (h.length === l) { h = "0." + h } else { var f = "0."; for (var d = 0; d < l - h.length; d++) { f += "0" } h = f + "" + h } } j = parseFloat(h) } else { j = e.toNumber(); k = b.toNumber() } m = j / k; return m }, _showTooltip: function (s, n) { var g = this; if (g._slideStarted || g._capturedElement != null || g._mouseDown) { if (g.tooltipFormatFunction) { n = g.tooltipFormatFunction(n) } else { if (g.mode === "default") { n = new Number(n).toFixed(2) } } if (!g.toolTipCreated) { var c = "tooltip" + g.element.id; var d = a('<div id="' + c + '"><div id ="' + c + 'Main"><div id="' + c + 'Text"></div></div><div id="' + c + 'Arrow"></div></div>'); d.css("visibility", "hidden"); d.css("display", "none"); d.css("z-index", 99999); d.css("box-shadow", "none"); g.sliderTooltip = d; g.sliderTooltip.appendTo(a(document.body)); a("#" + c + "Text").html(n); var l = "#" + c; var h = a(l + "Main"); var p = a(l + "Text"); var q = a(l + "Arrow"); h.addClass(g.toThemeProperty("jqx-widget")); p.addClass(g.toThemeProperty("jqx-widget")); q.addClass(g.toThemeProperty("jqx-widget")); h.addClass(g.toThemeProperty("jqx-fill-state-normal")); p.addClass(g.toThemeProperty("jqx-fill-state-normal")); q.addClass(g.toThemeProperty("jqx-fill-state-normal")); a(l).addClass(g.toThemeProperty("jqx-tooltip")); a(l).addClass(g.toThemeProperty("jqx-popup")); h.addClass(g.toThemeProperty("jqx-tooltip-main")); p.addClass(g.toThemeProperty("jqx-tooltip-text")); q.addClass(g.toThemeProperty("jqx-tooltip-arrow")); g.sliderTooltipContent = p; g.sliderTooltipArrow = q; g.sliderTooltipMain = h; g.arrow_size = 5; g.toolTipCreated = true; if (g.rangeSlider) { g.sliderTooltipArrow.css("visibility", "hidden") } } var j = s.coord(); g.sliderTooltip[0].style.display = "block"; g.sliderTooltip[0].style.visibility = "visible"; var k = g.sliderButtonSize + g.tickSize; if (!g.rangeSlider) { g.sliderTooltipContent[0].innerHTML = n } else { var o = g.value ? g.value.rangeStart : ""; var b = g.value ? g.value.rangeEnd : ""; if (o !== "") { g.sliderTooltipContent[0].innerHTML = o + " - " + b } else { g.sliderTooltip[0].style.display = "none"; g.sliderTooltip[0].style.visibility = "hidden" } } var r = g.sliderTooltip.width(); if (g.orientation == "horizontal") { var f = j.left + g.sliderButtonSize / 2 - r / 2; if (g.rangeSlider) { var e = (g._slider.right.coord().left - g._slider.left.coord().left - g._thumbSize) / 2; f = g._slider.left.coord().left - r / 2 + e + g._thumbSize } switch (g.tooltipPosition) { case "far": var i = j.top + k + g.arrow_size; g.sliderTooltip.offset({ top: i, left: f }); g.sliderTooltipArrow.addClass(g.toThemeProperty("jqx-tooltip-arrow-t-b")); g.sliderTooltipArrow.css({ "border-width": "0 " + g.arrow_size + "px " + g.arrow_size + "px" }); g.sliderTooltipArrow.offset({ top: i - g.arrow_size, left: f - g.arrow_size / 2 - 1 + r / 2 }); break; case "near": var i = j.top - g.arrow_size - g.sliderTooltip.height() - 1; g.sliderTooltip.offset({ top: i, left: f }); g.sliderTooltipArrow.addClass(g.toThemeProperty("jqx-tooltip-arrow-t-b")); g.sliderTooltipArrow.css({ "border-width": g.arrow_size + "px " + g.arrow_size + "px  0px" }); g.sliderTooltipArrow.offset({ top: i + g.sliderTooltip.height(), left: f - g.arrow_size / 2 - 1 + r / 2 }); break } } else { var m = g.sliderTooltip.height(); var f = j.left - r - g.arrow_size - g.tickSize; var i = j.top + g._thumbSize / 2 - m / 2 - 1; if (g.rangeSlider) { var e = (g._slider.right.coord().top - g._slider.left.coord().top - g._thumbSize) / 2; i = g._slider.left.coord().top - m / 2 + e + g._thumbSize } switch (g.tooltipPosition) { case "far": var f = j.left + g._thumbSize + g.arrow_size + g.tickSize; g.sliderTooltip.offset({ top: i, left: f }); g.sliderTooltipArrow.addClass(g.toThemeProperty("jqx-tooltip-arrow-l-r")); g.sliderTooltipArrow.css({ "border-width": g.arrow_size + "px " + g.arrow_size + "px " + g.arrow_size + "px 0px" }); g.sliderTooltipArrow.offset({ top: i + g.sliderTooltip.height() / 2 - g.arrow_size / 2 - 2, left: f - g.arrow_size }); break; case "near": g.sliderTooltip.offset({ top: i, left: f }); g.sliderTooltipArrow.addClass(g.toThemeProperty("jqx-tooltip-arrow-l-r")); g.sliderTooltipArrow.css({ "border-width": g.arrow_size + "px 0px " + g.arrow_size + "px " + g.arrow_size + "px" }); g.sliderTooltipArrow.offset({ top: i + g.sliderTooltip.height() / 2 - g.arrow_size / 2 - 2, left: f + r + 2 }); break } } } }, _validateDropPosition: function (e, b) { var c = this._track[this._getSetting("size")](), d = b[this._getSetting("size")](); if (e < -d / 2) { e = -d / 2 } if (e > c - d / 2) { e = c - d / 2 } return Math.floor(e) }, propertyChangedHandler: function (b, c, f, e) { b.__trackSize = null; b.__thumbSize = null; switch (c) { case "theme": a.jqx.utilities.setTheme(f, e, b.host); b._leftButton.jqxRepeatButton({ theme: e }); b._rightButton.jqxRepeatButton({ theme: e }); break; case "disabled": if (e) { b.disabled = true; b.disable() } else { b.disabled = false; b.enable() } break; case "width": case "height": b.__trackSize = null; b.__thumbSize = null; b._performLayout(); b._initialSettings(); break; case "min": case "max": b._performLayout(); b.__trackSize = null; b.__thumbSize = null; if (b.int64 === true) { b["_" + c + "64"] = new a.jqx.math().fromString(e.toString(), 10) } b._initialSettings(); break; case "showTicks": case "ticksPosition": case "tickSize": b._performLayout(); b._initialSettings(); break; case "ticksFrequency": case "minorTicksFrequency": if (b.int64 === true) { b["_" + c + "64"] = new a.jqx.math().fromString(e.toString(), 10) } b._performLayout(); b._initialSettings(); break; case "showRange": case "showButtons": case "orientation": case "rtl": b._render(); b._performLayout(); b._initialSettings(); break; case "buttonsPosition": b._refresh(); break; case "rangeSlider": if (!e) { b.value = b.value.rangeEnd } else { b.value = { rangeEnd: b.value, rangeStart: b.value } } b._render(); b._performLayout(); b._initialSettings(); break; case "value": var g = e; if (b.int64 === true) { g = new a.jqx.math().fromString(e.toString(), 10); b._value64 = g } else { if (!b.rangeSlider) { b.value = parseFloat(e) } } b.setValue(g); break; case "values": var d = e; if (b.int64 === true) { d = [new a.jqx.math().fromString(e[0].toString(), 10), new a.jqx.math().fromString(e[1].toString(), 10)]; b._values64 = d } b.setValue(d); break; case "tooltip": break; case "step": b._step64 = new a.jqx.math().fromString(e.toString(), 10); break; default: b._refresh() } }, incrementValue: function (b) { if (this.int64 === false) { if (b == undefined || isNaN(parseFloat(b))) { b = this.step } if (this.rangeSlider) { if (this.values[1] < this.max) { this._setValue(this.values[1] + b, this._slider.right) } } else { if (this.values[1] >= this.min && this.values[1] < this.max) { this._setValue(this.values[1] + b, this._slider.right) } } } else { if (b == undefined || isNaN(parseFloat(b))) { b = this._step64 } else { b = new a.jqx.math().fromString(b.toString(), 10) } var c = this._values64[1].add(b); if (c.lessThan(this._values64[1])) { c = this._max64 } if (this.rangeSlider) { if (this._values64[1].lessThan(this._max64)) { this._setValue(c, this._slider.right) } } else { if (this._values64[1].greaterThanOrEqual(this._min64) && this._values64[1].lessThan(this._max64)) { this._setValue(c, this._slider.right) } } } if (this.input) { a.jqx.aria(this, "aria-valuenow", this.input.val()) } }, decrementValue: function (b) { if (this.int64 === false) { if (b == undefined || isNaN(parseFloat(b))) { b = this.step } if (this.rangeSlider) { if (this.values[0] > this.min) { this._setValue(this.values[0] - b, this._slider.left) } } else { if (this.values[1] <= this.max && this.values[1] > this.min) { this._setValue(this.values[1] - b, this._slider.right) } } } else { if (b == undefined || isNaN(parseFloat(b))) { b = this._step64 } else { b = new a.jqx.math().fromString(b.toString(), 10) } var c; if (this.rangeSlider) { c = this._values64[0].subtract(b); if (c.greaterThan(this._values64[0])) { c = this._min64 } if (this._values64[0].greaterThan(this._min64)) { this._setValue(c, this._slider.left) } } else { c = this._values64[1].subtract(b); if (c.greaterThan(this._values64[1])) { c = this._min64 } if (this._values64[1].lessThanOrEqual(this._max64) && this._values64[1].greaterThan(this._min64)) { this._setValue(c, this._slider.right) } } } if (this.input) { a.jqx.aria(this, "aria-valuenow", this.input.val()) } }, val: function (b) { if (arguments.length == 0 || (!a.isArray(b) && typeof (b) == "object")) { return this.getValue() } if (this.int64 === false) { this.setValue(b) } else { value64 = new a.jqx.math().fromString(b.toString(), 10); this.setValue(value64) } }, setValue: function (e) { if (this.rangeSlider) { var c, b; if (arguments.length < 2) { if (e instanceof Array) { c = e[0]; b = e[1] } else { if (typeof e === "object" && typeof e.rangeStart !== "undefined" && typeof e.rangeEnd !== "undefined") { c = e.rangeStart; b = e.rangeEnd } } } else { c = arguments[0]; b = arguments[1] } this._triggerEvents = false; this._setValue(b, this._slider.right); this._triggerEvents = true; this._setValue(c, this._slider.left) } else { this._triggerEvents = false; var d = this.int64 ? this._min64 : this.min; this._setValue(d, this._slider.left); this._triggerEvents = true; this._setValue(e, this._slider.right) } if (this.input) { a.jqx.aria(this, "aria-valuenow", this.input.val()) } }, getValue: function () { var b = this.value; if (this.int64 === true) { b = this._value64.toString() } return b }, _enable: function (b) { if (b) { this._addEventHandlers(); this.disabled = false; this.host.removeClass(this.toThemeProperty("jqx-fill-state-disabled")) } else { this._removeEventHandlers(); this.disabled = true; this.host.addClass(this.toThemeProperty("jqx-fill-state-disabled")) } this._leftButton.jqxRepeatButton({ disabled: this.disabled }); this._rightButton.jqxRepeatButton({ disabled: this.disabled }) }, disable: function () { this._enable(false); a.jqx.aria(this, "aria-disabled", true) }, enable: function () { this._enable(true); a.jqx.aria(this, "aria-disabled", false) } }) })(jqxBaseFramework);

/*
jqxnvaigationbar
*/

(function (a) { a.jqx.jqxWidget("jqxNavigationBar", "", {}); a.extend(a.jqx._jqxNavigationBar.prototype, { defineInstance: function () { var b = { width: "auto", height: "auto", expandAnimationDuration: 250, collapseAnimationDuration: 250, animationType: "slide", toggleMode: "click", showArrow: true, arrowPosition: "right", disabled: false, initContent: null, rtl: false, easing: "easeInOutSine", expandMode: "singleFitHeight", expandedIndexes: [], _expandModes: ["singleFitHeight", "single", "multiple", "toggle", "none"], aria: { "aria-disabled": { name: "disabled", type: "boolean" } }, events: ["expandingItem", "expandedItem", "collapsingItem", "collapsedItem"] }; a.extend(true, this, b); return b }, createInstance: function (b) { this._isTouchDevice = a.jqx.mobile.isTouchDevice(); a.jqx.aria(this); this.render() }, val: function (b) { if (arguments.length == 0 || typeof (b) == "object") { return this.expandedIndexes } if (typeof b == "string") { this.expandedIndexes.push(parseInt(b)); this._applyExpandedIndexes() } else { if (a.isArray(b)) { this.expandedIndexes = b } else { this.expandedIndexes = new Array(); this.expandedIndexes.push(b) } this._applyExpandedIndexes() } return this.expandedIndexes }, expandAt: function (d) { var g = this; if (this.expandMode == "single" || this.expandMode == "singleFitHeight" || this.expandMode == "toggle") { a.each(this.items, function (j, k) { if (j != d) { g.collapseAt(j) } }) } var h = this.items[d]; if (h.disabled == false && h.expanded == false && h._expandChecker == 1) { var g = this; h._expandChecker = 0; this._raiseEvent("0", { item: d }); h._header.removeClass(this.toThemeProperty("jqx-fill-state-normal")); h._header.addClass(this.toThemeProperty("jqx-fill-state-pressed")); h._header.addClass(this.toThemeProperty("jqx-expander-header-expanded")); h._arrow.removeClass(this.toThemeProperty("jqx-icon-arrow-down")); h._arrow.removeClass(this.toThemeProperty("jqx-icon-arrow-down-hover")); h._arrow.removeClass(this.toThemeProperty("jqx-icon-arrow-up-hover")); h._arrow.removeClass(this.toThemeProperty("jqx-icon-arrow-down-selected")); h._arrow.removeClass(this.toThemeProperty("jqx-expander-arrow-top")); h._arrow.addClass(this.toThemeProperty("jqx-icon-arrow-up")); h._arrow.addClass(this.toThemeProperty("jqx-icon-arrow-up-selected")); h._arrow.addClass(this.toThemeProperty("jqx-expander-arrow-bottom")); h._arrow.addClass(this.toThemeProperty("jqx-expander-arrow-expanded")); if (this.heightFlag == false) { this.host.css({ "overflow-x": "hidden", "overflow-y": "hidden" }) } this.eCFlag = 1; switch (this.animationType) { case "slide": var f = h._content; var b = f.height(); var c = {}; c.height = c.paddingTop = c.paddingBottom = c.borderTopWidth = c.borderBottomWidth = "show"; var i = 0; var e = f.outerHeight(); if (a.jqx.browser.msie && a.jqx.browser.version < 9) { var c = {}; c.height = c.paddingTop = c.paddingBottom = "show" } f.animate(c, { duration: this.expandAnimationDuration, easing: this.easing, step: function (j, k) { k.now = Math.round(j); if (k.prop !== "height") { i += k.now } else { if (g._collapseContent) { k.now = Math.round(e - g._collapseContent.outerHeight() - i); i = 0 } else { k.now = Math.round(j) } } }, complete: function () { h.expanded = true; a.jqx.aria(h._header, "aria-expanded", true); a.jqx.aria(h._content, "aria-hidden", false); g._updateExpandedIndexes(); g._raiseEvent("1", { item: d }); g._checkHeight(); if (g.heightFlag == true) { g.host.css({ "overflow-x": "hidden", "overflow-y": "auto" }) } if (g.initContent && h._initialized == false) { g.initContent(d); h._initialized = true } g.eCFlag = 0 } }); break; case "fade": setTimeout(function () { h._content.fadeIn(this.expandAnimationDuration, function () { h.expanded = true; a.jqx.aria(h._header, "aria-expanded", true); a.jqx.aria(h._content, "aria-hidden", false); g._updateExpandedIndexes(); g._raiseEvent("1", { item: d }); g._checkHeight(); if (g.heightFlag == true) { g.host.css({ "overflow-x": "hidden", "overflow-y": "auto" }) } if (g.initContent && h._initialized == false) { g.initContent(d); h._initialized = true } g.eCFlag = 0 }) }, this.collapseAnimationDuration); break; case "none": h._content.css("display", "inherit"); h.expanded = true; a.jqx.aria(h._header, "aria-expanded", true); a.jqx.aria(h._content, "aria-hidden", false); this._updateExpandedIndexes(); this._raiseEvent("1", { item: d }); this._checkHeight(); if (this.heightFlag == true) { this.host.css({ "overflow-x": "hidden", "overflow-y": "auto" }) } if (this.initContent && h._initialized == false) { this.initContent(d); h._initialized = true } this.eCFlag = 0; break } } }, collapseAt: function (b) { var f = this.items[b]; if (f.disabled == false && f.expanded == true && f._expandChecker == 0) { var d = this; f._expandChecker = 1; this._raiseEvent("2", { item: b }); f._header.removeClass(this.toThemeProperty("jqx-fill-state-pressed")); f._header.removeClass(this.toThemeProperty("jqx-expander-header-expanded")); f._header.addClass(this.toThemeProperty("jqx-fill-state-normal")); f._arrow.removeClass(this.toThemeProperty("jqx-icon-arrow-up")); f._arrow.removeClass(this.toThemeProperty("jqx-icon-arrow-up-selected")); f._arrow.removeClass(this.toThemeProperty("jqx-icon-arrow-down-selected")); f._arrow.removeClass(this.toThemeProperty("jqx-expander-arrow-bottom")); f._arrow.removeClass(this.toThemeProperty("jqx-expander-arrow-expanded")); f._arrow.addClass(this.toThemeProperty("jqx-icon-arrow-down")); f._arrow.addClass(this.toThemeProperty("jqx-expander-arrow-top")); if (this.heightFlag == false) { this.host.css({ "overflow-x": "hidden", "overflow-y": "hidden" }) } this.eCFlag = 1; this._collapseContent = f._content; switch (this.animationType) { case "slide": var e = {}; e.height = e.paddingTop = e.paddingBottom = e.borderTopWidth = e.borderBottomWidth = "hide"; if (a.jqx.browser.msie && a.jqx.browser.version < 9) { var e = {}; e.height = e.paddingTop = e.paddingBottom = "hide" } var c = f._content; c.animate(e, { duration: this.collapseAnimationDuration, step: function (g, h) { h.now = Math.round(g) }, easing: this.easing, complete: function () { f.expanded = false; c.hide(); a.jqx.aria(f._header, "aria-expanded", false); a.jqx.aria(f._content, "aria-hidden", true); d._updateExpandedIndexes(); d._raiseEvent("3", { item: b }); d._checkHeight(); if (d.heightFlag == true) { d.host.css({ "overflow-x": "hidden", "overflow-y": "auto" }) } d.eCFlag = 0; d._collapseContent = null } }); break; case "fade": f._content.fadeOut(this.collapseAnimationDuration, function () { f.expanded = false; a.jqx.aria(f._header, "aria-expanded", false); a.jqx.aria(f._content, "aria-hidden", true); d._updateExpandedIndexes(); d._raiseEvent("3", { item: b }); d._checkHeight(); if (d.heightFlag == true) { d.host.css({ "overflow-x": "hidden", "overflow-y": "auto" }) } d.eCFlag = 0 }); break; case "none": f._content.css("display", "none"); f.expanded = false; a.jqx.aria(f._header, "aria-expanded", false); a.jqx.aria(f._content, "aria-hidden", true); this._updateExpandedIndexes(); this._raiseEvent("3", { item: b }); this._checkHeight(); if (this.heightFlag == true) { this.host.css({ "overflow-x": "hidden", "overflow-y": "auto" }) } this.eCFlag = 0; break } } }, setHeaderContentAt: function (b, c) { this.items[b]._header_text.html(c) }, getHeaderContentAt: function (b) { return this.items[b]._header_text.html() }, setContentAt: function (b, c) { this.items[b]._content.html(c); this._checkContent(b) }, getContentAt: function (b) { return this.items[b]._content.html() }, showArrowAt: function (b) { this.items[b]._arrow.css("display", "block") }, hideArrowAt: function (b) { this.items[b]._arrow.css("display", "none") }, enable: function () { this.disabled = false; a.each(this.items, function (b, c) { this.disabled = false }); this._enabledDisabledCheck(); this.refresh(); a.jqx.aria(this, "aria-disabled", false) }, disable: function () { this.disabled = true; a.each(this.items, function (b, c) { this.disabled = true }); this._enabledDisabledCheck(); this.refresh(); a.jqx.aria(this, "aria-disabled", true) }, enableAt: function (b) { this.items[b].disabled = false; this.refresh() }, disableAt: function (b) { this.items[b].disabled = true; this.refresh() }, invalidate: function () { this.refresh() }, refresh: function (b) { if (b == true) { return } this._removeHandlers(); if (this.showArrow == true) { a.each(this.items, function (c, e) { var d = this; d._arrow.css("display", "block") }) } else { a.each(this.items, function (c, e) { var d = this; d._arrow.css("display", "none") }) } this._updateExpandedIndexes(); this._setTheme(); this._setSize(); this._toggle(); this._keyBoard() }, render: function () { this.widgetID = this.element.id; var m = this; if (this._expandModes.indexOf(this.expandMode) == -1) { this.expandMode = "singleFitHeight" } a.jqx.utilities.resize(this.host, function () { m._setSize() }); this.host.attr("role", "tablist"); if (this.items) { this._removeHandlers(); a.each(this.items, function () { this._header.removeClass(); this._header.attr("tabindex", null); this._content.attr("tabindex", null); this._header[0].className = ""; this._header_text.removeClass(); this._header_text[0].className = ""; this._header.css("margin-top", 0); this._header[0].innerHTML = this._header_text[0].innerHTML }) } this.items = new Array(); var h = this.host.children().length; var n = "Invalid jqxNavigationBar structure. Please add an even number of child div elements that will represent each item's header and content."; try { if (h % 2 != 0) { throw n } } catch (d) { alert(d) } var e = "Invalid jqxNavigationBar structure. Please make sure all the children elements of the navigationbar are divs."; try { var c = this.host.children(); for (var l = 0; l < h; l++) { if (c[l].tagName.toLowerCase() != "div") { throw e } } } catch (d) { alert(d) } var o; for (var p = 0; p < h; p += 2) { o = this.host.children("div:eq(" + p + ")"); o.wrap("<div></div>") } var l = 0; var f; for (var g = 0; g < h / 2; g++) { f = l + 1; this.items[g] = new Object(); this.items[g]._header = this.host.children("div:eq(" + l + ")"); this.items[g]._header.attr("role", "tab"); this.items[g]._content = this.host.children("div:eq(" + f + ")"); this.items[g]._content.attr("role", "tabpanel"); l += 2 } var b = this.expandedIndexes.length; a.each(this.items, function (i, j) { this.expandedFlag = false; this.focusedH = false; this.focusedC = false }); if (this.items && this.items.length == 0) { return } if (this.expandMode == "single" || this.expandMode == "singleFitHeight" || this.expandMode == "toggle" || this.expandMode == "none") { a.each(this.items, function (i, k) { var j = this; j.expanded = false }); if (b != 0) { this.items[this.expandedIndexes[0]].expanded = true } else { if (b == 0 && (this.expandMode == "single" || this.expandMode == "singleFitHeight")) { this.items[0].expanded = true } } } else { if (this.expandMode == "multiple") { if (b != 0) { a.each(this.items, function (j, r) { var q = this; for (var k = 0; k < b; k++) { if (m.expandedIndexes[k] == j) { q.expanded = true; break } else { q.expanded = false } } }) } else { a.each(this.items, function (i, k) { var j = this; j.expanded = false }) } } else { if (this.expandMode == "none") { a.each(this.items, function (i, k) { var j = this; j.expanded = false }) } } } this._enabledDisabledCheck(); a.each(this.items, function (i, k) { var j = this; j._header_text = j._header.children("div:eq(0)"); if (!m.rtl) { j._header_text.addClass(m.toThemeProperty("jqx-expander-header-content")) } else { j._header_text.addClass(m.toThemeProperty("jqx-expander-header-content-rtl")) } j._header.append("<div></div>"); j._arrow = j._header.children("div:eq(1)"); if (m.showArrow == true) { j._arrow.css("display", "block") } else { j._arrow.css("display", "none") } }); a.each(this.items, function (i, k) { var j = this; if (j.expanded == true) { j._arrow.addClass(m.toThemeProperty("jqx-icon-arrow-up")); j._arrow.addClass(m.toThemeProperty("jqx-icon-arrow-up-selected")); j._arrow.addClass(m.toThemeProperty("jqx-expander-arrow-bottom")); j._arrow.addClass(m.toThemeProperty("jqx-expander-arrow-expanded")); if (m.initContent) { setTimeout(function () { m.initContent(i) }, 10) } j._initialized = true; j._expandChecker = 0; a.jqx.aria(j._header, "aria-expanded", true); a.jqx.aria(j._content, "aria-hidden", false) } else { if (j.expanded == false) { j._arrow.addClass(m.toThemeProperty("jqx-icon-arrow-down")); j._arrow.addClass(m.toThemeProperty("jqx-expander-arrow-top")); j._initialized = false; j._expandChecker = 1; j._content.css("display", "none"); a.jqx.aria(j._header, "aria-expanded", false); a.jqx.aria(j._content, "aria-hidden", true) } } }); this.tI = 0; a.each(this.items, function (i, k) { var j = this; if (j._header.attr("tabindex") == undefined) { m.tI++; j._header.attr("tabindex", m.tI) } if (j._content.attr("tabindex") == undefined) { m.tI++; j._content.attr("tabindex", m.tI) } }); this._setTheme(); a.each(this.items, function (i, k) { var j = this; m._checkContent(i) }); this._setSize(); this._toggle(); this._keyBoard() }, insert: function (c, f, d) { var b = "<div>" + f + "</div><div>" + d + "</div>"; if (c != -1) { a(b).insertBefore(this.items[c]._header) } else { var e = this.items.length - 1; a(b).insertAfter(this.items[e]._content) } this.render() }, add: function (c, b) { this.insert(-1, c, b) }, update: function (b, d, c) { this.setHeaderContentAt(b, d); this.setContentAt(b, c) }, remove: function (b) { if (isNaN(b)) { b = this.items.length - 1 } if (!this.items[b]) { return } this.items[b]._header.remove(); this.items[b]._content.remove(); this.items.splice(b, 1); var c = this.expandedIndexes.indexOf(b); if (c > -1) { this.expandedIndexes.splice(c, 1) } this.render() }, destroy: function () { this._removeHandlers(); this.host.remove() }, focus: function () { try { a.each(this.items, function (c, e) { var d = this; if (d.disabled == false) { d._header.focus(); return false } }) } catch (b) { } }, _applyExpandedIndexes: function () { var d = this; var c = this.expandedIndexes.length; for (var b = 0; b < c; b++) { var e = d.expandedIndexes[b]; a.each(this.items, function (f, h) { var g = this; if (f == e) { g.expandedFlag = true; if (g.expanded == false) { d.expandAt(f) } if (d.expandMode == "single" || d.expandMode == "singleFitHeight" || d.expandMode == "toggle" || d.expandMode == "none") { return false } } }); a.each(this.items, function (f, h) { var g = this; if (f != e && g.expandedFlag == false) { d.collapseAt(f) } }) } a.each(this.items, function (f, g) { this.expandedFlag = false }) }, propertyChangedHandler: function (c, d, g, f) { var e = c; var b = f; if (d == "disabled") { c._enabledDisabledCheck() } else { if (d == "expandedIndexes") { c._applyExpandedIndexes() } else { c.refresh() } } }, _raiseEvent: function (g, e) { var c = this.events[g]; var f = new a.Event(c); f.owner = this; f.args = e; f.item = f.args.item; try { var b = this.host.trigger(f) } catch (d) { } return b }, resize: function (c, b) { this.width = c; this.height = b; this._setSize() }, _setSize: function () { var e = this; this.headersHeight = 0; var d = this.items && this.items.length > 0 ? parseInt(this.items[0]._header.css("padding-left")) : 0; var f = this.items && this.items.length > 0 ? parseInt(this.items[0]._header.css("padding-right")) : 0; var b = 2; var c = d + f + b; if (isNaN(c)) { c = 12 } if (this.width == "auto") { this.host.width(this.width) } else { if (this.width != null && this.width.toString().indexOf("%") != -1) { this.host.width(this.width) } else { this.host.width(parseInt(this.width) + c) } } this.host.height(this.height); a.each(this.items, function (g, j) { var i = this; var h = e.arrowPosition; if (e.rtl) { switch (h) { case "left": h = "right"; break; case "right": h = "left"; break } } if (h == "right") { i._header_text.css({ "float": "left", "margin-left": "0px" }); i._arrow.css({ "float": "right", position: "relative" }) } else { if (h == "left") { if (e.width == "auto") { i._header_text.css({ "float": "left", "margin-left": "17px" }); i._arrow.css({ "float": "left", position: "absolute" }) } else { i._header_text.css({ "float": "right", "margin-left": "0px" }); i._arrow.css({ "float": "left", position: "relative" }) } } } i._header.height("auto"); i._header_text.css("min-height", i._arrow.height()); e.headersHeight += i._header.outerHeight(); i._arrow.css("margin-top", i._header_text.height() / 2 - i._arrow.height() / 2) }); a.each(this.items, function (g, i) { var h = this; if (e.height != "auto") { if (e.expandMode == "single" || e.expandMode == "toggle" || e.expandMode == "multiple") { e.host.css({ "overflow-x": "hidden", "overflow-y": "auto" }) } else { if (e.expandMode == "singleFitHeight") { var j = parseInt(h._content.css("padding-top")) + parseInt(h._content.css("padding-bottom")); if (e.height && e.height.toString().indexOf("%") >= 0) { h._content.height(e.host.height() - e.headersHeight - j + 2) } else { h._content.height(e.host.height() - e.headersHeight - j) } } } } }); e._checkHeight() }, _toggle: function () { var b = this; if (this._isTouchDevice == false) { switch (this.toggleMode) { case "click": a.each(this.items, function (c, e) { var d = this; if (d.disabled == false) { b.addHandler(d._header, "click.navigationbar" + b.widgetID, function () { b.focusedH = true; b._animate(c) }) } }); break; case "dblclick": a.each(this.items, function (c, e) { var d = this; if (d.disabled == false) { b.addHandler(d._header, "dblclick.navigationbar" + b.widgetID, function () { b.focusedH = true; b._animate(c) }) } }); break; case "none": break } } else { if (this.toggleMode != "none") { a.each(this.items, function (c, e) { var d = this; if (d.disabled == false) { b.addHandler(d._header, a.jqx.mobile.getTouchEventName("touchstart") + "." + b.widgetID, function () { b._animate(c) }) } }) } else { return } } }, _animate: function (c, b) { var d = this; this.eCFlag; var e = this.items[c]; if (this.expandMode != "none" && this.eCFlag != 1) { if (this.items[c].expanded == true) { if (this.expandMode == "multiple" || this.expandMode == "toggle") { this.collapseAt(c) } } else { this.expandAt(c) } if (!d._isTouchDevice) { if (b != true) { e._header.addClass(this.toThemeProperty("jqx-fill-state-hover")); e._header.addClass(this.toThemeProperty("jqx-expander-header-hover")); e._arrow.addClass(this.toThemeProperty("jqx-expander-arrow-top-hover")); e._arrow.addClass(this.toThemeProperty("jqx-expander-arrow-down-hover")) } else { e._header.removeClass(this.toThemeProperty("jqx-fill-state-hover")); e._header.removeClass(this.toThemeProperty("jqx-expander-header-hover")); e._arrow.removeClass(this.toThemeProperty("jqx-expander-arrow-top-hover")); e._arrow.removeClass(this.toThemeProperty("jqx-expander-arrow-down-hover")) } } } }, _removeHandlers: function () { var b = this; this.removeHandler(this.host, "keydown.navigationbar" + this.widgetID); a.each(this.items, function (c, e) { var d = this; b.removeHandler(d._header, "click.navigationbar" + b.widgetID); b.removeHandler(d._header, "dblclick.navigationbar" + b.widgetID); b.removeHandler(d._header, "mouseenter.navigationbar" + b.widgetID); b.removeHandler(d._header, "mouseleave.navigationbar" + b.widgetID); b.removeHandler(d._header, "focus.navigationbar" + b.widgetID); b.removeHandler(d._header, "blur.navigationbar" + b.widgetID); b.removeHandler(d._content, "focus.navigationbar" + b.widgetID); b.removeHandler(d._content, "blur.navigationbar" + b.widgetID); b.removeHandler(d._header_text, "focus.navigationbar" + b.widgetID); b.removeHandler(d._arrow, "focus.navigationbar" + b.widgetID) }) }, _setTheme: function () { var b = this; this.host.addClass(this.toThemeProperty("jqx-reset")); this.host.addClass(this.toThemeProperty("jqx-widget")); if (this.rtl == true) { this.host.addClass(this.toThemeProperty("jqx-rtl")) } a.each(this.items, function (c, e) { var d = this; d._header.css("position", "relative"); d._content.css("position", "relative"); d._header.addClass(b.toThemeProperty("jqx-widget-header")); d._header.addClass(b.toThemeProperty("jqx-item")); d._content.addClass(b.toThemeProperty("jqx-widget-content")); if (d.disabled == false) { d._header.removeClass(b.toThemeProperty("jqx-fill-state-disabled")); d._content.removeClass(b.toThemeProperty("jqx-fill-state-disabled")); if (d.expanded == true) { d._header.addClass(b.toThemeProperty("jqx-fill-state-pressed")); d._header.addClass(b.toThemeProperty("jqx-expander-header-expanded")) } else { d._header.addClass(b.toThemeProperty("jqx-fill-state-normal")); d._header.removeClass(b.toThemeProperty("jqx-expander-header-expanded")) } if (!b._isTouchDevice) { b.addHandler(d._header, "mouseenter.navigationbar" + b.widgetID, function () { if (d._expandChecker == 1) { if (!d.focusedH) { d._header.css("z-index", 5) } d._header.removeClass(b.toThemeProperty("jqx-fill-state-normal")); d._header.removeClass(b.toThemeProperty("jqx-fill-state-pressed")); d._header.addClass(b.toThemeProperty("jqx-fill-state-hover")); d._header.addClass(b.toThemeProperty("jqx-expander-header-hover")); d._arrow.addClass(b.toThemeProperty("jqx-expander-arrow-top-hover")); d._arrow.addClass(b.toThemeProperty("jqx-expander-arrow-down-hover")); if (d.expanded) { d._arrow.addClass(b.toThemeProperty("jqx-icon-arrow-up-hover")) } else { d._arrow.addClass(b.toThemeProperty("jqx-icon-arrow-down-hover")) } } }); b.addHandler(d._header, "mouseleave.navigationbar" + b.widgetID, function () { if (!d.focusedH) { d._header.css("z-index", 0) } d._header.removeClass(b.toThemeProperty("jqx-fill-state-hover")); d._header.removeClass(b.toThemeProperty("jqx-expander-header-hover")); d._arrow.removeClass(b.toThemeProperty("jqx-expander-arrow-top-hover")); d._arrow.removeClass(b.toThemeProperty("jqx-expander-arrow-down-hover")); if (d._expandChecker == 1) { d._header.addClass(b.toThemeProperty("jqx-fill-state-normal")) } else { d._header.addClass(b.toThemeProperty("jqx-fill-state-pressed")) } d._arrow.removeClass(b.toThemeProperty("jqx-icon-arrow-up-hover")); d._arrow.removeClass(b.toThemeProperty("jqx-icon-arrow-down-hover")) }) } } else { d._header.addClass(b.toThemeProperty("jqx-fill-state-disabled")); d._content.addClass(b.toThemeProperty("jqx-fill-state-disabled")) } b.host.addClass(b.toThemeProperty("jqx-navigationbar")); d._header.addClass(b.toThemeProperty("jqx-expander-header")); d._content.addClass(b.toThemeProperty("jqx-expander-content")); d._content.addClass(b.toThemeProperty("jqx-expander-content-bottom")); if (c != 0) { d._header.css("margin-top", -1) } d._arrow.addClass(b.toThemeProperty("jqx-expander-arrow")) }) }, _checkContent: function (b) { var d = this.items[b]; var c = d._content; this._cntntEmpty = /^\s*$/.test(this.items[b]._content.html()); if (this._cntntEmpty == true) { c.css("display", "none"); c.height(0); c.addClass(this.toThemeProperty("jqx-expander-content-empty")) } else { if (d.expanded) { c.css("display", "block") } if (this.expandMode == "singleFitHeight") { var e = 1; if (b != 0) { e = 2 } c.height(this.host.height() - this.headersHeight + e) } else { c.height("auto") } c.removeClass(this.toThemeProperty("jqx-expander-content-empty")) } }, _checkHeight: function () { var f = this; this.totalHeight = 0; this.heightFlag; var e = this.items && this.items.length > 0 ? parseInt(this.items[0]._header.css("padding-left")) : 0; var g = this.items && this.items.length > 0 ? parseInt(this.items[0]._header.css("padding-right")) : 0; var b = 2; var c = e + g + b; if (isNaN(c)) { c = 12 } var d = 17; a.each(this.items, function (h, j) { var i = this; f.totalHeight += (i.expanded ? i._content.outerHeight() : 0) + i._header.outerHeight() }); if (this.width != "auto" && this.height != "auto" && this.expandMode != "singleFitHeight") { if (this.totalHeight > this.host.height()) { this.host.width(this.width + c + d); this.heightFlag = true } else { this.host.width(this.width + c); this.heightFlag = false } } }, _enabledDisabledCheck: function () { var b = this; if (this.disabled == true) { a.each(this.items, function (c, e) { var d = this; d.disabled = true }) } else { a.each(this.items, function (c, e) { var d = this; d.disabled = false }) } }, _updateExpandedIndexes: function () { var b = this; this.expandedIndexes = []; a.each(this.items, function (c, e) { var d = this; if (d.expanded == true) { b.expandedIndexes.push(c); if (b.expandMode == "single" || b.expandMode == "singleFitHeight" || b.expandMode == "toggle" || b.expandMode == "none") { return false } } }) }, _keyBoard: function () { var b = this; this._focus(); this.addHandler(this.host, "keydown.navigationbar" + this.widgetID, function (c) { var d = false; a.each(b.items, function (e, h) { var g = this; var f = b.items.length; if ((g.focusedH == true || g.focusedC == true) && g.disabled == false) { switch (c.keyCode) { case 13: case 32: if (b.toggleMode != "none") { if (g.focusedH == true) { b._animate(e, true) } d = true } break; case 37: if (e != 0) { b.items[e - 1]._header.focus() } else { var f = b.items.length; b.items[f - 1]._header.focus() } d = true; break; case 38: if (c.ctrlKey == false) { if (e != 0) { b.items[e - 1]._header.focus() } else { var f = b.items.length; b.items[f - 1]._header.focus() } } else { if (g.focusedC == true) { g._header.focus() } } d = true; break; case 39: if (e != f - 1) { b.items[e + 1]._header.focus() } else { b.items[0]._header.focus() } d = true; break; case 40: if (c.ctrlKey == false) { if (e != f - 1) { b.items[e + 1]._header.focus() } else { b.items[0]._header.focus() } } else { if (g.expanded == true) { g._content.focus() } } d = true; break; case 35: if (e != f - 1) { b.items[f - 1]._header.focus() } d = true; break; case 36: if (e != 0) { b.items[0]._header.focus() } d = true; break } return false } }); if (d && c.preventDefault) { c.preventDefault() } return !d }) }, _focus: function () { var b = this; if (this.disabled) { return } a.each(this.items, function (c, e) { var d = this; b.addHandler(d._header, "focus.navigationbar" + this.widgetID, function () { d.focusedH = true; a.jqx.aria(d._header, "aria-selected", true); d._header.addClass(b.toThemeProperty("jqx-fill-state-focus")); d._header.css("z-index", 10) }); b.addHandler(d._header, "blur.navigationbar" + this.widgetID, function () { d.focusedH = false; a.jqx.aria(d._header, "aria-selected", false); if (d._header.hasClass("jqx-expander-header-hover")) { d._header.css("z-index", 5) } else { d._header.css("z-index", 0) } d._header.removeClass(b.toThemeProperty("jqx-fill-state-focus")) }); b.addHandler(d._header_text, "focus.navigationbar" + this.widgetID, function () { d._header.focus() }); b.addHandler(d._arrow, "focus.navigationbar" + this.widgetID, function () { d._header.focus() }); b.addHandler(d._content, "focus.navigationbar" + this.widgetID, function () { d.focusedC = true; d._content.addClass(b.toThemeProperty("jqx-fill-state-focus")) }); b.addHandler(d._content, "blur.navigationbar" + this.widgetID, function () { d.focusedC = false; d._content.removeClass(b.toThemeProperty("jqx-fill-state-focus")) }) }) } }) })(jqxBaseFramework);

/*
jqxwindow
*/

(function (a) { a.jqx.jqxWidget("jqxWindow", "", {}); a.extend(a.jqx._jqxWindow.prototype, { defineInstance: function () { var e = { height: "auto", width: 200, minHeight: 50, maxHeight: 600, minWidth: 50, maxWidth: 800, showCloseButton: true, disabled: false, autoOpen: true, keyboardCloseKey: "esc", title: "", content: "", draggable: true, resizable: true, animationType: "fade", closeAnimationDuration: 250, showAnimationDuration: 250, isModal: false, position: "center", closeButtonSize: 16, closeButtonAction: "hide", modalOpacity: 0.3, dragArea: null, okButton: null, cancelButton: null, dialogResult: { OK: false, Cancel: false, None: true }, collapsed: false, showCollapseButton: false, collapseAnimationDuration: 150, collapseButtonSize: 16, rtl: false, keyboardNavigation: true, headerHeight: null, _events: ["created", "closed", "moving", "moved", "open", "collapse", "expand", "open", "close", "resize"], initContent: null, enableResize: true, restricter: null, autoFocus: true, closing: null, _invalidArgumentExceptions: { invalidHeight: "Invalid height!", invalidWidth: "Invalid width!", invalidMinHeight: "Invalid minHeight!", invalidMaxHeight: "Invalid maxHeight!", invalidMinWidth: "Invalid minWidth!", invalidMaxWidth: "Invalid maxWidth", invalidKeyCode: "Invalid keyCode!", invalidAnimationType: "Invalid animationType!", invalidCloseAnimationDuration: "Invalid closeAnimationDuration!", invalidShowAnimationDuration: "Invalid showAnimationDuration!", invalidPosition: "Invalid position!", invalidCloseButtonSize: "Invalid closeButtonSize!", invalidCollapseButtonSize: "Invalid collapseButtonSize!", invalidCloseButtonAction: "Invalid cluseButtonAction!", invalidModalOpacity: "Invalid modalOpacity!", invalidDragArea: "Invalid dragArea!", invalidDialogResult: "Invalid dialogResult!", invalidIsModal: "You can have just one modal window!" }, _enableResizeCollapseBackup: null, _enableResizeBackup: undefined, _heightBeforeCollapse: null, _minHeightBeforeCollapse: null, _mouseDown: false, _isDragging: false, _rightContentWrapper: null, _leftContentWrapper: null, _headerContentWrapper: null, _closeButton: null, _collapseButton: null, _title: null, _content: null, _mousePosition: {}, _windowPosition: {}, _modalBackground: null, _SCROLL_WIDTH: 21, _visible: true, modalBackgroundZIndex: 12990, modalZIndex: 18000, zIndex: 9001, _touchEvents: { mousedown: a.jqx.mobile.getTouchEventName("touchstart"), mouseup: a.jqx.mobile.getTouchEventName("touchend"), mousemove: a.jqx.mobile.getTouchEventName("touchmove"), mouseenter: "mouseenter", mouseleave: "mouseleave", click: a.jqx.mobile.getTouchEventName("touchstart") } }; a.extend(true, this, e); return e }, createInstance: function () { this.host.attr("role", "dialog"); this.host.removeAttr("data-bind"); this.host.detach(); a(document.body).append(this.host); var f = this; var g = function () { var i = parseInt(a(f.restricter).css("padding-top")); var h = parseInt(a(f.restricter).css("padding-left")); var k = parseInt(a(f.restricter).css("padding-bottom")); var m = parseInt(a(f.restricter).css("padding-right")); var l = a(f.restricter).coord(); f.dragArea = { left: h + l.left, top: i + l.top, width: 1 + m + a(f.restricter).width(), height: 1 + k + a(f.restricter).height() } }; if (this.restricter) { g() } if (this.restricter) { this.addHandler(a(window), "resize." + this.element.id, function () { g() }); this.addHandler(a(window), "orientationchanged." + this.element.id, function () { g() }); this.addHandler(a(window), "orientationchange." + this.element.id, function () { g() }) } this._isTouchDevice = a.jqx.mobile.isTouchDevice(); this._validateProperties(); this._createStructure(); this._refresh(); if (!this.autoOpen) { this.host.css("display", "none") } if (a.jqx.browser.msie) { this.host.addClass(this.toThemeProperty("jqx-noshadow")) } if (!this.isModal) { this._fixWindowZIndex() } this._setStartupSettings(); this._positionWindow(); this._raiseEvent(0); if (this.autoOpen) { this._performLayout(); var e = this; if (this.isModal) { this._fixWindowZIndex("modal-show") } if (e.initContent) { e.initContent(); e._contentInitialized = true } this._raiseEvent(7); this._raiseEvent(9) } }, refresh: function () { this._performLayout() }, _setStartupSettings: function () { if (this.disabled) { this.disable() } if (this.collapsed) { this.collapsed = false; this.collapse(0) } if (!this.autoOpen) { this.hide(null, 0.001, true); this._visible = false } if (this.title !== null && this.title !== "") { this.setTitle(this.title) } if (this.content !== null && this.content !== "") { this.setContent(this.content) } this.title = this._headerContentWrapper.html(); this.content = this._content.html() }, _fixWindowZIndex: function (m) { var e = a.data(document.body, "jqxwindows-list") || [], n = this.zIndex, h; if (!this.isModal) { if (this._indexOf(this.host, e) < 0) { e.push(this.host) } a.data(document.body, "jqxwindows-list", e); if (e.length > 1) { var f = e[e.length - 2]; if (f.css("z-index") == "auto") { n = this.zIndex + e.length + 1 } else { n = parseInt(f.css("z-index"), 10) + 1 } } } else { if (e) { e = this._removeFromArray(this.host, e); a.data(document.body, "jqxwindows-list", e) } var g = a.data(document.body, "jqxwindows-modallist"); if (!g) { if (m == "modal-show") { var k = new Array(); k.push(this.host); a.data(document.body, "jqxwindows-modallist", k); g = k } else { a.data(document.body, "jqxwindows-modallist", new Array()); g = new Array() } } else { if (m == "modal-show") { g.push(this.host) } else { var i = g.indexOf(this.host); if (i != -1) { g.splice(i, 1) } } } n = this.modalZIndex; var l = this; a.each(g, function (q) { if (this.data()) { if (this.data().jqxWindow) { var o = this.data().jqxWindow.instance; o._modalBackground.css("z-index", n); o.host.css("z-index", n + 1); n += 2 } } }); a.data(document.body, "jqxwindow-modal", this.host); return } this.host.css("z-index", n); this._sortByStyle("z-index", e) }, _validateProperties: function () { try { this._validateSize(); this._validateAnimationProperties(); this._validateInteractionProperties(); this._validateModalProperties(); if (!this.position) { throw new Error(this._invalidArgumentExceptions.invalidPosition) } if (isNaN(this.closeButtonSize) || parseInt(this.closeButtonSize) < 0) { throw new Error(this._invalidArgumentExceptions.invalidCloseButtonSize) } if (isNaN(this.collapseButtonSize) || parseInt(this.collapseButtonSize) < 0) { throw new Error(this._invalidArgumentExceptions.invalidCollapseButtonSize) } } catch (e) { alert(e) } }, _validateModalProperties: function () { if (this.modalOpacity < 0 || this.modalOpacity > 1) { throw new Error(this._invalidArgumentExceptions.invalidModalOpacity) } if (this.isModal && !this._singleModalCheck()) { throw new Error(this._invalidArgumentExceptions.invalidIsModal) } }, _validateSize: function () { this._validateSizeLimits(); if (this.height !== "auto" && isNaN(parseInt(this.height))) { throw new Error(this._invalidArgumentExceptions.invalidHeight) } if (this.width !== "auto" && isNaN(parseInt(this.width))) { throw new Error(this._invalidArgumentExceptions.invalidWidth) } if (this.height !== "auto" && this.height < this.minHeight) { this.height = this.minHeight } if (this.width < this.minWidth) { this.width = this.minWidth } if (this.height !== "auto" && this.height > this.maxHeight) { this.height = this.maxHeight } if (this.width > this.maxWidth) { this.width = this.maxWidth } if (this.dragArea === null) { return } if (this.dragArea && ((this.dragArea.height !== null && this.host.height() > this.dragArea.height) || (parseInt(this.height, 10) > this.dragArea.height)) || (this.dragArea.width !== null && this.width > this.dragArea.width) || (this.maxHeight > this.dragArea.height || this.maxWidth > this.dragArea.width)) { } }, _validateSizeLimits: function () { if (this.maxHeight == null) { this.maxHeight = 9999 } if (this.minWidth == null) { this.minWidth = 0 } if (this.maxWidth == null) { this.maxWidth = 9999 } if (this.minHeight == null) { this.minHeight = 0 } if (isNaN(parseInt(this.minHeight))) { throw new Error(this._invalidArgumentExceptions.invalidMinHeight) } if (isNaN(parseInt(this.maxHeight))) { throw new Error(this._invalidArgumentExceptions.invalidMaxHeight) } if (isNaN(parseInt(this.minWidth))) { throw new Error(this._invalidArgumentExceptions.invalidMinWidth) } if (isNaN(parseInt(this.maxWidth))) { throw new Error(this._invalidArgumentExceptions.invalidMaxWidth) } if (this.minHeight > this.maxHeight) { throw new Error(this._invalidArgumentExceptions.invalidMinHeight) } if (this.minWidth > this.maxWidth) { throw new Error(this._invalidArgumentExceptions.invalidMinWidth) } }, _validateAnimationProperties: function () { if (this.animationType !== "fade" && this.animationType !== "slide" && this.animationType !== "combined" && this.animationType !== "none") { throw new Error(this._invalidArgumentExceptions.invalidAnimationType) } if (isNaN(parseInt(this.closeAnimationDuration), 10) || this.closeAnimationDuration < 0) { throw new Error(this._invalidArgumentExceptions.invalidCloseAnimationDuration) } if (isNaN(parseInt(this.showAnimationDuration), 10) || this.showAnimationDuration < 0) { throw new Error(this._invalidArgumentExceptions.invalidShowAnimationDuration) } }, _validateInteractionProperties: function () { if (parseInt(this.keyCode, 10) < 0 || parseInt(this.keyCode, 10) > 130 && this.keyCode !== "esc") { throw new Error(this._invalidArgumentExceptions.invalidKeyCode) } if (this.dragArea !== null && (typeof this.dragArea.width === "undefined" || typeof this.dragArea.height === "undefined" || typeof this.dragArea.left === "undefined" || typeof this.dragArea.top === "undefined")) { throw new Error(this._invalidArgumentExceptions.invalidDragArea) } if (!this.dialogResult || (!this.dialogResult.OK && !this.dialogResult.Cancel && !this.dialogResult.None)) { throw new Error(this._invalidArgumentExceptions.invalidDialogResult) } if (this.closeButtonAction !== "hide" && this.closeButtonAction !== "close") { throw new Error(this._invalidArgumentExceptions.invalidCloseButtonAction) } }, _singleModalCheck: function () { var e = a.data(document.body, "jqxwindows-list") || [], f = e.length; while (f) { f -= 1; if (a(e[f].attr("id")).length > 0) { if (a(e[f].attr("id")).jqxWindow("isModal")) { return false } } } return true }, _createStructure: function () { var e = this.host.children("DIV"); if (e.length === 1) { this._header = a("<div>" + this.host.attr("caption") + "</div>"); this.host.prepend(this._header); this.host.attr("caption", ""); this._content = a(e[0]) } else { if (e.length === 2) { this._header = a(e[0]); this._content = a(e[1]) } else { throw new Error("Invalid structure!") } } }, _refresh: function () { this._render(); this._addStyles(); this._performLayout(); this._removeEventHandlers(); this._addEventHandlers(); this._initializeResize() }, _render: function () { this._addHeaderWrapper(); this._addCloseButton(); this._addCollapseButton(); this._removeModal(); this._makeModal() }, _addHeaderWrapper: function () { if (!this._headerContentWrapper) { this._header.wrapInner('<div style="float:left;"></div>'); this._headerContentWrapper = this._header.children(0); if (this.headerHeight !== null) { this._header.height(this.headerHeight) } } }, _addCloseButton: function () { if (!this._closeButton) { this._closeButtonWrapper = a('<div class="' + this.toThemeProperty("jqx-window-close-button-background") + '"></div>'); this._closeButton = a('<div style="width: 100%; height: 100%;" class="' + this.toThemeProperty("jqx-window-close-button") + " " + this.toThemeProperty("jqx-icon-close") + '"></div>'); this._closeButtonWrapper.append(this._closeButton); this._header.append(this._closeButtonWrapper) } }, _addCollapseButton: function () { if (!this._collapseButton) { this._collapseButtonWrapper = a('<div class="' + this.toThemeProperty("jqx-window-collapse-button-background") + '"></div>'); this._collapseButton = a('<div style="width: 100%; height: 100%;" class="' + this.toThemeProperty("jqx-window-collapse-button") + " " + this.toThemeProperty("jqx-icon-arrow-up") + '"></div>'); this._collapseButtonWrapper.append(this._collapseButton); this._header.append(this._collapseButtonWrapper) } }, _removeModal: function () { if (!this.isModal && typeof this._modalBackground === "object" && this._modalBackground !== null && this._modalBackground.length >= 1) { a("." + this.toThemeProperty("jqx-window-modal")).remove(); this._modalBackground = null } }, focus: function () { try { this.host.focus(); var f = this; setTimeout(function () { f.host.focus() }, 10) } catch (e) { } }, _makeModal: function () { if (this.isModal && (!this._modalBackground || this._modalBackground.length < 1)) { var g = a.data(document.body, "jqxwindows-list"); if (g) { this._removeFromArray(this.host, g); a.data(document.body, "jqxwindows-list", g) } this._modalBackground = a("<div></div>"); this._modalBackground.addClass(this.toThemeProperty("jqx-window-modal")); this._setModalBackgroundStyles(); a(document.body).append(this._modalBackground); this.addHandler(this._modalBackground, this._getEvent("click"), function () { return false }); var f = this; var e = function (i, k) { var h = a(i).parents().get(); for (j = 0; j < h.length; j++) { if (a(h[j]).is(k)) { return true } } return false }; this.addHandler(this._modalBackground, "mouseup", function (h) { f._stopResizing(f); h.preventDefault() }); this.addHandler(this._modalBackground, "mousedown", function (i) { var h = f._getTabbables(); if (h.length > 0) { h[0].focus(1); setTimeout(function () { h[0].focus(1) }, 100) } i.preventDefault(); return false }); this.addHandler(a(document), "keydown.window" + this.element.id, function (l) { if (l.keyCode !== 9) { return } var h = a.data(document.body, "jqxwindows-modallist"); if (h.length > 1) { if (h[h.length - 1][0] != f.element) { return } } var k = f._getTabbables(); var m = null; var i = null; if (k.length > 0) { m = k[0]; i = k[k.length - 1] } if (l.target == f.element) { return } if (m == null) { return } if (!e(l.target, f.host)) { m.focus(1); return false } if (l.target === i && !l.shiftKey) { m.focus(1); return false } else { if (l.target === m && l.shiftKey) { i.focus(1); return false } } }) } }, _addStyles: function () { this.host.addClass(this.toThemeProperty("jqx-rc-all")); this.host.addClass(this.toThemeProperty("jqx-window")); this.host.addClass(this.toThemeProperty("jqx-popup")); if (a.jqx.browser.msie) { this.host.addClass(this.toThemeProperty("jqx-noshadow")) } this.host.addClass(this.toThemeProperty("jqx-widget")); this.host.addClass(this.toThemeProperty("jqx-widget-content")); this._header.addClass(this.toThemeProperty("jqx-window-header")); this._content.addClass(this.toThemeProperty("jqx-window-content")); this._header.addClass(this.toThemeProperty("jqx-widget-header")); this._content.addClass(this.toThemeProperty("jqx-widget-content")); this._header.addClass(this.toThemeProperty("jqx-disableselect")); this._header.addClass(this.toThemeProperty("jqx-rc-t")); this._content.addClass(this.toThemeProperty("jqx-rc-b")); if (!this.host.attr("tabindex")) { this.element.tabIndex = 0; this.host.children().css("tab-index", 0) } this.host.attr("hideFocus", "true").css("outline", "none") }, _performHeaderLayout: function () { this._handleHeaderButtons(); this._header.css("position", "relative"); if (this.rtl) { this._headerContentWrapper.css("direction", "rtl"); this._headerContentWrapper.css("float", "right") } else { this._headerContentWrapper.css("direction", "ltr"); this._headerContentWrapper.css("float", "left") } this._performHeaderCloseButtonLayout(); this._performHeaderCollapseButtonLayout(); this._centerElement(this._headerContentWrapper, this._header, "y", "margin"); if (this.headerHeight) { this._centerElement(this._closeButtonWrapper, this._header, "y", "margin"); this._centerElement(this._collapseButtonWrapper, this._header, "y", "margin") } }, _handleHeaderButtons: function () { if (!this._closeButtonWrapper) { return } if (!this.showCloseButton) { this._closeButtonWrapper.css("visibility", "hidden") } else { this._closeButtonWrapper.css("visibility", "visible"); this._closeButtonWrapper.width(this.closeButtonSize); this._closeButtonWrapper.height(this.closeButtonSize) } if (!this.showCollapseButton) { this._collapseButtonWrapper.css("visibility", "hidden") } else { this._collapseButtonWrapper.css("visibility", "visible"); this._collapseButtonWrapper.width(this.collapseButtonSize); this._collapseButtonWrapper.height(this.collapseButtonSize) } }, _performHeaderCloseButtonLayout: function () { if (!this._closeButtonWrapper) { return } var e = parseInt(this._header.css("padding-right"), 10); if (!isNaN(e)) { this._closeButtonWrapper.width(this._closeButton.width()); if (!this.rtl) { this._closeButtonWrapper.css("margin-right", e); this._closeButtonWrapper.css("margin-left", "0px") } else { this._closeButtonWrapper.css("margin-left", e); this._closeButtonWrapper.css("margin-right", "0px") } } if (!this.rtl) { this._closeButtonWrapper.css({ position: "absolute", right: "0px", left: "" }) } else { this._closeButtonWrapper.css({ position: "absolute", left: "0px", right: "" }) } }, _performHeaderCollapseButtonLayout: function () { if (!this._closeButtonWrapper) { return } var e = parseInt(this._header.css("padding-right"), 10); if (!isNaN(e)) { this._collapseButtonWrapper.width(this.collapseButtonSize); this._collapseButtonWrapper.height(this.collapseButtonSize); if (!this.rtl) { this._collapseButtonWrapper.css("margin-right", e); this._collapseButtonWrapper.css("margin-left", "0px") } else { this._collapseButtonWrapper.css("margin-left", e); this._collapseButtonWrapper.css("margin-right", "0px") } } if (!this.rtl) { this._collapseButtonWrapper.css({ position: "absolute", right: (this.showCloseButton) ? this._closeButton.outerWidth(true) : 0, left: "" }) } else { this._collapseButtonWrapper.css({ position: "absolute", left: (this.showCloseButton) ? this._closeButton.outerWidth(true) : 0, right: "" }) } this._centerElement(this._collapseButton, this._collapseButton.parent(), "y") }, _performWidgetLayout: function () { var e; if (this.width !== "auto") { this.host.css("width", this.width) } if (!this.collapsed) { if (this.height !== "auto") { this.host.height(this.height) } else { this.host.height(this.host.height()) } this.host.css("min-height", this.minHeight) } this._setChildrenLayout(); e = this._validateMinSize(); this.host.css({ "max-height": this.maxHeight, "min-width": this.minWidth, "max-width": this.maxWidth }); if (!e) { this._setChildrenLayout() } }, _setChildrenLayout: function () { this._header.width(this.host.width() - (this._header.outerWidth(true) - this._header.width())); this._content.width(this.host.width() - (this._content.outerWidth(true) - this._content.width())); this._content.height(this.host.height() - this._header.outerHeight(true) - (this._content.outerHeight(true) - this._content.height())) }, _validateMinSize: function () { var f = true; if (this.minHeight < this._header.height()) { this.minHeight = this._header.height(); f = false } var h = this._header.children(0).outerWidth(true), e = this._header.children(1).outerWidth(true), g = h + e; if (this.minWidth < 100) { this.minWidth = Math.min(g, 100); f = false } return f }, _centerElement: function (h, f, e, g) { if (typeof f.left === "number" && typeof f.top === "number" && typeof f.height === "number" && typeof f.width === "number") { this._centerElementInArea(h, f, e) } else { this._centerElementInParent(h, f, e, g) } }, _centerElementInParent: function (e, m, h, f) { h = h.toLowerCase(); if (f) { f += "-" } else { f = "" } if (h.indexOf("y") >= 0) { var g = e.outerHeight(true), k = m.height(), i = (Math.max(0, k - g)) / 2; e.css(f + "top", i + "px") } if (h.indexOf("x") >= 0) { var o = e.outerWidth(true); var n = m.width(); var l = (Math.max(0, n - o)) / 2; e.css(f + "left", l + "px") } }, _centerElementInArea: function (f, e, h) { h = h.toLowerCase(); if (h.indexOf("y") >= 0) { var g = f.outerHeight(true); var k = e.height; var i = (k - g) / 2; f.css("top", i + e.top + "px") } if (h.indexOf("x") >= 0) { var n = f.outerWidth(true); var m = e.width; var l = (m - n) / 2; f.css("left", l + e.left + "px") } }, _removeEventHandlers: function () { this.removeHandler(this._header, this._getEvent("mousedown")); this.removeHandler(this._header, this._getEvent("mousemove")); this.removeHandler(this._header, "focus"); this.removeHandler(a(document), this._getEvent("mousemove") + "." + this.host.attr("id")); this.removeHandler(a(document), this._getEvent("mouseup") + "." + this.host.attr("id")); this.removeHandler(this.host, "keydown"); this.removeHandler(this._closeButton, this._getEvent("click")); this.removeHandler(this._closeButton, this._getEvent("mouseenter")); this.removeHandler(this._closeButton, this._getEvent("mouseleave")); this.removeHandler(this._collapseButton, this._getEvent("click")); this.removeHandler(this._collapseButton, this._getEvent("mouseenter")); this.removeHandler(this._collapseButton, this._getEvent("mouseleave")); this.removeHandler(this.host, this._getEvent("mousedown")); this.removeHandler(a(this.okButton), this._getEvent("click"), this._setDialogResultHandler); this.removeHandler(a(this.cancelButton), this._getEvent("click"), this._setDialogResultHandler); this.removeHandler(this._header, this._getEvent("mouseenter")); this.removeHandler(this._header, this._getEvent("mouseleave")); this.removeHandler(this.host, "resizing", this._windowResizeHandler) }, _removeFromArray: function (e, g) { var f = this._indexOf(e, g); if (f >= 0) { return g.splice(this._indexOf(e, g), 1) } else { return g } }, _sortByStyle: function (e, l) { for (var h = 0; h < l.length; h++) { for (var f = l.length - 1; f > h; f--) { var m = l[f], k = l[f - 1], g; if (parseInt(m.css(e), 10) < parseInt(k.css(e), 10)) { g = m; l[f] = k; l[f - 1] = g } } } }, _initializeResize: function () { if (this.resizable) { var e = this; this.initResize({ target: this.host, alsoResize: e._content, maxWidth: e.maxWidth, minWidth: e.minWidth, maxHeight: e.maxHeight, minHeight: e.minHeight, indicatorSize: 10, resizeParent: e.dragArea }) } }, _removeResize: function () { this.removeResize() }, _getEvent: function (e) { if (this._isTouchDevice) { return this._touchEvents[e] } else { return e } }, _addEventHandlers: function () { this._addDragDropHandlers(); this._addCloseHandlers(); this._addCollapseHandlers(); this._addFocusHandlers(); this._documentResizeHandlers(); this._closeButtonHover(); this._collapseButtonHover(); this._addDialogButtonsHandlers(); this._addHeaderHoverEffect(); this._addResizeHandlers(); var e = this; this.addHandler(this._header, this._getEvent("mousemove"), function (f) { e._addHeaderCursorHandlers(e) }) }, _addResizeHandlers: function () { var e = this; this.addHandler(this.host, "resizing", this._windowResizeHandler, { self: this }) }, _windowResizeHandler: function (f) { var e = f.data.self; e._header.width(e.host.width() - (e._header.outerWidth(true) - e._header.width())); e.width = f.args.width; e.height = f.args.height }, _addHeaderHoverEffect: function () { var e = this; this.addHandler(this._header, this._getEvent("mouseenter"), function () { a(this).addClass(e.toThemeProperty("jqx-window-header-hover")) }); this.addHandler(this._header, this._getEvent("mouseleave"), function () { a(this).removeClass(e.toThemeProperty("jqx-window-header-hover")) }) }, _addDialogButtonsHandlers: function () { if (this.okButton) { this.addHandler(a(this.okButton), this._getEvent("click"), this._setDialogResultHandler, { self: this, result: "ok" }) } if (this.cancelButton) { this.addHandler(a(this.cancelButton), this._getEvent("click"), this._setDialogResultHandler, { self: this, result: "cancel" }) } }, _documentResizeHandlers: function () { var e = this; if (this.isModal) { this.addHandler(a(window), "resize.window" + this.element.id, function () { if (typeof e._modalBackground === "object" && e._modalBackground !== null) { if (e.isOpen()) { e._modalBackground.hide() } if (!e.restricter) { e._modalBackground.width(e._getDocumentSize().width); e._modalBackground.height(e._getDocumentSize().height) } else { e._modalBackground.css("left", e.dragArea.left); e._modalBackground.css("top", e.dragArea.top); e._modalBackground.width(e.dragArea.width); e._modalBackground.height(e.dragArea.height) } if (e.isOpen()) { e._modalBackground.show() } } }) } }, _setDialogResultHandler: function (f) { var e = f.data.self; e._setDialogResult(f.data.result); e.closeWindow() }, _setDialogResult: function (e) { this.dialogResult.OK = false; this.dialogResult.None = false; this.dialogResult.Cancel = false; e = e.toLowerCase(); switch (e) { case "ok": this.dialogResult.OK = true; break; case "cancel": this.dialogResult.Cancel = true; break; default: this.dialogResult.None = true } }, _getDocumentSize: function () { var e = a.jqx.browser.msie && a.jqx.browser.version < 9; var f = e ? 4 : 0; var g = f; if (document.body.scrollHeight > document.body.clientHeight && e) { f = this._SCROLL_WIDTH } if (document.body.scrollWidth > document.body.clientWidth && e) { g = this._SCROLL_WIDTH } return { width: a(document).width() - f, height: a(document).height() - g } }, _closeButtonHover: function () { var e = this; this.addHandler(this._closeButton, this._getEvent("mouseenter"), function () { e._closeButton.addClass(e.toThemeProperty("jqx-window-close-button-hover")) }); this.addHandler(this._closeButton, this._getEvent("mouseleave"), function () { e._closeButton.removeClass(e.toThemeProperty("jqx-window-close-button-hover")) }) }, _collapseButtonHover: function () { var e = this; this.addHandler(this._collapseButton, this._getEvent("mouseenter"), function () { e._collapseButton.addClass(e.toThemeProperty("jqx-window-collapse-button-hover")) }); this.addHandler(this._collapseButton, this._getEvent("mouseleave"), function () { e._collapseButton.removeClass(e.toThemeProperty("jqx-window-collapse-button-hover")) }) }, _setModalBackgroundStyles: function () { if (this.isModal) { this._modalBackground.fadeTo(0, this.modalOpacity); this._modalBackground.css({ position: "absolute", top: "0px", left: "0px", width: this._getDocumentSize().width, height: this._getDocumentSize().height, "z-index": this.modalBackgroundZIndex }); if (!this.autoOpen) { this._modalBackground.css("display", "none") } } }, _addFocusHandlers: function () { var e = this; this.addHandler(this.host, this._getEvent("mousedown"), function () { if (!e.isModal) { e.bringToFront() } }) }, _indexOf: function (f, g) { for (var e = 0; e < g.length; e++) { if (g[e][0] === f[0]) { return e } } return -1 }, _addCloseHandlers: function () { var e = this; this.addHandler(this._closeButton, this._getEvent("click"), function (f) { return e._closeWindow(f) }); if (this.keyboardCloseKey !== "none") { if (typeof this.keyboardCloseKey !== "number" && this.keyboardCloseKey.toLowerCase() === "esc") { this.keyboardCloseKey = 27 } } this.addHandler(this.host, "keydown", function (f) { if (f.keyCode === e.keyboardCloseKey && e.keyboardCloseKey != null && e.keyboardCloseKey != "none") { e._closeWindow(f) } else { e._handleKeys(f) } }, { self: this }); this.addHandler(this.host, "keyup", function (f) { if (!e.keyboardNavigation) { return } if (e._moved) { var i = e.host.coord(); var h = i.left; var g = i.top; e._raiseEvent(3, h, g, h, g); e._moved = false } }) }, _handleKeys: function (f) { if (!this.keyboardNavigation) { return } if (!this._headerFocused) { return } if (a(document.activeElement).ischildof(this._content)) { return } var e = f.ctrlKey; var n = f.keyCode; var l = this.host.coord(); var k = l.left; var m = l.top; var g = this._getDraggingArea(); var h = this.host.width(); var o = this.host.height(); var p = true; var i = 10; switch (n) { case 37: if (!e) { if (this.draggable) { if (k - i >= 0) { this.move(k - i, m) } } } else { if (this.resizable) { this.resize(h - i, o) } } p = false; break; case 38: if (!e) { if (this.draggable) { if (m - i >= 0) { this.move(k, m - i) } } } else { if (this.resizable) { this.resize(h, o - i) } } p = false; break; case 39: if (!e) { if (this.draggable) { if (k + h + i <= g.width) { this.move(k + i, m) } } } else { if (this.resizable) { this.resize(h + i, o) } } p = false; break; case 40: if (!e) { if (this.draggable) { if (m + o + i <= g.height) { this.move(k, m + i) } } } else { if (this.resizable) { this.resize(h, o + i) } } p = false; break } if (!p) { if (f.preventDefault) { f.preventDefault() } if (f.stopPropagation) { f.stopPropagation() } } return p }, _addCollapseHandlers: function () { var e = this; this.addHandler(this._collapseButton, this._getEvent("click"), function () { if (!e.collapsed) { e.collapse() } else { e.expand() } }) }, _closeWindow: function (e) { this.closeWindow(); return false }, _addHeaderCursorHandlers: function (e) { if (e.resizeArea && e.resizable && !e.collapsed) { e._header.css("cursor", e._resizeWrapper.css("cursor")); return } else { if (e.draggable) { e._header.css("cursor", "move"); return } } e._header.css("cursor", "default"); if (e._resizeWrapper && e._resizeWrapper.length > 0) { e._resizeWrapper.css("cursor", "default") } }, _addDragDropHandlers: function () { if (this.draggable) { var e = this; this.addHandler(this.host, "focus", function () { e._headerFocused = true }); this.addHandler(this.host, "blur", function () { e._headerFocused = false }); this.addHandler(this._header, "focus", function () { e._headerFocused = true; return false }); this.addHandler(this._header, this._getEvent("mousedown"), function (k, i, l) { if (i) { k.pageX = i } if (l) { k.pageY = l } e._headerMouseDownHandler(e, k); return true }); this.addHandler(this._header, "dragstart", function (i) { if (i.preventDefault) { i.preventDefault() } return false }); this.addHandler(this._header, this._getEvent("mousemove"), function (i) { return e._headerMouseMoveHandler(e, i) }); this.addHandler(a(document), this._getEvent("mousemove") + "." + this.host.attr("id"), function (i) { return e._dragHandler(e, i) }); this.addHandler(a(document), this._getEvent("mouseup") + "." + this.host.attr("id"), function (i) { return e._dropHandler(e, i) }); try { if (document.referrer != "" || window.frameElement) { var h = null; if (window.top != null && window.top != window.self) { if (window.parent && document.referrer) { h = document.referrer } } if (h && h.indexOf(document.location.host) != -1) { var g = function (i) { e._dropHandler(e, i) }; if (window.top.document.addEventListener) { window.top.document.addEventListener("mouseup", g, false) } else { if (window.top.document.attachEvent) { window.top.document.attachEvent("onmouseup", g) } } } } } catch (f) { } } }, _headerMouseDownHandler: function (f, g) { if (!f.isModal) { f.bringToFront() } if (f._resizeDirection == null) { var h = a.jqx.mobile.getTouches(g); var i = h[0]; var e = a.jqx.position(g); f._mousePosition.x = e.left; f._mousePosition.y = e.top; f._mouseDown = true; f._isDragging = false } }, _headerMouseMoveHandler: function (f, i) { if (f._mouseDown && !f._isDragging) { var k = a.jqx.mobile.getTouches(i); var l = k[0]; var h = l.pageX, g = l.pageY; var e = a.jqx.position(i); h = e.left; g = e.top; if ((h + 3 < f._mousePosition.x || h - 3 > f._mousePosition.x) || (g + 3 < f._mousePosition.y || g - 3 > f._mousePosition.y)) { f._isDragging = true; f._mousePosition = { x: h, y: g }; f._windowPosition = { x: f.host.coord().left, y: f.host.coord().top }; a(document.body).addClass(f.toThemeProperty("jqx-disableselect")) } if (f._isTouchDevice) { i.preventDefault(); return true } return false } if (f._isDragging) { if (f._isTouchDevice) { i.preventDefault(); return true } return false } return true }, _dropHandler: function (g, k) { var f = true; if (g._isDragging && !g.isResizing && !g._resizeDirection) { var e = parseInt(g.host.css("left"), 10), l = parseInt(g.host.css("top"), 10), i = (g._isTouchDevice) ? 0 : k.pageX, h = (g._isTouchDevice) ? 0 : k.pageY; g.enableResize = g._enableResizeBackup; g._enableResizeBackup = "undefined"; g._raiseEvent(3, e, l, i, h); f = false; if (k.preventDefault != "undefined") { k.preventDefault() } if (k.originalEvent != null) { k.originalEvent.mouseHandled = true } if (k.stopPropagation != "undefined") { k.stopPropagation() } } g._isDragging = false; g._mouseDown = false; a(document.body).removeClass(g.toThemeProperty("jqx-disableselect")); return f }, _dragHandler: function (p, h) { if (p._isDragging && !p.isResizing && !p._resizeDirection) { var o = (p._isTouchDevice) ? h.originalEvent.which : h.which; if (typeof p._enableResizeBackup === "undefined") { p._enableResizeBackup = p.enableResize } p.enableResize = false; if (o === 0 && a.jqx.browser.msie && a.jqx.browser.version < 8) { return p._dropHandler(p, h) } var m = a.jqx.mobile.getTouches(h); var l = m[0]; var n = a.jqx.position(h); var k = n.left, i = n.top, g = k - p._mousePosition.x, f = i - p._mousePosition.y, e = p._windowPosition.x + g, q = p._windowPosition.y + f; p.move(e, q, h); h.preventDefault(); return false } return true }, _validateCoordinates: function (e, l, i, k) { var h = this._getDraggingArea(); e = (e < h.left) ? h.left : e; l = (l < h.top) ? h.top : l; var f = this.host.outerWidth(true); var g = this.host.outerHeight(true); if (e + f >= h.width + h.left - 2 * k) { e = h.width + h.left - f - k } if (l + g >= h.height + h.top - i) { l = h.height + h.top - g - i } return { x: e, y: l } }, _performLayout: function () { this._performHeaderLayout(); this._performWidgetLayout() }, _parseDragAreaAttributes: function () { if (this.dragArea !== null) { this.dragArea.height = parseInt(this.dragArea.height, 10); this.dragArea.width = parseInt(this.dragArea.width, 10); this.dragArea.top = parseInt(this.dragArea.top, 10); this.dragArea.left = parseInt(this.dragArea.left, 10) } }, _positionWindow: function () { this._parseDragAreaAttributes(); if (this.position instanceof Array && this.position.length === 2 && typeof this.position[0] === "number" && typeof this.position[1] === "number") { this.host.css({ left: this.position[0], top: this.position[1] }) } else { if (this.position instanceof Object) { if (this.position.left) { this.host.offset(this.position) } else { if (this.position.x !== undefined && this.position.y != undefined) { this.host.css({ left: this.position.x, top: this.position.y }) } else { if (this.position.center) { this._centerElement(this.host, this.position.center, "xy"); var g = this.position.center.coord(); var f = parseInt(this.host.css("left")); var e = parseInt(this.host.css("top")); this.host.css({ left: f + g.left, top: e + g.top }) } } } } else { this._positionFromLiteral() } } }, _getDraggingArea: function () { var e = {}; e.left = ((this.dragArea && this.dragArea.left) ? this.dragArea.left : 0); e.top = ((this.dragArea && this.dragArea.top) ? this.dragArea.top : 0); e.width = ((this.dragArea && this.dragArea.width) ? this.dragArea.width : this._getDocumentSize().width); e.height = ((this.dragArea && this.dragArea.height) ? this.dragArea.height : this._getDocumentSize().height); return e }, _positionFromLiteral: function () { if (!(this.position instanceof Array)) { this.position = this.position.split(",") } var e = this.position.length, f = this._getDraggingArea(); while (e) { e -= 1; this.position[e] = this.position[e].replace(/ /g, ""); switch (this.position[e]) { case "top": this.host.css("top", f.top); break; case "left": this.host.css("left", f.left); break; case "bottom": this.host.css("top", f.height - this.host.height() + f.top); break; case "right": this.host.css("left", f.left + f.width - this.host.width()); break; default: if (!this.dragArea) { f = a(window) } this._centerElement(this.host, f, "xy"); break } } }, _raiseEvent: function (g) { var f = this._events[g], h = a.Event(f), e = {}; if (g === 2 || g === 3) { e.x = arguments[1]; e.y = arguments[2]; e.pageX = arguments[3]; e.pageY = arguments[4] } if (f === "closed" || f === "close") { e.dialogResult = this.dialogResult } h.args = e; return this.host.trigger(h) }, destroy: function () { this.removeHandler(a(window), "resize.window" + this.element.id); this._removeEventHandlers(); this._destroy() }, _destroy: function () { if (this.restricter) { this.removeHandler(a(window), "resize." + this.element.id); this.removeHandler(a(window), "orientationchanged." + this.element.id); this.removeHandler(a(window), "orientationchange." + this.element.id) } this.host.remove(); if (this._modalBackground !== null) { this._modalBackground.remove() } }, _toClose: function (f, e) { return ((f && e[0] === this.element) || (e[0] !== this.element && typeof e[0] === "object")) }, propertyChangedHandler: function (e, f, h, g) { this._validateProperties(); switch (f) { case "rtl": this._performLayout(); break; case "dragArea": this._positionWindow(); break; case "collapseButtonSize": this._performLayout(); break; case "closeButtonSize": this._performLayout(); break; case "isModal": this._refresh(); this._fixWindowZIndex(); break; case "keyboardCloseKey": this._removeEventHandlers(); this._addEventHandlers(); break; case "disabled": if (g) { this.disable() } else { this.disabled = true; this.enable() } break; case "showCloseButton": case "showCollapseButton": this._performLayout(); break; case "height": this._performLayout(); break; case "width": this._performLayout(); break; case "title": this.setTitle(g); this.title = g; break; case "content": this.setContent(g); break; case "draggable": this._removeEventHandlers(); this._addEventHandlers(); this._removeResize(); this._initializeResize(); break; case "resizable": this.enableResize = g; if (g) { this._initializeResize() } else { this._removeResize() } break; case "position": this._positionWindow(); break; case "modalOpacity": this._setModalBackgroundStyles(); break; case "okButton": if (g) { this._addDialogButtonsHandlers() } else { this.removeHandler(this.okButton) } break; case "cancelButton": if (g) { this._addDialogButtonsHandlers() } else { this.removeHandler(this.cancelButton) } break; case "collapsed": if (g) { if (!h) { this.collapsed = false; this.collapse(0) } } else { if (h) { this.collapsed = true; this.expand(0) } } case "theme": a.jqx.utilities.setTheme(h, g, this.host); break; case "enableResize": return; case "maxWidth": case "maxHeight": case "minWidth": case "minHeight": e._performLayout(); e._removeResize(); e._initializeResize(); return; default: return } }, collapse: function (g) { if (!this.collapsed && !this.host.is(":animated")) { if (this.host.css("display") == "none") { return } var e = this, h = this._header.outerHeight(true), i = parseInt(this._header.css("border-bottom-width"), 10), f = parseInt(this._header.css("margin-bottom"), 10), g = !isNaN(parseInt(g)) ? g : this.collapseAnimationDuration; if (!isNaN(i)) { h -= 2 * i } if (!isNaN(f)) { h += f } this._heightBeforeCollapse = this.host.height(); this._minHeightBeforeCollapse = this.host.css("min-height"); this.host.css("min-height", h); this.host.animate({ height: h }, g, function () { e.collapsed = true; e._collapseButton.addClass(e.toThemeProperty("jqx-window-collapse-button-collapsed")); e._collapseButton.addClass(e.toThemeProperty("jqx-icon-arrow-down")); e._content.css("display", "none"); e._raiseEvent(5); e._raiseEvent(9); a.jqx.aria(e, "aria-expanded", false) }) } }, expand: function (f) { if (this.collapsed && !this.host.is(":animated")) { var e = this, f = !isNaN(parseInt(f)) ? f : this.collapseAnimationDuration; this.host.animate({ height: this._heightBeforeCollapse }, f, function () { e.collapsed = false; e.host.css("min-height", e._minHeightBeforeCollapse); e._collapseButton.removeClass(e.toThemeProperty("jqx-window-collapse-button-collapsed")); e._collapseButton.removeClass(e.toThemeProperty("jqx-icon-arrow-down")); e._content.css("display", "block"); e._raiseEvent(6); e._performWidgetLayout(); e._raiseEvent(9); a.jqx.aria(e, "aria-expanded", true) }) } }, closeAll: function (h) { var h = true; var g = a.data(document.body, "jqxwindows-list"), f = g.length, e = a.data(document.body, "jqxwindow-modal") || []; while (f) { f -= 1; if (this._toClose(h, g[f])) { g[f].jqxWindow("closeWindow", "close"); g.splice(f, 1) } } if (this._toClose(h, e)) { e.jqxWindow("closeWindow", "close"); a.data(document.body, "jqxwindow-modal", []) } a.data(document.body, "jqxwindows-list", g) }, setTitle: function (e) { a.jqx.utilities.html(this._headerContentWrapper, e); this.title = e; this._performLayout() }, setContent: function (f) { this._contentInitialized = false; var e = this._content, g = false; while (!g) { e.css("height", "auto"); e.css("width", "auto"); if (e.is(".jqx-window")) { g = true } else { e = e.parent() } } a.jqx.utilities.html(this._content, f); this._performLayout() }, disable: function () { this.disabled = true; this._removeEventHandlers(); this._header.addClass(this.toThemeProperty("jqx-window-header-disabled")); this._closeButton.addClass(this.toThemeProperty("jqx-window-close-button-disabled")); this._collapseButton.addClass(this.toThemeProperty("jqx-window-collapse-button-disabled")); this._content.addClass(this.toThemeProperty("jqx-window-content-disabled")); this.host.addClass(this.toThemeProperty("jqx-window-disabled")); this.host.addClass(this.toThemeProperty("jqx-fill-state-disabled")); this._removeResize() }, enable: function () { if (this.disabled) { this._addEventHandlers(); this._header.removeClass(this.toThemeProperty("jqx-window-header-disabled")); this._content.removeClass(this.toThemeProperty("jqx-window-content-disabled")); this._closeButton.removeClass(this.toThemeProperty("jqx-window-close-button-disabled")); this._collapseButton.removeClass(this.toThemeProperty("jqx-window-collapse-button-disabled")); this.host.removeClass(this.toThemeProperty("jqx-window-disabled")); this.host.removeClass(this.toThemeProperty("jqx-fill-state-disabled")); this.disabled = false; this._initializeResize() } }, isOpen: function () { return this._visible }, closeWindow: function (f) { var e = this; f = (typeof f === "undefined") ? this.closeButtonAction : f; this.hide(function () { if (f === "close") { e._destroy() } }) }, bringToFront: function () { var f = a.data(document.body, "jqxwindows-list"); if (this.isModal) { f = a.data(document.body, "jqxwindows-modallist"); this._fixWindowZIndex("modal-hide"); this._fixWindowZIndex("modal-show"); return } var l = f[f.length - 1], k = parseInt(l.css("z-index"), 10), g = this._indexOf(this.host, f); for (var e = f.length - 1; e > g; e -= 1) { var h = parseInt(f[e].css("z-index"), 10) - 1; f[e].css("z-index", h) } this.host.css("z-index", k); this._sortByStyle("z-index", f) }, hide: function (h, g, e) { if (this.closing) { var f = this.closing(); if (f == false) { return } } g = g || this.closeAnimationDuration; switch (this.animationType) { case "none": this.host.css("display", "none"); break; case "fade": this.host.fadeOut(g, function () { if (h instanceof Function) { h() } }); case "slide": this.host.slideUp(g, function () { if (h instanceof Function) { h() } }); case "combined": this.host.hide(g, function () { if (h instanceof Function) { h() } }) } this._visible = false; if (this.isModal) { this._modalBackground.hide(); this._fixWindowZIndex("modal-hide") } if (e !== true) { this._raiseEvent(1); this._raiseEvent(8) } }, open: function (f, e) { this.show(f, e) }, close: function (g, f, e) { this.hide(g, f, e) }, show: function (h, g) { this._setDialogResult("none"); g = g || this.showAnimationDuration; switch (this.animationType) { case "none": this.host.css("display", "block"); break; case "fade": this.host.fadeIn(g, function () { if (h instanceof Function) { h() } }); break; case "slide": this.host.slideDown(g, function () { if (h instanceof Function) { h() } }); break; case "combined": this.host.show(g, function () { if (h instanceof Function) { h() } }); break } if (this.isModal) { this._modalBackground.show(); this._fixWindowZIndex("modal-show") } var f = this; if (!this._visible) { if (g > 150 && this.animationType != "none") { setTimeout(function () { if (!f._contentInitialized) { if (f.initContent) { f.initContent(); f._contentInitialized = true } } f._raiseEvent(7); f._raiseEvent(9) }, g - 150) } else { if (!f._contentInitialized) { if (f.initContent) { f.initContent(); f._contentInitialized = true } } this._raiseEvent(7); f._raiseEvent(9) } } this._visible = true; this._performLayout(); if (this.autoFocus) { var e = function () { if (!f._isTouchDevice) { f._content.focus() } }; e(); setTimeout(function () { e() }, 100) } }, _getTabbables: function () { var f = this._content.find("*"); var e = new Array(); a.each(f, function () { if (d(this)) { e[e.length] = this } }); return e }, move: function (q, p, e, h) { var g = 0, f = 0, n, k, i, q = parseInt(q, 10), p = parseInt(p, 10); if (a.jqx.browser.msie) { if (a(window).width() > a(document).width() && !this.dragArea) { f = this._SCROLL_WIDTH } if (a(window).height() < a(document).height() && document.documentElement.clientWidth > document.documentElement.scrollWidth && !this.dragArea) { g = this._SCROLL_WIDTH } } n = this._validateCoordinates(q, p, f, g); if (parseInt(this.host.css("left"), 10) !== n.x || parseInt(this.host.css("top"), 10) !== n.y) { if (e) { var m = a.jqx.mobile.getTouches(e); var l = m[0]; var o = a.jqx.position(e); k = o.left; i = o.top } if (k == undefined) { k = q } if (i == undefined) { i = p } if (h !== false) { this._raiseEvent(2, n.x, n.y, k, i) } } this.element.style.left = n.x + "px"; this.element.style.top = n.y + "px"; this._moved = true } }); function c(g, e) { var k = g.nodeName.toLowerCase(); if ("area" === k) { var i = g.parentNode, h = i.name, f; if (!g.href || !h || i.nodeName.toLowerCase() !== "map") { return false } f = a("img[usemap=#" + h + "]")[0]; return !!f && b(f) } return (/input|select|textarea|button|object/.test(k) ? !g.disabled : "a" == k ? g.href || e : e) && b(g) } function b(e) { return !a(e).parents().andSelf().filter(function () { return a.css(this, "visibility") === "hidden" || a.expr.filters.hidden(this) }).length } function d(g) { var e = a.attr(g, "tabindex"), f = isNaN(e); return (f || e >= 0) && c(g, !f) } }(jqxBaseFramework)); (function (b) { var a = (function (c) { return { resizeConfig: function () { this.resizeTarget = null; this.resizeIndicatorSize = 5; this.resizeTargetChildren = null; this.isResizing = false; this.resizeArea = false; this.minWidth = 1; this.maxWidth = 100; this.minHeight = 1; this.maxHeight = 100; this.resizeParent = null; this.enableResize = true; this._cursorBackup; this._resizeEvents = ["resizing", "resized", "resize"]; this._resizeMouseDown = false; this._resizeCurrentMode = null; this._mouseResizePosition = {}; this._resizeMethods = null; this._SCROLL_WIDTH = 21 }, _resizeExceptions: { invalidTarget: "Invalid target!", invalidMinHeight: "Invalid minimal height!", invalidMaxHeight: "Invalid maximum height!", invalidMinWidth: "Invalid minimum width!", invalidMaxWidth: "Invalid maximum width!", invalidIndicatorSize: "Invalid indicator size!", invalidSize: "Invalid size!" }, removeResize: function () { if (this.resizeTarget) { var f = c(this.resizeTarget.children(".jqx-resize")); f.detach(); var e = f.children(); this._removeResizeEventListeners(); for (var d = 0; d < e.length; d += 1) { c(e[d]).detach(); this.resizeTarget.append(e[d]) } f.remove() } }, initResize: function (d) { this.resizeConfig(); this.resizeTarget = c(d.target); this.resizeIndicatorSize = d.indicatorSize || 10; this.maxWidth = d.maxWidth || 100; this.minWidth = d.minWidth || 1; this.maxHeight = d.maxHeight || 100; this.minHeight = d.minHeight || 1; this.resizeParent = d.resizeParent; this._parseResizeParentProperties(); this._validateResizeProperties(); this._validateResizeTargetDimensions(); this._getChildren(this.resizeTarget.maxWidth, this.resizeTarget.minWidth, this.resizeTarget.maxHeight, this.resizeTarget.minHeight, d.alsoResize); this._refreshResize(); this._cursorBackup = this.resizeTarget.css("cursor"); if (this._cursorBackup === "auto") { this._cursorBackup = "default" } }, _validateResizeTargetDimensions: function () { this.resizeTarget.maxWidth = this.maxWidth; this.resizeTarget.minWidth = ((3 * this.resizeIndicatorSize > this.minWidth) ? 3 * this.resizeIndicatorSize : this.minWidth); this.resizeTarget.maxHeight = this.maxHeight; this.resizeTarget.minHeight = ((3 * this.resizeIndicatorSize > this.minHeight) ? 3 * this.resizeIndicatorSize : this.minHeight) }, _parseResizeParentProperties: function () { if (this.resizeParent) { this.resizeParent.left = parseInt(this.resizeParent.left, 10); this.resizeParent.top = parseInt(this.resizeParent.top, 10); this.resizeParent.width = parseInt(this.resizeParent.width, 10); this.resizeParent.height = parseInt(this.resizeParent.height, 10) } }, _getChildren: function (h, e, g, i, d) { this.resizeTargetChildren = c(d); this.resizeTargetChildren.toArray(); var f = this.resizeTargetChildren.length; while (f) { f -= 1; this.resizeTargetChildren[f] = c(this.resizeTargetChildren[f]) } }, _refreshResize: function () { this._renderResize(); this._performResizeLayout(); this._removeResizeEventListeners(); this._addResizeEventHandlers() }, _renderResize: function () { this.resizeTarget.wrapInner(c("<div></div>")); this._resizeWrapper = this.resizeTarget.children(0); this._resizeWrapper.addClass("jqx-resize"); this._resizeWrapper.addClass("jqx-rc-all"); this._resizeWrapper.css("z-index", 8000) }, _performResizeLayout: function () { this._resizeWrapper.height(this.resizeTarget.height()); this._resizeWrapper.width(this.resizeTarget.width()) }, _removeResizeEventListeners: function () { var d = this.resizeTarget.attr("id"); this.removeHandler(this._resizeWrapper, "mousemove.resize" + d); this.removeHandler(this._resizeWrapper, "mousedown.resize" + d); this.removeHandler(c(document), "mousemove.resize" + d); this.removeHandler(c(document), "mouseup.resize" + d) }, _addResizeEventHandlers: function () { var g = this.resizeTarget.attr("id"); var d = this; this.addHandler(this._resizeWrapper, "mousemove.resize." + g, function (h) { d._resizeCursorChangeHandler(d, h) }); this.addHandler(this._resizeWrapper, "mousedown.resize." + g, function (h) { d._resizeMouseDownHandler(d, h) }); this.addHandler(c(document), "mousemove.resize." + g, function (h) { return d._resizeHandler(d, h) }); this.addHandler(c(document), "mouseup.resize." + g, function (h) { d._stopResizing(d, h) }); try { if (document.referrer != "" || window.frameElement) { var f = function (h) { d._stopResizing(d, h) }; if (window.top.document.addEventListener) { window.top.document.addEventListener("mouseup", f, false) } else { if (window.top.document.attachEvent) { window.top.document.attachEvent("onmouseup", f) } } } } catch (e) { } }, _stopResizing: function (d, e) { if (d.enableResize) { if (d.isResizing) { d._raiseResizeEvent(1) } d._resizeMouseDown = false; d.isResizing = false; d._resizeDirection = null; if (d.resizeTarget) { d.resizeTarget.removeClass("jqx-disableselect") } } if (d._cursorBackup == "undefined") { d._cursorBackup = "default" } if (d._resizeWrapper) { d._resizeWrapper.css("cursor", d._cursorBackup) } }, _resizeHandler: function (d, e) { if (d.enableResize && !d.collapsed) { if (d.isResizing && d._resizeDirection) { if (e.which === 0 && c.jqx.browser.msie && c.jqx.browser.version < 9) { d._stopResizing(e) } d._performResize(e.pageX, e.pageY); return false } else { return d._resizeCaptureCursor(e.pageX, e.pageY) } } }, _resizeCaptureCursor: function (e, d) { if (this._resizeMouseDown && !this.isResizing && this._resizeDirection) { if ((e + 3 < this._mouseResizePosition.x || e - 3 > this._mouseResizePosition.x) || (d + 3 < this._mouseResizePosition.y || d - 3 > this._mouseResizePosition.y)) { this._changeCursor(e - parseInt(this.resizeTarget.css("left")), d - parseInt(this.resizeTarget.css("top"))); this._mouseResizePosition = { x: e, y: d }; this._prepareResizeMethods(this._resizeDirection); this._resizeBackupData(); this.isResizing = true; this.resizeTarget.addClass("jqx-disableselect"); return false } } }, _resizeBackupData: function () { this.resizeTarget.lastWidth = this.resizeTarget.width(); this.resizeTarget.lastHeight = this.resizeTarget.height(); this.resizeTarget.x = parseInt(this.resizeTarget.css("left"), 10); this.resizeTarget.y = parseInt(this.resizeTarget.css("top"), 10); this._resizeBackupChildrenSize() }, _resizeBackupChildrenSize: function () { var d = this.resizeTargetChildren.length, e; while (d) { d -= 1; e = this.resizeTargetChildren[d]; this.resizeTargetChildren[d].lastWidth = e.width(); this.resizeTargetChildren[d].lastHeight = e.height() } }, _performResize: function (g, f) { var e = g - this._mouseResizePosition.x, d = f - this._mouseResizePosition.y; if (this._resizeDirection) { this._resize(this.resizeTarget, e, d) } }, _resizeCursorChangeHandler: function (d, e) { if (d.enableResize && !d.collapsed) { if (!d.isResizing) { d._changeCursor(e.pageX - parseInt(d.resizeTarget.css("left")), e.pageY - parseInt(d.resizeTarget.css("top"))) } } }, _resizeMouseDownHandler: function (d, e) { if (d.enableResize) { if (d._resizeDirection !== null) { d._resizeMouseDown = true; d._mouseResizePosition.x = e.pageX; d._mouseResizePosition.y = e.pageY; e.preventDefault() } } }, _validateResizeProperties: function () { try { if (!this.resizeTarget || this.resizeTarget.length !== 1) { throw new Error(this._resizeExceptions.invalidTarget) } if (this.minHeight < 0 || isNaN(parseInt(this.minHeight))) { throw new Error(this._resizeExceptions.invalidMinHeight) } if (this.maxHeight <= 0 || isNaN(parseInt(this.maxHeight))) { throw new Error(this._resizeExceptions.invalidMaxHeight) } if (this.minWidth < 0 || isNaN(parseInt(this.minWidth))) { throw new Error(this._resizeExceptions.invalidMinWidth) } if (this.maxWidth < 0 || isNaN(parseInt(this.maxWidth))) { throw new Error(this._resizeExceptions.invalidMaxWidth) } if (this.resizeIndicatorSize < 0 || isNaN(parseInt(this.resizeIndicatorSize))) { throw new Error(this._resizeExceptions.invalidIndicatorSize) } if (this.minHeight > this.maxHeight || this.minWidth > this.maxWidth) { throw new Error(this._resizeExceptions.invalidSize) } } catch (d) { alert(d) } }, _changeCursor: function (d, e) { if (this.isResizing || this._resizeMouseDown) { return } this.resizeArea = true; if (d <= this.resizeIndicatorSize && d >= 0 && e <= this.resizeIndicatorSize && e > 0) { this._resizeWrapper.css("cursor", "nw-resize"); this._resizeDirection = "topleft" } else { if (e <= this.resizeIndicatorSize && e > 0 && d >= this.resizeTarget.width() - this.resizeIndicatorSize) { this._resizeWrapper.css("cursor", "ne-resize"); this._resizeDirection = "topright" } else { if (e >= this.resizeTarget.height() - this.resizeIndicatorSize && e < this.resizeTarget.height() && d <= this.resizeIndicatorSize && d >= 0) { this._resizeWrapper.css("cursor", "sw-resize"); this._resizeDirection = "bottomleft" } else { if (e >= this.resizeTarget.height() - this.resizeIndicatorSize && e < this.resizeTarget.height() && d >= this.resizeTarget.width() - this.resizeIndicatorSize && d < this.resizeTarget.width()) { this._resizeWrapper.css("cursor", "se-resize"); this._resizeDirection = "bottomright" } else { if (d <= this.resizeIndicatorSize && d >= 0) { this._resizeWrapper.css("cursor", "e-resize"); this._resizeDirection = "left" } else { if (e <= this.resizeIndicatorSize && e > 0) { this._resizeWrapper.css("cursor", "n-resize"); this._resizeDirection = "top" } else { if (e >= this.resizeTarget.height() - this.resizeIndicatorSize && e < this.resizeTarget.height()) { this._resizeWrapper.css("cursor", "n-resize"); this._resizeDirection = "bottom" } else { if (d >= this.resizeTarget.width() - this.resizeIndicatorSize && d < this.resizeTarget.width()) { this._resizeWrapper.css("cursor", "e-resize"); this._resizeDirection = "right" } else { this._resizeWrapper.css("cursor", this._cursorBackup); this._resizeDirection = null; this.resizeArea = false } } } } } } } } }, _prepareResizeMethods: function (d) { this._resizeMethods = []; if (d.indexOf("left") >= 0) { this._resizeMethods.push(this._resizeLeft) } if (d.indexOf("top") >= 0) { this._resizeMethods.push(this._resizeTop) } if (d.indexOf("right") >= 0) { this._resizeMethods.push(this._resizeRight) } if (d.indexOf("bottom") >= 0) { this._resizeMethods.push(this._resizeBottom) } }, _validateResize: function (g, d, h, f, e) { if (h === "horizontal" || h === "both") { return this._validateWidth(g, f, e) } else { if (h === "vertical" || h === "both") { return this._validateHeight(d, f, e) } } return { result: false, fix: 0 } }, _getParent: function () { if (this.resizeParent !== null && this.resizeParent !== "undefined" && this.resizeParent.height && this.resizeParent.width && this.resizeParent.top && this.resizeParent.left) { return this.resizeParent } return { left: 0, top: 0, width: c(document).width(), height: c(document).height() } }, _validateHeight: function (f, k, i) { var l = 0, e = 2, d = false, h = f, g = this._getParent(); if (c(window).width() > c(document).width() && c.jqx.browser.msie && g.height === c(document).height()) { l = this._SCROLL_WIDTH } if (i === "bottom" && (f + k.position().top + l + e > g.height + g.top)) { return { fix: g.height - k.position().top - l - e + g.top, result: false } } if (i === "top" && k.lastHeight - f + k.y < g.top) { return { fix: f + (k.lastHeight - f + k.y) - g.top, result: false } } if (f < k.minHeight) { return { fix: k.minHeight, result: false } } if (f > k.maxHeight) { return { fix: k.maxHeight, result: false } } return { result: true, fix: f } }, _validateWidth: function (k, i, h) { var l = 0, e = 2, d = false, g = k, f = this._getParent(); if (c(window).height() < c(document).height() && c.jqx.browser.msie && document.documentElement.clientWidth >= document.documentElement.scrollWidth && f.width === c(document).width()) { l = this._SCROLL_WIDTH } if (h === "right" && (k + i.position().left + l + e > f.width + f.left)) { return { fix: f.width - i.position().left - l - e + f.left, result: false } } if (h === "left" && (i.lastWidth - k + i.x < f.left)) { return { fix: k + (i.lastWidth - k + i.x) - f.left, result: false } } if (k < i.minWidth) { return { fix: i.minWidth, result: false } } if (k > i.maxWidth) { return { fix: i.maxWidth, result: false } } return { result: true, fix: k } }, _resize: function (h, e, d) { var l = this._resizeDirection; var k = this._resizeMethods.length; for (var g = 0; g < k; g++) { if (this._resizeMethods[g] instanceof Function) { var f = { element: h, x: e, y: d, self: this }; this._resizeMethods[g](f) } } this._performResizeLayout() }, resize: function (g, d) { if (this.resizable) { var f = g - this.host.width(); var e = d - this.host.height(); var h = "right"; if (e != 0) { h = "bottom" } this._resizeDirection = h; this._prepareResizeMethods(this._resizeDirection); this._resizeBackupData(); this.isResizing = true; this._resize(this.resizeTarget, f, e); this.isResizing = false } }, _setResizeChildrenSize: function (e, f) { var h = this.resizeTargetChildren.length; while (h) { h--; if (f === "width") { var g = this.resizeTargetChildren[h].lastWidth - (this.resizeTarget.lastWidth - e); if (g < this.resizeTarget.maxWidth && g > 0) { this.resizeTargetChildren[h].width(g) } } else { var d = this.resizeTargetChildren[h].lastHeight - (this.resizeTarget.lastHeight - e); if (d < this.resizeTarget.maxHeight && d > 0) { this.resizeTargetChildren[h].height(d) } } } }, _resizeRight: function (e) { var f = e.element.lastWidth + e.x, d = e.self._validateResize(f, 0, "horizontal", e.element, "right"); if (!d.result) { f = d.fix } if (e.element.width() !== f) { e.self._setResizeChildrenSize(f, "width"); e.element.width(f); e.self._raiseResizeEvent(0) } return f }, _resizeLeft: function (f) { var g = f.element.lastWidth - f.x, e = f.self._validateResize(g, 0, "horizontal", f.element, "left"), d = f.element.x + f.x; if (!e.result) { d = f.element.x + (f.element.lastWidth - e.fix); g = e.fix; return } if (f.element.width() !== g) { f.self._setResizeChildrenSize(g, "width"); f.element.width(g); f.element.css("left", d); f.self._raiseResizeEvent(0) } return g }, _resizeBottom: function (f) { var e = f.element.lastHeight + f.y, d = f.self._validateResize(0, e, "vertical", f.element, "bottom"); if (!d.result) { e = d.fix } if (f.element.height() !== e) { f.self._setResizeChildrenSize(e, "height"); f.element.height(e); f.self._raiseResizeEvent(0) } return e }, _resizeTop: function (f) { var e = f.element.lastHeight - f.y, d = f.self._validateResize(0, e, "vertical", f.element, "top"), g = f.element.y + f.y; if (!d.result) { g = f.element.y + (f.element.lastHeight - d.fix); e = d.fix; return } if (f.element.height() !== e) { f.self._setResizeChildrenSize(e, "height"); f.element.height(e); f.element.css("top", g); f.self._raiseResizeEvent(0) } return e }, _raiseResizeEvent: function (f) { var e = this._resizeEvents[f], g = c.Event(e), d = {}; d.width = parseInt(this.resizeTarget[0].style.width); d.height = parseInt(this.resizeTarget[0].style.height); g.args = d; if (f == 0) { var e = this._resizeEvents[2], h = c.Event(e); h.args = d; this.resizeTarget.trigger(h) } return this.resizeTarget.trigger(g) } } }(jqxBaseFramework)); b.extend(b.jqx._jqxWindow.prototype, a) }(jqxBaseFramework));

/*
jqxfileupload
*/

(
    function (a) {
        a.jqx.jqxWidget("jqxFileUpload", "", {});
        a.extend(
            a.jqx._jqxFileUpload.prototype,
            {
                defineInstance: function () {
                    var b = {
                        width: null,
                        height: "auto",
                        uploadUrl: "",
                        fileInputName: "",
                        autoUpload: false,
                        multipleFilesUpload: true,
                        accept: null,
                        browseTemplate: "",
                        uploadTemplate: "",
                        cancelTemplate: "",
                        localization: null,
                        renderFiles: null,
                        disabled: false,
                        rtl: false,
                        events: ["select", "remove", "uploadStart", "uploadEnd"]
                    };
                    a.extend(true, this, b)
                },
                createInstance: function () {
                    var b = this;
                    if (b.host.jqxButton === undefined) {
                        throw new Error("jqxFileUpload: Missing reference to jqxbuttons.js")
                    }
                    if (a.jqx.browser.msie) {
                        if (a.jqx.browser.version < 11) {
                            b._ieOldWebkit = true;
                            if (a.jqx.browser.version < 8) {
                                b._ie7 = true
                            }
                        }
                    } else {
                        if (a.jqx.browser.webkit) {
                            b._ieOldWebkit = true
                        }
                    }
                    b._fluidWidth = typeof b.width === "string" && b.width.charAt(b.width.length - 1) === "%";
                    b._fluidHeight = typeof b.height === "string" && b.height.charAt(b.height.length - 1) === "%";
                    b._render(true)
                },
                _render: function (b) {
                    var c = this; c._setSize();
                    c._addClasses();
                    if (b === true) {
                        c._appendElements()
                    } else {
                        c._removeHandlers()
                    }
                    c._addHandlers();
                    if (c._ie7) {
                        c._borderAndPadding("width", c.host);
                        if (c.height !== "auto") {
                            c._borderAndPadding("height", c.host)
                        }
                    }
                    a.jqx.utilities.resize(c.host, null, true);
                    a.jqx.utilities.resize(c.host, function () {
                        if (c._fluidWidth) {
                            if (c._ie7) {
                                c.host.css("width", c.width);
                                c._borderAndPadding("width", c.host)
                            }
                            for (var f = 0; f < c._fileRows.length; f++) {
                                var d = c._fileRows[f];
                                var h = d.fileRow;
                                if (c._ie7) {
                                    h.css("width", "100%"); c._borderAndPadding("width", h)
                                }
                                if (!c.renderFiles) {
                                    c._setMaxWidth(d)
                                }
                            }
                            if (c.rtl && c._ieOldWebkit) {
                                for (var e = 0; e < c._forms.length; e++) {
                                    var g = c._browseButton.position();
                                    c._forms[e].form.css({ left: g.left, top: g.top })
                                }
                            }
                        }
                        if (c._ie7 && c._fluidHeight) {
                            c.host.css("height", c.height);
                            c._borderAndPadding("height", c.host)
                        }
                    })
                },
                render: function () {
                    this._render(false)
                },
                refresh: function (b) {
                    if (b !== true) { this._render(false) }
                }, destroy: function () {
                    var b = this; b.cancelAll();
                    b._removeHandlers(true);
                    b.host.remove()
                },
                browse: function () {
                    if (a.jqx.browser.msie && a.jqx.browser.version < 10) { return }
                    var b = this;
                    if (b.multipleFilesUpload === true || (b.multipleFilesUpload === false && b._fileRows.length === 0)) {
                        b._forms[b._forms.length - 1].fileInput.click()
                    }
                },
                _uploadFile: function (b) {
                    var c = this;
                    if (c._uploadQueue.length === 0) {
                        c._uploadQueue.push(b)
                    }
                    if (!c.renderFiles) {
                        b.uploadFile.add(b.cancelFile).hide();
                        b.loadingElement.show()
                    }
                    b.fileInput.attr("name", c.fileInputName);
                    c._raiseEvent("2", { file: b.fileName });
                    b.form[0].submit();
                    c._fileObjectToRemove = b
                },
                uploadFile: function (b) {
                    var c = this; c._uploadFile(c._fileRows[b])
                },
                uploadAll: function () {
                    var c = this; if (c._fileRows.length > 0) {
                        for (var b = c._fileRows.length - 1; b >= 0; b--) {
                            c._uploadQueue.push(c._fileRows[b])
                        }
                        c._uploadFile(c._fileRows[0])
                    }
                },
                cancelFile: function (b) {
                    var c = this; c._removeSingleFileRow(c._fileRows[b])
                },
                cancelAll: function () {
                    var c = this; if (c._fileRows.length > 0) {
                        for (var b = 0; b < c._fileRows.length; b++) {
                            c._removeFileRow(c._fileRows[b])
                        }
                        setTimeout(function () {
                            c._browseButton.css("margin-bottom", 0)
                        }, 400);
                        c._fileRows.length = 0;
                        c._hideButtons(true)
                    }
                },
                propertyChangedHandler: function (e, m, c, k) {
                    var b = e.element.id;
                    if (m === "localization") {
                        if (k.browseButton && (!c || k.browseButton !== c.browseButton)) {
                            e._browseButton.text(k.browseButton);
                            e._browseButton.jqxButton({ width: "auto" })
                        }
                        if (k.uploadButton && (!c || k.uploadButton !== c.uploadButton)) {
                            e._uploadButton.text(k.uploadButton);
                            e._uploadButton.jqxButton({ width: "auto" })
                        }
                        if (k.cancelButton && (!c || k.cancelButton !== c.cancelButton)) {
                            e._cancelButton.text(k.cancelButton);
                            e._cancelButton.jqxButton({ width: "auto" })
                        }
                        if (!e.renderFiles) { if (k.uploadFileTooltip && (!c || k.uploadFileTooltip !== c.uploadFileTooltip)) { a("#" + b + " .jqx-file-upload-file-upload").attr("title", k.uploadFileTooltip) } if (k.uploadFileTooltip && (!c || k.cancelFileTooltip !== c.cancelFileTooltip)) { a("#" + b + " .jqx-file-upload-file-cancel").attr("title", k.cancelFileTooltip) } } return
                    }
                    if (k !== c) {
                        switch (m) {
                            case "width":
                                e.host.css("width", k);
                                if (e._ie7) {
                                    e._borderAndPadding("width", e.host);
                                    for (var d = 0; d < e._fileRows.length; d++) {
                                        var n = e._fileRows[d].fileRow;
                                        n.css("width", "100%");
                                        e._borderAndPadding("width", n)
                                    }
                                }
                                e._fluidWidth = typeof k === "string" && k.charAt(k.length - 1) === "%";
                                return;
                            case "height":
                                e.host.css("height", k);
                                if (e._ie7) {
                                    e._borderAndPadding("height", e.host)
                                }
                                e._fluidHeight = typeof k === "string" && k.charAt(k - 1) === "%";
                                return;
                            case "uploadUrl":
                                for (var g = 0; g < e._forms.length; g++) {
                                    e._forms[g].form.attr("action", k)
                                }
                                return;
                            case "accept":
                                for (var f = 0; f < e._forms.length; f++) {
                                    e._forms[f].fileInput.attr("accept", k)
                                }
                                return;
                            case "theme":
                                a.jqx.utilities.setTheme(c, k, e.host);
                                e._browseButton.jqxButton({ theme: k });
                                e._uploadButton.jqxButton({ theme: k });
                                e._cancelButton.jqxButton({ theme: k });
                                return;
                            case "browseTemplate":
                                e._browseButton.jqxButton({ template: k });
                                return;
                            case "uploadTemplate":
                                e._uploadButton.jqxButton({ template: k });
                                return;
                            case "cancelTemplate":
                                e._cancelButton.jqxButton({ template: k });
                                return;
                            case "disabled":
                                e._browseButton.jqxButton({ disabled: k });
                                e._uploadButton.jqxButton({ disabled: k });
                                e._cancelButton.jqxButton({ disabled: k });
                                if (k === true) {
                                    e.host.addClass(e.toThemeProperty("jqx-fill-state-disabled"))
                                } else {
                                    e.host.removeClass(e.toThemeProperty("jqx-fill-state-disabled"))
                                }
                                return;
                            case "rtl":
                                var h = function (l) {
                                    var o = l ? "addClass" : "removeClass";
                                    e._browseButton[o](e.toThemeProperty("jqx-file-upload-button-browse-rtl"));
                                    e._cancelButton[o](e.toThemeProperty("jqx-file-upload-button-cancel-rtl"));
                                    e._uploadButton[o](e.toThemeProperty("jqx-file-upload-button-upload-rtl"));
                                    if (a.jqx.browser.msie && a.jqx.browser.version > 8) {
                                        e._uploadButton[o](e.toThemeProperty("jqx-file-upload-button-upload-rtl-ie"))
                                    }
                                    for (var i = 0; i < e._fileRows.length; i++) {
                                        var j = e._fileRows[i];
                                        j.fileNameContainer[o](e.toThemeProperty("jqx-file-upload-file-name-rtl"));
                                        j.cancelFile[o](e.toThemeProperty("jqx-file-upload-file-cancel-rtl"));
                                        j.uploadFile[o](e.toThemeProperty("jqx-file-upload-file-upload-rtl"));
                                        j.loadingElement[o](e.toThemeProperty("jqx-file-upload-loading-element-rtl"))
                                    }
                                };
                                h(k);
                                return
                        }
                    }
                },
                _raiseEvent: function (f, c) {
                    if (c === undefined) {
                        c = { owner: null }
                    }
                    var d = this.events[f];
                    c.owner = this;
                    var e = new a.Event(d);
                    e.owner = this; e.args = c;
                    if (e.preventDefault) {
                        e.preventDefault()
                    }
                    var b = this.host.trigger(e);
                    return b
                },
                _setSize: function () {
                    var b = this; b.host.css("width", b.width);
                    b.host.css("height", b.height)
                },
                _borderAndPadding: function (d, c) {
                    var b; if (d === "width") {
                        b = parseInt(c.css("border-left-width"), 10) + parseInt(c.css("border-right-width"), 10) + parseInt(c.css("padding-left"), 10) + parseInt(c.css("padding-right"), 10)
                    } else {
                        b = parseInt(c.css("border-top-width"), 10) + parseInt(c.css("border-bottom-width"), 10) + parseInt(c.css("padding-top"), 10) + parseInt(c.css("padding-bottom"), 10)
                    }
                    c.css(d, c[d]() - b)
                },
                _addClasses: function () {
                    var b = this; b.host.addClass(b.toThemeProperty("jqx-widget jqx-widget-content jqx-rc-all jqx-file-upload"));
                    if (b.disabled === true) {
                        b.host.addClass(b.toThemeProperty("jqx-fill-state-disabled"))
                    }
                },
                _appendElements: function () {
                    var g = this, c = "Browse", b = 90, h = "Upload All", e = 90, d = "Cancel All", f = 90;
                    var i = g.element.id;
                    if (g.localization) {
                        if (g.localization.browseButton) {
                            c = g.localization.browseButton;
                            b = "auto"
                        }
                        if (g.localization.uploadButton) {
                            h = g.localization.uploadButton; e = "auto"
                        }
                        if (g.localization.cancelButton) {
                            d = g.localization.cancelButton; f = "auto"
                        }
                    }
                    g._browseButton = a('<button id="' + i + 'BrowseButton" class="' + g.toThemeProperty("jqx-file-upload-button-browse") + '">' + c + "</button>");
                    g.host.append(g._browseButton);
                    g._browseButton.jqxButton({ theme: g.theme, width: b, template: g.browseTemplate, disabled: g.disabled });
                    g._browseButton.after('<div style="clear: both;"></div>');
                    g._bottomButtonsContainer = a('<div class="' + g.toThemeProperty("jqx-file-upload-buttons-container") + '"></div>');
                    g.host.append(g._bottomButtonsContainer);
                    g._uploadButton = a('<button id="' + i + 'UploadButton" class="' + g.toThemeProperty("jqx-file-upload-button-upload") + '">' + h + "</button>");
                    g._bottomButtonsContainer.append(g._uploadButton);
                    g._uploadButton.jqxButton({ theme: g.theme, width: e, template: g.uploadTemplate, disabled: g.disabled });
                    g._cancelButton = a('<button id="' + i + 'CancelButton" class="' + g.toThemeProperty("jqx-file-upload-button-cancel") + '">' + d + "</button>");
                    g._bottomButtonsContainer.append(g._cancelButton);
                    g._cancelButton.jqxButton({ theme: g.theme, width: f, template: g.cancelTemplate, disabled: g.disabled });
                    g._bottomButtonsContainer.after('<div style="clear: both;"></div>');
                    if (g.rtl) {
                        g._browseButton.addClass(g.toThemeProperty("jqx-file-upload-button-browse-rtl"));
                        g._cancelButton.addClass(g.toThemeProperty("jqx-file-upload-button-cancel-rtl")); g._uploadButton.addClass(g.toThemeProperty("jqx-file-upload-button-upload-rtl")); if (a.jqx.browser.msie && a.jqx.browser.version > 8) { g._uploadButton.addClass(g.toThemeProperty("jqx-file-upload-button-upload-rtl-ie")) }
                    }
                    g._uploadIframe = a('<iframe name="' + i + 'Iframe" class="' + g.toThemeProperty("jqx-file-upload-iframe") + '" src=""></iframe>');
                    g.host.append(g._uploadIframe);
                    g._iframeInitialized = false;
                    g._uploadQueue = [];
                    g._forms = [];
                    g._addFormAndFileInput();
                    g._fileRows = []
                },
                _addFormAndFileInput: function () {
                    var f = this;
                    var i = f.element.id;
                    var e = a('<form class="' + f.toThemeProperty("jqx-file-upload-form") + '" action="' + f.uploadUrl + '" target="' + i + 'Iframe" method="post" enctype="multipart/form-data"></form>');
                    f.host.append(e);
                    var d = a('<input type="file" class="' + f.toThemeProperty("jqx-file-upload-file-input") + '" />');
                    if (f.accept) { d.attr("accept", f.accept) }
                    if (f.multipleFilesUpload) {
                        d.attr("multiple", f.multipleFilesUpload)
                    }
                    e.append(d);
                    if (f._ieOldWebkit) {
                        var c = f._browseButton.position();
                        var g = f._browseButton.outerWidth();
                        var h = f._browseButton.outerHeight();
                        var b = f.rtl && f._ie7 ? 12 : 0; e.css({ left: c.left - b, top: c.top, width: g, height: h });
                        e.addClass(f.toThemeProperty("jqx-file-upload-form-ie9"));
                        d.addClass(f.toThemeProperty("jqx-file-upload-file-input-ie9"));
                        f.addHandler(e, "mouseenter.jqxFileUpload" + i, function () {
                            f._browseButton.addClass(f.toThemeProperty("jqx-fill-state-hover"))
                        });
                        f.addHandler(e, "mouseleave.jqxFileUpload" + i, function () {
                            f._browseButton.removeClass(f.toThemeProperty("jqx-fill-state-hover"))
                        });
                        f.addHandler(e, "mousedown.jqxFileUpload" + i, function () {
                            f._browseButton.addClass(f.toThemeProperty("jqx-fill-state-pressed"))
                        });
                        f.addHandler(a(document), "mouseup.jqxFileUpload" + i, function () {
                            if (f._browseButton.hasClass("jqx-fill-state-pressed")) {
                                f._browseButton.removeClass(f.toThemeProperty("jqx-fill-state-pressed"))
                            }
                        })
                    }
                    f.addHandler(d, "change.jqxFileUpload" + i, function () {
                        var l = this.value, j;
                        if (!a.jqx.browser.mozilla) {
                            if (l.indexOf("fakepath") !== -1) {
                                l = l.slice(12)
                            } else {
                                l = l.slice(l.lastIndexOf("\\") + 1)
                            }
                        }
                        if (a.jqx.browser.msie && a.jqx.browser.version < 10) {
                            j = "IE9 and earlier do not support getting the file size."
                        } else {
                            j = this.files[0].size
                        }
                        var k = f._addFileRow(l, e, d, j);
                        if (f._fileRows.length === 1) {
                            f._browseButton.css("margin-bottom", "10px");
                            f._hideButtons(false)
                        }
                        if (f._ieOldWebkit) {
                            f.removeHandler(e, "mouseenter.jqxFileUpload" + i);
                            f.removeHandler(e, "mouseleave.jqxFileUpload" + i);
                            f.removeHandler(e, "mousedown.jqxFileUpload" + i)
                        }
                        f._addFormAndFileInput();
                        f.removeHandler(d, "change.jqxFileUpload" + i);
                        if (f.autoUpload === true) { f._uploadFile(k) }
                    });
                    if (f._ieOldWebkit === true) {
                        f.addHandler(d, "click.jqxFileUpload" + i, function (j) {
                            if (f.multipleFilesUpload === false && f._fileRows.length > 0) {
                                j.preventDefault()
                            }
                        })
                    }
                    f._forms.push({ form: e, fileInput: d })
                },
                _addFileRow: function (f, b, e, d) {
                    var h = this, l, g, m, j, n, i = "Cancel", k = "Upload File"; l = a('<div class="' + h.toThemeProperty("jqx-widget-content jqx-rc-all jqx-file-upload-file-row") + '"></div>'); if (h._fileRows.length === 0) { h._browseButton.after(l) } else { h._fileRows[h._fileRows.length - 1].fileRow.after(l) } if (!h.renderFiles) { g = a('<div class="' + h.toThemeProperty("jqx-widget-header jqx-rc-all jqx-file-upload-file-name") + '">' + f + "</div>"); l.append(g); if (h.localization) { if (h.localization.cancelFileTooltip) { i = h.localization.cancelFileTooltip } if (h.localization.uploadFileTooltip) { k = h.localization.uploadFileTooltip } } j = a('<div class="' + h.toThemeProperty("jqx-widget-header jqx-rc-all jqx-file-upload-file-cancel") + '" title="' + i + '"><div class="' + h.toThemeProperty("jqx-icon-close jqx-file-upload-icon") + '"></div></div>'); l.append(j); n = a('<div class="' + h.toThemeProperty("jqx-widget-header jqx-rc-all jqx-file-upload-file-upload") + '" title="' + k + '"><div class="' + h.toThemeProperty("jqx-icon-arrow-up jqx-file-upload-icon jqx-file-upload-icon-upload") + '"></div></div>'); l.append(n); m = a('<div class="' + h.toThemeProperty("jqx-file-upload-loading-element") + '"></div>'); l.append(m); if (h.rtl) { g.addClass(h.toThemeProperty("jqx-file-upload-file-name-rtl")); j.addClass(h.toThemeProperty("jqx-file-upload-file-cancel-rtl")); n.addClass(h.toThemeProperty("jqx-file-upload-file-upload-rtl")); m.addClass(h.toThemeProperty("jqx-file-upload-loading-element-rtl")) } h._setMaxWidth({ fileNameContainer: g, uploadFile: n, cancelFile: j }) } else { l.html(h.renderFiles(f)) } if (h._ie7) { h._borderAndPadding("width", l); h._borderAndPadding("height", l); if (!h.renderFiles) { h._borderAndPadding("height", g); h._borderAndPadding("height", n); h._borderAndPadding("height", j) } } var c = { fileRow: l, fileNameContainer: g, fileName: f, uploadFile: n, cancelFile: j, loadingElement: m, form: b, fileInput: e, index: h._fileRows.length }; h._addFileHandlers(c); h._fileRows.push(c); h._raiseEvent("0", { file: f, size: d }); return c
                },
                _setMaxWidth: function (c) {
                    var e = this; var f = c.cancelFile.outerWidth(true) + c.uploadFile.outerWidth(true); var b = e._ie7 ? 6 : 0; var d = e.host.width() - parseInt(e.host.css("padding-left"), 10) - parseInt(e.host.css("padding-right"), 10) - f - b - 7; c.fileNameContainer.css("max-width", d)
                },
                _addFileHandlers: function (b) {
                    var c = this; if (!c.renderFiles) { var d = c.element.id; c.addHandler(b.uploadFile, "mouseenter.jqxFileUpload" + d, function () { if (c.disabled === false) { b.uploadFile.addClass(c.toThemeProperty("jqx-fill-state-hover")) } }); c.addHandler(b.uploadFile, "mouseleave.jqxFileUpload" + d, function () { if (c.disabled === false) { b.uploadFile.removeClass(c.toThemeProperty("jqx-fill-state-hover")) } }); c.addHandler(b.uploadFile, "click.jqxFileUpload" + d, function () { if (c.disabled === false) { c._uploadFile(b) } }); c.addHandler(b.cancelFile, "mouseenter.jqxFileUpload" + d, function () { if (c.disabled === false) { b.cancelFile.addClass(c.toThemeProperty("jqx-fill-state-hover")) } }); c.addHandler(b.cancelFile, "mouseleave.jqxFileUpload" + d, function () { if (c.disabled === false) { b.cancelFile.removeClass(c.toThemeProperty("jqx-fill-state-hover")) } }); c.addHandler(b.cancelFile, "click.jqxFileUpload" + d, function () { if (c.disabled === false) { c._removeSingleFileRow(b) } }) }
                },
                _removeSingleFileRow: function (c) {
                    var d = this; d._removeFileRow(c); d._fileRows.splice(c.index, 1); if (d._fileRows.length === 0) { setTimeout(function () { d._browseButton.css("margin-bottom", 0) }, 400); d._hideButtons(true) } else { for (var b = 0; b < d._fileRows.length; b++) { d._fileRows[b].index = b } }
                },
                _removeFileRow: function (b) {
                    var c = this; var d = c.element.id; if (!c.renderFiles) { c.removeHandler(b.uploadFile, "mouseenter.jqxFileUpload" + d); c.removeHandler(b.uploadFile, "mouseleave.jqxFileUpload" + d); c.removeHandler(b.uploadFile, "click.jqxFileUpload" + d); c.removeHandler(b.cancelFile, "mouseenter.jqxFileUpload" + d); c.removeHandler(b.cancelFile, "mouseleave.jqxFileUpload" + d); c.removeHandler(b.cancelFile, "click.jqxFileUpload" + d) } b.fileRow.fadeOut(function () { b.fileRow.remove(); b.form.remove() }); c._raiseEvent("1", { file: b.fileName })
                },
                _hideButtons: function (b) {
                    var c = this; if (b === true) { c._bottomButtonsContainer.fadeOut() } else { c._bottomButtonsContainer.fadeIn() }
                },
                _addHandlers: function () {
                    var b = this;
                    var c = b.element.id;
                    if (!b._ieOldWebkit) {
                        b.addHandler(b._browseButton, "click.jqxFileUpload" + c, function () {
                            b.browse()
                        })
                    }
                    b.addHandler(b._uploadButton, "click.jqxFileUpload" + c, function () {
                        b.uploadAll()
                    });
                    b.addHandler(b._cancelButton, "click.jqxFileUpload" + c, function () {
                        b.cancelAll()
                    });
                    b.addHandler(b._uploadIframe, "load.jqxFileUpload" + c, function () {
                        if (a.jqx.browser.chrome || a.jqx.browser.webkit) {
                            b._iframeInitialized = true
                        }
                        if (b._iframeInitialized === false) {
                            b._iframeInitialized = true
                        } else {
                            var d = b._uploadIframe.contents().find("body").html();
                            if (d !== "") {
                                b._raiseEvent("3", { file: b._uploadQueue[b._uploadQueue.length - 1].fileName, response: d });
                                if (b._fileObjectToRemove) {
                                    b._removeSingleFileRow(b._fileObjectToRemove);
                                    b._fileObjectToRemove = null
                                } b._uploadQueue.pop();
                                if (b._uploadQueue.length > 0) {
                                    b._uploadFile(b._uploadQueue[b._uploadQueue.length - 1])
                                }
                            }
                        }
                    })
                },
                _removeHandlers: function (b) {
                    var d = this; var e = d.element.id; d.removeHandler(d._browseButton, "click.jqxFileUpload" + e); d.removeHandler(d._uploadButton, "click.jqxFileUpload" + e); d.removeHandler(d._cancelButton, "click.jqxFileUpload" + e); d.removeHandler(d._uploadIframe, "load.jqxFileUpload" + e); if (b === true) { var c = d._forms[d._forms.length - 1]; d.removeHandler(c.fileInput, "change.jqxFileUpload" + e); if (d._ieOldWebkit) { d.removeHandler(c.form, "mouseenter.jqxFileUpload" + e); d.removeHandler(c.form, "mouseleave.jqxFileUpload" + e); d.removeHandler(c.form, "mousedown.jqxFileUpload" + e); d.removeHandler(a("body"), "mouseup.jqxFileUpload" + e) } }
                }
            })
    }
)(jqxBaseFramework);


/*
jqxdragdrop
*/

(function (a) { a.jqx.jqxWidget("jqxDragDrop", "", {}); a.extend(a.jqx._jqxDragDrop.prototype, { defineInstance: function () { var b = { restricter: "document", handle: false, feedback: "clone", opacity: 0.6, revert: false, revertDuration: 400, distance: 5, disabled: false, tolerance: "intersect", data: null, dropAction: "default", dragZIndex: 999999, appendTo: "parent", cursor: "move", onDragEnd: null, onDrag: null, onDragStart: null, onTargetDrop: null, onDropTargetEnter: null, onDropTargetLeave: null, initFeedback: null, dropTarget: null, isDestroyed: false, triggerEvents: true, _touchEvents: { mousedown: a.jqx.mobile.getTouchEventName("touchstart"), click: a.jqx.mobile.getTouchEventName("touchstart"), mouseup: a.jqx.mobile.getTouchEventName("touchend"), mousemove: a.jqx.mobile.getTouchEventName("touchmove"), mouseenter: "mouseenter", mouseleave: "mouseleave" }, _restricter: null, _zIndexBackup: 0, _targetEnterFired: false, _oldOpacity: 1, _feedbackType: undefined, _isTouchDevice: false, _events: ["dragStart", "dragEnd", "dragging", "dropTargetEnter", "dropTargetLeave"] }; a.extend(true, this, b); return b }, createInstance: function () { this._createDragDrop() }, _createDragDrop: function () { var c = a.data(document.body, "jqx-draggables") || 1; this.appendTo = this._getParent(); this._isTouchDevice = a.jqx.mobile.isTouchDevice(); if ((/(static|relative)/).test(this.host.css("position"))) { if (!this.feedback || this.feedback === "original") { var d = this._getRelativeOffset(this.host); var b = this.appendTo.offset(); if (this.appendTo.css("position") != "static") { b = { left: 0, top: 0 } } this.element.style.position = "absolute"; this.element.style.left = b.left + d.left + "px"; this.element.style.top = b.top + d.top + "px" } } this._validateProperties(); this._idHandler(c); if (this.disabled) { this.disable() } if (typeof this.dropTarget === "string") { this.dropTarget = a(this.dropTarget) } this._refresh(); c += 1; a.data(document.body, "jqx-draggables", c); this.host.addClass("jqx-draggable"); if (!this.disabled) { this.host.css("cursor", this.cursor) } }, _getParent: function () { var b = this.appendTo; if (typeof this.appendTo === "string") { switch (this.appendTo) { case "parent": b = this.host.parent(); break; case "document": b = a(document); break; case "body": b = a(document.body); break; default: b = a(this.appendTo); break } } return b }, _idHandler: function (b) { if (!this.element.id) { var c = "jqx-draggable-" + b; this.element.id = c } }, _refresh: function () { this._removeEventHandlers(); this._addEventHandlers() }, _getEvent: function (b) { if (this._isTouchDevice) { return this._touchEvents[b] } else { return b } }, _validateProperties: function () { if (this.feedback === "clone") { this._feedbackType = "clone" } else { this._feedbackType = "original" } if (this.dropAction !== "default") { this.dropAction = "nothing" } }, _removeEventHandlers: function () { this.removeHandler(this.host, "dragstart"); this.removeHandler(this.host, this._getEvent("mousedown") + ".draggable." + this.element.id, this._mouseDown); this.removeHandler(a(document), this._getEvent("mousemove") + ".draggable." + this.element.id, this._mouseMove); this.removeHandler(a(document), this._getEvent("mouseup") + ".draggable." + this.element.id, this._mouseUp) }, _addEventHandlers: function () { var b = this; this.addHandler(this.host, "dragstart", function (g) { if (b.disabled) { return true } var f = a.jqx.mobile.isTouchDevice(); if (!f) { g.preventDefault(); return false } }); this.addHandler(this.host, this._getEvent("mousedown") + ".draggable." + this.element.id, this._mouseDown, { self: this }); this.addHandler(a(document), this._getEvent("mousemove") + ".draggable." + this.element.id, this._mouseMove, { self: this }); this.addHandler(a(document), this._getEvent("mouseup") + ".draggable." + this.element.id, this._mouseUp, { self: this }); try { if (document.referrer != "" || window.frameElement) { if (window.top != null && window.top != window.self) { var e = ""; if (window.parent && document.referrer) { e = document.referrer } if (e.indexOf(document.location.host) != -1) { var d = function (f) { b._mouseUp(b) }; if (window.top.document.addEventListener) { window.top.document.addEventListener("mouseup", d, false) } else { if (window.top.document.attachEvent) { window.top.document.attachEvent("onmouseup", d) } } } } } } catch (c) { } }, _mouseDown: function (f) { var b = f.data.self, d = b._getMouseCoordinates(f), c = b._mouseCapture(f); b._originalPageX = d.left; b._originalPageY = d.top; if (b.disabled) { return true } var e = false; if (!b._mouseStarted) { b._mouseUp(f); e = true } if (c) { b._mouseDownEvent = f } if (b._isTouchDevice) { return true } if (f.which !== 1 || !c) { return true } f.preventDefault(); if (e == true) { } }, _mouseMove: function (c) { var b = c.data.self; if (b.disabled) { return true } if (b._mouseStarted) { b._mouseDrag(c); if (c.preventDefault) { c.preventDefault() } return false } if (b._mouseDownEvent && b._isMovedDistance(c)) { if (b._mouseStart(b._mouseDownEvent, c)) { b._mouseStarted = true } else { b._mouseStarted = false } if (b._mouseStarted) { b._mouseDrag(c) } else { b._mouseUp(c) } } return !b._mouseStarted }, _mouseUp: function (c) { var b; if (c.data && c.data.self) { b = c.data.self } else { b = this } if (b.disabled) { return true } b._mouseDownEvent = false; b._movedDistance = false; if (b._mouseStarted) { b._mouseStarted = false; b._mouseStop(c) } if (b.feedback && b.feedback[0] && b._feedbackType !== "original" && typeof b.feedback.remove === "function" && !b.revert) { b.feedback.remove() } if (!b._isTouchDevice) { return false } }, cancelDrag: function () { var b = this.revertDuration; this.revertDuration = 0; this._mouseDownEvent = false; this._movedDistance = false; this._mouseStarted = false; this._mouseStop(); this.feedback.remove(); this.revertDuration = b }, _isMovedDistance: function (b) { var c = this._getMouseCoordinates(b); if (this._movedDistance) { return true } if (c.left >= this._originalPageX + this.distance || c.left <= this._originalPageX - this.distance || c.top >= this._originalPageY + this.distance || c.top <= this._originalPageY - this.distance) { this._movedDistance = true; return true } return false }, _getMouseCoordinates: function (b) { if (this._isTouchDevice) { var c = a.jqx.position(b); return { left: c.left, top: c.top } } else { return { left: b.pageX, top: b.pageY } } }, destroy: function () { this._enableSelection(this.host); this.host.removeData("draggable").off(".draggable").removeClass("jqx-draggable jqx-draggable-dragging jqx-draggable-disabled"); this._removeEventHandlers(); this.isDestroyed = true; return this }, _disableSelection: function (b) { b.each(function () { a(this).attr("unselectable", "on").css({ "-ms-user-select": "none", "-moz-user-select": "none", "-webkit-user-select": "none", "user-select": "none" }).each(function () { this.onselectstart = function () { return false } }) }) }, _enableSelection: function (b) { b.each(function () { a(this).attr("unselectable", "off").css({ "-ms-user-select": "text", "-moz-user-select": "text", "-webkit-user-select": "text", "user-select": "text" }).each(function () { this.onselectstart = null }) }) }, _mouseCapture: function (b) { if (this.disabled) { return false } if (!this._getHandle(b)) { return false } this._disableSelection(this.host); return true }, _getScrollParent: function (b) { var c; if ((a.jqx.browser.msie && (/(static|relative)/).test(b.css("position"))) || (/absolute/).test(b.css("position"))) { c = b.parents().filter(function () { return (/(relative|absolute|fixed)/).test(a.css(this, "position", 1)) && (/(auto|scroll)/).test(a.css(this, "overflow", 1) + a.css(this, "overflow-y", 1) + a.css(this, "overflow-x", 1)) }).eq(0) } else { c = b.parents().filter(function () { return (/(auto|scroll)/).test(a.css(this, "overflow", 1) + a.css(this, "overflow-y", 1) + a.css(this, "overflow-x", 1)) }).eq(0) } return (/fixed/).test(b.css("position")) || !c.length ? a(document) : c }, _mouseStart: function (e) { var d = this._getMouseCoordinates(e), c = this._getParentOffset(this.host); this.feedback = this._createFeedback(e); this._zIndexBackup = this.feedback.css("z-index"); this.feedback[0].style.zIndex = this.dragZIndex; this._backupFeedbackProportions(); this._backupeMargins(); this._positionType = this.feedback.css("position"); this._scrollParent = this._getScrollParent(this.feedback); this._offset = this.positionAbs = this.host.offset(); this._offset = { top: this._offset.top - this.margins.top, left: this._offset.left - this.margins.left }; a.extend(this._offset, { click: { left: d.left - this._offset.left, top: d.top - this._offset.top }, parent: this._getParentOffset(), relative: this._getRelativeOffset(), hostRelative: this._getRelativeOffset(this.host) }); this.position = this._generatePosition(e); this.originalPosition = this._fixPosition(); if (this.restricter) { this._setRestricter() } this.feedback.addClass(this.toThemeProperty("jqx-draggable-dragging")); var b = this._raiseEvent(0, e); if (this.onDragStart && typeof this.onDragStart === "function") { this.onDragStart(this.position) } this._mouseDrag(e, true); return true }, _fixPosition: function () { var c = this._getRelativeOffset(this.host), b = this.position; b = { left: this.position.left + c.left, top: this.position.top + c.top }; return b }, _mouseDrag: function (b, c) { this.position = this._generatePosition(b); this.positionAbs = this._convertPositionTo("absolute"); this.feedback[0].style.left = this.position.left + "px"; this.feedback[0].style.top = this.position.top + "px"; this._raiseEvent(2, b); if (this.onDrag && typeof this.onDrag === "function") { this.onDrag(this.data, this.position) } this._handleTarget(); return false }, _over: function (b, d, e) { if (this.dropTarget) { var f = false, c = this; a.each(this.dropTarget, function (g, h) { f = c._overItem(h, b, d, e); if (f.over) { return false } }) } return f }, _overItem: function (i, c, e, g) { i = a(i); var b = i.offset(), f = i.outerHeight(), d = i.outerWidth(), h; if (!i || i[0] === this.element) { return } var h = false; switch (this.tolerance) { case "intersect": if (c.left + e > b.left && c.left < b.left + d && c.top + g > b.top && c.top < b.top + f) { h = true } break; case "fit": if (e + c.left <= b.left + d && c.left >= b.left && g + c.top <= b.top + f && c.top >= b.top) { h = true } break } return { over: h, target: i } }, _handleTarget: function () { if (this.dropTarget) { var b = this.feedback.offset(), c = this.feedback.outerWidth(), d = this.feedback.outerHeight(), e = this._over(b, c, d); if (e.over) { if (this._targetEnterFired && e.target.length > 0 && this._oldtarget && this._oldtarget.length > 0 && e.target[0] != this._oldtarget[0]) { this._raiseEvent(4, { target: this._oldtarget }); if (this.onDropTargetLeave && typeof this.onDropTargetLeave === "function") { this.onDropTargetLeave(this._oldtarget) } } if (!this._targetEnterFired || (e.target.length > 0 && this._oldtarget && this._oldtarget.length > 0 && e.target[0] != this._oldtarget[0])) { this._targetEnterFired = true; this._raiseEvent(3, { target: e.target }); if (this.onDropTargetEnter && typeof this.onDropTargetEnter === "function") { this.onDropTargetEnter(e.target) } } this._oldtarget = e.target } else { if (this._targetEnterFired) { this._targetEnterFired = false; this._raiseEvent(4, { target: this._oldtarget || e.target }); if (this.onDropTargetLeave && typeof this.onDropTargetLeave === "function") { this.onDropTargetLeave(this._oldtarget || e.target) } } } } }, _mouseStop: function (d) { var e = false, b = this._fixPosition(), c = { width: this.host.outerWidth(), height: this.host.outerHeight() }; this.feedback[0].style.opacity = this._oldOpacity; if (!this.revert) { this.feedback[0].style.zIndex = this._zIndexBackup } this._enableSelection(this.host); if (this.dropped) { e = this.dropped; this.dropped = false } if ((!this.element || !this.element.parentNode) && this.feedback === "original") { return false } this._dropElement(b); this.feedback.removeClass(this.toThemeProperty("jqx-draggable-dragging")); this._raiseEvent(1, d); if (this.onDragEnd && typeof this.onDragEnd === "function") { this.onDragEnd(this.data) } if (this.onTargetDrop && typeof this.onTargetDrop === "function" && this._over(b, c.width, c.height).over) { this.onTargetDrop(this._over(b, c.width, c.height).target) } this._revertHandler(); return false }, _dropElement: function (b) { if (this.dropAction === "default" && this.feedback && this.feedback[0] !== this.element && this.feedback !== "original") { if (!this.revert) { if (!(/(fixed|absolute)/).test(this.host.css("position"))) { this.host.css("position", "relative"); var c = this._getRelativeOffset(this.host); b = this.position; b.left -= c.left; b.top -= c.top; this.element.style.left = b.left + "px"; this.element.style.top = b.top + "px" } } } }, _revertHandler: function () { if (this.revert || (a.isFunction(this.revert) && this.revert())) { var b = this; if (this._feedbackType != "original") { if (this.feedback != null) { if (this.dropAction != "none") { a(this.feedback).animate({ left: b.originalPosition.left - b._offset.hostRelative.left, top: b.originalPosition.top - b._offset.hostRelative.top }, parseInt(this.revertDuration, 10), function () { if (b.feedback && b.feedback[0] && b._feedbackType !== "original" && typeof b.feedback.remove === "function") { b.feedback.remove() } }) } else { if (b.feedback && b.feedback[0] && b._feedbackType !== "original" && typeof b.feedback.remove === "function") { b.feedback.remove() } } } } else { this.element.style.zIndex = this.dragZIndex; a(this.host).animate({ left: b.originalPosition.left - b._offset.hostRelative.left, top: b.originalPosition.top - b._offset.hostRelative.top }, parseInt(this.revertDuration, 10), function () { b.element.style.zIndex = b._zIndexBackup }) } } }, _getHandle: function (b) { var c; if (!this.handle) { c = true } else { a(this.handle, this.host).find("*").andSelf().each(function () { if (this == b.target) { c = true } }) } return c }, _createFeedback: function (c) { var b; if (typeof this._feedbackType === "function") { b = this._feedbackType() } else { if (this._feedbackType === "clone") { b = this.host.clone().removeAttr("id") } else { b = this.host } } if (!(/(absolute|fixed)/).test(b.css("position"))) { b.css("position", "absolute") } if (this.appendTo[0] !== this.host.parent()[0] || b[0] !== this.element) { var d = {}; b.css({ left: this.host.offset().left - this._getParentOffset(this.host).left + this._getParentOffset(b).left, top: this.host.offset().top - this._getParentOffset(this.host).top + this._getParentOffset(b).top }); b.appendTo(this.appendTo) } if (typeof this.initFeedback === "function") { this.initFeedback(b) } return b }, _getParentOffset: function (c) { var c = c || this.feedback; this._offsetParent = c.offsetParent(); var b = this._offsetParent.offset(); if (this._positionType == "absolute" && this._scrollParent[0] !== document && a.contains(this._scrollParent[0], this._offsetParent[0])) { b.left += this._scrollParent.scrollLeft(); b.top += this._scrollParent.scrollTop() } if ((this._offsetParent[0] == document.body) || (this._offsetParent[0].tagName && this._offsetParent[0].tagName.toLowerCase() == "html" && a.jqx.browser.msie)) { b = { top: 0, left: 0 } } return { top: b.top + (parseInt(this._offsetParent.css("border-top-width"), 10) || 0), left: b.left + (parseInt(this._offsetParent.css("border-left-width"), 10) || 0) } }, _getRelativeOffset: function (c) { var d = this._scrollParent || c.parent(); c = c || this.feedback; if (c.css("position") === "relative") { var b = this.host.position(); return { top: b.top - (parseInt(c.css("top"), 10) || 0), left: b.left - (parseInt(c.css("left"), 10) || 0) } } else { return { top: 0, left: 0 } } }, _backupeMargins: function () { this.margins = { left: (parseInt(this.host.css("margin-left"), 10) || 0), top: (parseInt(this.host.css("margin-top"), 10) || 0), right: (parseInt(this.host.css("margin-right"), 10) || 0), bottom: (parseInt(this.host.css("margin-bottom"), 10) || 0) } }, _backupFeedbackProportions: function () { this.feedback[0].style.opacity = this.opacity; this._feedbackProportions = { width: this.feedback.outerWidth(), height: this.feedback.outerHeight() } }, _setRestricter: function () { if (this.restricter == "parent") { this.restricter = this.feedback[0].parentNode } if (this.restricter == "document" || this.restricter == "window") { this._handleNativeRestricter() } if (typeof this.restricter.left !== "undefined" && typeof this.restricter.top !== "undefined" && typeof this.restricter.height !== "undefined" && typeof this.restricter.width !== "undefined") { this._restricter = [this.restricter.left, this.restricter.top, this.restricter.width, this.restricter.height] } else { if (!(/^(document|window|parent)$/).test(this.restricter) && this.restricter.constructor != Array) { this._handleDOMParentRestricter() } else { if (this.restricter.constructor == Array) { this._restricter = this.restricter } } } }, _handleNativeRestricter: function () { this._restricter = [this.restricter === "document" ? 0 : a(window).scrollLeft() - this._offset.relative.left - this._offset.parent.left, this.restricter === "document" ? 0 : a(window).scrollTop() - this._offset.relative.top - this._offset.parent.top, (this.restricter === "document" ? 0 : a(window).scrollLeft()) + a(this.restricter === "document" ? document : window).width() - this._feedbackProportions.width - this.margins.left, (this.restricter === "document" ? 0 : a(window).scrollTop()) + (a(this.restricter === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this._feedbackProportions.height - this.margins.top] }, _handleDOMParentRestricter: function () { var d = a(this.restricter), b = d[0]; if (!b) { return } var c = (a(b).css("overflow") !== "hidden"); this._restricter = [(parseInt(a(b).css("borderLeftWidth"), 10) || 0) + (parseInt(a(b).css("paddingLeft"), 10) || 0), (parseInt(a(b).css("borderTopWidth"), 10) || 0) + (parseInt(a(b).css("paddingTop"), 10) || 0), (c ? Math.max(b.scrollWidth, b.offsetWidth) : b.offsetWidth) - (parseInt(a(b).css("borderLeftWidth"), 10) || 0) - (parseInt(a(b).css("paddingRight"), 10) || 0) - this._feedbackProportions.width - this.margins.left - this.margins.right, (c ? Math.max(b.scrollHeight, b.offsetHeight) : b.offsetHeight) - (parseInt(a(b).css("borderTopWidth"), 10) || 0) - (parseInt(a(b).css("paddingBottom"), 10) || 0) - this._feedbackProportions.height - this.margins.top - this.margins.bottom]; this._restrictiveContainer = d }, _convertPositionTo: function (f, c) { if (!c) { c = this.position } var e, b, g; if (f === "absolute") { e = 1 } else { e = -1 } if (this._positionType === "absolute" && !(this._scrollParent[0] != document && a.contains(this._scrollParent[0], this._offsetParent[0]))) { b = this._offsetParent } else { b = this._scrollParent } g = (/(html|body)/i).test(b[0].tagName); return this._getPosition(c, e, g, b) }, _getPosition: function (c, d, e, b) { return { top: (c.top + this._offset.relative.top * d + this._offset.parent.top * d - (a.jqx.browser.safari && a.jqx.browser.version < 526 && this._positionType == "fixed" ? 0 : (this._positionType == "fixed" ? -this._scrollParent.scrollTop() : (e ? 0 : b.scrollTop())) * d)), left: (c.left + this._offset.relative.left * d + this._offset.parent.left * d - (a.jqx.browser.safari && a.jqx.browser.version < 526 && this._positionType == "fixed" ? 0 : (this._positionType == "fixed" ? -this._scrollParent.scrollLeft() : e ? 0 : b.scrollLeft()) * d)) } }, _generatePosition: function (f) { var b = this._positionType == "absolute" && !(this._scrollParent[0] != document && a.contains(this._scrollParent[0], this._offsetParent[0])) ? this._offsetParent : this._scrollParent, i = (/(html|body)/i).test(b[0].tagName); var e = this._getMouseCoordinates(f), d = e.left, c = e.top; if (this.originalPosition) { var h; if (this.restricter) { if (this._restrictiveContainer) { var g = this._restrictiveContainer.offset(); h = [this._restricter[0] + g.left, this._restricter[1] + g.top, this._restricter[2] + g.left, this._restricter[3] + g.top] } else { h = this._restricter } if (e.left - this._offset.click.left < h[0]) { d = h[0] + this._offset.click.left } if (e.top - this._offset.click.top < h[1]) { c = h[1] + this._offset.click.top } if (e.left - this._offset.click.left > h[2]) { d = h[2] + this._offset.click.left } if (e.top - this._offset.click.top > h[3]) { c = h[3] + this._offset.click.top } } } return { top: (c - this._offset.click.top - this._offset.relative.top - this._offset.parent.top + (a.jqx.browser.safari && a.jqx.browser.version < 526 && this._positionType == "fixed" ? 0 : (this._positionType == "fixed" ? -this._scrollParent.scrollTop() : (i ? 0 : b.scrollTop())))), left: (d - this._offset.click.left - this._offset.relative.left - this._offset.parent.left + (a.jqx.browser.safari && a.jqx.browser.version < 526 && this._positionType == "fixed" ? 0 : (this._positionType == "fixed" ? -this._scrollParent.scrollLeft() : i ? 0 : b.scrollLeft()))) } }, _raiseEvent: function (c, e) { if (this.triggerEvents != undefined && this.triggerEvents == false) { return } var b = this._events[c], d = a.Event(b), e = e || {}; e.position = this.position; e.element = this.element; a.extend(e, this.data); e.feedback = this.feedback; d.args = e; return this.host.trigger(d) }, disable: function () { this.disabled = true; this.host.addClass(this.toThemeProperty("jqx-draggable-disabled")); this._enableSelection(this.host) }, enable: function () { this.disabled = false; this.host.removeClass(this.toThemeProperty("jqx-draggable-disabled")) }, propertyChangedHandler: function (b, c, e, d) { if (c === "dropTarget") { if (typeof d === "string") { b.dropTarget = a(d) } } else { if (c == "disabled") { if (d) { b._enableSelection(b.host) } } else { if (c == "cursor") { b.host.css("cursor", b.cursor) } } } } }) })(jqxBaseFramework); (function (a) { jqxListBoxDragDrop = function () { a.extend(a.jqx._jqxListBox.prototype, { _hitTestBounds: function (b, c, e) { var f = b.host.offset(); var g = e - parseInt(f.top); var i = c - parseInt(f.left); var k = b._hitTest(i, g); if (g < 0) { return null } if (k != null) { var d = parseInt(f.left); var j = d + b.host.width(); if (d <= c + k.width / 2 && c <= j) { return k } return null } if (b.items && b.items.length > 0) { var h = b.items[b.items.length - 1]; if (b.groups.length < 2) { if (h.top + h.height + 15 >= g) { return h } } } return null }, _handleDragStart: function (d, c) { var b = a.jqx.mobile.isTouchDevice(); if (b) { if (c.allowDrag) { d.on(a.jqx.mobile.getTouchEventName("touchstart"), function () { a.jqx.mobile.setTouchScroll(false, c.element.id) }) } } d.off("dragStart"); d.on("dragStart", function (h) { if (c.allowDrag && !c.disabled) { c.feedbackElement = a("<div style='z-index: 99999; position: absolute;'></div>"); c.feedbackElement.addClass(c.toThemeProperty("jqx-listbox-feedback")); c.feedbackElement.appendTo(a(document.body)); c.feedbackElement.hide(); c.isDragging = true; c._dragCancel = false; var j = c._getMouseCoordinates(h); var g = c._hitTestBounds(c, j.left, j.top); var i = a.find(".jqx-listbox"); c._listBoxes = i; a.each(c._listBoxes, function () { var k = a.data(this, "jqxListBox").instance; k._enableHover = k.enableHover; k.enableHover = false; a.jqx.mobile.setTouchScroll(false, c.element.id) }); var f = function () { c._dragCancel = true; a(h.args.element).jqxDragDrop({ triggerEvents: false }); a(h.args.element).jqxDragDrop("cancelDrag"); clearInterval(c._autoScrollTimer); a(h.args.element).jqxDragDrop({ triggerEvents: true }); a.each(c._listBoxes, function () { var k = a.data(this, "jqxListBox").instance; if (k._enableHover != undefined) { k.enableHover = k._enableHover; a.jqx.mobile.setTouchScroll(true, c.element.id) } }) }; if (g != null && !g.isGroup) { c._dragItem = g; if (c.dragStart) { var e = c.dragStart(g); if (e == false) { f(); return false } } if (g.disabled) { f() } c._raiseEvent(4, { label: g.label, value: g.value, originalEvent: h.args }) } else { if (g == null) { f() } } } return false }) }, _handleDragging: function (c, b) { c.off("dragging"); c.on("dragging", function (f) { var e = f.args; if (b._dragCancel) { return } var g = b._getMouseCoordinates(f); var d = g; b._lastDraggingPosition = g; b._dragOverItem = null; b.feedbackElement.hide(); a.each(b._listBoxes, function () { if (a.jqx.isHidden(a(this))) { return true } var l = a(this).offset(); var n = l.top + 20; var h = a(this).height() + n - 40; var j = l.left; var i = a(this).width(); var o = j + i; var m = a.data(this, "jqxListBox").instance; var p = m._hitTestBounds(m, g.left, g.top); var k = m.vScrollInstance; if (p != null) { if (m.allowDrop && !m.disabled) { b._dragOverItem = p; if (p.element) { b.feedbackElement.show(); var q = a(p.element).offset().top + 1; if (d.top > q + p.height / 2) { q = q + p.height } b.feedbackElement.css("top", q); b.feedbackElement.css("left", j); if (m.vScrollBar.css("visibility") != "visible") { b.feedbackElement.width(a(this).width()) } else { b.feedbackElement.width(a(this).width() - 20) } } } } if (g.left >= j && g.left < o) { if (e.position.top < n && e.position.top >= n - 30) { clearInterval(m._autoScrollTimer); if (k.value != 0) { b.feedbackElement.hide() } m._autoScrollTimer = setInterval(function () { var r = m.scrollUp(); if (!r) { clearInterval(m._autoScrollTimer) } }, 100) } else { if (e.position.top > h && e.position.top < h + 30) { clearInterval(m._autoScrollTimer); if ((m.vScrollBar.css("visibility") != "hidden") && k.value != k.max) { b.feedbackElement.hide() } m._autoScrollTimer = setInterval(function () { var r = m.scrollDown(); if (!r) { clearInterval(m._autoScrollTimer) } }, 100) } else { clearInterval(m._autoScrollTimer) } } } else { if (b._dragOverItem == null) { b.feedbackElement.hide() } clearInterval(m._autoScrollTimer) } }) }) }, _handleDragEnd: function (c, b) { var d = a.find(".jqx-listbox"); c.off("dragEnd"); c.on("dragEnd", function (f) { clearInterval(b._autoScrollTimer); var o = a.jqx.mobile.isTouchDevice(); var k = o ? b._lastDraggingPosition : b._getMouseCoordinates(f); var g = a.find(".jqx-listbox"); var h = null; b.feedbackElement.remove(); if (b._dragCancel) { f.stopPropagation(); return } a.each(g, function () { if (a.jqx.isHidden(a(this))) { return true } var w = parseInt(a(this).offset().left); var u = w + a(this).width(); var x = a.data(this, "jqxListBox").instance; clearInterval(x._autoScrollTimer); if (x._enableHover != undefined) { x.enableHover = x._enableHover; a.jqx.mobile.setTouchScroll(true, b.element.id) } if (b._dragItem != null) { if (k.left + b._dragItem.width / 2 >= w && k.left < u) { var v = parseInt(a(this).offset().top); var t = v + a(this).height(); if (k.top >= v && k.top <= t) { h = a(this) } } } }); var s = b._dragItem; if (h != null && h.length > 0) { var n = a.data(h[0], "jqxListBox").instance; var l = n.allowDrop; if (l && !n.disabled) { var n = a.data(h[0], "jqxListBox").instance; var p = n._hitTestBounds(n, k.left, k.top); p = b._dragOverItem; if (p != null && !p.isGroup) { var r = true; if (b.dragEnd) { r = b.dragEnd(s, p, f.args); if (r == false) { a(f.args.element).jqxDragDrop({ triggerEvents: false }); a(f.args.element).jqxDragDrop("cancelDrag"); clearInterval(b._autoScrollTimer); a(f.args.element).jqxDragDrop({ triggerEvents: true }); if (f.preventDefault) { f.preventDefault() } if (f.stopPropagation) { f.stopPropagation() } return false } if (r == undefined) { r = true } } if (r) { var e = p.visibleIndex; var j = function () { var u = p.visibleIndex; for (var t = u - 2; t <= u + 2; t++) { if (n.items && n.items.length > t) { var v = n.items[t]; if (v != null) { if (v.value == s.value) { return v.visibleIndex } } } } return u }; if (n.dropAction != "none") { if (p.element) { var q = a(p.element).offset().top + 1 } else { var q = a(n.element).offset().top + 1 } if (n.content.find(".draggable").length > 0) { n.content.find(".draggable").jqxDragDrop("destroy") } if (k.top > q + p.height / 2) { n.insertAt(b._dragItem, p.index + 1) } else { n.insertAt(b._dragItem, p.index) } if (b.dropAction == "default") { if (s.visibleIndex > 0) { b.clearSelection(); b.selectIndex(s.visibleIndex - 1) } b.removeItem(s, true) } var m = j(); n.clearSelection(); n.selectIndex(m) } } } else { if (n.dropAction != "none") { if (n.content.find(".draggable").length > 0) { n.content.find(".draggable").jqxDragDrop("destroy") } if (b.dragEnd) { var r = b.dragEnd(b._dragItem, null, f.args); if (r == false) { a(f.args.element).jqxDragDrop({ triggerEvents: false }); a(f.args.element).jqxDragDrop("cancelDrag"); clearInterval(b._autoScrollTimer); a(f.args.element).jqxDragDrop({ triggerEvents: true }); if (f.preventDefault) { f.preventDefault() } if (f.stopPropagation) { f.stopPropagation() } return false } if (r == undefined) { r = true } } n.addItem(b._dragItem); if (n.dropAction == "default") { if (s.visibleIndex > 0) { b.selectIndex(s.visibleIndex - 1) } b.removeItem(s, true) } n.clearSelection(); n.selectIndex(n.items.length - 1) } } } } else { if (b.dragEnd) { var i = b.dragEnd(s, f.args); if (false == i) { if (f.preventDefault) { f.preventDefault() } if (f.stopPropagation) { f.stopPropagation() } return false } } } if (s != null) { b._raiseEvent(5, { label: s.label, value: s.value, originalEvent: f.args }) } return false }) }, _enableDragDrop: function () { if (this.allowDrag && this.host.jqxDragDrop) { var c = this.content.find(".draggable"); if (c.length > 0) { var b = this; c.jqxDragDrop({ cursor: "arrow", revertDuration: 0, appendTo: "body", dragZIndex: 99999, revert: true, initFeedback: function (d) { var f = a('<span style="white-space: nowrap;" class="' + b.toThemeProperty("jqx-fill-state-normal") + '">' + d.text() + "</span>"); a(document.body).append(f); var e = f.width(); f.remove(); d.width(e + 5); d.addClass(b.toThemeProperty("jqx-fill-state-pressed")) } }); this._autoScrollTimer = null; b._dragItem = null; b._handleDragStart(c, b); b._handleDragging(c, b); b._handleDragEnd(c, b) } } }, _getMouseCoordinates: function (b) { this._isTouchDevice = a.jqx.mobile.isTouchDevice(); if (this._isTouchDevice) { var c = a.jqx.position(b.args); return { left: c.left, top: c.top } } else { return { left: b.args.pageX, top: b.args.pageY } } } }) }; jqxTreeDragDrop = function () { a.extend(a.jqx._jqxTree.prototype, { _hitTestBounds: function (b, g, f) { var d = this; var e = null; if (b._visibleItems) { var c = parseInt(b.host.offset().left); var h = b.host.outerWidth(); a.each(b._visibleItems, function (j) { if (g >= c && g < c + h) { if (this.top + 5 < f && f < this.top + this.height) { var i = a(this.element).parents("li:first"); if (i.length > 0) { e = b.getItem(i[0]); if (e != null) { e.height = this.height; e.top = this.top; return false } } } } }) } return e }, _handleDragStart: function (d, c) { if (c._dragOverItem) { c._dragOverItem.titleElement.removeClass(c.toThemeProperty("jqx-fill-state-hover")) } var b = a.jqx.mobile.isTouchDevice(); if (b) { if (c.allowDrag) { d.on(a.jqx.mobile.getTouchEventName("touchstart"), function () { a.jqx.mobile.setTouchScroll(false, "panel" + c.element.id) }) } } d.off("dragStart"); d.on("dragStart", function (g) { c.feedbackElement = a("<div style='z-index: 99999; position: absolute;'></div>"); c.feedbackElement.addClass(c.toThemeProperty("jqx-listbox-feedback")); c.feedbackElement.appendTo(a(document.body)); c.feedbackElement.hide(); c._dragCancel = false; var e = g.args.position; var f = a.find(".jqx-tree"); c._trees = f; a.each(f, function () { var j = a.data(this, "jqxTree").instance; var l = j.host.find(".draggable"); j._syncItems(l); if (j.allowDrag && !j.disabled) { var i = a(g.target).parents("li:first"); if (i.length > 0) { var k = j.getItem(i[0]); if (k) { c._dragItem = k; if (j.dragStart) { var h = j.dragStart(k); if (h == false) { c._dragCancel = true; a(g.args.element).jqxDragDrop({ triggerEvents: false }); a(g.args.element).jqxDragDrop("cancelDrag"); clearInterval(c._autoScrollTimer); a(g.args.element).jqxDragDrop({ triggerEvents: j }); return false } } j._raiseEvent(8, { label: k.label, value: k.value, originalEvent: g.args }) } } } }); return false }) }, _getMouseCoordinates: function (b) { this._isTouchDevice = a.jqx.mobile.isTouchDevice(); if (this._isTouchDevice) { var c = a.jqx.position(b.args); return { left: c.left, top: c.top } } else { return { left: b.args.pageX, top: b.args.pageY } } }, _handleDragging: function (c, b) { var c = this.host.find(".draggable"); c.off("dragging"); c.on("dragging", function (h) { var f = h.args; var d = f.position; var e = b._trees; if (b._dragCancel) { return } if (b._dragOverItem) { b._dragOverItem.titleElement.removeClass(b.toThemeProperty("jqx-fill-state-hover")) } var i = true; var g = b._getMouseCoordinates(h); b._lastDraggingPosition = g; a.each(e, function () { if (a.jqx.isHidden(a(this))) { return true } var m = a(this).offset(); var q = m.top + 20; var j = a(this).height() + q - 40; var l = m.left; var k = a(this).width(); var r = l + k; var p = a.data(this, "jqxTree").instance; if (p.disabled || !p.allowDrop) { return } var n = p.vScrollInstance; var s = p._hitTestBounds(p, g.left, g.top); if (s != null) { if (b._dragOverItem) { b._dragOverItem.titleElement.removeClass(p.toThemeProperty("jqx-fill-state-hover")) } b._dragOverItem = s; if (s.element) { b.feedbackElement.show(); var t = s.top; var o = g.top; b._dropPosition = "before"; if (o > t + s.height / 3) { t = s.top + s.height / 2; b._dragOverItem.titleElement.addClass(b.toThemeProperty("jqx-fill-state-hover")); b.feedbackElement.hide(); b._dropPosition = "inside" } if (o > (s.top + s.height) - s.height / 3) { t = s.top + s.height; b._dragOverItem.titleElement.removeClass(b.toThemeProperty("jqx-fill-state-hover")); b.feedbackElement.show(); b._dropPosition = "after" } b.feedbackElement.css("top", t); var l = -2 + parseInt(s.titleElement.offset().left); b.feedbackElement.css("left", l); b.feedbackElement.width(a(s.titleElement).width() + 12) } } if (g.left >= l && g.left < r) { if (g.top + 20 >= q && g.top <= q + p.host.height()) { i = false } if (g.top < q && g.top >= q - 30) { clearInterval(p._autoScrollTimer); if (n.value != 0) { b.feedbackElement.hide() } p._autoScrollTimer = setInterval(function () { var v = p.panelInstance.scrollUp(); var u = p.host.find(".draggable"); p._syncItems(u); if (!v) { clearInterval(p._autoScrollTimer) } }, 100) } else { if (g.top > j && g.top < j + 30) { clearInterval(p._autoScrollTimer); if (n.value != n.max) { b.feedbackElement.hide() } p._autoScrollTimer = setInterval(function () { var v = p.panelInstance.scrollDown(); var u = p.host.find(".draggable"); p._syncItems(u); if (!v) { clearInterval(p._autoScrollTimer) } }, 100) } else { clearInterval(p._autoScrollTimer) } } } else { clearInterval(p._autoScrollTimer) } }); if (i) { if (b.feedbackElement) { b.feedbackElement.hide() } } }) }, _handleDragEnd: function (c, b) { c.off("dragEnd"); c.on("dragEnd", function (f) { var d = b.host.find(".draggable"); clearInterval(b._autoScrollTimer); var k = f.args.position; var s = b._trees; var t = null; var n = a.jqx.mobile.isTouchDevice(); var g = n ? b._lastDraggingPosition : b._getMouseCoordinates(f); b.feedbackElement.remove(); if (b._dragCancel) { return false } if (b._dragOverItem) { b._dragOverItem.titleElement.removeClass(b.toThemeProperty("jqx-fill-state-hover")) } a.each(s, function () { if (a.jqx.isHidden(a(this))) { return true } var y = parseInt(a(this).offset().left); var w = y + a(this).width(); var v = a.data(this, "jqxTree").instance; clearInterval(v._autoScrollTimer); if (b._dragItem != null) { if (g.left >= y && g.left < w) { var x = parseInt(a(this).offset().top); var u = x + a(this).height(); if (g.top >= x && g.top <= u) { t = a(this) } } } }); var r = b._dragItem; if (t != null && t.length > 0) { var l = t.jqxTree("allowDrop"); if (l) { var m = a.data(t[0], "jqxTree").instance; var o = b._dragOverItem; if (o != null && b._dragOverItem.treeInstance.element.id == m.element.id) { var q = true; if (b.dragEnd) { q = b.dragEnd(r, o, f.args, b._dropPosition, t); if (q == false) { a(f.args.element).jqxDragDrop({ triggerEvents: false }); a(f.args.element).jqxDragDrop("cancelDrag"); clearInterval(b._autoScrollTimer); a(f.args.element).jqxDragDrop({ triggerEvents: true }) } if (undefined == q) { q = true } } if (q) { var e = function () { var u = b._dragItem.treeInstance; u._refreshMapping(); u._updateItemsNavigation(); u._render(true, false); if (u.checkboxes) { u._updateCheckStates() } b._dragItem.treeInstance = m; b._syncItems(b._dragItem.treeInstance.host.find(".draggable")) }; if (m.dropAction != "none") { if (b._dragItem.id != b._dragOverItem.id) { if (b._dropPosition == "inside") { m._drop(b._dragItem.element, b._dragOverItem.element, -1, m); e() } else { var i = 0; if (b._dropPosition == "after") { i++ } m._drop(b._dragItem.element, b._dragOverItem.parentElement, i + a(b._dragOverItem.element).index(), m); e() } } } m._render(true, false); var p = m.host.find(".draggable"); b._syncItems(p); b._dragOverItem = null; b._dragItem = null; m._refreshMapping(); m._updateItemsNavigation(); m.selectedItem = null; m.selectItem(r.element); if (m.checkboxes) { m._updateCheckStates() } m._render(true, false) } } else { if (m.dropAction != "none") { if (m.allowDrop) { var q = true; if (b.dragEnd) { q = b.dragEnd(r, o, f.args, b._dropPosition, t); if (q == false) { a(f.args.element).jqxDragDrop({ triggerEvents: false }); a(f.args.element).jqxDragDrop("cancelDrag"); clearInterval(b._autoScrollTimer); a(f.args.element).jqxDragDrop({ triggerEvents: true }) } if (undefined == q) { q = true } } if (q) { b._dragItem.parentElement = null; m._drop(b._dragItem.element, null, -1, m); var h = b._dragItem.treeInstance; h._refreshMapping(); h._updateItemsNavigation(); if (h.checkboxes) { h._updateCheckStates() } var p = h.host.find(".draggable"); b._syncItems(p); b._dragItem.treeInstance = m; m.items[m.items.length] = b._dragItem; m._render(true, false); m._refreshMapping(); m.selectItem(r.element); m._updateItemsNavigation(); var p = m.host.find(".draggable"); m._syncItems(p); if (m.checkboxes) { m._updateCheckStates() } b._dragOverItem = null; b._dragItem = null } } } } } } else { if (b.dragEnd) { var j = b.dragEnd(r, f.args); if (false == j) { return false } } } if (r != null) { b._raiseEvent(7, { label: r.label, value: r.value, originalEvent: f.args }) } return false }) }, _drop: function (f, b, e, c) { if (a(b).parents("#" + f.id).length > 0) { return } if (b != null) { if (b.id == f.id) { return } } var h = this; if (c.element.innerHTML.indexOf("UL")) { var i = c.host.find("ul:first") } if (b == undefined && b == null) { if (e == undefined || e == -1) { i.append(f) } else { if (i.children("li").eq(e).length == 0) { i.children("li").eq(e - 1).after(f) } else { if (i.children("li").eq(e)[0].id != f.id) { i.children("li").eq(e).before(f) } } } } else { if (e == undefined || e == -1) { b = a(b); var d = b.find("ul:first"); if (d.length == 0) { ulElement = a("<ul></ul>"); a(b).append(ulElement); d = b.find("ul:first"); var g = c.itemMapping["id" + b[0].id].item; g.subtreeElement = d[0]; g.hasItems = true; d.addClass(c.toThemeProperty("jqx-tree-dropdown")); d.append(f); f = d.find("li:first"); g.parentElement = f } else { d.append(f) } } else { b = a(b); var d = b.find("ul:first"); if (d.length == 0) { ulElement = a("<ul></ul>"); a(b).append(ulElement); d = b.find("ul:first"); if (b) { var g = c.itemMapping["id" + b[0].id].item; g.subtreeElement = d[0]; g.hasItems = true } d.addClass(c.toThemeProperty("jqx-tree-dropdown")); d.append(f); f = d.find("li:first"); g.parentElement = f } else { if (d.children("li").eq(e).length == 0) { d.children("li").eq(e - 1).after(f) } else { if (d.children("li").eq(e)[0].id != f.id) { d.children("li").eq(e).before(f) } } } } } }, _enableDragDrop: function () { if (this.allowDrag && this.host.jqxDragDrop) { var d = this.host.find(".draggable"); var c = this; if (d.length > 0) { d.jqxDragDrop({ cursor: "arrow", revertDuration: 0, appendTo: "body", dragZIndex: 99999, revert: true, initFeedback: function (e) { var g = a('<span style="white-space: nowrap;" class="' + c.toThemeProperty("jqx-fill-state-normal") + '">' + e.text() + "</span>"); a(document.body).append(g); var f = g.width(); g.remove(); e.width(f + 5); e.addClass(c.toThemeProperty("jqx-fill-state-pressed")) } }); var b = d.jqxDragDrop("isDestroyed"); if (b === true) { d.jqxDragDrop("_createDragDrop") } this._autoScrollTimer = null; c._dragItem = null; c._handleDragStart(d, c); c._handleDragging(d, c); c._handleDragEnd(d, c) } } } }) } })(jqxBaseFramework);

/*
jqxcolorpicker
*/

(function (a) { a.jqx.jqxWidget("jqxColorPicker", "", {}); a.extend(a.jqx._jqxColorPicker.prototype, { defineInstance: function () { var b = { disabled: false, height: null, width: null, color: new a.jqx.color({ hex: "ff0000" }), redString: "R:", greenString: "G:", blueString: "B:", showTransparent: false, colorMode: "saturation", _delayLoading: false, events: ["colorchange"] }; a.extend(true, this, b); return b }, createInstance: function (c) { this.render(); var b = this; a.jqx.utilities.resize(this.host, function () { b._setSize(); b.refresh() }, false, !this._delayLoading) }, render: function () { this.element.innerHTML = ""; var b = this; this._isTouchDevice = a.jqx.mobile.isTouchDevice(); if (typeof this.color == "string") { this.color = new a.jqx.color({ hex: this.color }) } this._setSize(); this.host.addClass(this.toThemeProperty("jqx-widget")); this.host.addClass(this.toThemeProperty("jqx-reset")); this.host.addClass(this.toThemeProperty("jqx-color-picker")); this.container = a("<div style='width: 100%; height: 100%; position: relative;'></div>"); this.container.appendTo(this.host); this.colorMap = a("<div style='left: 0; top: 0; position: absolute;'></div>"); this.colorMap.appendTo(this.container); this.colorBar = a("<div style='left: 0; top: 0; position: absolute;'></div>"); this.colorBar.appendTo(this.container); this.colorPanel = a("<div style='left: 0; top: 0; position: absolute;'></div>"); this.colorPanel.appendTo(this.container); this.hexPanel = a("<div style='float: left;'></div>"); this.hexPanel.appendTo(this.colorPanel); this.hexPanel.append('<span style="text-align: left;" >#</span>'); this.hex = a("<input maxlength='6' style='height: 18px;'/>"); this.hex.addClass(this.toThemeProperty("jqx-input")); this.hex.addClass(this.toThemeProperty("jqx-widget-content")); this.hex.appendTo(this.hexPanel); this.colorPanel.append('<div style="font-size: 1px; clear: both;"></div>'); this.rgb = a("<div style='margin-top: 2px;'></div>"); this.rgb.appendTo(this.colorPanel); this.red = a("<input style='width: 25px; height: 18px;' maxlength='3'/>"); this.red.addClass(this.toThemeProperty("jqx-input")); this.red.addClass(this.toThemeProperty("jqx-widget-content")); this.rgb.append('<span style="text-align: left;">' + this.redString + "</span>"); this.red.appendTo(this.rgb); this.green = a("<input style='margin-right: 2px; height: 18px; width: 25px;' maxlength='3'/>"); this.green.addClass(this.toThemeProperty("jqx-input")); this.green.addClass(this.toThemeProperty("jqx-widget-content")); this.rgb.append('<span style="text-align: left;">' + this.greenString + "</span>"); this.green.appendTo(this.rgb); this.colorPanel.addClass(this.toThemeProperty("jqx-color-picker-map-overlay")); this._mapImageOverlayURL = this._getImageUrl(this.colorPanel); this.colorPanel.removeClass(this.toThemeProperty("jqx-color-picker-map-overlay")); this.blue = a("<input style='height: 18px; width: 25px;' maxlength='3'/>"); this.blue.addClass(this.toThemeProperty("jqx-input")); this.blue.addClass(this.toThemeProperty("jqx-widget-content")); this.rgb.append('<span style="text-align: left;">' + this.blueString + "</span>"); this.blue.appendTo(this.rgb); this.preview = a("<div style='background: red; position: absolute;'></div>"); this.preview.addClass(this.toThemeProperty("jqx-widget-content")); this.preview.appendTo(this.colorPanel); this.colorBarPointer = a("<div style='top: 0; left: 0; position: absolute; width: 100%;'></div>"); this.colorBarPointer.addClass(this.toThemeProperty("jqx-color-picker-bar-pointer")); this.colorMapPointer = a("<div style='top: 0; left: 0; position: absolute; width: 100%;'></div>"); this.colorMapPointer.addClass(this.toThemeProperty("jqx-color-picker-pointer")); this.transparent = a("<div style='text-align: center; clear: both;'><a style='text-align: center;' href='#'>transparent</a></div>"); if (this.disabled) { this.host.addClass(this.toThemeProperty("jqx-fill-state-disabled")); this.element.disabled = true } this._addHandlers() }, val: function (b) { if (arguments.length == 0) { return "#" + this.color.hex } this.setColor(b); return this.color.hex }, _setPositionFromValue: function () { var d = this; var c = d.color.h; var i = 100 - d.color.v; var b = d.colorMap.height(); var e = d.colorMap.width(); var h = c * e / 360; var g = i * b / 100; if (this.colorMode == "saturation") { var f = 100 - d.color.s; f = f * b / 100; d._saturation = 100 - d.color.s; d.colorMapPointer.css("margin-left", h - 8); d.colorMapPointer.css("margin-top", g - 8); d.colorBarPointer.css("margin-top", f - 8); d.colorMapImageOverlay.css("opacity", (100 - d.color.s) / 100) } else { var c = d.color.s; var h = c * e / 100; var g = i * b / 100; var f = 360 - d.color.h; f = f * b / 360; d._hue = d.color.h; d.colorMapPointer.css("margin-left", h - 8); d.colorMapPointer.css("margin-top", g - 8); d.colorBarPointer.css("margin-top", f - 8) } }, updateRGB: function () { var b = this; b.color.setRgb(b.red.val(), b.green.val(), b.blue.val()); b._updateUI(); b._raiseEvent("0", { color: b.color }); b.color.transparent = false }, _setPosition: function (f, c, h) { var e = parseInt(f.pageX); var g = parseInt(c.offset().left); var b = parseInt(f.pageY); var d = parseInt(c.offset().top); if (this._isTouchDevice) { var i = a.jqx.position(f); e = i.left; b = i.top } if (h[0].className.indexOf("jqx-color-picker-bar") == -1) { h.css("margin-left", e - 8 - g) } if (b >= d && b <= d + c.height()) { h.css("margin-top", b - 8 - d) } }, _handleKeyInput: function (c, d, b) { if (c.disabled) { return } if (!c._validateKey(d)) { return d } b.val(c._setValueInRange(b.val(), 0, 255)); this.updateRGB(); this._setPositionFromValue() }, _addHandlers: function () { var d = this; this.addHandler(this.colorMapPointer, "dragStart", function (j) { j.preventDefault(); return false }); this.addHandler(this.colorBarPointer, "dragStart", function (j) { j.preventDefault(); return false }); this.addHandler(this.transparent, "click", function (j) { d._raiseEvent("0", { color: "transparent" }); j.preventDefault(); d.color.transparent = true }); this.addHandler(this.host, "selectionstart", function (j) { j.preventDefault(); return false }); this.addHandler(this.blue, "keyup blur", function (j) { d._handleKeyInput(d, j, d.blue) }); this.addHandler(this.green, "keyup blur", function (j) { d._handleKeyInput(d, j, d.green) }); this.addHandler(this.red, "keyup blur", function (j) { d._handleKeyInput(d, j, d.red) }); this.addHandler(this.hex, "keyup blur", function (j) { if (d.disabled) { return } if (!d._validateKey(j)) { return j } if (d.hex.val().toString().length == 6) { d.hex.val(d.color.validateHex(d.hex.val())); d.color.setHex(d.hex.val()); d._updateUI(); d._setPositionFromValue(); d._raiseEvent("0", { color: d.color }) } }); this.addHandler(this.colorMap, "dragstart", function (j) { j.preventDefault(); return false }); var f = function (k) { d._setPosition(k, d.colorMap, d.colorMapPointer); if (d.colorMode == "saturation") { var j = d._valuesFromMouse(k, d.colorMap, 360, 100); if (j.x > 360) { j.x = 360 } d.color.setHsv(j.x, d._saturation != null ? 100 - d._saturation : 100, 100 - j.y) } else { var j = d._valuesFromMouse(k, d.colorMap, 100, 100); if (j.x > 100) { j.x = 100 } d.color.setHsv(d._hue != null ? d._hue : 360, j.x, 100 - j.y) } d._updateUI(); d._raiseEvent("0", { color: d.color }); d.color.transparent = false }; var c = "mousedown.picker" + this.element.id; if (this._isTouchDevice) { c = a.jqx.mobile.getTouchEventName("touchstart") + ".picker" + this.element.id } this.addHandler(this.colorMap, c, function (j) { if (d.disabled) { return } d.beginDrag = true; f(j) }); var b = "mousemove.picker" + this.element.id; if (this._isTouchDevice) { b = a.jqx.mobile.getTouchEventName("touchmove") + ".picker" + this.element.id } this.addHandler(a(document), b, function (j) { if (d.disabled) { return } if (d.beginDrag == true) { f(j); if (d._isTouchDevice) { j.preventDefault() } } }); if (!this._isTouchDevice) { this.addHandler(this.colorBar, "dragstart", function (j) { j.preventDefault(); return false }) } var e = function (k) { d._setPosition(k, d.colorBar, d.colorBarPointer); if (d.colorMode == "saturation") { var j = d._valuesFromMouse(k, d.colorBar, 100, 100); d.color.s = j.y; d._saturation = j.y; d.colorMapImageOverlay.css("opacity", (d.color.s) / 100); d.color.setHsv(d.color.h, 100 - d.color.s, d.color.v) } else { var j = d._valuesFromMouse(k, d.colorBar, 100, 360); d.color.h = 360 - j.y; d._hue = d.color.h; d.color.setHsv(d.color.h, d.color.s, d.color.v) } d._updateUI(); d._raiseEvent("0", { color: d.color }); d.color.transparent = false }; var h = "mousemove.colorBar" + this.element.id; var g = "mousedown.colorBar" + this.element.id; var i = "mouseup.colorBar" + this.element.id; if (this._isTouchDevice) { h = a.jqx.mobile.getTouchEventName("touchmove") + ".colorBar" + this.element.id; g = a.jqx.mobile.getTouchEventName("touchstart") + ".colorBar" + this.element.id; i = a.jqx.mobile.getTouchEventName("touchend") + ".colorBar" + this.element.id } this.addHandler(this.colorBar, g, function (j) { if (d.disabled) { return } d.beginDragBar = true; e(j) }); this.addHandler(a(document), h, function (j) { if (d.disabled) { return } if (d.beginDragBar == true) { e(j); if (d._isTouchDevice) { j.preventDefault() } } }); this.addHandler(a(document), i, function (j) { if (d.disabled) { return } d.beginDrag = false; d.beginDragBar = false }) }, _removeHandlers: function () { this.removeHandler(this.transparent, "click"); this.removeHandler(this.host, "selectionstart"); this.removeHandler(this.blue, "keyup blur"); this.removeHandler(this.green, "keyup blur"); this.removeHandler(this.red, "keyup blur"); this.removeHandler(this.hex, "keyup blur"); this.removeHandler(this.colorMap, "dragstart"); this.removeHandler(this.colorBar, "dragstart"); this.removeHandler(this.colorMapPointer, "dragStart"); this.removeHandler(this.colorBarPointer, "dragStart"); var g = this.element.id; var e = "mousemove.colorBar" + g; var d = "mousedown.colorBar" + g; var f = "mouseup.colorBar" + g; var c = "mousedown.picker" + g; var b = "mousemove.picker" + g; if (this._isTouchDevice) { e = a.jqx.mobile.getTouchEventName("touchmove") + ".colorBar" + g; d = a.jqx.mobile.getTouchEventName("touchstart") + ".colorBar" + g; f = a.jqx.mobile.getTouchEventName("touchend") + ".colorBar" + g; c = a.jqx.mobile.getTouchEventName("touchstart") + ".picker" + g; b = a.jqx.mobile.getTouchEventName("touchmove") + ".picker" + g } this.removeHandler(this.colorMap, c); this.removeHandler(this.colorMap, b); this.removeHandler(this.colorBar, d); this.removeHandler(this.colorBar, e); this.removeHandler(a(document), b); this.removeHandler(a(document), e); this.removeHandler(a(document), f) }, _raiseEvent: function (g, c) { if (c == undefined) { c = { owner: null } } var d = this.events[g]; var e = c ? c : {}; e.owner = this; var f = new a.Event(d); f.owner = this; f.args = e; var b = this.host.trigger(f); return b }, setColor: function (b) { if (!b) { return } if (b == "transparent") { this.color.transparent = true; this.color.hex = "000"; this.color.r = 0; this.color.g = 0; this.color.b = 0 } else { if (b.r) { this.color = new a.jqx.color({ rgb: b }) } else { if (b.substring(0, 1) == "#") { this.color = new a.jqx.color({ hex: b.substring(1) }) } else { this.color = new a.jqx.color({ hex: b }) } } } this._updateUI(); this._setPositionFromValue(); this._raiseEvent("0", { color: this.color }) }, getColor: function () { return this.color }, resize: function (c, b) { this.width = c; this.height = b; this._setSize(); this.refresh() }, propertyChangedHandler: function (b, c, e, d) { if (b.isInitialized == undefined || b.isInitialized == false) { return } if (c == "colorMode") { b.refresh() } if (c == "color") { b._updateUI(); b._setPositionFromValue(); b._raiseEvent("0", { color: d }) } if (c == "width" || c == "height") { b._setSize(); b.refresh() } if (c == "showTransparent") { b.refresh() } if (c == "disabled") { this.element.disabled = d; if (d) { b.host.addClass(b.toThemeProperty("jqx-fill-state-disabled")) } else { b.host.removeClass(b.toThemeProperty("jqx-fill-state-disabled")) } } }, _valuesFromMouse: function (j, g, c, b) { var k = 0; var i = 0; var f = g.offset(); var p = g.height(); var d = g.width(); var n = j.pageX; var m = j.pageY; if (this._isTouchDevice) { var l = a.jqx.position(j); n = l.left; m = l.top } if (n < f.left) { k = 0 } else { if (n > f.left + d) { k = d } else { k = n - f.left + 1 } } if (m < f.top) { i = 0 } else { if (m > f.top + p) { i = p } else { i = m - f.top + 1 } } var h = parseInt(k / d * c); var o = parseInt(i / p * b); return { x: h, y: o } }, _validateKey: function (b) { if (b.keyCode == 9 || b.keyCode == 16 || b.keyCode == 38 || b.keyCode == 29 || b.keyCode == 40 || b.keyCode == 17 || b.keyCode == 37 || (b.ctrlKey && (b.keyCode == "c".charCodeAt() || b.keyCode == "v".charCodeAt())) || (b.ctrlKey && (b.keyCode == "C".charCodeAt() || b.keyCode == "V".charCodeAt()))) { return false } if (b.ctrlKey || b.shiftKey) { return false } return true }, _setValueInRange: function (d, c, b) { if (d == "" || isNaN(d)) { return c } d = parseInt(d); if (d > b) { return b } if (d < c) { return c } return d }, destroy: function () { a.jqx.utilities.resize(this.host, null, true); this.host.removeClass(); this._removeHandlers(); this.host.remove() }, setPointerStyle: function (c) { this.colorMapPointer.removeClass(); if (c == "transparent" || c.hex == "") { this.colorMapPointer.addClass(this.toThemeProperty("jqx-color-picker-pointer")) } var b = 105; var d = (c.r * 0.299) + (c.g * 0.587) + (c.b * 0.114); var e = (255 - d < b) ? "Black" : "White"; if (e == "Black") { this.colorMapPointer.addClass(this.toThemeProperty("jqx-color-picker-pointer")) } else { this.colorMapPointer.addClass(this.toThemeProperty("jqx-color-picker-pointer-alt")) } }, _updateUI: function () { var c = this; c.red.val(c.color.r); c.green.val(c.color.g); c.blue.val(c.color.b); c.hex.val(c.color.hex); var b = new a.jqx.color({ hex: "fff" }); if (this.colorMode == "saturation") { b.setHsv(this.color.h, 100, this.color.v); c.colorBar.css("background", "#" + b.hex) } else { b.setHsv(this.color.h, 100, 100); c.colorMap.css("background-color", "#" + b.hex) } c.preview.css("background", "#" + this.color.hex); c.setPointerStyle(this.color) }, _setSize: function () { if (this.width != null && this.width.toString().indexOf("px") != -1) { this.host.width(this.width) } else { if (this.width != undefined && !isNaN(this.width)) { this.host.width(this.width) } } if (this.height != null && this.height.toString().indexOf("px") != -1) { this.host.height(this.height) } else { if (this.height != undefined && !isNaN(this.height)) { this.host.height(this.height) } } if (this.host.width() < 130) { this.host.width(150) } if (this.host.height() < 70) { this.host.height(70) } if (this.width != null && this.width.toString().indexOf("%") != -1) { this.host.width(this.width) } if (this.height != null && this.height.toString().indexOf("%") != -1) { this.host.height(this.height) } }, _arrange: function () { var d = this.host.height(); var g = this.host.width(); var b = d - 44; if (this.showTransparent) { b = d - 64 } if (b <= 0) { return } this.colorMap.width(85 * g / 100); this.colorMap.height(b); this.colorBar.height(b); this.colorBar.css("left", this.colorMap.width() + 4); this.colorBar.width(8 * g / 100); this.colorBarPointer.width(this.colorBar.width()); this.colorPanel.width(g); this.colorPanel.height(40); if (this.showTransparent) { this.colorPanel.height(60) } this.colorPanel.css("top", b + 4); this.colorPanel.css("text-align", "left"); this.hex.width(this.colorMap.width() - this.colorBar.width() - 4); var c = this.red.prev().outerWidth() - this.hex.prev().outerWidth(); if (c < 4) { c = 4 } this.hex.css("margin-left", c + "px"); this.preview.width(this.colorBar.width() + 7); this.preview.height(25); this.preview.addClass(this.toThemeProperty("jqx-rc-all")); this.preview.addClass(this.toThemeProperty("jqx-color-picker-preview")); this.preview.css("left", this.colorMap.width() - 2); this.preview.css("top", "5px"); var e = this.hex.width(); var f = e - this.blue.prev().outerWidth() - this.green.prev().outerWidth() - 6; if (f > 0) { this.blue.width(f / 3); this.green.width(f / 3); this.red.width(f / 3); return } }, _getColorPointer: function () { var b = a("<div></div>"); b.addClass(this.toThemeProperty("jqx-color-picker-pointer")); return b }, _getImageUrl: function (c) { var b = c.css("backgroundImage"); b = b.replace('url("', ""); b = b.replace('")', ""); b = b.replace("url(", ""); b = b.replace(")", ""); return b }, refresh: function () { if (this._delayLoading) { return } this._saturation = null; this._hue = null; this.colorMap.removeClass(); this.colorBar.removeClass(); this.colorMap.addClass(this.toThemeProperty("jqx-disableselect")); this.colorBar.addClass(this.toThemeProperty("jqx-disableselect")); this.colorPanel.addClass(this.toThemeProperty("jqx-color-picker-panel")); this.colorBar.css("background-image", ""); this.colorMap.css("background-image", ""); if (this.colorMode == "saturation") { this.colorMap.addClass(this.toThemeProperty("jqx-color-picker-map")); this.colorBar.addClass(this.toThemeProperty("jqx-color-picker-bar")) } else { this.colorMap.addClass(this.toThemeProperty("jqx-color-picker-map-hue")); this.colorBar.addClass(this.toThemeProperty("jqx-color-picker-bar-hue")) } this._barImageURL = this._getImageUrl(this.colorBar); this._mapImageURL = this._getImageUrl(this.colorMap); this._arrange(); this.colorBar.children().remove(); this.colorBarImageContainer = a("<div style='overflow: hidden;'></div>"); this.colorBarImageContainer.width(this.colorBar.width()); this.colorBarImageContainer.height(this.colorBar.height()); this.colorBarImageContainer.appendTo(this.colorBar); this.colorBarImage = a("<img/>"); this.colorBarImage.appendTo(this.colorBarImageContainer); this.colorBarImage.attr("src", this._barImageURL); this.colorBar.css("background-image", "none"); this.colorBarImage.attr("width", this.colorBar.width()); this.colorBarImage.attr("height", this.colorBar.height()); this.colorBarPointer.appendTo(this.colorBar); this.colorMap.children().remove(); this.colorMapImage = a("<img/>"); this.colorMapImage.appendTo(this.colorMap); this.colorMapImage.attr("src", this._mapImageURL); this.colorMap.css("background-image", "none"); this.colorMapImage.attr("width", this.colorMap.width()); this.colorMapImage.attr("height", this.colorMap.height()); this.colorMapImageOverlay = a("<img style='position: absolute; left: 0; top: 0;'/>"); this.colorMapImageOverlay.prependTo(this.colorMap); this.colorMapImageOverlay.attr("src", this._mapImageOverlayURL); this.colorMapImageOverlay.attr("width", this.colorMap.width()); this.colorMapImageOverlay.attr("height", this.colorMap.height()); this.colorMapImageOverlay.css("opacity", 0); this.colorMapPointer.appendTo(this.colorMap); if (this.showTransparent) { this.transparent.appendTo(this.colorPanel) } this._updateUI(); this._setPositionFromValue() } }); a.jqx.color = function (d) { var b = { r: 0, g: 0, b: 0, h: 0, s: 0, v: 0, hex: "", hexToRgb: function (i) { i = this.validateHex(i); var h = "00", f = "00", e = "00"; if (i.length == 6) { h = i.substring(0, 2); f = i.substring(2, 4); e = i.substring(4, 6) } else { if (i.length > 4) { h = i.substring(4, i.length); i = i.substring(0, 4) } if (i.length > 2) { f = i.substring(2, i.length); i = i.substring(0, 2) } if (i.length > 0) { e = i.substring(0, i.length) } } return { r: this.hexToInt(h), g: this.hexToInt(f), b: this.hexToInt(e) } }, validateHex: function (e) { e = new String(e).toUpperCase(); e = e.replace(/[^A-F0-9]/g, "0"); if (e.length > 6) { e = e.substring(0, 6) } return e }, webSafeDec: function (e) { e = Math.round(e / 51); e *= 51; return e }, hexToWebSafe: function (i) { var h, f, e; if (i.length == 3) { h = i.substring(0, 1); f = i.substring(1, 1); e = i.substring(2, 1) } else { h = i.substring(0, 2); f = i.substring(2, 4); e = i.substring(4, 6) } return intToHex(this.webSafeDec(this.hexToInt(h))) + this.intToHex(this.webSafeDec(this.hexToInt(f))) + this.intToHex(this.webSafeDec(this.hexToInt(e))) }, rgbToWebSafe: function (e) { return { r: this.webSafeDec(e.r), g: this.webSafeDec(e.g), b: this.webSafeDec(e.b) } }, rgbToHex: function (e) { return this.intToHex(e.r) + this.intToHex(e.g) + this.intToHex(e.b) }, intToHex: function (f) { var e = (parseInt(f).toString(16)); if (e.length == 1) { e = ("0" + e) } return e.toUpperCase() }, hexToInt: function (e) { return (parseInt(e, 16)) }, hslToRgb: function (v) { var n = parseInt(v.h) / 360; var w = parseInt(v.s) / 100; var k = parseInt(v.l) / 100; if (k <= 0.5) { var f = k * (1 + w) } else { var f = k + w - (k * w) } var i = 2 * k - f; var t = n + (1 / 3); var j = n; var m = n - (1 / 3); var e = Math.round(this.hueToRgb(i, f, t) * 255); var o = Math.round(this.hueToRgb(i, f, j) * 255); var u = Math.round(this.hueToRgb(i, f, m) * 255); return { r: e, g: o, b: u } }, hueToRgb: function (g, f, e) { if (e < 0) { e += 1 } else { if (e > 1) { e -= 1 } } if ((e * 6) < 1) { return g + (f - g) * e * 6 } else { if ((e * 2) < 1) { return f } else { if ((e * 3) < 2) { return g + (f - g) * ((2 / 3) - e) * 6 } else { return g } } } }, rgbToHsv: function (h) { var k = h.r / 255; var j = h.g / 255; var f = h.b / 255; hsv = { h: 0, s: 0, v: 0 }; var i = 0; var e = 0; if (k >= j && k >= f) { e = k; i = (j > f) ? f : j } else { if (j >= f && j >= k) { e = j; i = (k > f) ? f : k } else { e = f; i = (j > k) ? k : j } } hsv.v = e; hsv.s = (e) ? ((e - i) / e) : 0; if (!hsv.s) { hsv.h = 0 } else { delta = e - i; if (k == e) { hsv.h = (j - f) / delta } else { if (j == e) { hsv.h = 2 + (f - k) / delta } else { hsv.h = 4 + (k - j) / delta } } hsv.h = parseInt(hsv.h * 60); if (hsv.h < 0) { hsv.h += 360 } } hsv.s = parseInt(hsv.s * 100); hsv.v = parseInt(hsv.v * 100); return hsv }, hsvToRgb: function (l) { rgb = { r: 0, g: 0, b: 0 }; var k = l.h; var r = l.s; var n = l.v; if (r == 0) { if (n == 0) { rgb.r = rgb.g = rgb.b = 0 } else { rgb.r = rgb.g = rgb.b = parseInt(n * 255 / 100) } } else { if (k == 360) { k = 0 } k /= 60; r = r / 100; n = n / 100; var j = parseInt(k); var m = k - j; var g = n * (1 - r); var e = n * (1 - (r * m)); var o = n * (1 - (r * (1 - m))); switch (j) { case 0: rgb.r = n; rgb.g = o; rgb.b = g; break; case 1: rgb.r = e; rgb.g = n; rgb.b = g; break; case 2: rgb.r = g; rgb.g = n; rgb.b = o; break; case 3: rgb.r = g; rgb.g = e; rgb.b = n; break; case 4: rgb.r = o; rgb.g = g; rgb.b = n; break; case 5: rgb.r = n; rgb.g = g; rgb.b = e; break } rgb.r = parseInt(rgb.r * 255); rgb.g = parseInt(rgb.g * 255); rgb.b = parseInt(rgb.b * 255) } return rgb }, setRgb: function (h, f, e) { var j = function (g) { if (g < 0 || g > 255) { return 0 } if (isNaN(parseInt(g))) { return 0 } return g }; this.r = j(h); this.g = j(f); this.b = j(e); var i = this.rgbToHsv(this); this.h = i.h; this.s = i.s; this.v = i.v; this.hex = this.rgbToHex(this) }, setHsl: function (g, f, e) { this.h = g; this.s = f; this.l = e; var i = this.hslToRgb(this); this.r = i.r; this.g = i.g; this.b = i.b; this.hex = this.rgbToHex(i) }, setHsv: function (g, f, e) { this.h = g; this.s = f; this.v = e; var i = this.hsvToRgb(this); this.r = i.r; this.g = i.g; this.b = i.b; this.hex = this.rgbToHex(i) }, setHex: function (e) { this.hex = e; var g = this.hexToRgb(this.hex); this.r = g.r; this.g = g.g; this.b = g.b; var f = this.rgbToHsv(g); this.h = f.h; this.s = f.s; this.v = f.v } }; if (d) { if (d.hex) { var c = b.validateHex(d.hex); b.setHex(c) } else { if (d.r) { b.setRgb(d.r, d.g, d.b) } else { if (d.h) { b.setHsv(d.h, d.s, d.v) } else { if (d.rgb) { b.setRgb(d.rgb.r, d.rgb.g, d.rgb.b) } } } } } return b } })(jqxBaseFramework);


