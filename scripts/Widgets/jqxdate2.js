/*
Globalize
 */
(function (j, g) { var r, w, l, x, p, v, u, t, m, a, k, y, q, c, n, s, z, o, i, h, d, f, e, b; r = function (A) { return new r.prototype.init(A) }; if (typeof require !== "undefined" && typeof exports !== "undefined" && typeof module !== "undefined") { module.exports = r } else { j.Globalize = r } r.cultures = {}; r.prototype = { constructor: r, init: function (A) { this.cultures = r.cultures; this.cultureSelector = A; return this } }; r.prototype.init.prototype = r.prototype; r.cultures["default"] = { name: "en", englishName: "English", nativeName: "English", isRTL: false, language: "en", numberFormat: { pattern: ["-n"], decimals: 2, ",": ",", ".": ".", groupSizes: [3], "+": "+", "-": "-", "NaN": "NaN", negativeInfinity: "-Infinity", positiveInfinity: "Infinity", percent: { pattern: ["-n %", "n %"], decimals: 2, groupSizes: [3], ",": ",", ".": ".", symbol: "%" }, currency: { pattern: ["($n)", "$n"], decimals: 2, groupSizes: [3], ",": ",", ".": ".", symbol: "$" } }, calendars: { standard: { name: "Gregorian_USEnglish", "/": "/", ":": ":", firstDay: 0, days: { names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"] }, months: { names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""] }, AM: ["AM", "am", "AM"], PM: ["PM", "pm", "PM"], eras: [{ name: "A.D.", start: null, offset: 0 }], twoDigitYearMax: 2029, patterns: { d: "M/d/yyyy", D: "dddd, MMMM dd, yyyy", t: "h:mm tt", T: "h:mm:ss tt", f: "dddd, MMMM dd, yyyy h:mm tt", F: "dddd, MMMM dd, yyyy h:mm:ss tt", M: "MMMM dd", Y: "yyyy MMMM", S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss" } } }, messages: {} }; r.cultures["default"].calendar = r.cultures["default"].calendars.standard; r.cultures.en = r.cultures["default"]; r.cultureSelector = "en"; w = /^0x[a-f0-9]+$/i; l = /^[+\-]?infinity$/i; x = /^[+\-]?\d*\.?\d*(e[+\-]?\d+)?$/; p = /^\s+|\s+$/g; v = function (D, C) { if (D.indexOf) { return D.indexOf(C) } for (var A = 0, B = D.length; A < B; A++) { if (D[A] === C) { return A } } return -1 }; u = function (B, A) { return B.substr(B.length - A.length) === A }; t = function () { var J, C, A, B, G, H, F = arguments[0] || {}, E = 1, D = arguments.length, I = false; if (typeof F === "boolean") { I = F; F = arguments[1] || {}; E = 2 } if (typeof F !== "object" && !a(F)) { F = {} } for (; E < D; E++) { if ((J = arguments[E]) != null) { for (C in J) { A = F[C]; B = J[C]; if (F === B) { continue } if (I && B && (k(B) || (G = m(B)))) { if (G) { G = false; H = A && m(A) ? A : [] } else { H = A && k(A) ? A : {} } F[C] = t(I, H, B) } else { if (B !== g) { F[C] = B } } } } } return F }; m = Array.isArray || function (A) { return Object.prototype.toString.call(A) === "[object Array]" }; a = function (A) { return Object.prototype.toString.call(A) === "[object Function]" }; k = function (A) { return Object.prototype.toString.call(A) === "[object Object]" }; y = function (B, A) { return B.indexOf(A) === 0 }; q = function (A) { return (A + "").replace(p, "") }; c = function (A) { if (isNaN(A)) { return NaN } return Math[A < 0 ? "ceil" : "floor"](A) }; n = function (D, B, C) { var A; for (A = D.length; A < B; A += 1) { D = (C ? ("0" + D) : (D + "0")) } return D }; s = function (D, A) { var C = 0, F = false; for (var E = 0, B = D.length; E < B; E++) { var G = D.charAt(E); switch (G) { case "'": if (F) { A.push("'") } else { C++ } F = false; break; case "\\": if (F) { A.push("\\") } F = !F; break; default: A.push(G); F = false; break } } return C }; z = function (E, D) { D = D || "F"; var C, B = E.patterns, A = D.length; if (A === 1) { C = B[D]; if (!C) { throw "Invalid date format string '" + D + "'." } D = C } else { if (A === 2 && D.charAt(0) === "%") { D = D.charAt(1) } } return D }; o = function (U, Y, Z) { var M = Z.calendar, I = M.convert, ab; if (!Y || !Y.length || Y === "i") { if (Z && Z.name.length) { if (I) { ab = o(U, M.patterns.F, Z) } else { var J = new Date(U.getTime()), Q = d(U, M.eras); J.setFullYear(f(U, M, Q)); ab = J.toLocaleString() } } else { ab = U.toString() } return ab } var V = M.eras, B = Y === "s"; Y = z(M, Y); ab = []; var F, W = ["0", "00", "000"], K, L, A = /([^d]|^)(d|dd)([^d]|$)/g, aa = 0, R = h(), C; function H(ac, af) { var ae, ad = ac + ""; if (af > 1 && ad.length < af) { ae = (W[af - 2] + ad); return ae.substr(ae.length - af, af) } else { ae = ad } return ae } function X() { if (K || L) { return K } K = A.test(Y); L = true; return K } function D(ad, ac) { if (C) { return C[ac] } switch (ac) { case 0: return ad.getFullYear(); case 1: return ad.getMonth(); case 2: return ad.getDate(); default: throw "Invalid part value " + ac } } if (!B && I) { C = I.fromGregorian(U) } for (; ;) { var G = R.lastIndex, P = R.exec(Y); var N = Y.slice(G, P ? P.index : Y.length); aa += s(N, ab); if (!P) { break } if (aa % 2) { ab.push(P[0]); continue } var S = P[0], E = S.length; switch (S) { case "ddd": case "dddd": var O = (E === 3) ? M.days.namesAbbr : M.days.names; ab.push(O[U.getDay()]); break; case "d": case "dd": K = true; ab.push(H(D(U, 2), E)); break; case "MMM": case "MMMM": var T = D(U, 1); ab.push((M.monthsGenitive && X()) ? (M.monthsGenitive[E === 3 ? "namesAbbr" : "names"][T]) : (M.months[E === 3 ? "namesAbbr" : "names"][T])); break; case "M": case "MM": ab.push(H(D(U, 1) + 1, E)); break; case "y": case "yy": case "yyyy": T = C ? C[0] : f(U, M, d(U, V), B); if (E < 4) { T = T % 100 } ab.push(H(T, E)); break; case "h": case "hh": F = U.getHours() % 12; if (F === 0) { F = 12 } ab.push(H(F, E)); break; case "H": case "HH": ab.push(H(U.getHours(), E)); break; case "m": case "mm": ab.push(H(U.getMinutes(), E)); break; case "s": case "ss": ab.push(H(U.getSeconds(), E)); break; case "t": case "tt": T = U.getHours() < 12 ? (M.AM ? M.AM[0] : " ") : (M.PM ? M.PM[0] : " "); ab.push(E === 1 ? T.charAt(0) : T); break; case "f": case "ff": case "fff": ab.push(H(U.getMilliseconds(), 3).substr(0, E)); break; case "z": case "zz": F = U.getTimezoneOffset() / 60; ab.push((F <= 0 ? "+" : "-") + H(Math.floor(Math.abs(F)), E)); break; case "zzz": F = U.getTimezoneOffset() / 60; ab.push((F <= 0 ? "+" : "-") + H(Math.floor(Math.abs(F)), 2) + ":" + H(Math.abs(U.getTimezoneOffset() % 60), 2)); break; case "g": case "gg": if (M.eras) { ab.push(M.eras[d(U, V)].name) } break; case "/": ab.push(M["/"]); break; default: throw "Invalid date format pattern '" + S + "'." } } return ab.join("") }; (function () { var A; A = function (H, I, P) { var F = P.groupSizes, B = F[0], C = 1, M = Math.pow(10, I), D = Math.round(H * M) / M; if (!isFinite(D)) { D = H } H = D; var G = H + "", O = "", L = G.split(/e/i), N = L.length > 1 ? parseInt(L[1], 10) : 0; G = L[0]; L = G.split("."); G = L[0]; O = L.length > 1 ? L[1] : ""; var E; if (N > 0) { O = n(O, N, false); G += O.slice(0, N); O = O.substr(N) } else { if (N < 0) { N = -N; G = n(G, N + 1, true); O = G.slice(-N, G.length) + O; G = G.slice(0, -N) } } if (I > 0) { O = P["."] + ((O.length > I) ? O.slice(0, I) : n(O, I)) } else { O = "" } var K = G.length - 1, Q = P[","], J = ""; while (K >= 0) { if (B === 0 || B > K) { return G.slice(0, K + 1) + (J.length ? (Q + J + O) : O) } J = G.slice(K - B + 1, K + 1) + (J.length ? (Q + J) : ""); K -= B; if (C < F.length) { B = F[C]; C++ } } return G.slice(0, K + 1) + Q + J + O }; i = function (M, L, F) { if (!isFinite(M)) { if (M === Infinity) { return F.numberFormat.positiveInfinity } if (M === -Infinity) { return F.numberFormat.negativeInfinity } return F.numberFormat.NaN } if (!L || L === "i") { return F.name.length ? M.toLocaleString() : M.toString() } L = L || "D"; var D = F.numberFormat, E = Math.abs(M), G = -1, K; if (L.length > 1) { G = parseInt(L.slice(1), 10) } var J = L.charAt(0).toUpperCase(), N; switch (J) { case "D": K = "n"; E = c(E); if (G !== -1) { E = n("" + E, G, true) } if (M < 0) { E = "-" + E } break; case "N": N = D; case "C": N = N || D.currency; case "P": N = N || D.percent; K = M < 0 ? N.pattern[0] : (N.pattern[1] || "n"); if (G === -1) { G = N.decimals } E = A(E * (J === "P" ? 100 : 1), G, N); break; default: throw "Bad number format specifier: " + J } var B = /n|\$|-|%/g, I = ""; for (; ;) { var H = B.lastIndex, C = B.exec(K); I += K.slice(H, C ? C.index : K.length); if (!C) { break } switch (C[0]) { case "n": I += E; break; case "$": I += D.currency.symbol; break; case "-": if (/[1-9]/.test(E)) { I += D["-"] } break; case "%": I += D.percent.symbol; break } } return I } }()); h = function () { return (/\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g) }; d = function (C, B) { if (!B) { return 0 } var F, E = C.getTime(); for (var D = 0, A = B.length; D < A; D++) { F = B[D].start; if (F === null || E >= F) { return D } } return 0 }; f = function (B, D, A, E) { var C = B.getFullYear(); if (!E && D.eras) { C -= D.eras[A].offset } return C }; (function () { var B, A, D, C, G, F, E; B = function (M, K) { if (K < 100) { var I = new Date(), H = d(I), L = f(I, M, H), J = M.twoDigitYearMax; J = typeof J === "string" ? new Date().getFullYear() % 100 + parseInt(J, 10) : J; K += L - (L % 100); if (K > J) { K -= 100 } } return K }; A = function (L, K, I) { var H, M = L.days, J = L._upperDays; if (!J) { L._upperDays = J = [E(M.names), E(M.namesAbbr), E(M.namesShort)] } K = F(K); if (I) { H = v(J[1], K); if (H === -1) { H = v(J[2], K) } } else { H = v(J[0], K) } return H }; D = function (O, N, J) { var H = O.months, I = O.monthsGenitive || O.months, L = O._upperMonths, M = O._upperMonthsGen; if (!L) { O._upperMonths = L = [E(H.names), E(H.namesAbbr)]; O._upperMonthsGen = M = [E(I.names), E(I.namesAbbr)] } N = F(N); var K = v(J ? L[1] : L[0], N); if (K < 0) { K = v(J ? M[1] : M[0], N) } return K }; C = function (H, S) { var U = H._parseRegExp; if (!U) { H._parseRegExp = U = {} } else { var L = U[S]; if (L) { return L } } var R = z(H, S).replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1"), P = ["^"], I = [], O = 0, K = 0, X = h(), M; while ((M = X.exec(R)) !== null) { var W = R.slice(O, M.index); O = X.lastIndex; K += s(W, P); if (K % 2) { P.push(M[0]); continue } var J = M[0], N = J.length, T; switch (J) { case "dddd": case "ddd": case "MMMM": case "MMM": case "gg": case "g": T = "(\\D+)"; break; case "tt": case "t": T = "(\\D*)"; break; case "yyyy": case "fff": case "ff": case "f": T = "(\\d{" + N + "})"; break; case "dd": case "d": case "MM": case "M": case "yy": case "y": case "HH": case "H": case "hh": case "h": case "mm": case "m": case "ss": case "s": T = "(\\d\\d?)"; break; case "zzz": T = "([+-]?\\d\\d?:\\d{2})"; break; case "zz": case "z": T = "([+-]?\\d\\d?)"; break; case "/": T = "(\\/)"; break; default: throw "Invalid date format pattern '" + J + "'." } if (T) { P.push(T) } I.push(M[0]) } s(R.slice(O), P); P.push("$"); var V = P.join("").replace(/\s+/g, "\\s+"), Q = { regExp: V, groups: I }; return U[S] = Q }; G = function (J, H, I) { return J < H || J > I }; F = function (H) { return H.split("\u00A0").join(" ").toUpperCase() }; E = function (H) { var K = []; for (var J = 0, I = H.length; J < I; J++) { K[J] = F(H[J]) } return K }; e = function (ab, ai, aj) { ab = q(ab); var U = aj.calendar, ao = C(U, ai), O = new RegExp(ao.regExp).exec(ab); if (O === null) { return null } var ak = ao.groups, Z = null, S = null, an = null, am = null, T = null, M = 0, ae, ad = 0, al = 0, H = 0, J = null, V = false; for (var af = 0, ah = ak.length; af < ah; af++) { var I = O[af + 1]; if (I) { var aa = ak[af], L = aa.length, N = parseInt(I, 10); switch (aa) { case "dd": case "d": am = N; if (G(am, 1, 31)) { return null } break; case "MMM": case "MMMM": an = D(U, I, L === 3); if (G(an, 0, 11)) { return null } break; case "M": case "MM": an = N - 1; if (G(an, 0, 11)) { return null } break; case "y": case "yy": case "yyyy": S = L < 4 ? B(U, N) : N; if (G(S, 0, 9999)) { return null } break; case "h": case "hh": M = N; if (M === 12) { M = 0 } if (G(M, 0, 11)) { return null } break; case "H": case "HH": M = N; if (G(M, 0, 23)) { return null } break; case "m": case "mm": ad = N; if (G(ad, 0, 59)) { return null } break; case "s": case "ss": al = N; if (G(al, 0, 59)) { return null } break; case "tt": case "t": V = U.PM && (I === U.PM[0] || I === U.PM[1] || I === U.PM[2]); if (!V && (!U.AM || (I !== U.AM[0] && I !== U.AM[1] && I !== U.AM[2]))) { return null } break; case "f": case "ff": case "fff": H = N * Math.pow(10, 3 - L); if (G(H, 0, 999)) { return null } break; case "ddd": case "dddd": T = A(U, I, L === 3); if (G(T, 0, 6)) { return null } break; case "zzz": var K = I.split(/:/); if (K.length !== 2) { return null } ae = parseInt(K[0], 10); if (G(ae, -12, 13)) { return null } var Q = parseInt(K[1], 10); if (G(Q, 0, 59)) { return null } J = (ae * 60) + (y(I, "-") ? -Q : Q); break; case "z": case "zz": ae = N; if (G(ae, -12, 13)) { return null } J = ae * 60; break; case "g": case "gg": var W = I; if (!W || !U.eras) { return null } W = q(W.toLowerCase()); for (var ag = 0, ac = U.eras.length; ag < ac; ag++) { if (W === U.eras[ag].name.toLowerCase()) { Z = ag; break } } if (Z === null) { return null } break } } } var R = new Date(), Y, P = U.convert; Y = P ? P.fromGregorian(R)[0] : R.getFullYear(); if (S === null) { S = Y } else { if (U.eras) { S += U.eras[(Z || 0)].offset } } if (an === null) { an = 0 } if (am === null) { am = 1 } if (P) { R = P.toGregorian(S, an, am); if (R === null) { return null } } else { R.setFullYear(S, an, am); if (R.getDate() !== am) { return null } if (T !== null && R.getDay() !== T) { return null } } if (V && M < 12) { M += 12 } R.setHours(M, ad, al, H); if (J !== null) { var X = R.getMinutes() - (J + R.getTimezoneOffset()); R.setHours(R.getHours() + parseInt(X / 60, 10), X % 60) } return R } }()); b = function (D, C, B) { var F = C["-"], E = C["+"], A; switch (B) { case "n -": F = " " + F; E = " " + E; case "n-": if (u(D, F)) { A = ["-", D.substr(0, D.length - F.length)] } else { if (u(D, E)) { A = ["+", D.substr(0, D.length - E.length)] } } break; case "- n": F += " "; E += " "; case "-n": if (y(D, F)) { A = ["-", D.substr(F.length)] } else { if (y(D, E)) { A = ["+", D.substr(E.length)] } } break; case "(n)": if (y(D, "(") && u(D, ")")) { A = ["-", D.substr(1, D.length - 2)] } break } return A || ["", D] }; r.prototype.findClosestCulture = function (A) { return r.findClosestCulture.call(this, A) }; r.prototype.format = function (A, B, C) { return r.format.call(this, A, B, C) }; r.prototype.localize = function (A, B) { return r.localize.call(this, A, B) }; r.prototype.parseInt = function (B, A, C) { return r.parseInt.call(this, B, A, C) }; r.prototype.parseFloat = function (B, A, C) { return r.parseFloat.call(this, B, A, C) }; r.prototype.culture = function (A) { return r.culture.call(this, A) }; r.addCultureInfo = function (E, B, D) { var C = {}, A = false; if (typeof E !== "string") { D = E; E = this.culture().name; C = this.cultures[E] } else { if (typeof B !== "string") { D = B; A = (this.cultures[E] == null); C = this.cultures[E] || this.cultures["default"] } else { A = true; C = this.cultures[B] } } this.cultures[E] = t(true, {}, C, D); if (A) { this.cultures[E].calendar = this.cultures[E].calendars.standard } }; r.findClosestCulture = function (A) { var I; if (!A) { return this.findClosestCulture(this.cultureSelector) || this.cultures["default"] } if (typeof A === "string") { A = A.split(",") } if (m(A)) { var C, M = this.cultures, K = A, H, D = K.length, L = []; for (H = 0; H < D; H++) { A = q(K[H]); var B, G = A.split(";"); C = q(G[0]); if (G.length === 1) { B = 1 } else { A = q(G[1]); if (A.indexOf("q=") === 0) { A = A.substr(2); B = parseFloat(A); B = isNaN(B) ? 0 : B } else { B = 1 } } L.push({ lang: C, pri: B }) } L.sort(function (O, N) { if (O.pri < N.pri) { return 1 } else { if (O.pri > N.pri) { return -1 } } return 0 }); for (H = 0; H < D; H++) { C = L[H].lang; I = M[C]; if (I) { return I } } for (H = 0; H < D; H++) { C = L[H].lang; do { var J = C.lastIndexOf("-"); if (J === -1) { break } C = C.substr(0, J); I = M[C]; if (I) { return I } } while (1) } for (H = 0; H < D; H++) { C = L[H].lang; for (var F in M) { var E = M[F]; if (E.language == C) { return E } } } } else { if (typeof A === "object") { return A } } return I || null }; r.format = function (B, C, D) { var A = this.findClosestCulture(D); if (B instanceof Date) { B = o(B, C, A) } else { if (typeof B === "number") { B = i(B, C, A) } } return B }; r.localize = function (A, B) { return this.findClosestCulture(B).messages[A] || this.cultures["default"].messages[A] }; r.parseDate = function (I, G, E) { E = this.findClosestCulture(E); var C, A, B; if (G) { if (typeof G === "string") { G = [G] } if (G.length) { for (var F = 0, D = G.length; F < D; F++) { var H = G[F]; if (H) { C = e(I, H, E); if (C) { break } } } } } else { B = E.calendar.patterns; for (A in B) { C = e(I, B[A], E); if (C) { break } } } return C || null }; r.parseInt = function (B, A, C) { return c(r.parseFloat(B, A, C)) }; r.parseFloat = function (O, H, J) { if (typeof H !== "number") { J = H; H = 10 } var Q = this.findClosestCulture(J); var T = NaN, F = Q.numberFormat; if (O.indexOf(Q.numberFormat.currency.symbol) > -1) { O = O.replace(Q.numberFormat.currency.symbol, ""); O = O.replace(Q.numberFormat.currency["."], Q.numberFormat["."]) } if (O.indexOf(Q.numberFormat.percent.symbol) > -1) { O = O.replace(Q.numberFormat.percent.symbol, "") } O = O.replace(/ /g, ""); if (l.test(O)) { T = parseFloat(O) } else { if (!H && w.test(O)) { T = parseInt(O, 16) } else { var C = b(O, F, F.pattern[0]), S = C[0], I = C[1]; if (S === "" && F.pattern[0] !== "(n)") { C = b(O, F, "(n)"); S = C[0]; I = C[1] } if (S === "" && F.pattern[0] !== "-n") { C = b(O, F, "-n"); S = C[0]; I = C[1] } S = S || "+"; var N, K, R = I.indexOf("e"); if (R < 0) { R = I.indexOf("E") } if (R < 0) { K = I; N = null } else { K = I.substr(0, R); N = I.substr(R + 1) } var P, G, D = F["."], A = K.indexOf(D); if (A < 0) { P = K; G = null } else { P = K.substr(0, A); G = K.substr(A + D.length) } var L = F[","]; P = P.split(L).join(""); var E = L.replace(/\u00A0/g, " "); if (L !== E) { P = P.split(E).join("") } var M = S + P; if (G !== null) { M += "." + G } if (N !== null) { var B = b(N, F, "-n"); M += "e" + (B[0] || "+") + B[1] } if (x.test(M)) { T = parseFloat(M) } } } return T }; r.culture = function (A) { if (typeof A !== "undefined") { this.cultureSelector = A } return this.findClosestCulture(A) || this.cultures["default"] } }(this));

/*
jqxdate
*/

(function (a) { a.jqx.jqxWidget("jqxDateTimeInput", "", {}); a.extend(a.jqx._jqxDateTimeInput.prototype, { defineInstance: function () { var b = { value: a.jqx._jqxDateTimeInput.getDateTime(new Date()), minDate: a.jqx._jqxDateTimeInput.getDateTime(new Date()), maxDate: a.jqx._jqxDateTimeInput.getDateTime(new Date()), min: new Date(1900, 0, 1), max: new Date(2100, 0, 1), rowHeaderWidth: 25, enableViews: true, views: ["month", "year", "decade"], selectableDays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], change: null, changing: null, columnHeaderHeight: 20, titleHeight: 25, firstDayOfWeek: 0, showWeekNumbers: false, showTimeButton: false, cookies: false, cookieoptions: null, showFooter: false, formatString: "dd/MM/yyyy", width: 200, height: 25, dayNameFormat: "firstTwoLetters", textAlign: "left", readonly: false, culture: "default", activeEditor: null, showCalendarButton: true, openDelay: 250, closeDelay: 300, closeCalendarAfterSelection: true, isEditing: false, enableBrowserBoundsDetection: false, dropDownHorizontalAlignment: "left", enableAbsoluteSelection: false, disabled: false, buttonSize: 18, animationType: "slide", dropDownWidth: "200px", restrictedDates: new Array(), dropDownHeight: "205px", selectionMode: "default", renderMode: "full", rtl: false, timeRange: null, _editor: false, todayString: "Today", clearString: "Clear", popupZIndex: 9999999999999, allowNullDate: true, changeType: null, placeHolder: "", enableHover: true, allowKeyboardDelete: true, localization: { backString: "Back", forwardString: "Forward", todayString: "Today", clearString: "Clear", calendar: { name: "Gregorian_USEnglish", "/": "/", ":": ":", firstDay: 0, days: { names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"] }, months: { names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""] }, AM: ["AM", "am", "AM"], PM: ["PM", "pm", "PM"], eras: [{ name: "A.D.", start: null, offset: 0 }], twoDigitYearMax: 2029, patterns: { d: "M/d/yyyy", D: "dddd, MMMM dd, yyyy", t: "h:mm tt", T: "h:mm:ss tt", f: "dddd, MMMM dd, yyyy h:mm tt", F: "dddd, MMMM dd, yyyy h:mm:ss tt", M: "MMMM dd", Y: "yyyy MMMM", S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss", ISO: "yyyy-MM-dd hh:mm:ss" } } }, events: ["valueChanged", "textchanged", "mousedown", "mouseup", "keydown", "keyup", "keypress", "open", "close", "change"], aria: { "aria-valuenow": { name: "getDate", type: "date" }, "aria-valuetext": { name: "getText", type: "string" }, "aria-valuemin": { name: "min", type: "date" }, "aria-valuemax": { name: "max", type: "date" }, "aria-disabled": { name: "disabled", type: "boolean" } } }; a.extend(true, this, b); this.value._setHours(0); this.value._setMinutes(0); this.value._setSeconds(0); this.value._setMilliseconds(0); this.minDate._setYear(1900); this.minDate._setMonth(1); this.minDate._setDay(1); this.minDate._setHours(1); this.minDate._setMinutes(1); this.minDate._setSeconds(1); this.minDate._setMilliseconds(1); this.maxDate._setYear(2100); this.maxDate._setMonth(1); this.maxDate._setDay(1); this.maxDate._setHours(1); this.maxDate._setMinutes(1); this.maxDate._setSeconds(1); this.maxDate._setMilliseconds(1); this.defaultMinDate = this.minDate; this.defaultMaxDate = this.maxDate; return b }, createInstance: function (h) { var b = ""; var e = this; if (!e.host.jqxCalendar) { throw new Error("jqxDateTimeInput: Missing reference to jqxcalendar.js.") } if (e.host.attr("value")) { b = true; var c = e.host.attr("value"); if (e.selectionMode != "range") { var d = new Date(c); if (d != undefined && !isNaN(d)) { e.value = a.jqx._jqxDateTimeInput.getDateTime(d) } } } if (e.value != null && e.value instanceof Date) { e.value = a.jqx._jqxDateTimeInput.getDateTime(e.value) } else { if (e.value != null && typeof (e.value) == "string") { var d = new Date(e.value); if (d != undefined && !isNaN(d)) { e.value = a.jqx._jqxDateTimeInput.getDateTime(d) } else { if (e.value.indexOf(",") >= 0) { e.value = e.value.replace(/\,/g, "/"); var d = new Date(e.value); if (d != undefined && !isNaN(d)) { e.value = a.jqx._jqxDateTimeInput.getDateTime(d) } } } } } this._initTimeRange(); this._validateTimeRange(); e.host.attr("data-role", "input"); e.render(); a.jqx.aria(this); if (e.getDate() != null) { a.jqx.aria(this, "aria-label", "Current focused date is " + e.getDate().toLocaleString()) } else { a.jqx.aria(this, "aria-label", "Current focused date is Null") } if (e.minDate !== e.defaultMinDate) { e.min = e.minDate } if (e.maxDate !== e.defaultMaxDate) { e.max = e.maxDate } e.setMaxDate(e.max, false); e.setMinDate(e.min, false); if (e.selectionMode == "range") { if (b) { var c = e.host.attr("value"); var g = c.substring(0, c.indexOf("-")); var f = c.substring(c.indexOf("-") + 1); var k = new Date(g); var j = new Date(f); if (k != undefined && !isNaN(k)) { if (j != undefined && !isNaN(j)) { e.setRange(k, j) } } } else { if (e.getDate() != null) { e.setRange(e.getDate(), e.getDate()) } } } }, _validateTimeRange: function () { if (this.timeRange) { var b = this.value.dateTime.getHours(); var c = this.value.dateTime.getMinutes(); if (b <= this.timeRange.minHour) { this.value._setHours(this.timeRange.minHour); if (c < this.timeRange.minMinute) { this.value._setMinutes(this.timeRange.minMinute); this._updateEditorsValue() } else { this._updateEditorsValue() } } if (b >= this.timeRange.maxHour) { this.value._setHours(this.timeRange.maxHour); if (c > this.timeRange.maxMinute) { this.value._setMinutes(this.timeRange.maxMinute); this._updateEditorsValue() } else { this._updateEditorsValue() } } } }, _initTimeRange: function () { if (this.timeRange) { if (this.timeRange.min) { var c = null; if (this.timeRange.min.indexOf("AM") >= 0 || this.timeRange.min.indexOf("PM") >= 0) { c = this.timeRange.min.indexOf("AM") >= 0 ? "AM" : "PM" } var d = this.timeRange.min.split(":"); var b = parseInt(d[0]); var f = parseInt(d[1]); if (c) { this.timeRange.minDefaultHour = b; this.timeRange.minMeridian = c } if (c && c == "PM") { b += 12 } this.timeRange.minHour = b; this.timeRange.minMinute = f } if (this.timeRange.max) { var c = null; if (this.timeRange.max.indexOf("AM") >= 0 || this.timeRange.max.indexOf("PM") >= 0) { c = this.timeRange.max.indexOf("AM") >= 0 ? "AM" : "PM" } var e = this.timeRange.max.split(":"); var b = parseInt(e[0]); var f = parseInt(e[1]); if (c) { this.timeRange.maxDefaultHour = b; this.timeRange.maxMeridian = c } if (c && c == "PM") { b += 12 } this.timeRange.maxHour = b; this.timeRange.maxMinute = f } } }, _format: function (d, e, b) { var f = false; try { if (Globalize != undefined) { f = true } } catch (c) { } if (a.global) { return a.global.format(d, e, this.culture) } else { if (f) { try { var e = Globalize.format(d, e, this.culture); return e } catch (c) { return Globalize.format(d, e) } } else { if (a.jqx.dataFormat) { if (d instanceof Date) { return a.jqx.dataFormat.formatdate(d, e, this.localization.calendar) } else { if (typeof d === "number") { return a.jqx.dataFormat.formatnumber(d, e, this.localization.calendar) } else { return a.jqx.dataFormat.formatdate(d, e, this.localization.calendar) } } } else { throw new Error("jqxDateTimeInput: Missing reference to globalize.js.") } } } }, render: function () { var l = this; l._removeHandlers(); l.element.innerHTML = ""; l.host.attr({ role: "textbox" }); l.id = a.jqx.utilities.createId(); var f = a.jqx.utilities.createId(); var k = a.jqx.utilities.createId(); l._setSize(); if (l.width == null) { l.width = l.host.width(); l.host.width(l.width) } l.touch = a.jqx.mobile.isTouchDevice(); var c = a("<div class='jqx-max-size jqx-position-relative'></div>").appendTo(l.host); l.dateTimeInput = a("<input style='padding-left: 3px; padding-right: 3px;' class='jqx-position-absolute' id='input" + l.element.id + "' autocomplete='off' type='textarea'/>").appendTo(c); l.dateTimeInput.addClass(l.toThemeProperty("jqx-reset")); l.dateTimeInput.addClass(l.toThemeProperty("jqx-clear")); l.dateTimeInput.addClass(l.toThemeProperty("jqx-input-content")); l.dateTimeInput.addClass(l.toThemeProperty("jqx-widget-content")); l.dateTimeInput.addClass(l.toThemeProperty("jqx-rc-all")); l.dateTimeInput.attr("placeHolder", l.placeHolder); if (l.renderMode != "full") { l.dateTimeInput.remove() } var d = l.host.attr("name"); if (d) { l.dateTimeInput.attr("name", d) } if (l.host.attr("tabindex")) { l.dateTimeInput.attr("tabindex", l.host.attr("tabindex")); l.host.removeAttr("tabindex") } if (l.rtl) { l.dateTimeInput.css("direction", "rtl"); l.dateTimeInput.addClass("jqx-rtl") } l.calendarButton = a("<div style='height: 100%;' class='jqx-position-absolute'><div></div></div>").appendTo(c); if (!l.rtl) { l.calendarButton.addClass(l.toThemeProperty("jqx-action-button")) } else { l.calendarButton.addClass(l.toThemeProperty("jqx-action-button-rtl")) } l.calendarButtonIcon = a(l.calendarButton.children()[0]); l.calendarButtonIcon.addClass(l.toThemeProperty("jqx-icon")); l.calendarButtonIcon.addClass(l.toThemeProperty("jqx-icon-calendar")); l.calendarButton.addClass(l.toThemeProperty("jqx-fill-state-normal")); if (!l.rtl) { l.calendarButton.addClass(l.toThemeProperty("jqx-rc-r")) } else { l.calendarButton.addClass(l.toThemeProperty("jqx-rc-l")) } l.timeButton = a("<div style='height: 100%;' class='jqx-position-absolute'><div></div></div>").appendTo(c); if (!l.rtl) { l.timeButton.addClass(l.toThemeProperty("jqx-action-button")) } else { l.timeButton.addClass(l.toThemeProperty("jqx-action-button-rtl")) } l.timeButtonIcon = a(l.timeButton.children()[0]); l.timeButtonIcon.addClass(l.toThemeProperty("jqx-icon")); l.timeButtonIcon.addClass(l.toThemeProperty("jqx-icon-time")); l.timeButton.addClass(l.toThemeProperty("jqx-fill-state-normal")); if (!l.rtl) { l.timeButton.addClass(l.toThemeProperty("jqx-rc-r")) } else { l.timeButton.addClass(l.toThemeProperty("jqx-rc-l")) } var n = this; l._arrange(); if (a.jqx._jqxCalendar != null && a.jqx._jqxCalendar != undefined) { try { var j = "calendar" + l.id; var h = a(a.find("#" + j)); if (h.length > 0) { h.remove() } a.jqx.aria(this, "aria-owns", j); a.jqx.aria(this, "aria-haspopup", true); a.jqx.aria(this, "aria-readonly", l.selectionMode == "range" ? true : false); var b = a("<div style='overflow: hidden; background: transparent; position: absolute;' id='calendar" + l.id + "'><div id='innerCalendar" + l.id + "'></div><div id='innerTime" + l.id + "'></div></div>"); if (a.jqx.utilities.getBrowser().browser == "opera") { b.hide() } b.appendTo(document.body); l.container = b; l.calendarContainer = a(a.find("#innerCalendar" + l.id)).jqxCalendar({ restrictedDates: this.restrictedDates, changing: l.changing, change: l.change, enableViews: l.enableViews, selectableDays: l.selectableDays, views: l.views, rowHeaderWidth: l.rowHeaderWidth, titleHeight: l.titleHeight, columnHeaderHeight: l.columnHeaderHeight, _checkForHiddenParent: false, enableAutoNavigation: false, canRender: false, localization: l.localization, todayString: l.todayString, clearString: l.clearString, dayNameFormat: l.dayNameFormat, rtl: l.rtl, culture: l.culture, showFooter: l.showFooter, selectionMode: l.selectionMode, firstDayOfWeek: l.firstDayOfWeek, showWeekNumbers: l.showWeekNumbers, width: l.dropDownWidth, height: l.dropDownHeight, theme: l.theme }); l.calendarContainer.css({ position: "absolute", zIndex: l.popupZIndex, top: 0, left: 0 }); l.calendarContainer.addClass(l.toThemeProperty("jqx-popup")); if (a.jqx.browser.msie) { l.calendarContainer.addClass(l.toThemeProperty("jqx-noshadow")) } l.timeContainer = a(a.find("#innerTime" + l.id)); l.timeContainer.css({ position: "absolute", zIndex: l.popupZIndex, top: 0, left: 0 }); l.timeContainer.addClass(l.toThemeProperty("jqx-popup")); if (a.jqx.browser.msie) { l.timeContainer.addClass(l.toThemeProperty("jqx-noshadow")) } l._calendar = a.data(l.calendarContainer[0], "jqxCalendar").instance; var n = this; l._calendar.today = function () { n.today() }; l._calendar.clear = function () { n.clear() }; if (a.jqx.utilities.getBrowser().browser == "opera") { b.show() } b.height(parseInt(l.calendarContainer.height()) + 25); b.width(parseInt(l.calendarContainer.width()) + 25); if (l.selectionMode == "range") { l.readonly = true } if (l.animationType == "none") { l.container.css("display", "none") } else { l.container.hide() } } catch (m) { } } if (a.global) { a.global.preferCulture(l.culture) } l.selectedText = ""; l._addHandlers(); l.self = this; l.oldValue = l.getDate(); l.items = new Array(); l.editors = new Array(); l._loadItems(); l.editorText = ""; if (l.readonly == true) { l.dateTimeInput.css("readonly", l.readonly) } l.dateTimeInput.css("text-align", l.textAlign); l.host.addClass(l.toThemeProperty("jqx-widget")); l.host.addClass(l.toThemeProperty("jqx-datetimeinput")); l.host.addClass(l.toThemeProperty("jqx-input")); l.host.addClass(l.toThemeProperty("jqx-overflow-hidden")); l.host.addClass(l.toThemeProperty("jqx-rc-all")); l.host.addClass(l.toThemeProperty("jqx-reset")); l.host.addClass(l.toThemeProperty("jqx-clear")); l.host.addClass(l.toThemeProperty("jqx-widget-content")); l.propertyChangeMap.disabled = function (e, q, p, r) { if (r) { e.host.addClass(n.toThemeProperty("jqx-input-disabled")); e.host.addClass(n.toThemeProperty("jqx-fill-state-disabled")) } else { e.host.removeClass(n.toThemeProperty("jqx-fill-state-disabled")); e.host.removeClass(n.toThemeProperty("jqx-input-disabled")) } a.jqx.aria(this, "aria-disabled", r) }; if (l.disabled) { l.host.addClass(l.toThemeProperty("jqx-input-disabled")); l.host.addClass(l.toThemeProperty("jqx-fill-state-disabled")); l.dateTimeInput.attr("disabled", true) } if (l.host.parents("form").length > 0) { l.addHandler(l.host.parents("form"), "reset", function () { setTimeout(function () { n.setDate(new Date()) }, 10) }) } if (l.cookies) { var g = a.jqx.cookie.cookie("jqxDateTimeInput" + l.element.id); if (g != null) { l.setDate(new Date(g)) } } if (a.jqx.browser.msie && a.jqx.browser.version < 8) { if (l.host.parents(".jqx-window").length > 0) { var o = l.host.parents(".jqx-window").css("z-index"); l.container.css("z-index", o + 10); l.calendarContainer.css("z-index", o + 10) } } if (l.culture != "default") { l._applyCulture() } if (l.value) { if (l.calendarContainer.jqxCalendar("_isDisabled", l.value.dateTime)) { l.dateTimeInput.addClass(l.toThemeProperty("jqx-input-invalid")) } else { l.dateTimeInput.removeClass(l.toThemeProperty("jqx-input-invalid")) } } }, val: function (c) { var b = this; if (arguments.length != 0) { if (c == null) { b.setDate(null) } if (b.selectionMode == "range") { b.setRange(arguments[0], arguments[1]); return b.getText() } if (c instanceof Date) { b.setDate(c) } if (typeof (c) == "string") { if (c == "date") { return b.getDate() } b.setDate(c) } if (b._calendar.getDate() != b.getDate()) { b._calendar.setDate(b.getDate()) } } return b.getText() }, _setSize: function () { if (this.width != null && this.width.toString().indexOf("px") != -1) { this.host.width(this.width) } else { if (this.width != undefined && !isNaN(this.width)) { this.host.width(this.width) } } if (this.height != null && this.height.toString().indexOf("px") != -1) { this.host.height(this.height) } else { if (this.height != undefined && !isNaN(this.height)) { this.host.height(this.height) } } var e = false; if (this.width != null && this.width.toString().indexOf("%") != -1) { e = true; this.host.width(this.width) } if (this.height != null && this.height.toString().indexOf("%") != -1) { e = true; this.host.height(this.height) } var c = this; var d = function () { if (c.calendarContainer) { c._arrange() } }; if (e) { if (this.calendarContainer) { this._arrange(); var b = this.host.width(); if (this.dropDownWidth != "auto") { b = this.dropDownWidth } this.calendarContainer.jqxCalendar({ width: b }); this.container.width(parseInt(b) + 25) } } a.jqx.utilities.resize(this.host, function () { d() }) }, _arrange: function () { if (this.height == null) { this.height = 27; this.host.height(27) } var d = parseInt(this.host.width()); var b = parseInt(this.host.height()); var h = this.buttonSize; var g = 2; if (!this.showCalendarButton && !this.showTimeButton) { h = 0; buttonHeight = 0; this.calendarButton.hide(); g = 0 } if (!this.showCalendarButton) { this.calendarButton.hide() } else { this.calendarButton.show() } if (!this.showTimeButton) { this.timeButton.hide() } else { this.timeButton.show() } var c = d - h - 1 * g; if (this.showTimeButton && this.showCalendarButton) { var c = d - 2 * h - 1 * g } else { if (this.showTimeButton || this.showCalendarButton) { var c = d - h - 1 * g } } if (c > 0) { this.dateTimeInput[0].style.width = c + "px" } if (this.rtl) { this.dateTimeInput[0].style.width = (-1 + c + "px") } this.dateTimeInput[0].style.left = "0px"; this.dateTimeInput[0].style.top = "0px"; this.calendarButton[0].style.width = h + 1 + "px"; this.calendarButton[0].style.left = 1 + c + "px"; this.timeButton[0].style.width = h + 1 + "px"; if (this.showCalendarButton) { this.timeButton[0].style.left = 1 + this.calendarButton.width() + c + "px" } else { this.timeButton[0].style.left = 1 + c + "px" } if (this.renderMode != "full") { this.calendarButton[0].style.width = "100%"; this.calendarButton[0].style.left = "0px"; this.calendarButton.css("border", "none"); this.timeButton[0].style.width = "100%"; this.timeButton[0].style.left = "0px"; this.timeButton.css("border", "none") } var e = this.dateTimeInput.height(); if (e == 0) { e = parseInt(this.dateTimeInput.css("font-size")) + 3; this.calendarButton.addClass(this.toThemeProperty("jqx-rc-all")); this.timeButton.addClass(this.toThemeProperty("jqx-rc-all")) } if (this.dateTimeInput[0].className.indexOf("jqx-rc-all") == -1) { this.dateTimeInput.addClass(this.toThemeProperty("jqx-rc-all")) } var f = parseInt(b) / 2 - parseInt(e) / 2; if (f > 0) { this.dateTimeInput[0].style.marginTop = parseInt(f) + "px" } if (this.rtl) { this.calendarButton[0].style.width = h + "px"; this.timeButton[0].style.width = h + "px"; this.calendarButton.css("left", "0px"); if (this.showCalendarButton) { this.timeButton.css("left", h + "px") } else { this.timeButton.css("left", "0px") } this.dateTimeInput.css("left", this.calendarButton.width()); if (this.showTimeButton && this.showCalendarButton) { this.dateTimeInput.css("left", this.timeButton.width() + this.calendarButton.width()) } if (a.jqx.browser.msie && a.jqx.browser.version <= 8) { this.dateTimeInput.css("left", 1 + this.calendarButton.width()); if (this.showTimeButton && this.showCalendarButton) { this.dateTimeInput.css("left", 1 + this.timeButton.width() + this.calendarButton.width()) } } } }, _removeHandlers: function () { var b = this; this.removeHandler(a(document), "mousedown." + this.id); if (this.dateTimeInput) { this.removeHandler(this.dateTimeInput, "keydown." + this.id); this.removeHandler(this.dateTimeInput, "blur"); this.removeHandler(this.dateTimeInput, "focus"); this.removeHandler(this.host, "focus"); this.removeHandler(this.dateTimeInput, "mousedown"); this.removeHandler(this.dateTimeInput, "mouseup"); this.removeHandler(this.dateTimeInput, "keydown"); this.removeHandler(this.dateTimeInput, "keyup"); this.removeHandler(this.dateTimeInput, "keypress") } if (this.calendarButton != null) { this.removeHandler(this.calendarButton, "mousedown") } if (this.timeButton != null) { this.removeHandler(this.timeButton, "mousedown") } if (this.calendarContainer != null) { this.removeHandler(this.calendarContainer, "cellSelected"); this.removeHandler(this.calendarContainer, "cellMouseDown") } this.removeHandler(a(window), "resize." + this.id) }, isOpened: function () { var c = this; var b = a.data(document.body, "openedJQXCalendar" + this.id); if (b != null && b == c.calendarContainer) { return true } return false }, wheel: function (d, c) { c.changeType = "mouse"; var e = 0; if (!d) { d = window.event } if (d.originalEvent && d.originalEvent.wheelDelta) { d.wheelDelta = d.originalEvent.wheelDelta } if (d.wheelDelta) { e = d.wheelDelta / 120 } else { if (d.detail) { e = -d.detail / 3 } } if (e) { var b = c._handleDelta(e); if (!b) { if (d.preventDefault) { d.preventDefault() } d.returnValue = false; return b } else { return false } } if (d.preventDefault) { d.preventDefault() } d.returnValue = false }, _handleDelta: function (b) { if (b < 0) { this.spinDown() } else { this.spinUp() } return false }, focus: function () { try { var c = this; this._setSelectionStart(0); this._selectGroup(-1); this.dateTimeInput.focus(); setTimeout(function () { c._setSelectionStart(0); c._selectGroup(-1); c.dateTimeInput.focus() }, 25) } catch (b) { } }, _addHandlers: function () { var e = this.element.id; var c = this.element; var d = this; if (this.host.parents()) { this.addHandler(this.host.parents(), "scroll.datetimeinput" + this.element.id, function (f) { var g = d.isOpened(); if (g) { d.close() } }) } this.addHandler(this.host, "mouseenter", function () { if (!d.disabled && d.enableHover) { hovered = true; d.calendarButtonIcon.addClass(d.toThemeProperty("jqx-icon-calendar-hover")); d.calendarButton.addClass(d.toThemeProperty("jqx-fill-state-hover")) } }); this.addHandler(this.host, "mouseleave", function () { if (!d.disabled && d.enableHover) { d.calendarButtonIcon.removeClass(d.toThemeProperty("jqx-icon-calendar-hover")); d.calendarButton.removeClass(d.toThemeProperty("jqx-fill-state-hover")) } }); this.addHandler(this.host, "mousewheel", function (f) { d.wheel(f, d) }); this.addHandler(a(document), "mousedown." + this.id, this._closeOpenedCalendar, { me: this }); if (a.jqx.mobile.isTouchDevice()) { this.addHandler(a(document), a.jqx.mobile.getTouchEventName("touchstart") + "." + this.id, this._closeOpenedCalendar, { me: this }) } this.addHandler(this.dateTimeInput, "keydown." + this.id, function (h) { var g = a.data(document.body, "openedJQXCalendar" + d.id); if (g != null && g == d.calendarContainer) { var f = d.handleCalendarKey(h, d); return f } }); if (this.calendarContainer != null) { this.addHandler(this.calendarContainer, "keydown", function (f) { if (f.keyCode == 13) { if (d.isOpened()) { if (!d._calendar._viewAnimating && d._calendar.view == "month") { d.hideCalendar("selected", "keyboard"); d.dateTimeInput.focus(); return false } } return true } else { if (f.keyCode == 9) { if (d.isOpened()) { d.hideCalendar("selected", "keyboard"); return true } } else { if (f.keyCode == 27) { if (d.isOpened()) { d.hideCalendar(null, "keyboard"); d.dateTimeInput.focus(); return false } return true } } } d.timePopup = false; if (f.keyCode == 84) { d.timePopup = true } if (f.keyCode == 115) { if (d.isOpened()) { d.hideCalendar("keyboard", "keyboard"); d.dateTimeInput.focus(); return false } else { if (!d.isOpened()) { d.showCalendar("keyboard", "keyboard"); d.dateTimeInput.focus(); return false } } } if (f.altKey) { if (f.keyCode == 38) { if (d.isOpened()) { d.hideCalendar("keyboard", "keyboard"); d.dateTimeInput.focus(); return false } } else { if (f.keyCode == 40) { if (!d.isOpened()) { d.showCalendar("keyboard", "keyboard"); d.dateTimeInput.focus(); return false } } } } }); this.addHandler(this.calendarContainer, "cellSelected", function (g) { if (d.closeCalendarAfterSelection) { var f = a.data(document.body, "openedJQXCalendarValue"); if (g.args.selectionType == "mouse") { if (d.selectionMode != "range") { d.hideCalendar("selected", "mouse") } else { if (d._calendar._clicks == 0) { d.hideCalendar("selected", "mouse") } } } } }); this.addHandler(this.calendarContainer, "cellMouseDown", function (f) { if (d.closeCalendarAfterSelection) { if (d._calendar.value) { a.data(document.body, "openedJQXCalendarValue", new a.jqx._jqxDateTimeInput.getDateTime(d._calendar.value.dateTime)) } } }) } this.addHandler(this.dateTimeInput, "blur", function (h) { if (d.value != null) { d.isEditing = false; var g = d.value.dateTime.getDay(); var f = d._oldDT; d._validateValue(true); if (h.stopPropagation) { h.stopPropagation() } d._updateText(); d._raiseEvent(9, h) } d.host.removeClass(d.toThemeProperty("jqx-fill-state-focus")) }); this.addHandler(this.host, "focus", function (f) { d.focus() }); this.addHandler(this.dateTimeInput, "focus", function (g) { if (d.value != null) { if (d.selectionMode != "range") { d._oldDT = new Date(d.value.dateTime) } else { d._oldDT = d.getRange() } var f = d._selection(); d.isEditing = true; d._validateValue(); d._updateText(); d._setSelectionStart(0); d._selectGroup(-1, f); d.host.addClass(d.toThemeProperty("jqx-fill-state-focus")) } else { d._setSelectionStart(0); d._selectGroup(-1); d.host.addClass(d.toThemeProperty("jqx-fill-state-focus")) } if (g.stopPropagation) { g.stopPropagation() } if (g.preventDefault) { g.preventDefault(); return false } }); var b = "mousedown"; if (this.touch) { b = a.jqx.mobile.getTouchEventName("touchstart") } this.addHandler(this.calendarButton, b, function (g) { var h = d.container; var f = h.css("display") == "block"; d.timePopup = false; d.calendarPopup = true; if (!d.disabled) { if (!d.isanimating) { if (f) { d.hideCalendar(); return false } else { d.showCalendar("mouse"); g.preventDefault() } } } }); this.addHandler(this.timeButton, b, function (g) { var h = d.container; var f = h.css("display") == "block"; d.timePopup = true; d.calendarPopup = false; if (!d.disabled) { if (!d.isanimating) { if (f) { d.hideCalendar("mouse", "mouse"); return false } else { d.showCalendar("mouse"); g.preventDefault() } } } }); this.addHandler(this.dateTimeInput, "mousedown", function (f) { return d._raiseEvent(2, f) }); this.addHandler(this.dateTimeInput, "mouseup", function (f) { return d._raiseEvent(3, f) }); this.addHandler(this.dateTimeInput, "keydown", function (f) { return d._raiseEvent(4, f) }); this.addHandler(this.dateTimeInput, "keyup", function (f) { return d._raiseEvent(5, f) }); this.addHandler(this.dateTimeInput, "keypress", function (f) { return d._raiseEvent(6, f) }) }, createID: function () { var b = Math.random() + ""; b = b.replace(".", ""); b = "99" + b; b = b / 1; return "dateTimeInput" + b }, setMaxDate: function (b, c) { if (b == null) { return } if (b != null && typeof (b) == "string") { b = new Date(b); if (b == "Invalid Date") { return } } this.maxDate = a.jqx._jqxDateTimeInput.getDateTime(b); if (this._calendar != null) { this._calendar.setMaxDate(b) } if (c != false) { if (this.getDate() != null && this.getDate() > b) { this.setDate(b) } a.jqx.aria(this, "aria-valuemax", b); this._refreshValue(); this._updateText() } }, getMaxDate: function () { if (this.maxDate != null && this.maxDate != undefined) { return this.maxDate.dateTime } return null }, setMinDate: function (b, c) { if (b == null) { return } if (b != null && typeof (b) == "string") { b = new Date(b); if (b == "Invalid Date") { return } } this.minDate = a.jqx._jqxDateTimeInput.getDateTime(b); if (this._calendar != null) { this._calendar.setMinDate(b) } if (c != false) { if (this.getDate() != null && this.getDate() < b) { this.setDate(b) } a.jqx.aria(this, "aria-valuemin", b); this._refreshValue(); this._updateText() } }, getMinDate: function () { if (this.minDate != null && this.minDate != undefined) { return this.minDate.dateTime } return null }, _applyCulture: function () { var d = false; try { if (Globalize != undefined) { d = true } } catch (c) { } try { if (a.global) { a.global.preferCulture(this.culture); this.localization.calendar = a.global.culture.calendar } else { if (d) { var b = Globalize.culture(this.culture); this.localization.calendar = b.calendar } } this._loadItems(); if (this._calendar != null) { this._calendar.culture = this.culture; this._calendar.localization = this.localization; this._calendar.render() } } catch (c) { } }, propertyMap: function (b) { if (b == "value") { if (this.selectionMode != "range") { return this.getDate() } else { return this.getRange() } } return null }, propertyChangedHandler: function (c, d, f, e) { if (c.isInitialized == undefined || c.isInitialized == false) { return } if (d == "restrictedDates") { c.calendarContainer.css({ restrictedDates: e }) } if (d == "popupZIndex") { c.calendarContainer.css({ zIndex: e }) } if (d == "showCalendarButton") { c._arrange() } if (d == "showTimeButton") { c._arrange(); if (c.timePopupElement) { c.timePopupElement.remove(); c.timePopupElement = null } } if (d == "selectionMode") { c._calendar.selectionMode = e; c.refreshValue() } if (d == "min") { if (typeof (e) == "string") { c.setMinDate(new Date(e)) } else { c.setMinDate(e) } } if (d == "max") { if (typeof (e) == "string") { c.setMaxDate(new Date(e)) } else { c.setMaxDate(e) } } if (d == "value") { if (e != null && e instanceof Date) { if (isNaN(e.getFullYear()) || isNaN(e.getMonth()) || isNaN(e.getDate())) { this.value = f; return } e = a.jqx._jqxDateTimeInput.getDateTime(e) } else { if (e != null && typeof (e) == "string") { var b = new Date(e); if (b != undefined && !isNaN(b)) { this.value = a.jqx._jqxDateTimeInput.getDateTime(b) } } } } if (d == "views") { c.calendarContainer.jqxCalendar({ views: e }) } if (d == "enableViews") { c.calendarContainer.jqxCalendar({ enableViews: e }) } if (d == "selectableDays") { c.calendarContainer.jqxCalendar({ selectableDays: e }) } if (d == "showFooter") { c.calendarContainer.jqxCalendar({ showFooter: e }) } if (d == "rtl") { c.calendarContainer.jqxCalendar({ rtl: e }); if (e) { c.dateTimeInput.css("direction", "rtl"); c.dateTimeInput.addClass("jqx-rtl") } else { c.dateTimeInput.css("direction", "ltr"); c.dateTimeInput.removeClass("jqx-rtl") } } if (d == "todayString" || d == "clearString") { c.calendarContainer.jqxCalendar({ clearString: c.clearString, todayString: c.todayString }) } if (d == "dayNameFormat") { c.calendarContainer.jqxCalendar({ dayNameFormat: e }) } if (d == "firstDayOfWeek") { c.calendarContainer.jqxCalendar({ firstDayOfWeek: e }) } if (d == "showWeekNumbers") { c.calendarContainer.jqxCalendar({ showWeekNumbers: e }) } if (d == "culture" || d == "localization") { c._applyCulture() } else { if (d == "formatString") { c._loadItems() } } if (d == "theme") { a.jqx.utilities.setTheme(f, e, c.host); c.calendarContainer.jqxCalendar({ theme: e }) } if (d == "width" || d == "height") { c.refresh(); return } c._setOption(d, e, f); if (d == "dropDownWidth" || d == "dropDownHeight") { c.calendarContainer.jqxCalendar({ width: c.dropDownWidth, height: c.dropDownHeight }); c._calendar.render(); c.container.height(c.calendarContainer.height()); c.container.width(c.calendarContainer.width()) } }, clear: function () { if (this.allowNullDate) { if (this.selectionMode != "range") { this.setDate(null) } else { this._calendar._clicks = 1; this.setRange(null, null) } this._calendar._clicks = 0 } else { if (this.selectionMode != "range") { this.setDate(me.getMinDate()) } else { this._calendar._clicks = 1; this.setRange(me.getMinDate(), me.getMinDate()); this._calendar._clicks = 0 } } this.hideCalendar() }, today: function () { var c = new Date(); c.setHours(0, 0, 0, 0); if (this.selectionMode != "range") { this.setDate(c) } else { this._calendar._clicks = 0; var b = new Date(); b.setHours(23, 59, 59, 0); this.setRange(c, b); this._calendar._clicks = 0 } this.hideCalendar() }, setDate: function (d) { var e = this.getDate(); if (d != null && typeof (d) == "string") { var f = d; if (d.toString().indexOf(",") >= 0) { d = d.replace(/\,/g, "/"); d = new Date(d); if (d == "Invalid Date") { d = f } } if (d.toString().indexOf("-") >= 0) { d = d.replace(/\-/g, "/"); d = new Date(d); if (d == "Invalid Date") { d = f } } if (d != "") { var c = d; if (Globalize != undefined) { d = Globalize.parseDate(c, this.formatString, this.culture) } else { if (a.jqx.dataFormat) { d = a.jqx.dataFormat.parsedate(c, this.formatString, this.localization.calendar) } else { d = new Date(d) } } if (d == "Invalid Date") { return } if (d === null && c !== null) { if (c != "Invalid Date") { d = c } } } } if (d == null || d == "null" || d == "undefined") { if (!this.allowNullDate) { d = this.min } } if (d == "Invalid Date") { d = null } if (d == null || d == "null" || d == "undefined" || d === "") { if (this.value != null) { this.value = null; this._calendar.setDate(null); this._refreshValue(); if (this.cookies) { if (this.value != null) { a.jqx.cookie.cookie("jqxDateTimeInput" + this.element.id, this.value.dateTime.toString(), this.cookieoptions) } } this._setSelectionStart(0); this._selectGroup(-1); this._raiseEvent("0", d, e); this._raiseEvent("9", d, e) } return } if (d < this.getMinDate() || d > this.getMaxDate()) { return } if (this.value == null) { this.value = new a.jqx._jqxDateTimeInput.getDateTime(new Date()); this.value._setHours(0); this.value._setMinutes(0); this.value._setSeconds(0); this.value._setMilliseconds(0) } if (d.getFullYear) { this.value._setYear(d.getFullYear()); this.value._setDay(1); this.value._setMonth(d.getMonth() + 1); this.value._setHours(d.getHours()); this.value._setMinutes(d.getMinutes()); this.value._setSeconds(d.getSeconds()); this.value._setMilliseconds(d.getMilliseconds()); this.value._setDay(d.getDate()) } this._validateTimeRange(); this._refreshValue(); if (this.cookies) { if (this.value != null) { a.jqx.cookie.cookie("jqxDateTimeInput" + this.element.id, this.value.dateTime.toString(), this.cookieoptions) } } var b = this.getDate(); var g = (b - e); if (g != 0) { this._raiseEvent("0", d, e); this._raiseEvent("9", d, e); return true } }, getDate: function () { if (this.value == undefined) { return null } return new Date(this.value.dateTime) }, getText: function () { return this.dateTimeInput.val() }, setRange: function (d, c) { if (d == "Invalid Date") { d = null } if (c == "Invalid Date") { c = null } if (d != null && typeof (d) == "string") { d = new Date(d); if (d == "Invalid Date") { return } } if (c != null && typeof (c) == "string") { c = new Date(c); if (c == "Invalid Date") { return } } if (d && isNaN(d) && d.toString() == "NaN" && typeof (d) != "string") { return } if (c && isNaN(c) && c.toString() == "NaN" && typeof (c) != "string") { return } this._calendar.setRange(d, c); if (c && d && (c.valueOf() != d.valueOf())) { this._range = { from: d, to: c } } else { this._range = this._calendar.getRange() } var b = d; if (b != null && b.getFullYear) { if (this.value == null) { this.value = new a.jqx._jqxDateTimeInput.getDateTime(new Date()); this.value._setHours(0); this.value._setMinutes(0); this.value._setSeconds(0); this.value._setMilliseconds(0) } this.value._setYear(b.getFullYear()); this.value._setMonth(b.getMonth() + 1); this.value._setHours(b.getHours()); this.value._setMinutes(b.getMinutes()); this.value._setSeconds(b.getSeconds()); this.value._setMilliseconds(b.getMilliseconds()); this.value._setDay(b.getDate()) } this._refreshValue(); if (this.value) { this._raiseEvent("0", this.value.dateTime) } else { this._raiseEvent("0", null) } }, getRange: function () { var b = this._calendar.getRange(); if (this._range) { var d = this._range.from; var c = this._range.to; if (c && d && (c.valueOf() != d.valueOf())) { if (b.from) { b.from.setHours(d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()) } if (b.to) { b.to.setHours(c.getHours(), c.getMinutes(), c.getSeconds(), c.getMilliseconds()) } } } return b }, _validateValue: function (e) { var b = false; for (var d = 0; d < this.items.length; d++) { var c = this.editors[d].value; switch (this.items[d].type) { case "FORMAT_AMPM": if (c < 0) { c = 0 } else { if (c > 1) { c = 1 } } break; case "Character": break; case "Day": if (c < 1) { c = 1 } else { if (c > 31) { c = 31 } } break; case "FORMAT_hh": if (c < 1) { c = 1 } else { if (c > 12) { c = 12 } } break; case "FORMAT_HH": if (c < 0) { c = 0 } else { if (c > 23) { c = 23 } } break; case "Millisecond": if (c < 0) { c = 0 } else { if (c > 999) { c = 999 } } break; case "Minute": if (c < 0) { c = 0 } else { if (c > 59) { c = 59 } } break; case "Month": if (c < 1) { c = 1 } else { if (c > 12) { c = 12 } } break; case "ReadOnly": break; case "Second": if (c < 0) { c = 0 } else { if (c > 59) { c = 59 } } break; case "Year": if (c < this.minDate.year) { c = this.minDate.year } else { if (c > this.maxDate.year) { c = this.maxDate.year } } break } if (this.editors[d].value != c) { this.editors[d].value = c; b = true } } this.updateValue(e); if (this.value != null && e === true) { if (this.value.dateTime > this.maxDate.dateTime) { this._internalSetValue(this.maxDate); this._updateEditorsValue() } else { if (this.value.dateTime < this.minDate.dateTime) { this._internalSetValue(this.minDate); this._updateEditorsValue() } } this._updateText() } }, spinUp: function () { var d = this.value; if (d == null) { return } if (this.activeEditor != null) { var b = this.editors.indexOf(this.activeEditor); if (b == -1) { return } if (this.items[b].type == "Day") { if (this.value != null) { this.activeEditor.maxValue = this.value._daysInMonth(this.value.year, this.value.month) } } var c = this.activeEditor.positions; this.activeEditor.increaseValue(this.enableAbsoluteSelection); this.activeEditor.positions = c } if (this.isEditing) { this.isEditing = false } this.updateValue(); this.isEditing = true; this._updateText(); var e = this.editors.indexOf(this.activeEditor); if (e >= 0) { this._selectGroup(e) } }, spinDown: function () { var d = this.value; if (d == null) { return } if (this.activeEditor != null) { var b = this.editors.indexOf(this.activeEditor); if (b == -1) { return } if (this.items[b].type == "Day") { if (this.value != null) { this.activeEditor.maxValue = this.value._daysInMonth(this.value.year, this.value.month) } } var c = this.activeEditor.positions; this.activeEditor.decreaseValue(this.enableAbsoluteSelection); this.activeEditor.positions = c } if (this.isEditing) { this.isEditing = false } this.updateValue(); this.isEditing = true; this._updateText(); var e = this.editors.indexOf(this.activeEditor); if (e >= 0) { this._selectGroup(e) } }, _passKeyToCalendar: function (c) { if (c.keyCode == 13 || c.keyCode == 9) { this.hideCalendar("selected", "keyboard"); return true } else { if (c.keyCode == 27) { var e = this.calendarContainer; var d = this._calendar; var f = this.closeCalendarAfterSelection; this.closeCalendarAfterSelection = false; d.setDate(this.value.dateTime); this.closeCalendarAfterSelection = f; this.hideCalendar() } } var f = this.closeCalendarAfterSelection; this.closeCalendarAfterSelection = false; var b = this._calendar._handleKey(c); this.closeCalendarAfterSelection = f; return b }, handleCalendarKey: function (f, e) { var c = a(f.target); var d = a.data(document.body, "openedJQXCalendar" + this.id); if (d != null) { if (d.length > 0) { var b = e._passKeyToCalendar(f); return b } } return true }, _findPos: function (c) { if (c == null) { return } while (c && (c.type == "hidden" || c.nodeType != 1 || a.expr.filters.hidden(c))) { c = c.nextSibling } var b = a(c).coord(true); return [b.left, b.top] }, testOffset: function (h, f, c) { var g = h.outerWidth(); var k = h.outerHeight(); var j = a(window).width() + a(window).scrollLeft(); var e = a(window).height() + a(window).scrollTop(); if (f.left + g > j) { if (g > this.host.width()) { var d = this.host.coord().left; var b = g - this.host.width(); f.left = d - b + 2 } } if (f.left < 0) { f.left = parseInt(this.host.coord().left) + "px" } f.top -= Math.min(f.top, (f.top + k > e && e > k) ? Math.abs(k + c + 23) : 0); return f }, open: function (b) { if (b == "time") { this.timePopup = true } else { this.timePopup = false } this.showCalendar() }, close: function (b) { this.hideCalendar() }, _getBodyOffset: function () { var c = 0; var b = 0; if (a("body").css("border-top-width") != "0px") { c = parseInt(a("body").css("border-top-width")); if (isNaN(c)) { c = 0 } } if (a("body").css("border-left-width") != "0px") { b = parseInt(a("body").css("border-left-width")); if (isNaN(b)) { b = 0 } } return { left: b, top: c } }, initTimePopup: function () { this.timePopupElement = a("<div style='border-style: solid; border-width: 1px;'></div>").appendTo(this.timeContainer); this.timePopupElement.addClass(this.toThemeProperty("jqx-widget-content jqx-widget jqx-date-time-input-popup")); var t = ""; t += "<table><tbody><tr><td><a class='increment-hour-column' href='javascript:;' data-action='incrementHour'><div class='jqx-icon-up'></div></a></td><td class='separator'>&nbsp;</td><td><a class='increment-minute-column' href='javascript:;' data-action='incrementMinute'><div class='jqx-icon-up'></div></a></td><td class='separator'>&nbsp;</td><td><a class='increment-second-column' href='javascript:;' data-action='incrementSecond'><div class='jqx-icon-up'></div></a></td><td class='separator'>&nbsp;</td><td><a class='increment-millisecond-column' href='javascript:;' data-action='incrementMSSecond'><div class='jqx-icon-up'></div></a></td><td class='separator'>&nbsp;</td><td class='increment-meridian-column'><a href='javascript:;' data-action='toggleMeridian'><div class='jqx-icon-up'></div></a></td></tr><tr><td><input type='text' class='jqx-timepicker-hour' maxlength='2'></td><td class='separator'>:</td><td><input type='text' class='jqx-timepicker-minute' maxlength='2'></td><td class='separator'>:</td><td><input type='text' class='jqx-timepicker-second' maxlength='2'></td><td class='separator'>:</td><td><input type='text' class='jqx-timepicker-millisecond' maxlength='3'></td><td class='separator'>&nbsp;</td><td><input type='text' class='jqx-timepicker-meridian' maxlength='2'></td></tr><tr><td><a class='decrement-hour-column' href='javascript:;' data-action='decrementHour'><div class='jqx-icon-down'></div></a></td><td class='separator'></td><td><a class='decrement-minute-column' href='javascript:;' data-action='decrementMinute'><div class='jqx-icon-down'></div></a></td><td class='separator'></td><td><a class='decrement-second-column' href='javascript:;' data-action='decrementSecond'><div class='jqx-icon-down'></div></a></td><td class='separator'></td><td><a class='decrement-millisecond-column' href='javascript:;' data-action='decrementMillisecond'><div class='jqx-icon-down'></div></a></td><td class='separator'>&nbsp;</td><td><a class='decrement-meridian-column' href='javascript:;' data-action='toggleMeridian'><div class='jqx-icon-down'></div></a></td></tr></tbody></table>"; var m = this._getFormatValue(this.formatString); if (this.selectionMode != "range") { this.timePopupElement[0].innerHTML = t } else { this.timePopupElement[0].innerHTML = "<table><tr><td>" + t + "</td><td>-</td><td>" + t + "</td></tr></table>" } this.timePopupElement.find(".jqx-icon-down").addClass(this.toThemeProperty("jqx-icon jqx-icon-arrow-down")); this.timePopupElement.find(".jqx-icon-up").addClass(this.toThemeProperty("jqx-icon jqx-icon-arrow-up")); var g = this.timePopupElement.find("input"); g.addClass(this.toThemeProperty("jqx-input")); g.addClass(this.toThemeProperty("jqx-rc-all")); this.addHandler(g, "mousedown", function (v) { v.stopPropagation() }); var e = function (v) { if (v.target.className.indexOf("hour") >= 0) { n._decrementHour(a(v.target)) } if (v.target.className.indexOf("minute") >= 0) { n._decrementMinuteSecond(a(v.target)) } if (v.target.className.indexOf("second") >= 0) { n._decrementMinuteSecond(a(v.target)) } if (v.target.className.indexOf("millisecond") >= 0) { n._decrementMillisecond(a(v.target)) } if (v.target.className.indexOf("meridian") >= 0) { n._decrementMeridian(a(v.target)) } }; var l = function (v) { if (v.target.className.indexOf("hour") >= 0) { n._incrementHour(a(v.target)) } if (v.target.className.indexOf("minute") >= 0) { n._incrementMinuteSecond(a(v.target)) } if (v.target.className.indexOf("second") >= 0) { n._incrementMinuteSecond(a(v.target)) } if (v.target.className.indexOf("millisecond") >= 0) { n._incrementMillisecond(a(v.target)) } if (v.target.className.indexOf("meridian") >= 0) { n._incrementMeridian(a(v.target)) } }; var s = function (w, v) { var x = 0; if (!w) { w = window.event } if (w.originalEvent && w.originalEvent.wheelDelta) { w.wheelDelta = w.originalEvent.wheelDelta } if (w.originalEvent && w.originalEvent.deltaY != undefined) { x = -w.originalEvent.deltaY } if (w.wheelDelta) { x = w.wheelDelta / 120 } else { if (w.detail) { x = -w.detail / 3 } } if (x) { if (document.activeElement == w.target && w.target.nodeName.toLowerCase() == "input") { if (x < 0) { e(w) } else { l(w) } } if (w.preventDefault) { w.preventDefault() } w.returnValue = false } if (w.preventDefault) { w.preventDefault() } w.returnValue = false }; this.addHandler(g, "wheel", function (v) { s(v) }); this.addHandler(g, "keydown", function (w) { var v = a(w.target); if (w.ctrlKey) { if (w.keyCode == 38) { if (n.isOpened()) { n.hideCalendar("keyboard", "keyboard"); n.dateTimeInput.focus(); return false } } else { if (w.keyCode == 40) { if (!n.isOpened()) { n.showCalendar("keyboard", "keyboard"); n.dateTimeInput.focus(); return false } } } } if (w.keyCode == 40) { e(w); w.preventDefault() } else { if (w.keyCode == 38) { l(w); w.preventDefault() } else { if (w.keyCode == 13) { w.preventDefault(); n.hideCalendar("keyboard", "keyboard"); n.dateTimeInput.focus() } else { if (w.keyCode == 27) { w.preventDefault(); n.hideCalendar("cancel"); n.dateTimeInput.focus() } } } } }); this.hourInput = a(g[0]); this.minuteInput = a(g[1]); this.secondInput = a(g[2]); this.mssecondInput = a(g[3]); this.meridianInput = a(g[4]); this.hourInput2 = a(g[5]); this.minuteInput2 = a(g[6]); this.secondInput2 = a(g[7]); this.mssecondInput2 = a(g[8]); this.meridianInput2 = a(g[9]); var n = this; var p = this.timePopupElement.find(".increment-hour-column"); this.hourIncrement = a(p[0]); this.hourIncrement2 = a(p[1]); this.addHandler(g, "change", function (w) { var v = a(w.target); if (v.val().length <= 1) { v.val("0" + a(w.target).val()) } if (w.target.className.indexOf("hour") >= 0) { var x = parseInt(a(w.target).val()); if (m.indexOf("HH") >= 0) { while (x > 24) { x = x - 24 } } else { while (x > 12) { x = x - 12 } } if (x < 10) { x = "0" + x } if (v.val() != x) { v.val(x) } } if (w.target.className.indexOf("minute") >= 0 || w.target.className.indexOf("second") >= 0) { var x = parseInt(a(w.target).val()); while (x > 59) { x-- } if (x < 10) { x = "0" + x } if (v.val() != x) { v.val(x) } } }); this._incrementHour = function (v) { var w = parseInt(v.val()); w++; if (m.indexOf("HH") >= 0) { if (w > 24) { w = 1 } } else { if (w > 12) { w = 1 } } if (w < 10) { w = "0" + w } v.val(w) }; this._incrementMinuteSecond = function (v) { var w = parseInt(v.val()); w++; if (w > 59) { w = 0 } if (w < 10) { w = "0" + w } v.val(w) }; this._incrementMillisecond = function (v) { var w = parseInt(v.val()); w++; if (w > 999) { w = 0 } if (w < 10) { w = "0" + w } v.val(w) }; this._incrementMeridian = function (v) { var w = v.val(); if (w.toLowerCase().indexOf("a") >= 0) { w = "PM" } else { w = "AM" } v.val(w) }; this._decrementHour = function (v) { var w = parseInt(v.val()); w--; if (m.indexOf("HH") >= 0) { if (w < 0) { w = 23 } } else { if (w < 1) { w = 12 } } if (w < 10) { w = "0" + w } v.val(w) }; this._decrementMinuteSecond = function (v) { var w = parseInt(v.val()); w--; if (w < 0) { w = 59 } if (w < 10) { w = "0" + w } v.val(w) }; this._decrementMillisecond = function (v) { var w = parseInt(v.val()); w--; if (w < 0) { w = 999 } if (w < 10) { w = "0" + w } v.val(w) }; this._decrementMeridian = function (v) { var w = v.val(); if (w.toLowerCase().indexOf("a") >= 0) { w = "PM" } else { w = "AM" } v.val(w) }; this.addHandler(this.hourIncrement, "mousedown", function (v) { v.stopPropagation(); n._incrementHour(n.hourInput) }); this.addHandler(this.hourIncrement2, "mousedown", function (v) { v.stopPropagation(); n._incrementHour(n.hourInput2) }); var q = this.timePopupElement.find(".increment-minute-column"); this.minuteIncrement = a(q[0]); this.minuteIncrement2 = a(q[1]); this.addHandler(this.minuteIncrement, "mousedown", function (v) { v.stopPropagation(); n._incrementMinuteSecond(n.minuteInput) }); this.addHandler(this.minuteIncrement2, "mousedown", function (v) { v.stopPropagation(); n._incrementMinuteSecond(n.minuteInput2) }); var c = this.timePopupElement.find(".increment-second-column"); this.secondIncrement = a(c[0]); this.secondIncrement2 = a(c[1]); this.addHandler(this.secondIncrement, "mousedown", function (v) { v.stopPropagation(); n._incrementMinuteSecond(n.secondInput) }); this.addHandler(this.secondIncrement2, "mousedown", function (v) { v.stopPropagation(); n._incrementMinuteSecond(n.secondInput2) }); var d = this.timePopupElement.find(".increment-millisecond-column"); this.millisecondsIncrement = a(d[0]); this.millisecondsIncrement2 = a(d[1]); this.addHandler(this.millisecondsIncrement, "mousedown", function (v) { v.stopPropagation(); n._incrementMillisecond(n.mssecondInput) }); this.addHandler(this.millisecondsIncrement2, "mousedown", function (v) { v.stopPropagation(); n._incrementMillisecond(n.mssecondInput2) }); var j = this.timePopupElement.find(".increment-meridian-column"); this.meridianIncrement = a(j[0]); this.meridianIncrement2 = a(j[1]); this.addHandler(this.meridianIncrement, "mousedown", function (v) { v.stopPropagation(); n._incrementMeridian(n.meridianInput) }); this.addHandler(this.meridianIncrement2, "mousedown", function (v) { v.stopPropagation(); n._incrementMeridian(n.meridianInput2) }); var o = this.timePopupElement.find(".decrement-hour-column"); this.hourDecrement = a(o[0]); this.hourDecrement2 = a(o[1]); this.addHandler(this.hourDecrement, "mousedown", function (v) { v.stopPropagation(); n._decrementHour(n.hourInput) }); this.addHandler(this.hourDecrement2, "mousedown", function (v) { v.stopPropagation(); n._decrementHour(n.hourInput2) }); var k = this.timePopupElement.find(".decrement-minute-column"); this.minuteDecrement = a(k[0]); this.minuteDecrement2 = a(k[1]); this.addHandler(this.minuteDecrement, "mousedown", function (v) { v.stopPropagation(); n._decrementMinuteSecond(n.minuteInput) }); this.addHandler(this.minuteDecrement2, "mousedown", function (v) { v.stopPropagation(); n._decrementMinuteSecond(n.minuteInput2) }); var u = this.timePopupElement.find(".decrement-second-column"); this.secondDecrement = a(u[0]); this.secondDecrement2 = a(u[1]); this.addHandler(this.secondDecrement, "mousedown", function (v) { v.stopPropagation(); n._decrementMinuteSecond(n.secondInput) }); this.addHandler(this.secondDecrement2, "mousedown", function (v) { v.stopPropagation(); n._decrementMinuteSecond(n.secondInput2) }); var b = this.timePopupElement.find(".decrement-millisecond-column"); this.millisecondsDecrement = a(b[0]); this.millisecondsDecrement2 = a(b[1]); this.addHandler(this.millisecondsDecrement, "mousedown", function (v) { v.stopPropagation(); n._decrementMillisecond(n.mssecondInput) }); this.addHandler(this.millisecondsDecrement2, "mousedown", function (v) { v.stopPropagation(); n._decrementMillisecond(n.mssecondInput2) }); var f = this.timePopupElement.find(".decrement-meridian-column"); this.meridianDecrement = a(f[0]); this.meridianDecrement2 = a(f[1]); this.addHandler(this.meridianDecrement, "mousedown", function (v) { v.stopPropagation(); n._decrementMeridian(n.meridianInput) }); this.addHandler(this.meridianDecrement2, "mousedown", function (v) { v.stopPropagation(); n._decrementMeridian(n.meridianInput2) }); var r = this.timePopupElement.find("table"); this.addHandler(this.timePopupElement, "mousedown", function (v) { v.stopPropagation() }); var h = function (v) { var w = v.find("tr"); if (m.indexOf("ss") == -1) { n.secondInput.hide(); n.secondInput2.hide(); a(a(w[0]).children()[3]).hide(); a(a(w[0]).children()[4]).hide(); a(a(w[1]).children()[3]).hide(); a(a(w[1]).children()[4]).hide(); a(a(w[2]).children()[3]).hide(); a(a(w[2]).children()[4]).hide() } if (m.indexOf("tt") == -1 && m.indexOf("hh") == -1) { n.meridianInput.hide(); n.meridianInput2.hide(); a(a(w[0]).children()[7]).hide(); a(a(w[0]).children()[8]).hide(); a(a(w[1]).children()[7]).hide(); a(a(w[1]).children()[8]).hide(); a(a(w[2]).children()[7]).hide(); a(a(w[2]).children()[8]).hide() } if (m.indexOf("zz") == -1) { n.mssecondInput.hide(); n.mssecondInput2.hide(); a(a(w[0]).children()[5]).hide(); a(a(w[0]).children()[6]).hide(); a(a(w[1]).children()[5]).hide(); a(a(w[1]).children()[6]).hide(); a(a(w[2]).children()[5]).hide(); a(a(w[2]).children()[6]).hide() } }; if (r.length == 1) { h(r) } else { h(a(a(r)[1])); h(a(a(r)[2])) } }, updateTimePopup: function () { var b = this._getFormatValue(this.formatString); if (this.selectionMode != "range") { var f = this.getDate(); if (this.hourInput) { if (f) { var c = f.getHours(); var h = f.getMinutes(); var g = f.getHours(); var e = f.getSeconds(); var d = f.getMilliseconds() } else { var c = 0; var h = 0; var g = 0; var e = 0; var d = 0 } if (c >= 12) { g = "PM"; if (b.indexOf("HH") == -1) { c -= 12; if (c == 0) { c = 12 } } } else { g = "AM" } if (this.meridianInput.css("display") != "none") { if (c == 0) { c = 12 } } if (c < 10) { c = "0" + c } if (h < 10) { h = "0" + h } if (e < 10) { e = "0" + e } if (d < 10) { d = "0" + d } this.hourInput.val(c); this.minuteInput.val(h); this.secondInput.val(e); this.mssecondInput.val(d); this.meridianInput.val(g) } } else { var f = this.getRange().from; if (this.hourInput) { if (f) { var c = f.getHours(); var h = f.getMinutes(); var g = f.getHours(); var e = f.getSeconds(); var d = f.getMilliseconds() } else { var c = 0; var h = 0; var g = 0; var e = 0; var d = 0 } if (c >= 12) { g = "PM"; if (b.indexOf("HH") == -1) { c -= 12; if (c == 0) { c = 12 } } } else { g = "AM" } if (this.meridianInput.css("display") != "none") { if (c == 0) { c = 12 } } if (c < 10) { c = "0" + c } if (h < 10) { h = "0" + h } if (e < 10) { e = "0" + e } if (d < 10) { d = "0" + d } this.hourInput.val(c); this.minuteInput.val(h); this.secondInput.val(e); this.mssecondInput.val(d); this.meridianInput.val(g) } var f = this.getRange().to; if (this.hourInput2) { if (f) { var c = f.getHours(); var h = f.getMinutes(); var g = f.getHours(); var e = f.getSeconds(); var d = f.getMilliseconds() } else { var c = 0; var h = 0; var g = 0; var e = 0; var d = 0 } if (c >= 12) { g = "PM"; if (b.indexOf("HH") == -1) { c -= 12; if (c == 0) { c = 12 } } } else { g = "AM" } if (this.meridianInput.css("display") != "none") { if (c == 0) { c = 12 } } if (c < 10) { c = "0" + c } if (h < 10) { h = "0" + h } if (e < 10) { e = "0" + e } if (d < 10) { d = "0" + d } this.hourInput2.val(c); this.minuteInput2.val(h); this.secondInput2.val(e); this.mssecondInput2.val(d); this.meridianInput2.val(g) } } }, showCalendar: function () { var m = this.calendarContainer; var q = this._calendar; a.jqx.aria(this, "aria-expanded", true); if (this.showTimeButton) { if (this.timePopup) { if (!this.timePopupElement) { this.initTimePopup() } this.calendarContainer.css("visibility", "hidden"); this.timeContainer.css("visibility", "visible"); this.updateTimePopup(); var d = this.timeContainer.find("input"); var s = 0; for (var v = 0; v < d.length; v++) { if (d[v].style.display != "none") { s += 50 } } this.container.width(parseInt(s)); if (!this.touch) { setTimeout(function () { d[0].focus(); a(d[0]).select() }, 150 + this.openDelay) } } else { this.container.width(parseInt(this.calendarContainer.width()) + 25); this.timeContainer.css("visibility", "hidden"); this.calendarContainer.css("visibility", "visible") } } if (this.value != null) { if (this.selectionMode != "range") { this._oldDT = new Date(this.value.dateTime) } else { this._oldDT = this.getRange() } } else { this._oldDT = null } if (!q.canRender) { q.canRender = true; q.render() } var l = this.container; var p = this; var g = a(window).scrollTop(); var h = a(window).scrollLeft(); var n = parseInt(this._findPos(this.host[0])[1]) + parseInt(this.host.outerHeight()) - 1 + "px"; var e, r = parseInt(Math.round(this.host.coord(true).left)); e = r + "px"; var w = a.jqx.mobile.isSafariMobileBrowser() || a.jqx.mobile.isWindowsPhone(); if ((w != null && w)) { e = a.jqx.mobile.getLeftPos(this.element); n = a.jqx.mobile.getTopPos(this.element) + parseInt(this.host.outerHeight()); if (a("body").css("border-top-width") != "0px") { n = parseInt(n) - this._getBodyOffset().top + "px" } if (a("body").css("border-left-width") != "0px") { e = parseInt(e) - this._getBodyOffset().left + "px" } } this.container.css("left", e); this.container.css("top", n); var c = this.closeCalendarAfterSelection; this.closeCalendarAfterSelection = false; this.isEditing = false; if (p.selectionMode == "default") { this._validateValue(); this._updateText(); var t = this.value != null ? this.value.dateTime : new Date(); q.setDate(t) } this.closeCalendarAfterSelection = c; var b = false; if (this.dropDownHorizontalAlignment == "right" || this.rtl) { var k = this.container.outerWidth(); var u = Math.abs(k - this.host.outerWidth() + 2); if (!this.rtl) { u -= 2 } if (k > this.host.width()) { var f = 23; this.container.css("left", f + parseInt(Math.round(r)) - u + "px") } else { this.container.css("left", 25 + parseInt(Math.round(r)) + u + "px") } } if (this.enableBrowserBoundsDetection) { var j = this.testOffset(m, { left: parseInt(this.container.css("left")), top: parseInt(n) }, parseInt(this.host.outerHeight())); if (parseInt(this.container.css("top")) != j.top) { b = true; m.css("top", 23); m.addClass(this.toThemeProperty("jqx-popup-up")) } else { m.css("top", 0) } this.container.css("top", j.top); if (parseInt(this.container.css("left")) != j.left) { this.container.css("left", j.left) } } this._raiseEvent(7, m); if (this.animationType != "none") { this.container.css("display", "block"); var o = parseInt(m.outerHeight()); m.stop(); this.isanimating = true; this.opening = true; if (this.animationType == "fade") { m.css("margin-top", 0); m.css("opacity", 0); m.animate({ opacity: 1 }, this.openDelay, function () { p.isanimating = false; p.opening = false; a.data(document.body, "openedJQXCalendar" + p.id, m); p.calendarContainer.focus() }); if (this.timePopup) { this.timeContainer.css("margin-top", 0); this.timeContainer.css("opacity", 0); this.timeContainer.animate({ opacity: 1 }, this.openDelay, function () { p.isanimating = false; p.opening = false; a.data(document.body, "openedJQXCalendar" + p.id, m); p.timeContainer.focus() }) } } else { m.css("opacity", 1); if (this.timePopup) { this.timeContainer.css("opacity", 1) } if (b) { m.css("margin-top", o) } else { m.css("margin-top", -o) } if (this.timePopup) { if (b) { this.timeContainer.css("margin-top", o) } else { this.timeContainer.css("margin-top", -o) } this.timeContainer.animate({ "margin-top": 0 }, this.openDelay, function () { p.isanimating = false; p.opening = false; a.data(document.body, "openedJQXCalendar" + p.id, m); p.timeContainer.focus() }) } m.animate({ "margin-top": 0 }, this.openDelay, function () { p.isanimating = false; p.opening = false; a.data(document.body, "openedJQXCalendar" + p.id, m); p.calendarContainer.focus() }) } } else { m.stop(); p.isanimating = false; p.opening = false; m.css("opacity", 1); m.css("margin-top", 0); this.container.css("display", "block"); a.data(document.body, "openedJQXCalendar" + p.id, m); this.calendarContainer.focus(); if (this.timePopup) { this.timeContainer.stop(); this.timeContainer.css("opacity", 1); this.timeContainer.css("margin-top", 0); this.timeContainer.focus() } } if (this.value == null) { if (this._calendar && this._calendar._getSelectedCell()) { this._calendar._getSelectedCell().isSelected = false } } if (this.timePopup) { this.timeButtonIcon.addClass(this.toThemeProperty("jqx-icon-time-pressed")); this.timeButton.addClass(this.toThemeProperty("jqx-fill-state-hover")); this.timeButton.addClass(this.toThemeProperty("jqx-fill-state-pressed")) } else { this.calendarButtonIcon.addClass(this.toThemeProperty("jqx-icon-calendar-pressed")); this.calendarButton.addClass(this.toThemeProperty("jqx-fill-state-hover")); this.calendarButton.addClass(this.toThemeProperty("jqx-fill-state-pressed")) } this.host.addClass(this.toThemeProperty("jqx-fill-state-focus")) }, hideCalendar: function (k, p) { if (p) { this.changeType = p } var h = this.calendarContainer; var b = this.container; var q = this; a.jqx.aria(this, "aria-expanded", false); if (this.showTimeButton) { if (this.timeContainer.css("visibility") != "hidden" && k != "cancel") { if (this.selectionMode != "range") { var e = this.getDate(); var g = parseInt(this.hourInput.val()); var f = parseInt(this.minuteInput.val()); var c = parseInt(this.secondInput.val()); var r = parseInt(this.mssecondInput.val()); var d = this.meridianInput.val(); if (isNaN(g)) { g = 0 } if (isNaN(f)) { f = 0 } if (isNaN(c)) { c = 0 } if (isNaN(r)) { r = 0 } if (this.meridianInput.css("display") != "none") { if (d.toLowerCase().indexOf("p") >= 0) { if (g < 12) { g += 12 } } if (d.toLowerCase().indexOf("a") >= 0) { if (g >= 12) { g -= 12 } } } if (!e) { e = new Date() } e.setHours(g, f, c, r); this.setDate(e) } else { if (this.hourInput && k != "selected") { var j = this.getRange(); var g = parseInt(this.hourInput.val()); var f = parseInt(this.minuteInput.val()); var c = parseInt(this.secondInput.val()); var r = parseInt(this.mssecondInput.val()); var d = this.meridianInput.val(); if (isNaN(g)) { g = 0 } if (isNaN(f)) { f = 0 } if (isNaN(c)) { c = 0 } if (isNaN(r)) { r = 0 } if (this.meridianInput.css("display") != "none") { if (d.toLowerCase().indexOf("p") >= 0) { if (g < 12) { g += 12 } } if (d.toLowerCase().indexOf("a") >= 0) { if (g >= 12) { g -= 12 } } } var m = j.from; if (!m) { m = new Date() } m.setHours(g, f, c, r); var g = parseInt(this.hourInput2.val()); var f = parseInt(this.minuteInput2.val()); var c = parseInt(this.secondInput2.val()); var r = parseInt(this.mssecondInput2.val()); var d = this.meridianInput2.val(); if (f == "") { f = 0 } if (c == "") { c = 0 } if (r == "") { r = 0 } if (this.meridianInput2.css("display") != "none") { if (d.toLowerCase().indexOf("p") >= 0) { if (g < 12) { g += 12 } } if (d.toLowerCase().indexOf("a") >= 0) { if (g >= 12) { g -= 12 } } } var l = j.to; if (!l) { l = new Date() } l.setHours(g, f, c, r); if (l.valueOf() < m.valueOf()) { return false } this.setRange(m, l) } else { if (k == "selected") { return } } } } } a.data(document.body, "openedJQXCalendar" + this.id, null); if (this.animationType != "none") { var o = h.outerHeight(); h.css("margin-top", 0); if (this.showTimeButton) { this.timeContainer.css("margin-top", 0) } this.isanimating = true; var n = -o; if (parseInt(this.container.coord().top) < parseInt(this.host.coord().top)) { n = o } if (this.animationType == "fade") { h.animate({ opacity: 0 }, this.closeDelay, function () { b.css("display", "none"); q.isanimating = false }) } else { h.animate({ "margin-top": n }, this.closeDelay, function () { b.css("display", "none"); q.isanimating = false }) } if (this.showTimeButton) { if (this.animationType == "fade") { this.timeContainer.animate({ opacity: 0 }, this.closeDelay, function () { b.css("display", "none"); q.isanimating = false }) } else { this.timeContainer.animate({ "margin-top": n }, this.closeDelay, function () { b.css("display", "none"); q.isanimating = false }) } } } else { b.css("display", "none") } if (k != undefined) { this._updateSelectedDate(k) } this.timeButtonIcon.removeClass(this.toThemeProperty("jqx-icon-time-pressed")); this.timeButton.removeClass(this.toThemeProperty("jqx-fill-state-hover")); this.timeButton.removeClass(this.toThemeProperty("jqx-fill-state-pressed")); this.calendarButtonIcon.removeClass(this.toThemeProperty("jqx-icon-calendar-pressed")); this.calendarButton.removeClass(this.toThemeProperty("jqx-fill-state-hover")); this.calendarButton.removeClass(this.toThemeProperty("jqx-fill-state-pressed")); this.host.removeClass(this.toThemeProperty("jqx-fill-state-focus")); this._raiseEvent(8, h) }, _updateSelectedDate: function () { var m = this.value; if (m == null) { m = new a.jqx._jqxDateTimeInput.getDateTime(new Date()); m._setHours(0); m._setMinutes(0); m._setSeconds(0); m._setMilliseconds(0) } var g = m.hour; var f = m.minute; var c = m.second; var b = m.millisecond; if (this.selectionMode == "range" && this._calendar.getRange().from == null) { this.setDate(null); return } var d = new a.jqx._jqxDateTimeInput.getDateTime(this._calendar.value.dateTime); d._setHours(g); d._setMinutes(f); d._setSeconds(c); d._setMilliseconds(b); var n = this.setDate(d.dateTime); if (this.selectionMode == "range" && !n && this._oldDT) { var h = this.getRange(); var j = this._oldDT; var l = false; var k = false; var e = this._oldDT.from; var d = h.from; if (d != null && e) { if (!(d.getFullYear() != e.getFullYear() || d.getMonth() != e.getMonth() || d.getDate() != e.getDate() || d.getHours() != e.getHours() || d.getMinutes() != e.getMinutes() || d.getSeconds() != e.getSeconds())) { l = true } } var d = h.to; if (d != null) { e = this._oldDT.to; if (e) { if (!(d.getFullYear() != e.getFullYear() || d.getMonth() != e.getMonth() || d.getDate() != e.getDate() || d.getHours() != e.getHours() || d.getMinutes() != e.getMinutes() || d.getSeconds() != e.getSeconds())) { k = true } } } if (l && k) { return true } this._raiseEvent(0, {}); this._raiseEvent(9, {}) } }, _closeOpenedCalendar: function (b) { var e = a(b.target); var k = a.data(document.body, "openedJQXCalendar" + b.data.me.id); var d = false; a.each(e.parents(), function () { if (this.className && this.className.indexOf) { if (this.className.indexOf("jqx-calendar") != -1) { d = true; return false } if (this.className.indexOf("jqx-date-time-input-popup") != -1) { d = true; return false } if (this.className.indexOf("jqx-input") != -1) { return false } } }); if (a(b.target).ischildof(b.data.me.host)) { return true } if (b.target != null && (b.target.tagName == "B" || b.target.tagName == "b")) { var l = b.data.me.host.coord(); var n = b.data.me.host.width(); var c = b.data.me.host.height(); var m = parseInt(l.top); var g = parseInt(l.left); if (m <= b.pageY && b.pageY <= m + c) { if (g <= b.pageX && b.pageX <= g + n) { return true } } } if (k != null && !d) { if (k.length > 0) { var h = k[0].id.toString(); var f = h.toString().substring(13); var j = a(document).find("#" + f); var o = b.data.me.hideCalendar(); if (o !== false) { a.data(document.body, "openedJQXCalendar" + b.data.me.id, null) } } } }, _loadItems: function () { if (this.value != null) { this.items = new Array(); var d = this._getFormatValue(this.formatString); this.items = this._parseFormatValue(d); this.editors = new Array(); for (var b = 0; b < this.items.length; b++) { var c = this.items[b].getDateTimeEditorByItemType(this.value, this); this.editors[b] = c } } this._updateEditorsValue(); this._updateText() }, _updateText: function () { var d = this; var e = ""; if (d.items.length == 0 && d.value != null) { d._loadItems() } if (d.value != null) { if (d.items.length >= 1) { e = d.format(d.value, 0, d.items.length) } var b = d.dateTimeInput.val(); if (b != e) { d._raiseEvent(1, d.value) } } if (d.selectionMode == "range") { var c = d.getRange(); fromText = d.format(d.value, 0, d.items.length); if (c.to) { var g = a.jqx._jqxDateTimeInput.getDateTime(c.from); fromText = d.format(g, 0, d.items.length); var f = a.jqx._jqxDateTimeInput.getDateTime(c.to); toText = d.format(f, 0, d.items.length); var e = fromText + " - " + toText; if (e == " - ") { e = "" } } else { e = "" } } d.dateTimeInput.val(e) }, format: function (g, h, f) { var b = ""; for (var e = h; e < f; ++e) { var c = this.items[e].dateParser(g, this); if (this.isEditing && this.items[e].type != "ReadOnly") { if (this.selectionMode != "range") { var d = this.items[e].type == "Day" && this.items[e].format.length > 2; if (this.items[e].type == "FORMAT_AMPM") { d = true; if (this.editors[e].value == 0) { c = this.editors[e].amString } else { c = this.editors[e].pmString } } if (!d) { c = this.items[e].dateParserInEditMode(new Number(this.editors[e].value), "d" + this.editors[e].maxEditPositions, this); while (c.length < this.editors[e].maxEditPositions) { c = "0" + c } } } } b += c } return b }, _getFormatValueGroupLength: function (b) { for (i = 1; i < b.toString().length; ++i) { if (b.substring(i, i + 1) != b.substring(0, 1)) { return i } } return b.length }, _parseFormatValue: function (h) { var c = new Array(); var f = h.toString(); var e = 0; while (f.length > 0) { var d = this._getFormatValueGroupLength(f); var g = null; switch (f.substring(0, 1)) { case ":": case "/": d = 1; g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, 1), "ReadOnly", this.culture); break; case '"': case "'": var b = f.indexOf(f[0], 1); g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(1, 1 + Math.max(1, b - 1)), "ReadOnly", this.culture); d = Math.max(1, b + 1); break; case "\\": if (f.length >= 2) { g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(1, 1), "ReadOnly", this.culture); d = 2 } break; case "d": case "D": if (d > 2) { g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "Day", this.culture) } else { g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "Day", this.culture) } break; case "f": case "F": if (d > 7) { d = 7 } if (d > 3) { g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "ReadOnly", this.culture) } else { g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "Millisecond", this.culture) } break; case "g": g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "ReadOnly", this.culture); break; case "h": g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "FORMAT_hh", this.culture); break; case "H": g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "FORMAT_HH", this.culture); break; case "m": g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "Minute", this.culture); break; case "M": if (d > 4) { d = 4 } g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "Month", this.culture); break; case "s": case "S": g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "Second", this.culture); break; case "t": case "T": g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "FORMAT_AMPM", this.culture); break; case "y": case "Y": if (d > 1) { g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "Year", this.culture) } else { d = 1; g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, 1), dateTimeFormatInfo, "ReadOnly", this.culture) } break; case "z": g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, d), "ReadOnly", this.culture); break; default: d = 1; g = a.jqx._jqxDateTimeInput.DateTimeFormatItem._create(f.substring(0, 1), "ReadOnly", this.culture); break } c[e] = a.extend(true, {}, g); f = f.substring(d); e++ } return c }, _getFormatValue: function (b) { if (b == null || b.length == 0) { b = "d" } if (b.length == 1) { switch (b.substring(0, 1)) { case "d": return this.localization.calendar.patterns.d; case "D": return this.localization.calendar.patterns.D; case "t": return this.localization.calendar.patterns.t; case "T": return this.localization.calendar.patterns.T; case "f": return this.localization.calendar.patterns.f; case "F": return this.localization.calendar.patterns.F; case "M": return this.localization.calendar.patterns.M; case "Y": return this.localization.calendar.patterns.Y; case "S": return this.localization.calendar.patterns.S } } if (b.length == 2 && b.substring(0, 1) == "%") { b = b.substring(1) } return b }, _updateEditorsValue: function () { var j = this.value; if (j == null) { return } var g = j.year; var h = j.day; var d = j.hour; var l = j.millisecond; var b = j.second; var c = j.minute; var f = j.month; if (this.items == null) { return } for (var e = 0; e < this.items.length; e++) { switch (this.items[e].type) { case "FORMAT_AMPM": var k = d % 12; if (k == 0) { k = 12 } if (d >= 0 && d < 12) { this.editors[e].value = 0 } else { this.editors[e].value = 1 } break; case "Day": this.editors[e].value = h; break; case "FORMAT_hh": var k = d % 12; if (k == 0) { k = 12 } this.editors[e].value = k; break; case "FORMAT_HH": this.editors[e].value = d; break; case "Millisecond": this.editors[e].value = l; break; case "Minute": this.editors[e].value = c; break; case "Month": this.editors[e].value = f; break; case "Second": this.editors[e].value = b; break; case "Year": this.editors[e].value = g; break } } }, updateValue: function (z) { if (this.isEditing) { return } if (this.items && this.items.length == 0) { return } var o = 0; var s = 1; var C = 1; var l = 0; var d = 0; var J = 0; var u = 0; var I = 1; var h = 0; var m = false; var r = false; var D = false; var c = false; var b = false; var q = false; var x = false; var t = new Array(); var e = null; var y = 0; for (var B = 0; B < this.items.length; B++) { switch (this.items[B].type) { case "FORMAT_AMPM": h = this.editors[B].value; e = this.editors[B]; break; case "Character": break; case "Day": if (this.items[B].format.length < 3) { C = this.editors[B].value; t[y++] = this.editors[B]; if (C == 0) { C = 1 } D = true } break; case "FORMAT_hh": var F = this.editors[B]; l = F.value; c = true; break; case "FORMAT_HH": l = this.editors[B].value; c = true; break; case "Millisecond": d = this.editors[B].value; x = true; break; case "Minute": u = this.editors[B].value; b = true; break; case "Month": I = this.editors[B].value; r = true; if (I == 0) { I = 1 } break; case "ReadOnly": break; case "Second": J = this.editors[B].value; q = true; break; case "Year": m = true; s = this.editors[B].value; var H = this.editors[B].getDateTimeItem().format; if (H.length < 3) { var w = "1900"; if (w.Length == 4) { var v = "" + w[0] + w[1]; var E; E = parseInt(v); s = s + (E * 100) } } if (s == 0) { s = 1 } break } } var G = this.value != null ? new Date(this.value.dateTime) : null; if (s > 0 && I > 0 && C > 0 && u >= 0 && l >= 0 && J >= 0 && d >= 0) { var K = this.value; if (K != null) { if (!m) { s = K.year } if (!r) { I = K.month } if (!D) { C = K.day } } try { if (I > 12) { I = 12 } if (I < 1) { I = 1 } if (z && K._daysInMonth(s, I) <= C) { C = K._daysInMonth(s, I); if (t != null && t.length > 0) { for (B = 0; B < t.length; B++) { t[B].value = C } } } if (e != null) { if (e.value == 0) { if (l >= 12) { l -= 12 } } else { if (l + 12 < 24) { l += 12 } } } var g = this.value.dateTime.getDate(); this.value._setYear(parseInt(s)); this.value._setDay(C); this.value._setMonth(I); if (c) { this.value._setHours(l) } if (b) { this.value._setMinutes(u) } if (q) { this.value._setSeconds(J) } if (x) { this.value._setMilliseconds(d) } this._validateTimeRange() } catch (j) { this.value = K } if (G != null) { var A = this.value.dateTime.getFullYear() == G.getFullYear() && this.value.dateTime.getDate() == G.getDate() && this.value.dateTime.getMonth() == G.getMonth() && this.value.dateTime.getHours() == G.getHours() && this.value.dateTime.getMinutes() == G.getMinutes() && this.value.dateTime.getSeconds() == G.getSeconds(); if (!A) { if (this.changing) { var n = this.changing(G, this.value.dateTime); if (n) { this.value = a.jqx._jqxDateTimeInput.getDateTime(n) } } this._raiseEvent("0", this.value.dateTime); if (this.cookies) { if (this.value != null) { a.jqx.cookie.cookie("jqxDateTimeInput" + this.element.id, this.value.dateTime.toString(), this.cookieoptions) } } if (this.change) { this.change(this.value.dateTime) } } } } var f = this.editors.indexOf(this.activeEditor); var p = this.items[f]; if (this.value) { if (this.calendarContainer.jqxCalendar("_isDisabled", this.value.dateTime)) { this.dateTimeInput.addClass(this.toThemeProperty("jqx-input-invalid")) } else { this.dateTimeInput.removeClass(this.toThemeProperty("jqx-input-invalid")) } } }, _internalSetValue: function (b) { this.value._setYear(parseInt(b.year)); this.value._setDay(b.day); this.value._setMonth(b.month); this.value._setHours(b.hour); this.value._setMinutes(b.minute); this.value._setSeconds(b.second); this.value._setMilliseconds(b.milisecond) }, _raiseEvent: function (c, o, f) { var n = this.events[c]; var g = {}; g.owner = this; if (o == null) { o = {} } if (f == null) { f = o } var m = o.charCode ? o.charCode : o.keyCode ? o.keyCode : 0; var p = true; var l = this.readonly; var b = new a.Event(n); b.owner = this; b.args = g; b.args.date = this.getDate(); if (c == 9) { b.args.type = this.changeType; this.changeType = null } this.element.value = this.dateTimeInput.val(); if (c == 9 && this.selectionMode != "range") { var d = b.args.date; if (this._oldDT) { if (d != null) { if (!(d.getFullYear() != this._oldDT.getFullYear() || d.getMonth() != this._oldDT.getMonth() || d.getDate() != this._oldDT.getDate() || d.getHours() != this._oldDT.getHours() || d.getMinutes() != this._oldDT.getMinutes() || d.getSeconds() != this._oldDT.getSeconds())) { return true } } a.jqx.aria(this, "aria-valuenow", this.getDate()); a.jqx.aria(this, "aria-valuetext", this.getText()); if (this.getDate() != null) { a.jqx.aria(this, "aria-label", "Current focused date is " + this.getDate().toLocaleString()) } else { a.jqx.aria(this, "aria-label", "Current focused date is Null") } } b.args.oldValue = f; b.args.newValue = b.args.date; if (this._oldDT) { b.args.oldValue = this._oldDT } } if (this.selectionMode == "range") { b.args.date = this.getRange(); if (this._oldDT) { var d = b.args.date.from; if (c == 9) { var k = false; var j = false; var e = this._oldDT.from; if (d != null && e) { if (!(d.getFullYear() != e.getFullYear() || d.getMonth() != e.getMonth() || d.getDate() != e.getDate() || d.getHours() != e.getHours() || d.getMinutes() != e.getMinutes() || d.getSeconds() != e.getSeconds())) { k = true } } var d = b.args.date.to; if (d != null) { e = this._oldDT.to; if (e) { if (!(d.getFullYear() != e.getFullYear() || d.getMonth() != e.getMonth() || d.getDate() != e.getDate() || d.getHours() != e.getHours() || d.getMinutes() != e.getMinutes() || d.getSeconds() != e.getSeconds())) { j = true } } } if (k && j) { return true } var k = b.args.date.from; if (k == null) { k = "" } else { k = k.toString() } var j = b.args.date.to; if (j == null) { j = "" } else { j = j.toString() } a.jqx.aria(this, "aria-valuenow", k + "-" + j); a.jqx.aria(this, "aria-valuetext", this.getText()); if (k && j) { a.jqx.aria(this, "aria-label", "Current focused range is " + k.toLocaleString() + "-" + j.toLocaleString()) } } } b.args.oldValue = f; b.args.newValue = b.args.date; if (this._oldDT) { b.args.oldValue = this._oldDT } } if (this.host.css("display") == "none") { return true } if (c != 2 && c != 3 && c != 4 && c != 5 && c != 6) { p = this.host.trigger(b); if (b.stopPropagation) { b.stopPropagation() } } var h = this; if (!l) { if (c == 2 && !this.disabled) { setTimeout(function () { h.isEditing = true; if (this.selectionMode == "range") { h._selectGroup(-1) } else { h._selectGroup(-1) } }, 25) } } if (c == 4) { if (l || this.disabled) { if (m == 8 || m == 46) { this.isEditing = false; if (this.allowKeyboardDelete) { if (this.allowNullDate) { this.setDate(null) } else { if (this.selectionMode != "range") { this.setDate(this.getMinDate()) } else { this.setRange(this.getMinDate(), this.getMinDate()) } } } } if (m == 9) { return true } if (!o.altKey) { return false } } p = this._handleKeyDown(o, m) } else { if (c == 5) { if (m == 9) { return true } if (l || this.disabled) { return false } } else { if (c == 6) { if (m == 9) { return true } if (l || this.disabled) { return false } p = this._handleKeyPress(o, m) } } } return p }, _doLeftKey: function () { if (this.activeEditor != null) { if (!this.isEditing) { this.isEditing = true } var b = this.activeEditor; var d = false; var e = this.editors.indexOf(this.activeEditor); var c = e; if (this.enableAbsoluteSelection) { if (e >= 0 && this.activeEditor.positions > 0) { this.activeEditor.positions--; this._selectGroup(e); return } } while (e > 0) { this.activeEditor = this.editors[--e]; this._selectGroup(e); if (this.items[e].type != "ReadOnly") { d = true; break } } if (!d) { if (c >= 0) { this.activeEditor = this.editors[c] } } if (this.activeEditor != null && b != this.activeEditor) { if (this.items[e].type != "ReadOnly") { if (this.enableAbsoluteSelection) { this.activeEditor.positions = this.activeEditor.maxEditPositions - 1 } else { this.activeEditor.positions = 0 } } } if (this.activeEditor != b) { this._validateValue(); this._updateText(); this._selectGroup(this.editors.indexOf(this.activeEditor)); return true } else { return false } } }, _doRightKey: function () { if (this.activeEditor != null) { if (!this.isEditing) { this.isEditing = true } var b = this.activeEditor; var d = false; var e = this.editors.indexOf(this.activeEditor); var c = e; if (this.enableAbsoluteSelection) { if (e >= 0 && this.activeEditor.positions < this.activeEditor.maxEditPositions - 1) { this.activeEditor.positions++; this._selectGroup(e); return } } while (e <= this.editors.length - 2) { this.activeEditor = this.editors[++e]; this._selectGroup(e); if (this.items[e].type != "ReadOnly") { if (this.items[e].type == "Day" && this.items[e].format.length > 2) { break } d = true; break } } if (!d) { if (c >= 0) { this.activeEditor = this.editors[c] } } if (this.activeEditor != null && this.activeEditor != b) { if (this.items[e].type != "ReadOnly") { this.activeEditor.positions = 0 } } if (this.activeEditor != b) { this._validateValue(); this._updateText(); this._selectGroup(this.editors.indexOf(this.activeEditor)); return true } else { return false } } }, _saveSelectedText: function () { var b = this._selection(); var d = ""; var c = this.dateTimeInput.val(); if (b.start > 0 || b.length > 0) { for (i = b.start; i < b.end; i++) { d += c[i] } } if (window.clipboardData) { window.clipboardData.setData("Text", d) } return d }, _selectWithAdvancePattern: function () { var f = this.editors.indexOf(this.activeEditor); var g = false; if (this.items[f].type != "ReadOnly") { g = true } if (!g) { return } var d = this.activeEditor; if (d != null) { var e = d.positions == d.maxEditPositions; if (e) { this.editorText = ""; var c = d.value; var b = false; switch (this.items[f].type) { case "FORMAT_AMPM": if (c < 0) { c = 0 } else { if (c > 1) { c = 1 } } break; case "Character": break; case "Day": if (c < 1) { c = 1 } else { if (c > 31) { c = 31 } } break; case "FORMAT_hh": if (c < 1) { c = 1 } else { if (c > 12) { c = 12 } } break; case "FORMAT_HH": if (c < 0) { c = 0 } else { if (c > 23) { c = 23 } } break; case "Millisecond": if (c < 0) { c = 0 } else { if (c > 99) { c = 99 } } break; case "Minute": if (c < 0) { c = 0 } else { if (c > 59) { c = 59 } } break; case "Month": if (c < 1) { c = 1 } else { if (c > 12) { c = 12 } } break; case "ReadOnly": break; case "Second": if (c < 0) { c = 0 } else { if (c > 59) { c = 59 } } break; case "Year": if (c < this.minDate.year) { c = this.minDate.year } else { if (c > this.maxDate.year) { c = this.maxDate.year } } break } if (d.value != c) { b = true } if (!b) { this.isEditing = false; this._validateValue(); this._updateText(); this.isEditing = true; this._doRightKey(); return true } return false } } }, _handleKeyPress: function (k, o) { var n = this._selection(); var b = this; var d = k.ctrlKey || k.metaKey; if ((d && o == 97) || (d && o == 65)) { return true } if (o == 8) { if (n.start > 0) { b._setSelectionStart(n.start) } return false } if (o == 46) { if (n.start < this.items.length) { b._setSelectionStart(n.start) } return false } if (n.start >= 0) { this.changeType = "keyboard"; var f = String.fromCharCode(o); var l = parseInt(f); if (f == "p" || f == "a" || f == "A" || f == "P") { if (this.activeEditor.item.type == "FORMAT_AMPM") { if (this.activeEditor.value == 0 && (f == "p" || f == "P")) { this.spinUp() } else { if (this.activeEditor.value == 1 && (f == "a" || f == "A")) { this.spinDown() } } } } if (!isNaN(l)) { if (this.container.css("display") == "block") { this.hideCalendar() } this.updateValue(); this._updateText(); var h = false; var j = this.editors.indexOf(this.activeEditor); var c = null; this.isEditing = true; if (j.type != "ReadOnly") { c = this.activeEditor } if (c != null && c.positions == 0) { this.editorText = "" } if (this.activeEditor == null) { this.activeEditor = this.editors[0] } if (this.activeEditor == null) { return false } this.activeEditor.insert(f); if (c != null && this.editorText.length >= c.maxEditPositions) { this.editorText = "" } this.editorText += f; var p = this._selectWithAdvancePattern(); if (this.activeEditor.positions == this.activeEditor.maxEditPositions) { var g = this._getLastEditableEditorIndex(); if (this.editors.indexOf(this.activeEditor) == g && p && this.enableAbsoluteSelection) { this.activeEditor.positions = this.activeEditor.maxEditPositions - 1 } else { this.activeEditor.positions = 0 } } h = true; this.updateValue(); this._updateText(); this._selectGroup(this.editors.indexOf(this.activeEditor)); return false } } var m = this._isSpecialKey(o); return m }, _getLastEditableEditorIndex: function () { var b = 0; var c = this; for (itemIndex = this.items.length - 1; itemIndex >= 0; itemIndex--) { if (this.items[itemIndex].type != "ReadOnly") { return itemIndex } } return -1 }, _handleKeyDown: function (h, o) { var g = this; this.timePopup = false; if (o == 84) { this.timePopup = true } if (h.keyCode == 115) { if (g.isOpened()) { g.hideCalendar("keyboard", "keyboard"); return false } else { if (!g.isOpened()) { g.showCalendar("keyboard", "keyboard"); return false } } } if (h.altKey) { if (h.keyCode == 38) { if (g.isOpened()) { g.hideCalendar("keyboard", "keyboard"); return false } } else { if (h.keyCode == 40) { if (!g.isOpened()) { g.showCalendar("keyboard", "keyboard"); return false } } } } else { if (h.ctrlKey) { this.timePopup = true; if (h.keyCode == 38) { if (g.isOpened()) { g.hideCalendar("keyboard", "keyboard"); return false } } else { if (h.keyCode == 40) { if (!g.isOpened()) { g.showCalendar("keyboard", "keyboard"); return false } } } } } if (g.isOpened()) { if (h.keyCode == 9) { g.hideCalendar("selected", "keyboard"); return true } return } var m = g._selection(); var b = h.ctrlKey || h.metaKey; if ((b && o == 99) || (b && o == 67)) { g._saveSelectedText(h); return true } if ((b && o == 122) || (b && o == 90)) { return false } if ((b && o == 118) || (b && o == 86) || (h.shiftKey && o == 45)) { var l = g.val(); var j = this; var c = a('<textarea style="position: absolute; left: -1000px; top: -1000px;"/>'); a("body").append(c); c.select(); setTimeout(function () { var e = c.val(); j.setDate(e); c.remove() }, 100); return true } if (o == 8 || o == 46) { if (!h.altKey && !b && o == 46) { g.isEditing = false; if (g.allowKeyboardDelete) { g.changeType = "keyboard"; if (g.allowNullDate) { g.setDate(null) } else { if (g.selectionMode != "range") { g.setDate(g.getMinDate()) } else { g.setRange(g.getMinDate(), g.getMinDate()) } } } } else { if (g.activeEditor != null) { var f = g.editors.indexOf(g.activeEditor); if (g.activeEditor.positions >= 0) { var d = g._format(Number(g.activeEditor.value), "d" + g.activeEditor.maxEditPositions, g.culture); tmp = d; tmp = tmp.substring(0, g.activeEditor.positions) + "0" + tmp.substring(g.activeEditor.positions + 1); if (parseInt(tmp) < g.activeEditor.minValue) { tmp = g._format(Number(g.activeEditor.minValue), "d" + g.activeEditor.maxEditPositions, g.culture) } if (g.enableAbsoluteSelection) { g.activeEditor.value = tmp } else { g.activeEditor.value = g.activeEditor.minValue } g._validateValue(); g._updateText(); g.changeType = "keyboard"; if (o == 8) { var n = this; if (g.enableAbsoluteSelection && g.activeEditor.positions > 0) { setTimeout(function () { n.activeEditor.positions = n.activeEditor.positions - 1; n._selectGroup(f) }, 10) } else { setTimeout(function () { n._doLeftKey() }, 10) } } else { g._selectGroup(f) } } else { g._doLeftKey() } } } return false } if (o == 38) { this.spinUp(); g.changeType = "keyboard"; return false } else { if (o == 40) { this.spinDown(); g.changeType = "keyboard"; return false } } if (o == 9) { if (h.shiftKey) { var p = this._doLeftKey() } else { var p = this._doRightKey() } if (!p) { return true } else { return false } } if (o == 37) { if (this._editor) { var p = this._doLeftKey(); if (!p) { this.isEditing = false; this._validateValue() } return !p } else { var p = this._doLeftKey(); return false } } else { if (o == 39 || o == 191) { if (this._editor) { var p = this._doRightKey(); if (!p) { this.isEditing = false; this._validateValue() } return !p } else { var p = this._doRightKey(); return false } } } var k = this._isSpecialKey(o); if (this.value == null && (o >= 48 && o <= 57 || o >= 96 && o <= 105)) { g.changeType = "keyboard"; if (new Date() >= this.getMinDate() && new Date() <= this.getMaxDate()) { this.setDate(new Date()) } else { this.setDate(this.getMaxDate()) } } if (!a.jqx.browser.mozilla) { return true } if (a.jqx.browser.mozilla && a.jqx.browser.version > 24) { return true } return k }, _isSpecialKey: function (b) { if (b != 8 && b != 9 && b != 13 && b != 35 && b != 36 && b != 37 && b != 39 && b != 27 && b != 46) { return false } return true }, _selection: function () { if ("selectionStart" in this.dateTimeInput[0]) { var f = this.dateTimeInput[0]; var g = f.selectionEnd - f.selectionStart; return { start: f.selectionStart, end: f.selectionEnd, length: g, text: f.value } } else { var c = document.selection.createRange(); if (c == null) { return { start: 0, end: f.value.length, length: 0 } } var b = this.dateTimeInput[0].createTextRange(); var d = b.duplicate(); b.moveToBookmark(c.getBookmark()); d.setEndPoint("EndToStart", b); var g = c.text.length; return { start: d.text.length, end: d.text.length + c.text.length, length: g, text: c.text } } }, _selectGroup: function (k, m) { if (this.host.css("display") == "none") { return } if (this.readonly) { return } if (!m) { var m = this._selection() } var f = ""; var b = ""; var c = null; for (var d = 0; d < this.items.length; d++) { b = this.items[d].dateParser(this.value, this); if (this.isEditing && this.items[d].type != "ReadOnly") { var j = this.items[d].type == "Day" && this.items[d].format.length > 2; if (!j && this.items[d].type != "FORMAT_AMPM") { b = this.items[d].dateParserInEditMode(new Number(this.editors[d].value), "d" + this.editors[d].maxEditPositions, this); while (b.length < this.editors[d].maxEditPositions) { b = "0" + b } } } f += b; if (this.items[d].type == "ReadOnly") { continue } if (this.items[d].type == "Day" && this.items[d].format.length > 2) { continue } if (k != undefined && k != -1) { if (d >= k) { var l = f.length - b.length; var e = b.length; if (this.enableAbsoluteSelection) { if (!isNaN(parseInt(b)) && this.isEditing && k != -1) { e = 1; l += this.editors[d].positions } } if (l == this.dateTimeInput.val().length) { l-- } this._setSelection(l, l + e); c = this.editors[d]; this.activeEditor = c; break } } else { if (f.length >= m.start) { c = this.editors[d]; this.activeEditor = c; var l = f.length - b.length; var e = 1; if (this.enableAbsoluteSelection) { if (!isNaN(parseInt(b)) && this.isEditing && k != -1) { e = 1; l += this.editors[d].positions } } else { e = b.length } this._setSelection(l, l + e); break } } } if (d < this.items.length && k == -1) { if (this.items[d].type != "ReadOnly") { this.activeEditor.positions = 0 } } var h = this._selection(); if (h.length == 0) { if (h.start > 0) { var g = this._getLastEditableEditorIndex(); if (g >= 0) { } } } }, _getLastEditableEditorIndex: function () { var b = -1; for (i = 0; i < this.editors.length; i++) { if (this.items[i].type == "ReadOnly") { continue } if (this.items[i].type == "Day" && this.items[i].format.length > 2) { continue } b = i } return b }, _setSelection: function (e, b) { try { if ("selectionStart" in this.dateTimeInput[0]) { this.dateTimeInput[0].setSelectionRange(e, b) } else { var c = this.dateTimeInput[0].createTextRange(); c.collapse(true); c.moveEnd("character", b); c.moveStart("character", e); c.select() } } catch (d) { } }, _setSelectionStart: function (b) { this._setSelection(b, b) }, destroy: function () { this.host.removeClass("jqx-rc-all"); if (this.timePopupElement) { this.timePopupElement.remove() } this._calendar.destroy(); this.container.remove(); this._removeHandlers(); this.dateTimeInput.remove(); this.host.remove() }, refreshValue: function () { this._refreshValue() }, refresh: function (b) { if (b != true) { this._setSize(); this._arrange() } }, resize: function (c, b) { this.width = c; this.height = b; this.refresh() }, _setOption: function (b, c, d) { if (b === "value") { if (this.selectionMode != "range") { this._oldDT = null } else { this._oldDT = null } this.value = c; this._refreshValue(); this._raiseEvent(9, { type: null }) } if (b == "maxDate") { this._calendar.maxDate = c; this._raiseEvent(9, { type: null }) } if (b == "minDate") { this._calendar.minDate = c; this._raiseEvent(9, { type: null }) } if (b == "showCalendarButton") { if (c) { this.calendarButton.css("display", "block") } else { this.calendarButton.css("display", "none") } } if (b == "disabled") { this.dateTimeInput.attr("disabled", c) } if (b == "readonly") { this.readonly = c; this.dateTimeInput.css("readonly", c) } if (b == "textAlign") { this.dateTimeInput.css("text-align", c); this.textAlign = c } if (b == "width") { this.width = c; this.width = parseInt(this.width); this._arrange() } else { if (b == "height") { this.height = c; this.height = parseInt(this.height); this._arrange() } } }, _refreshValue: function () { this._updateEditorsValue(); this.updateValue(); this._validateValue(); this._updateText() } }) })(jqxBaseFramework); (function (a) { a.jqx._jqxDateTimeInput.DateTimeFormatItem = {}; a.extend(a.jqx._jqxDateTimeInput.DateTimeFormatItem, { _create: function (d, c, b) { this.format = d; this.type = c; this.culture = b; return this }, _itemValue: function () { switch (this.format.length) { case 1: return 9; case 2: return 99; case 3: default: return 999 } }, _maximumValue: function () { switch (this.format.length) { case 1: return 9; case 2: return 99; case 3: default: return 999 } }, dateParser: function (b, c) { if (b == null) { return "" } var d = c._format(b.dateTime, this.format.length == 1 ? "%" + this.format : this.format, this.culture); return d }, dateParserInEditMode: function (e, d, b) { if (e == null) { return "" } var c = b._format(e.toString(), d.length == 1 ? "%" + d : d, this.culture); return c }, getDateTimeEditorByItemType: function (n, e) { switch (this.type) { case "FORMAT_AMPM": var f = a.jqx._jqxDateTimeInput.AmPmEditor._createAmPmEditor(this.format, n.hour / 12, e.localization.calendar.AM[0], e.localization.calendar.PM[0], this, e); var d = a.extend({}, f); return d; case "Character": return null; case "Day": var k = n.year; var s = n.month; var r; if (this.format.length == 3) { r = e.localization.calendar.days.namesAbbr } else { if (this.format.length > 3) { r = e.localization.calendar.days.names } else { r = null } } var t = n.day; if (r != null) { t = n.dayOfWeek + 1 } var g = a.jqx._jqxDateTimeInput.DateEditor._createDayEditor(n, n.day, 1, n._daysInMonth(k, s), this.format.length == 1 ? 1 : 2, 2, r, this, e); var d = a.extend({}, g); return d; case "FORMAT_hh": var c = n.hour % 12; if (c == 0) { c = 12 } var q = a.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(c, 1, 12, this.format.length == 1 ? 1 : 2, 2, this, e); var d = a.extend({}, q); return d; case "FORMAT_HH": var h = a.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(n.hour, 0, 23, this.format.length == 1 ? 1 : 2, 2, this, e); var d = a.extend({}, h); return d; case "Millisecond": var l = a.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(n.millisecond / this._itemValue(), 0, this._maximumValue(), this.format.length, this.format.length, this, e); var d = a.extend({}, l); return d; case "Minute": var o = a.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(n.minute, 0, 59, this.format.length == 1 ? 1 : 2, 2, this, e); var d = a.extend({}, o); return d; case "Month": var j; if (this.format.length == 3) { j = e.localization.calendar.months.namesAbbr } else { if (this.format.length > 3) { j = e.localization.calendar.months.names } else { j = null } } var m = a.jqx._jqxDateTimeInput.DateEditor._createMonthEditor(n.month, this.format.length == 2 ? 2 : 1, j, this, e); var d = a.extend({}, m); return d; case "ReadOnly": return a.jqx._jqxDateTimeInput.DisabledEditor._create(this.format.length, n.day, this, e); case "Second": var b = a.jqx._jqxDateTimeInput.NumberEditor._createNumberEditor(n.second, 0, 59, this.format.length == 1 ? 1 : 2, 2, this, e); var d = a.extend({}, b); return d; case "Year": var p = a.jqx._jqxDateTimeInput.DateEditor._createYearEditor(n.year, 4, this, e); var d = a.extend({}, p); return d } return null } }) })(jqxBaseFramework); (function (a) { a.jqx._jqxDateTimeInput.DateEditor = a.extend(a.jqx._jqxDateTimeInput.DateEditor, { formatValueLength: 0, handleYears: false, handleDays: false, handleMonths: false, positions: 0, value: 0, minEditPositions: 0, maxEditPositions: 0, minValue: 0, maxValue: 0, item: null, dateTimeFormatInfo: null, days: null, dateTimeMonths: null, lastDayInput: null, minPositions: function () { if (this.handleYears) { if (this.formatValueLength == 4) { if (this.positions <= 1) { return 1 } else { if (this.positions >= 4) { return 4 } } return this.positions } else { return this.minEditPositions } } return this.minEditPositions }, initializeFields: function (e, f, b, d, c) { this.minValue = e; this.maxValue = f; this.minEditPositions = b; this.maxEditPositions = d; this.updateActiveEditor(e); this.item = c }, _createYearEditor: function (e, d, c, b) { a.jqx._jqxDateTimeInput.DateEditor = a.extend(true, {}, this); this.initializeFields(d <= 4 ? 0 : 0, d < 4 ? 99 : 9999, (d == 2) ? 2 : 1, d > 3 ? 4 : 2, c); this.initializeYearEditor(e, d, c.culture); this.handleYears = true; this.that = b; return this }, initializeYearEditor: function (d, c, e) { this.formatValueLength = c; this.dateTimeFormatInfo = e; var b = d; b = Math.min(b, 9999); b = Math.max(b, 1); b = this.formatValueLength < 4 ? b % 100 : b; this.updateActiveEditor(b); this.value = b }, updateActiveEditor: function (b) { this.value = b; this.positions = 0 }, _createDayEditor: function (b, j, h, e, c, f, g, k, d) { a.jqx._jqxDateTimeInput.DateEditor = a.extend(true, {}, this); this.initializeFields(h, e, 1, f, k); this.currentValue = b; this.value = j; this.days = g; this.handleDays = true; this.that = d; return this }, getDayOfWeek: function (b) { if (typeof this.currentValue == a.jqx._jqxDateTimeInput.DateTime) { this.currentValue.dayOfWeek() } return b }, defaultTextValue: function () { var d = this.value; var e = this.minEditPositions; var b = e; var c = this.that._format(this.value, "d" + b, ""); return c }, textValue: function () { if (this.handleDays) { if (this.days == null) { return this.defaultTextValue() } else { var b = (this.value % 7) + 1; b = this.getDayOfWeek(b); return this.days[b] } } else { if (this.handleMonths) { if (this.dateTimeMonths == null || this.value < 1 || this.value > 12) { return this.defaultTextValue() } else { return this.dateTimeMonths[this.value - 1] } } } return this.defaultTextValue() }, defaultInsertString: function (c) { if (c == null) { return this.deleteValue() } if (c.length == 0) { return this.deleteValue() } var g = c.substring(0, 1); if (isNaN(g)) { return } var e = true; var d; var b = 1; var f = this.that._format(Number(this.value), "d" + this.maxEditPositions, this.culture); d = f; if (this.positions >= this.maxEditPositions) { this.positions = 0 } d = d.substring(0, this.positions) + g + d.substring(this.positions + 1); d = this.setValueByString(d, b); return true }, setValueByString: function (d, b) { d = this.fixValueString(d); var c = new Number(d); this.value = c; this.positions += b; return d }, fixValueString: function (b) { if (b.length > this.maxEditPositions) { b = b.substring(b.length - this.maxEditPositions) } return b }, initializeValueString: function (c) { var b; b = ""; if (this.hasDigits()) { b = c } return b }, deleteValue: function () { if (this.value == this.minValue && this.hasDigits() == false) { return false } this.updateActiveEditor(this.minValue); return true }, hasDigits: function () { return this.positions > 0 }, insert: function (b) { if (this.handleDays) { if (this.days != null) { var c = false; c = this.insertLongString(b, c); if (c) { return c } c = this.insertShortString(b, c); if (c) { return c } } if (this.value == 1 && this.lastDayInput != null && this.lastDayInput.toString().length > 0 && this.lastDayInput.toString() == "0") { this.value = 0 } this.lastDayInput = b; return this.defaultInsertString(b) } else { if (this.handleMonths) { if (this.dateTimeMonths != null) { var c = false; c = this.insertLongString2(b, c); if (c) { return c } c = this.insertShortString2(b, c); if (c) { return c } } } } return this.defaultInsertString(b) }, insertShortString: function (d, e) { if (d.length == 1) { for (i = 0; i < 6; ++i) { var c = (this.value + i) % 7 + 1; var b = this.days[c - 1]; if (b.substring(0, 1) == d) { this.updateActiveEditor(c); e = true; return e } } } return e }, insertLongString: function (c, d) { if (c.length > 0) { for (i = 0; i < 6; ++i) { var b = (this.value + i) % 7 + 1; if (this.days[b - 1] == c) { this.updateActiveEditor(b); d = true; return d } } } return d }, _createMonthEditor: function (d, c, b, f, e) { a.jqx._jqxDateTimeInput.DateEditor = a.extend(true, {}, this); this.initializeFields(1, 12, c, 2, f); this.dateTimeMonths = b; this.value = d; if (this.dateTimeMonths != null && this.dateTimeMonths[12] != null && this.dateTimeMonths[12].length > 0) { this.dateTimeMonths = null } this.handleMonths = true; this.that = e; return this }, insertLongString2: function (b, c) { if (b.length > 0) { for (i = 0; i < 11; ++i) { month = (this.value + i) % 12 + 1; if (this.dateTimeMonths[month - 1] == b) { this.updateActiveEditor(month); c = true; return c } } } return c }, insertShortString2: function (c, d) { if (c.length == 1) { for (i = 0; i < 11; ++i) { var e = (this.value + i) % 12 + 1; var b = this.dateTimeMonths[e - 1]; if (b.substring(0, 1) == c) { this.updateActiveEditor(e); d = true; return d } } } return d }, correctMaximumValue: function (b) { if (b > this.maxValue) { b = this.minValue } return b }, correctMinimumValue: function (b) { if (b < this.minValue) { b = this.maxValue } return b }, increaseValue: function (e) { var c = this.that._format(Number(this.value), "d" + this.maxEditPositions, this.culture); var f = c.toString()[this.positions]; f = parseInt(f) + 1; if (f > 9) { f = 0 } if (!e) { var b = this.value + 1; b = this.correctMaximumValue(b); this.updateActiveEditor(b); return true } var d = c.substring(0, this.positions) + f + c.substring(this.positions + 1); if (d != this.value || this.hasDigits()) { this.updateActiveEditor(d); return true } else { return false } }, decreaseValue: function (e) { var c = this.that._format(Number(this.value), "d" + this.maxEditPositions, this.culture); var f = c.toString()[this.positions]; f = parseInt(f) - 1; if (f < 0) { f = 9 } if (!e) { var b = this.value - 1; b = this.correctMinimumValue(b); this.updateActiveEditor(b); return true } var d = c.substring(0, this.positions) + f + c.substring(this.positions + 1); if (d != this.value || this.hasDigits()) { this.updateActiveEditor(d); return true } else { return false } }, getDateTimeItem: function () { return this.item } }) })(jqxBaseFramework); (function (a) { a.jqx._jqxDateTimeInput.NumberEditor = {}; a.extend(a.jqx._jqxDateTimeInput.NumberEditor, { formatValueLength: 0, positions: 0, value: 0, minEditPositions: 0, maxEditPositions: 0, minValue: 0, maxValue: 0, item: null, minPositions: function () { if (this.handleYears) { if (this.formatValueLength == 4) { if (this.positions <= 1) { return 1 } else { if (this.positions >= 4) { return 4 } } return this.positions } else { return this.minEditPositions } } return this.minEditPositions }, _createNumberEditor: function (g, f, h, b, e, d, c) { a.jqx._jqxDateTimeInput.NumberEditor = a.extend(true, {}, this); this.initializeFields(f, h, b, e, d); this.that = c; return this }, initializeFields: function (e, f, b, d, c) { this.minValue = e; this.maxValue = f; this.minEditPositions = b; this.maxEditPositions = d; this.updateActiveEditor(e); this.item = c }, updateActiveEditor: function (b) { this.value = b; this.positions = 0 }, getDayOfWeek: function (b) { if (typeof this.currentValue == a.jqx._jqxDateTimeInput.DateTime) { this.currentValue.dayOfWeek() } return b }, textValue: function () { var d = this.value; var e = this.minEditPositions; var b = e; var c = this.that._format(this.value, "d" + b, ""); return c }, insert: function (c) { if (c == null) { return this.deleteValue() } if (c.length == 0) { return this.deleteValue() } var g = c.substring(0, 1); if (isNaN(g)) { return } var e = true; var d; var b = 1; var f = this.that._format(Number(this.value), "d" + this.maxEditPositions, this.culture); d = f; if (this.positions >= this.maxEditPositions) { this.positions = 0 } d = d.substring(0, this.positions) + g + d.substring(this.positions + 1); d = this.setValueByString(d, b); return true }, setValueByString: function (d, b) { d = this.fixValueString(d); var c = new Number(d); this.value = c; this.positions += b; return d }, fixValueString: function (b) { if (b.length > this.maxEditPositions) { b = b.substring(b.length - this.maxEditPositions) } return b }, initializeValueString: function (c) { var b; b = ""; if (this.hasDigits()) { b = c } return b }, deleteValue: function () { if (this.value == this.minValue && this.hasDigits() == false) { return false } this.updateActiveEditor(this.minValue); return true }, hasDigits: function () { return this.positions > 0 }, correctMaximumValue: function (b) { if (b > this.maxValue) { b = this.minValue } return b }, correctMinimumValue: function (b) { if (b < this.minValue) { b = this.maxValue } return b }, increaseValue: function (e) { var c = this.that._format(Number(this.value), "d" + this.maxEditPositions, this.culture); var f = c.toString()[this.positions]; f = parseInt(f) + 1; if (f > 9) { f = 0 } if (!e) { var b = this.value + 1; b = this.correctMaximumValue(b); this.updateActiveEditor(b); return true } var d = c.substring(0, this.positions) + f + c.substring(this.positions + 1); if (d != this.value || this.hasDigits()) { this.updateActiveEditor(d); return true } else { return false } }, decreaseValue: function (e) { var c = this.that._format(Number(this.value), "d" + this.maxEditPositions, this.culture); var f = c.toString()[this.positions]; f = parseInt(f) - 1; if (f < 0) { f = 9 } if (!e) { var b = this.value - 1; b = this.correctMinimumValue(b); this.updateActiveEditor(b); return true } var d = c.substring(0, this.positions) + f + c.substring(this.positions + 1); if (d != this.value || this.hasDigits()) { this.updateActiveEditor(d); return true } else { return false } }, getDateTimeItem: function () { return this.item } }) })(jqxBaseFramework); (function (a) { a.jqx._jqxDateTimeInput.DisabledEditor = {}; a.extend(a.jqx._jqxDateTimeInput.DisabledEditor, { _create: function (g, c, f, b, e, d) { this.format = g; this.value = -1; this.item = e; this.that = d; return this }, textValue: function () { return "" }, insert: function (b) { return false }, deleteValue: function () { return false }, increaseValue: function () { return false }, decreaseValue: function () { return false }, getDateTimeItem: function () { return this.item } }) })(jqxBaseFramework); (function (a) { a.jqx._jqxDateTimeInput.AmPmEditor = {}; a.extend(a.jqx._jqxDateTimeInput.AmPmEditor, { _createAmPmEditor: function (g, c, f, b, e, d) { this.format = g; this.value = c; this.amString = f; this.pmString = b; this.item = e; this.that = d; if (f == b) { this.amString = "<" + f; this.pmString = ">" + b } return this }, textValue: function () { var b = this.amString; if (this.value != 0) { b = this.pmString } if (this.format.length == 1 && b.length > 1) { b = b.substring(0, 1) } return b }, insert: function (f) { var d = f.toString(); if (d.Length == 0) { return this.deleteValue() } var c = false; if (this.amString.Length > 0 && this.pmString.Length > 0) { var g = amString[0]; var b = d[0]; var e = pmString[0]; if (g.toString() == b.toString()) { this.value = 0; c = true } else { if (e.toString() == b.toString()) { this.value = 1; c = true } } } else { if (this.pmString.Length > 0) { this.value = 1; c = true } else { if (this.amString.Length > 0) { this.value = 0; c = true } } } return c }, deleteValue: function () { var b = true; if (this.amString.Length == 0 && this.pmString.Length != 0) { if (this.value == 0) { return false } this.value = 0 } else { if (this.value == 1) { return false } this.value = 1 } return b }, increaseValue: function () { this.value = 1 - this.value; return true }, decreaseValue: function () { this.increaseValue(); return true }, getDateTimeItem: function () { return this.item } }) })(jqxBaseFramework); (function (a) { a.jqx._jqxDateTimeInput.getDateTime = function (c) { var b = { dateTime: new Date(c), daysPer4Years: 1461, daysPerYear: 365, daysToMonth365: { 0: 0, 1: 31, 2: 59, 3: 90, 4: 120, 5: 151, 6: 181, 7: 212, 8: 243, 9: 273, 10: 304, 11: 334, 12: 365 }, daysToMonth366: { 0: 0, 1: 31, 2: 60, 3: 91, 4: 121, 5: 152, 6: 182, 7: 213, 8: 244, 9: 274, 10: 305, 11: 335, 12: 366 }, maxValue: 3155378976000000000, millisPerDay: 86400000, millisPerHour: 3600000, millisPerMinute: 60000, millisPerSecond: 1000, minTicks: 0, minValue: 0, ticksPerDay: 864000000000, ticksPerHour: 36000000000, ticksPerMillisecond: 10000, ticksPerMinute: 600000000, ticksPerSecond: 10000000, hour: c.getHours(), minute: c.getMinutes(), day: c.getDate(), second: c.getSeconds(), month: 1 + c.getMonth(), year: c.getFullYear(), millisecond: c.getMilliseconds(), dayOfWeek: c.getDay(), isWeekend: function (d) { if (d == undefined || d == null) { d = this.dateTime } var e = d.getDay() % 6 == 0; return e }, dayOfYear: function (e) { if (e == undefined || e == null) { e = this.dateTime } var d = new Date(e.getFullYear(), 0, 1); return Math.ceil((e - d) / 86400000) }, _setDay: function (d) { if (d == undefined || d == null) { d = 0 } this.dateTime.setDate(d); this.day = this.dateTime.getDate() }, _setMonth: function (d) { if (d == undefined || d == null) { d = 0 } this.dateTime.setMonth(d - 1); this.month = 1 + this.dateTime.getMonth() }, _setYear: function (d) { if (d == undefined || d == null) { d = 0 } this.dateTime.setFullYear(d); this.year = this.dateTime.getFullYear() }, _setHours: function (d) { if (d == undefined || d == null) { d = 0 } this.dateTime.setHours(d); this.hour = this.dateTime.getHours() }, _setMinutes: function (d) { if (d == undefined || d == null) { d = 0 } this.dateTime.setMinutes(d); this.minute = this.dateTime.getMinutes() }, _setSeconds: function (d) { if (d == undefined || d == null) { d = 0 } this.dateTime.setSeconds(d); this.second = this.dateTime.getSeconds() }, _setMilliseconds: function (d) { if (d == undefined || d == null) { d = 0 } this.dateTime.setMilliseconds(d); this.millisecond = this.dateTime.getMilliseconds() }, _addDays: function (f) { var d = this.dateTime; var e = d.getDate(); d.setDate(d.getDate() + f); if (e === d.getDate()) { d.setHours(d.getHours() + d.getTimezoneOffset() / 60) } return d }, _addWeeks: function (e) { var d = this.dateTime; d.setDate(d.getDate() + 7 * e); return d }, _addMonths: function (e) { var d = this.dateTime; d.setMonth(d.getMonth() + e); return d }, _addYears: function (e) { var d = this.dateTime; d.setFullYear(d.getFullYear() + e); return d }, _addHours: function (e) { var d = this.dateTime; d.setHours(d.getHours() + e); return d }, _addMinutes: function (e) { var d = this.dateTime; d.setMinutes(d.getMinutes() + e); return d }, _addSeconds: function (e) { var d = this.dateTime; d.setSeconds(d.getSeconds() + e); return d }, _addMilliseconds: function (e) { var d = this.dateTime; d.setMilliseconds(d.getMilliseconds() + e); return d }, _isLeapYear: function (d) { if ((d < 1) || (d > 9999)) { throw "invalid year" } if ((d % 4) != 0) { return false } if ((d % 100) == 0) { return ((d % 400) == 0) } return true }, _dateToTicks: function (f, h, e) { if (((f >= 1) && (f <= 9999)) && ((h >= 1) && (h <= 12))) { var d = this._isLeapYear(f) ? this.daysToMonth366 : this.daysToMonth365; if ((e >= 1) && (e <= (d[h] - d[h - 1]))) { var f = f - 1; var g = ((((((f * 365) + (f / 4)) - (f / 100)) + (f / 400)) + d[h - 1]) + e) - 1; return (g * 864000000000) } } }, _daysInMonth: function (e, f) { if ((f < 1) || (f > 12)) { throw ("Invalid month.") } var d = this._isLeapYear(e) ? this.daysToMonth366 : this.daysToMonth365; return (d[f] - d[f - 1]) }, _timeToTicks: function (d, g, e) { var f = ((d * 3600) + (g * 60)) + e; return (f * 10000000) }, _equalDate: function (d) { if (this.year == d.getFullYear() && this.day == d.getDate() && this.month == d.getMonth() + 1) { return true } return false } }; return b } })(jqxBaseFramework);

/*
jqxcalendar
*/

(function (a) { a.jqx.jqxWidget("jqxCalendar", "", {}); a.extend(a.jqx._jqxCalendar.prototype, { defineInstance: function () { var b = { disabled: false, restrictedDates: new Array(), multipleMonthRows: 1, multipleMonthColumns: 1, minDate: a.jqx._jqxDateTimeInput.getDateTime(new Date()), maxDate: a.jqx._jqxDateTimeInput.getDateTime(new Date()), min: new Date(1900, 0, 1), max: new Date(2100, 0, 1), navigationDelay: 400, stepMonths: 1, width: null, height: null, value: a.jqx._jqxDateTimeInput.getDateTime(new Date()), firstDayOfWeek: 0, showWeekNumbers: false, showDayNames: true, enableWeekend: false, enableOtherMonthDays: true, showOtherMonthDays: true, rowHeaderWidth: 25, columnHeaderHeight: 20, titleHeight: 25, dayNameFormat: "firstTwoLetters", monthNameFormat: "default", titleFormat: ["MMMM yyyy", "yyyy", "yyyy", "yyyy"], enableViews: true, readOnly: false, culture: "default", enableFastNavigation: true, enableHover: true, enableAutoNavigation: true, enableTooltips: false, backText: "Back", forwardText: "Forward", specialDates: new Array(), keyboardNavigation: true, selectionMode: "default", selectableDays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], todayString: "Today", clearString: "Clear", showFooter: false, selection: { from: null, to: null }, canRender: true, _checkForHiddenParent: true, height: null, rtl: false, view: "month", views: ["month", "year", "decade"], changing: null, change: null, localization: { backString: "Back", forwardString: "Forward", todayString: "Today", clearString: "Clear", calendar: { name: "Gregorian_USEnglish", "/": "/", ":": ":", firstDay: 0, days: { names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"] }, months: { names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""] }, AM: ["AM", "am", "AM"], PM: ["PM", "pm", "PM"], eras: [{ name: "A.D.", start: null, offset: 0 }], twoDigitYearMax: 2029, patterns: { d: "M/d/yyyy", D: "dddd, MMMM dd, yyyy", t: "h:mm tt", T: "h:mm:ss tt", f: "dddd, MMMM dd, yyyy h:mm tt", F: "dddd, MMMM dd, yyyy h:mm:ss tt", M: "MMMM dd", Y: "yyyy MMMM", S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss", ISO: "yyyy-MM-dd hh:mm:ss" } } }, events: ["backButtonClick", "nextButtonClick", "valuechanged", "cellMouseDown", "cellMouseUp", "cellSelected", "cellUnselected", "change", "viewChange"] }; a.extend(true, this, b); this.minDate._setYear(1900); this.minDate._setMonth(1); this.minDate._setDay(1); this.minDate._setHours(0); this.minDate._setMinutes(0); this.minDate._setSeconds(0); this.minDate._setMilliseconds(0); this.maxDate._setYear(2100); this.maxDate._setMonth(1); this.maxDate._setDay(1); this.maxDate._setHours(0); this.maxDate._setMinutes(0); this.maxDate._setSeconds(0); this.maxDate._setMilliseconds(0); this.value._setHours(0); this.value._setMinutes(0); this.value._setSeconds(0); this.value._setMilliseconds(0); return b }, createInstance: function (e) { this.setCalendarSize(); if (this.element.id === "") { this.element.id = a.jqx.utilities.createId() } if (a.type(this.value) == "date") { this.value = a.jqx._jqxDateTimeInput.getDateTime(this.value) } this.element.innerHTML = ""; this.host.attr("data-role", "calendar"); var i = this.element.id; var h = this; this.propertyChangeMap.width = function (j, l, k, m) { h.setCalendarSize() }; this.propertyChangeMap.height = function (j, l, k, m) { h.setCalendarSize() }; if (a.global) { a.global.preferCulture(this.culture) } if (this.culture != "default") { if (a.global) { a.global.preferCulture(this.culture); this.localization.calendar = a.global.culture.calendar } else { if (Globalize) { var c = Globalize.culture(this.culture); this.localization.calendar = c.calendar } } this.firstDayOfWeek = this.localization.calendar.firstDay } if (this.localization.backString != "Back") { this.backText = this.localization.backString } if (this.localization.forwardString != "Forward") { this.forwardText = this.localization.forwardString } if (this.localization.todayString != "Today" && this.localization.todayString) { this.todayString = this.localization.todayString } if (this.localization.clearString != "Clear" && this.localization.clearString) { this.clearString = this.localization.clearString } if (this.localization.calendar && this.localization.calendar.firstDay != undefined && this.culture != "default") { this.firstDayOfWeek = this.localization.calendar.firstDay } this.setMaxDate(this.max, false); this.setMinDate(this.min, false); if (!this.host.attr("tabIndex")) { this.host.attr("tabIndex", 0) } this.host.css("outline", "none"); this.host.addClass(this.toThemeProperty("jqx-calendar")); this.host.addClass(this.toThemeProperty("jqx-widget")); this.host.addClass(this.toThemeProperty("jqx-widget-content")); this.host.addClass(this.toThemeProperty("jqx-rc-all")); this._addInput(); if (this.views.indexOf("month") == -1) { this.view = "year" } if (this.views.indexOf("year") == -1 && this.views.indexOf("month") == -1) { this.view = "decade" } this.addHandler(this.host, "keydown", function (k) { var j = true; if (h.keyboardNavigation) { if (h._handleKey != undefined) { j = h._handleKey(k); if (!j) { if (k.stopPropagation) { k.stopPropagation() } if (k.preventDefault) { k.preventDefault() } } } } return j }); var d = false; var g = this; var b = false; if (h.width != null && h.width.toString().indexOf("%") != -1) { b = true } if (h.height != null && h.height.toString().indexOf("%") != -1) { b = true } a.jqx.utilities.resize(this.host, function () { var j = g.host.find("#View" + h.element.id); if (!d) { d = true; g.render() } else { g.refreshTitle(j) } if (b) { if (h.refreshTimer) { clearTimeout(h.refreshTimer) } h.refreshTimer = setTimeout(function () { h.refreshControl() }, 1) } }, false, this._checkForHiddenParent); var f = "View"; this.propertyChangeMap.disabled = function (j, l, k, m) { if (m) { j.host.addClass(h.toThemeProperty("jqx-fill-state-disabled")) } else { j.host.removeClass(h.toThemeProperty("jqx-fill-state-disabled")) } h.refreshControl() } }, _addInput: function () { var b = this.host.attr("name"); this.input = a("<input type='hidden'/>"); this.host.append(this.input); if (b) { this.input.attr("name", b) } this.input.val(this.getDate().toString()) }, setCalendarSize: function () { if (this.width != null && this.width.toString().indexOf("px") != -1) { this.host.width(this.width) } else { if (this.width != undefined && !isNaN(this.width)) { this.host.width(this.width) } } if (this.width != null && this.width.toString().indexOf("%") != -1) { this.host.css("width", this.width) } if (this.height != null && this.height.toString().indexOf("px") != -1) { this.host.height(this.height) } else { if (this.height != undefined && !isNaN(this.height)) { this.host.height(this.height) } } if (this.height != null && this.height.toString().indexOf("%") != -1) { this.host.css("height", this.height) } }, _getYearAndMonthPart: function (c) { if (!c) { return new Date(1900, 0, 1) } var b = new Date(c.getFullYear(), c.getMonth(), 1); return b }, _handleKey: function (p) { if (this.readOnly) { return true } var A = p.keyCode; var y = this; var b = this._getSelectedDate(); if (b == undefined) { if (this.view == "month" && (A == 37 || A == 38 || A == 39 || A == 40)) { this.selectedDate = new Date(this.value.year, this.value.month - 1, 1); this._selectDate(this.selectedDate, "key"); b = this.selectedDate } else { return true } } if (p.altKey) { return true } if (this._animating) { return false } if (this.view != "month" && A == 13) { var d = this._getSelectedCell(); this._setDateAndSwitchViews(d, p, "keyboard") } if (this.view == "year") { var w = b.getMonth(); var j = this._getYearAndMonthPart(this.getMinDate()); var m = this._getYearAndMonthPart(this.getMaxDate()); switch (A) { case 37: if (w == 0) { var h = new Date(b.getFullYear() - 1, 11, 1); if (h >= j) { this.selectedDate = h; this.navigateBackward() } else { if (this.selectedDate != j) { this.selectedDate = j; this.navigateBackward() } } } else { var h = new Date(b.getFullYear(), w - 1, 1); if (h >= j) { this._selectDate(h, "key") } } return false; case 38: var h = new Date(b.getFullYear(), w - 4, 1); if (h < j) { h = j } if (w - 4 < 0) { this.selectedDate = h; this.navigateBackward() } else { this._selectDate(h, "key") } return false; case 40: var h = new Date(b.getFullYear(), w + 4, 1); if (h > m) { h = m } if (w + 4 > 11) { this.selectedDate = h; this.navigateForward() } else { this._selectDate(h, "key") } return false; case 39: if (w == 11) { var h = new Date(b.getFullYear() + 1, 0, 1); if (h <= m) { this.selectedDate = h; this.navigateForward() } else { if (this.selectedDate != m) { this.selectedDate = m; this.navigateForward() } } } else { var h = new Date(b.getFullYear(), w + 1, 1); if (h <= m) { this._selectDate(h, "key") } } return false } return true } if (this.view == "decade") { var o = this._renderStartDate.getFullYear(); var k = this._renderEndDate.getFullYear(); var n = b.getFullYear(); var v = this.getMinDate().getFullYear(); var c = this.getMaxDate().getFullYear(); switch (A) { case 37: if (n - 1 >= v) { if (n <= o) { this.selectedDate = new Date(n - 1, b.getMonth(), 1); this.navigateBackward() } else { this._selectDate(new Date(n - 1, b.getMonth(), 1), "key") } } return false; case 38: var x = n - 4; if (n - 4 < v) { x = v } if (x < o) { this.selectedDate = new Date(x, b.getMonth(), 1); this.navigateBackward() } else { this._selectDate(new Date(x, b.getMonth(), 1), "key") } return false; case 40: var x = n + 4; if (x > c) { x = c } if (x > k) { this.selectedDate = new Date(x, b.getMonth(), 1); this.navigateForward() } else { this._selectDate(new Date(x, b.getMonth(), 1), "key") } return false; case 39: if (n + 1 <= c) { if (n == k) { this.selectedDate = new Date(n + 1, b.getMonth(), 1); this.navigateForward() } else { this._selectDate(new Date(n + 1, b.getMonth(), 1), "key") } } return false } return true } var u = new a.jqx._jqxDateTimeInput.getDateTime(b); var f = this.getViewStart(); var e = this.getViewEnd(); var t = u; var s = a.data(this.element, "View" + this.element.id); if (s == undefined || s == null) { return true } if (A == 36) { u._setDay(1); if (this._isDisabled(u.dateTime)) { return false } this._selectDate(u.dateTime, "key"); return false } if (A == 35) { var r = this.value._daysInMonth(this.value.year, this.value.month); u._setDay(r); if (this._isDisabled(u.dateTime)) { return false } this._selectDate(u.dateTime, "key"); return false } var g = 1; if (p.ctrlKey) { g = 12 } if (A == 34) { var z = this.navigateForward(g); if (z) { u._addMonths(g); if (this._isDisabled(u.dateTime)) { return false } this._selectDate(u.dateTime, "key") } return false } if (A == 33) { var z = this.navigateBackward(g); if (z) { u._addMonths(-g); if (this._isDisabled(u.dateTime)) { return false } this._selectDate(u.dateTime, "key") } return false } if (A == 38) { u._addDays(-7); if (u.dateTime < this.getMinDate()) { return false } if (u.dateTime < f) { var z = this.navigateBackward(); if (!z) { return false } } if (this._isDisabled(u.dateTime)) { return false } this._selectDate(u.dateTime, "key"); for (var q = 0; q < s.cells.length; q++) { var d = s.cells[q]; var l = d.getDate(); if (d.isOtherMonth && d.isSelected && l <= u.dateTime) { this.value.day = l.getDate(); this.navigateBackward(); this._selectDate(u.dateTime, "key"); break } } return false } else { if (A == 40) { u._addDays(7); if (u.dateTime > this.getMaxDate()) { return false } if (u.dateTime > e) { var z = this.navigateForward(); if (!z) { return false } } if (this._isDisabled(u.dateTime)) { return false } this._selectDate(u.dateTime, "key"); for (var q = 0; q < s.cells.length; q++) { var d = s.cells[q]; var l = d.getDate(); if (d.isOtherMonth && d.isSelected && l >= u.dateTime) { this.value.day = l.getDate(); this.navigateForward(); this._selectDate(u.dateTime, "key"); break } } return false } } if (A == 37) { u._addDays(-1); if (u.dateTime < this.getMinDate()) { return false } if (u.dateTime < f) { var z = this.navigateBackward(); if (!z) { return false } } if (this._isDisabled(u.dateTime)) { return false } this._selectDate(u.dateTime, "key"); for (var q = 0; q < s.cells.length; q++) { var d = s.cells[q]; var l = d.getDate(); if (d.isOtherMonth && d.isSelected && l <= u.dateTime) { if (u.dateTime < this.getMinDate() || u.dateTime > this.getMaxDate()) { return false } if (this._isDisabled(u.dateTime)) { return false } this.navigateBackward(); this._selectDate(u.dateTime, "key"); break } } return false } else { if (A == 39) { u._addDays(1); if (u.dateTime > this.getMaxDate()) { return false } if (u.dateTime > e) { var z = this.navigateForward(); if (!z) { return false } } if (this._isDisabled(u.dateTime)) { return false } this._selectDate(u.dateTime, "key"); for (var q = 0; q < s.cells.length; q++) { var d = s.cells[q]; var l = d.getDate(); if (d.isOtherMonth && d.isSelected && l >= u.dateTime) { if (u.dateTime < this.getMinDate() || u.dateTime > this.getMaxDate()) { return false } this.navigateForward(); this._selectDate(u.dateTime, "key"); break } } return false } } return true }, render: function () { if (!this.canRender) { return } this.host.children().remove(); var c = this._renderSingleCalendar("View" + this.element.id); var b = this; this.host.append(c) }, addSpecialDate: function (b, c, d) { if (this.multipleMonthRows == 1 && this.multipleMonthColumns == 1) { var e = this.specialDates.length; this.specialDates[e] = { Date: b, Class: c, Tooltip: d }; this.refreshControl() } }, refresh: function (b) { this.render() }, invalidate: function () { this.refreshControl() }, refreshControl: function () { if (this.multipleMonthRows == 1 && this.multipleMonthColumns == 1) { this.refreshSingleCalendar("View" + this.element.id, null) } }, getViewStart: function () { var c = this.getVisibleDate(); var b = this.getFirstDayOfWeek(c); return b.dateTime }, getViewEnd: function () { var c = this.getViewStart(); var b = new a.jqx._jqxDateTimeInput.getDateTime(c); b._addDays(41); return b.dateTime }, refreshSingleCalendar: function (f, e) { if (!this.canRender) { return } var h = this.host.find("#" + f); var d = this.getVisibleDate(); var b = this.getFirstDayOfWeek(d); this.refreshCalendarCells(h, b, f); this.refreshTitle(h); this.refreshRowHeader(h, f); if (this.selectedDate != undefined) { this._selectDate(this.selectedDate) } var g = this.host.height() - this.titleHeight - this.columnHeaderHeight; if (!this.showDayNames) { g = this.host.height() - this.titleHeight } if (this.showFooter) { g -= 20 } var c = h.find("#cellsTable" + f); var i = h.find("#calendarRowHeader" + f); c.height(g); i.height(g) }, refreshRowHeader: function (s, m) { if (!this.showWeekNumbers) { return } var c = this.getVisibleDate(); var h = this.getFirstDayOfWeek(c); var n = h.dayOfWeek; var t = this.getWeekOfYear(h); var f = new a.jqx._jqxDateTimeInput.getDateTime(new Date(h.dateTime)); f._addDays(5); f.dayOfWeek = f.dateTime.getDay(); var k = this.getWeekOfYear(f); var e = this.rowHeader.find("table"); e.width(this.rowHeaderWidth); var g = h; var q = new Array(); for (var p = 0; p < 6; p++) { var o = t.toString(); var b = new a.jqx._jqxCalendar.cell(g.dateTime); var l = p + 1 + this.element.id; var j = a(e[0].rows[p].cells[0]); b.element = j; b.row = p; b.column = 0; var d = j.find("#headerCellContent" + l); d.addClass(this.toThemeProperty("jqx-calendar-row-cell")); d[0].innerHTML = t; q[p] = b; g = new a.jqx._jqxDateTimeInput.getDateTime(new Date(g._addWeeks(1))); t = this.getWeekOfYear(g) } var r = a.data(this.element, s[0].id); r.rowCells = q; this._refreshOtherMonthRows(r, m) }, _refreshOtherMonthRows: function (f, e) { if (this.showOtherMonthDays) { return } this._displayLastRow(true, e); this._displayFirstRow(true, e); var d = false; var g = false; for (var c = 0; c < f.cells.length; c++) { var b = f.cells[c]; if (b.isVisible && c < 7) { d = true } else { if (b.isVisible && c >= f.cells.length - 7) { g = true } } } if (!d) { this._displayFirstRow(false, e) } if (!g) { this._displayLastRow(false, e) } }, _displayLastRow: function (b, c) { var g = this.host.find("#" + c); var f = g.find("#calendarRowHeader" + g[0].id).find("table"); var d = null; if (this.showWeekNumbers) { if (f[0].cells) { var d = a(f[0].rows[5]) } } var e = a(g.find("#cellTable" + g[0].id)[0].rows[5]); if (b) { if (this.showWeekNumbers && d) { d.css("display", "table-row") } e.css("display", "table-row") } else { if (this.showWeekNumbers && d) { d.css("display", "none") } e.css("display", "none") } }, _displayFirstRow: function (b, c) { var e = this.host.find("#" + c); var d = e.find("#calendarRowHeader" + e[0].id).find("table"); var f = null; if (this.showWeekNumbers) { if (d[0].cells) { var f = a(d[0].rows[0]) } } var g = a(e.find("#cellTable" + e[0].id)[0].rows[0]); if (b) { if (this.showWeekNumbers && f) { f.css("display", "table-row") } g.css("display", "table-row") } else { if (this.showWeekNumbers && f) { f.css("display", "none") } g.css("display", "none") } }, _renderSingleCalendar: function (p, k) { if (!this.canRender) { return } var m = this.host.find("#" + p.toString()); if (m != null) { m.remove() } var s = a("<div id='" + p.toString() + "'></div>"); var b = this.getVisibleDate(); var l = this.getFirstDayOfWeek(b); var e = new a.jqx._jqxDateTimeInput.getDateTime(l.dateTime); e._addMonths(1); var r = a.jqx._jqxCalendar.monthView(l, e, null, null, null, s); if (k == undefined || k == null) { this.host.append(s); if (this.height != undefined && !isNaN(this.height)) { s.height(this.height) } else { if (this.height != null && this.height.toString().indexOf("px") != -1) { s.height(this.height) } } if (this.width != undefined && !isNaN(this.width)) { s.width(this.width) } else { if (this.width != null && this.width.toString().indexOf("px") != -1) { s.width(this.width) } } if (this.width != null && this.width.toString().indexOf("%") != -1) { s.width("100%") } if (this.height != null && this.height.toString().indexOf("%") != -1) { s.height("100%") } } else { k.append(s) } a.data(this.element, p, r); var q = this.host.height() - this.titleHeight - this.columnHeaderHeight; if (!this.showDayNames) { q = this.host.height() - this.titleHeight } if (this.showFooter) { q -= 20 } if (this.rowHeaderWidth < 0) { this.rowHeaderWidth = 0 } if (this.columnHeaderHeight < 0) { this.columnHeaderHeight = 0 } if (this.titleHeight < 0) { this.titleHeight = 0 } var g = this.rowHeaderWidth; var j = this.columnHeaderHeight; if (!this.showWeekNumbers) { g = 0 } if (!this.showDayNames) { j = 0 } var u = "<div style='height:" + this.titleHeight + "px;'><table role='grid' style='margin: 0px; width: 100%; height: 100%; border-spacing: 0px;' cellspacing='0' cellpadding='0'><tr role='row' id='calendarTitle' width='100%'><td role='gridcell' NOWRAP id='leftNavigationArrow'></td><td aria-live='assertive' aria-atomic='true' role='gridcell' align='center' NOWRAP id='calendarTitleHeader'></td><td role='gridcell' NOWRAP id='rightNavigationArrow'></td></tr></table></div>"; var c = "<table role='grid' class='" + this.toThemeProperty("jqx-calendar-month") + "' style='margin: 0px; border-spacing: 0px;' cellspacing='0' cellpadding='0'><tr role='row' id='calendarHeader' height='" + j + "'><td role='gridcell' id='selectCell' width='" + g + "'></td><td role='gridcell' colspan='2' style='border: none; padding-left: 2px; padding-right: 2px' id='calendarColumnHeader'></td></tr><tr role='row' id='calendarContent'><td role='gridcell' id='calendarRowHeader' valign='top' height='" + q + "' width='" + g + "'></td><td role='gridcell' valign='top' colspan='2' style='padding-left: 2px; padding-right: 2px' id='cellsTable' height='" + q + "'></td></tr></table>"; var o = "<div id='footer' style='margin: 0px; display: none; height:" + d + "px;'><table style='width: 100%; height: 100%; border-spacing: 0px;' cellspacing='0' cellpadding='0'><tr id='calendarFooter'><td align='right' id='todayButton'></td><td align='left' colspan='2' id=doneButton></td></tr></table></div>"; s[0].innerHTML = u + c + o; this.header = s.find("#calendarHeader"); this.header[0].id = "calendarHeader" + p; this.header.addClass(this.toThemeProperty("calendar-header")); this.columnHeader = s.find("#calendarColumnHeader"); this.columnHeader[0].id = "calendarColumnHeader" + p; this.table = s.find("#cellsTable"); this.table[0].id = "cellsTable" + p; this.rowHeader = s.find("#calendarRowHeader"); this.rowHeader[0].id = "calendarRowHeader" + p; this.selectCell = s.find("#selectCell"); this.selectCell[0].id = "selectCell" + p; this.title = s.find("#calendarTitle"); this.title[0].id = "calendarTitle" + p; this.leftButton = s.find("#leftNavigationArrow"); this.leftButton[0].id = "leftNavigationArrow" + p; this.titleHeader = s.find("#calendarTitleHeader"); this.titleHeader[0].id = "calendarTitleHeader" + p; this.rightButton = s.find("#rightNavigationArrow"); this.rightButton[0].id = "rightNavigationArrow" + p; this.footer = s.find("#calendarFooter"); this._footer = s.find("#footer"); this._footer[0].id = "footer" + p; this.footer[0].id = "calendarFooter" + p; this.todayButton = s.find("#todayButton"); this.todayButton[0].id = "todayButton" + p; this.doneButton = s.find("#doneButton"); this.doneButton[0].id = "doneButton" + p; this.title.addClass(this.toThemeProperty("jqx-calendar-title-container")); var d = 20; if (this.showFooter) { this._footer.css("display", "block") } s.find("tr").addClass(this.toThemeProperty("jqx-reset")); s.addClass(this.toThemeProperty("jqx-widget-content")); s.addClass(this.toThemeProperty("jqx-calendar-month-container")); this.month = s; this.selectCell.addClass(this.toThemeProperty("jqx-reset")); this.selectCell.addClass(this.toThemeProperty("jqx-calendar-top-left-header")); if (this.showWeekNumbers) { this._renderRowHeader(s) } else { this.table[0].colSpan = 3; this.columnHeader[0].colSpan = 3; this.rowHeader.css("display", "none"); this.selectCell.css("display", "none") } if (this.showFooter) { this.footer.height(20); var i = a("<a href='javascript:;'>" + this.todayString + "</a>"); i.appendTo(this.todayButton); var h = a("<a href='javascript:;'>" + this.clearString + "</a>"); h.appendTo(this.doneButton); h.addClass(this.toThemeProperty("jqx-calendar-footer")); i.addClass(this.toThemeProperty("jqx-calendar-footer")); var n = this; var f = "mousedown"; if (a.jqx.mobile.isTouchDevice()) { f = a.jqx.mobile.getTouchEventName("touchstart") } this.addHandler(i, f, function () { if (n.today) { n.today() } else { n.setDate(new Date(), "mouse") } return false }); this.addHandler(h, f, function () { if (n.clear) { n.clear() } else { n.setDate(null, "mouse") } return false }) } if (this.view != "month") { this.header.hide() } if (this.showDayNames && this.view == "month") { this.renderColumnHeader(s) } this.oldView = this.view; this.renderCalendarCells(s, l, p); if (k == undefined || k == null) { this.renderTitle(s) } this._refreshOtherMonthRows(r, p); s.find("tbody").css({ border: "none", background: "transparent" }); if (this.selectedDate != undefined) { this._selectDate(this.selectedDate) } var t = this; this.addHandler(this.host, "focus", function () { t.focus() }); return s }, _getTitleFormat: function () { switch (this.view) { case "month": return this.titleFormat[0]; case "year": return this.titleFormat[1]; case "decade": return this.titleFormat[2]; case "centuries": return this.titleFormat[3] } }, renderTitle: function (t) { var k = a("<div role='button' style='float: left;'></div>"); var l = a("<div role='button' style='float: right;'></div>"); var o = this.title; o.addClass(this.toThemeProperty("jqx-reset")); o.addClass(this.toThemeProperty("jqx-widget-header")); o.addClass(this.toThemeProperty("jqx-calendar-title-header")); var e = o.find("td"); if (a.jqx.browser.msie && a.jqx.browser.version < 8) { if (e.css("background-color") != "transparent") { var g = o.css("background-color"); e.css("background-color", g) } if (e.css("background-image") != "transparent") { var d = o.css("background-image"); var p = o.css("background-repeat"); var c = o.css("background-position"); e.css("background-image", d); e.css("background-repeat", p); e.css("background-position", "left center scroll") } } else { e.css("background-color", "transparent") } if (this.disabled) { o.addClass(this.toThemeProperty("jqx-calendar-title-header-disabled")) } k.addClass(this.toThemeProperty("jqx-calendar-title-navigation")); k.addClass(this.toThemeProperty("jqx-icon-arrow-left")); k.appendTo(this.leftButton); var m = this.leftButton; l.addClass(this.toThemeProperty("jqx-calendar-title-navigation")); l.addClass(this.toThemeProperty("jqx-icon-arrow-right")); l.appendTo(this.rightButton); var b = this.rightButton; if (this.enableTooltips) { if (a(m).jqxTooltip) { a(m).jqxTooltip({ name: this.element.id, position: "mouse", theme: this.theme, content: this.backText }); a(b).jqxTooltip({ name: this.element.id, position: "mouse", theme: this.theme, content: this.forwardText }) } } var n = this.titleHeader; var v = this._format(this.value.dateTime, this._getTitleFormat(), this.culture); if (this.view == "decade") { var q = this._format(this._renderStartDate, this._getTitleFormat(), this.culture); var j = this._format(this._renderEndDate, this._getTitleFormat(), this.culture); v = q + " - " + j } else { if (this.view == "centuries") { var q = this._format(this._renderCenturyStartDate, this._getTitleFormat(), this.culture); var j = this._format(this._renderCenturyEndDate, this._getTitleFormat(), this.culture); v = q + " - " + j } } var f = a("<div style='background: transparent; margin: 0; padding: 0; border: none;'>" + v + "</div>"); n.append(f); f.addClass(this.toThemeProperty("jqx-calendar-title-content")); var s = parseInt(k.width()); var i = t.width() - 2 * s; var r = n.find(".jqx-calendar-title-content").width(i); a.data(k, "navigateLeft", this); a.data(l, "navigateRight", this); var h = a.jqx.mobile.isTouchDevice(); if (!this.disabled) { var u = this; this.addHandler(n, "mousedown", function (A) { if (u.enableViews) { if (!u._viewAnimating && !u._animating) { var x = u.view; u.oldView = x; switch (u.view) { case "month": u.view = "year"; break; case "year": u.view = "decade"; break } if (u.views.indexOf("year") == -1 && u.view == "year") { u.view = "decade" } if (u.views.indexOf("decade") == -1 && u.view == "decade") { u.view = x } if (x != u.view) { var z = "View" + u.element.id; var B = u.host.find("#" + z); var y = u.getVisibleDate(); var w = u.getFirstDayOfWeek(y); u.renderCalendarCells(B, w, z, true); u.refreshTitle(B); u._raiseEvent("8") } } return false } }); this.addHandler(k, "mousedown", function (x) { if (!u._animating) { a.data(k, "navigateLeftRepeat", true); var w = a.data(k, "navigateLeft"); if (w.enableFastNavigation && !h) { w.startRepeat(w, k, true, u.navigationDelay + 200) } w.navigateBackward(1, "arrow"); x.stopPropagation(); x.preventDefault(); return w._raiseEvent(0, x) } else { return false } }); this.addHandler(k, "mouseup", function (w) { a.data(k, "navigateLeftRepeat", false) }); this.addHandler(k, "mouseleave", function (w) { a.data(k, "navigateLeftRepeat", false) }); this.addHandler(l, "mousedown", function (x) { if (!u._animating) { a.data(l, "navigateRightRepeat", true); var w = a.data(l, "navigateRight"); if (w.enableFastNavigation && !h) { w.startRepeat(w, l, false, u.navigationDelay + 200) } w.navigateForward(1, "arrow"); x.stopPropagation(); x.preventDefault(); return w._raiseEvent(1, x) } else { return false } }); this.addHandler(l, "mouseup", function (w) { a.data(l, "navigateRightRepeat", false) }); this.addHandler(l, "mouseleave", function (w) { a.data(l, "navigateRightRepeat", false) }) } }, refreshTitle: function (f) { var g = this._format(this.value.dateTime, this._getTitleFormat(), this.culture); if (this.view == "decade") { var d = this._format(this._renderStartDate, this._getTitleFormat(), this.culture); var b = this._format(this._renderEndDate, this._getTitleFormat(), this.culture); g = d + " - " + b } else { if (this.view == "centuries") { var d = this._format(this._renderCenturyStartDate, this._getTitleFormat(), this.culture); var b = this._format(this._renderCenturyEndDate, this._getTitleFormat(), this.culture); g = d + " - " + b } } var e = this.titleHeader; if (this.titleHeader) { var c = e.find(".jqx-calendar-title-content"); var h = a("<div style='background: transparent; margin: 0; padding: 0; border: none;'>" + g + "</div>"); e.append(h); h.addClass(this.toThemeProperty("jqx-calendar-title-content")); if (c != null) { c.remove() } } }, startRepeat: function (d, b, f, e) { var c = window.setTimeout(function () { var g = a.data(b, "navigateLeftRepeat"); if (!f) { g = a.data(b, "navigateRightRepeat") } if (g) { if (e < 25) { e = 25 } if (f) { d.navigateBackward(1, "arrow"); d.startRepeat(d, b, true, e) } else { d.navigateForward(1, "arrow"); c = d.startRepeat(d, b, false, e) } } else { window.clearTimeout(c); return } }, e) }, navigateForward: function (h, g) { if (h == undefined || h == null) { h = this.stepMonths } var f = this.value.year; if (this.view == "decade") { f = this._renderStartDate.getFullYear() + 12; if (this._renderEndDate.getFullYear() >= this.getMaxDate().getFullYear()) { return } } else { if (this.view == "year") { f = this.value.year + 1 } else { if (this.view == "centuries") { f = this.value.year + 100 } } } if (this.view != "month") { var b = this.getMaxDate().getFullYear(); if (b < f || f > b) { f = b } if (this.value.year == f) { if (this.view === "decade") { if (this.value.year > this._renderEndDate.getFullYear()) { this.value.year = f; this.value.month = 1; this.value.day = 1 } else { return } } else { return } } this.value.year = f; this.value.month = 1; this.value.day = 1 } var c = this.value.day; var i = this.value.month; if (i + h <= 12) { var e = this.value._daysInMonth(this.value.year, this.value.month + h); if (c > e) { c = e } } if (this.view == "month") { var d = new Date(this.value.year, this.value.month - 1 + h, c); if (g == "arrow" && this.selectableDays.length == 7 && this.selectionMode != "range") { this.selectedDate = new Date(this.value.year, this.value.month - 1 + h, 1) } } else { var d = new Date(this.value.year, this.value.month - 1, c) } return this.navigateTo(d) }, navigateBackward: function (g, f) { if (g == undefined || g == null) { g = this.stepMonths } var e = this.value.year; if (this.view == "decade") { e = this._renderStartDate.getFullYear() - 12 } else { if (this.view == "year") { e = this.value.year - 1 } else { if (this.view == "centuries") { e = this.value.year - 100 } } } if (this.view != "month") { var i = this.getMinDate().getFullYear(); if (e < i) { e = i } if (this.view == "decade") { if (this._renderStartDate) { if (this._renderStartDate.getFullYear() == e) { return } } } this.value.year = e; this.value.month = 1; this.value.day = 1 } var b = this.value.day; var h = this.value.month; if (h - g >= 1) { var d = this.value._daysInMonth(this.value.year, this.value.month - g); if (b > d) { b = d } } if (this.view == "month") { var c = new Date(this.value.year, this.value.month - 1 - g, b); if (f == "arrow" && this.selectableDays.length == 7 && this.selectionMode != "range") { this.selectedDate = new Date(this.value.year, this.value.month - 1 - g, 1) } } else { var c = new Date(this.value.year, this.value.month - 1, b) } return this.navigateTo(c) }, _isRestrictedRange: function (d, c) { if (d > c) { return true } var b = d; while (b.valueOf() <= c.valueOf()) { if (this._isRestrictedDate(b)) { return true } b.setDate(b.getDate() + 1) } return false }, _hasUnrestrictedRanges: function (d, c) { if (d > c) { return false } var b = d; while (b.valueOf() <= c.valueOf()) { if (!this._isRestrictedDate(b)) { return true } b.setDate(b.getDate() + 1) } return false }, _getNextUnrestrictedDay: function (d, c) { if (d > c) { return null } var b = d; while (b.valueOf() <= c.valueOf()) { if (!this._isRestrictedDate(b)) { return b } b.setDate(b.getDate() + 1) } return null }, _isRestrictedDate: function (d) { var c = this; if (!a.isArray(c.restrictedDates)) { return false } for (var g = 0; g < c.restrictedDates.length; g++) { var b = c.restrictedDates[g]; if (typeof (b) == "object" && b.from != undefined && b.to != undefined) { var f = b.from; var e = b.to; if (d.valueOf() >= f.valueOf() && d.valueOf() <= e.valueOf()) { return true } } else { if (b.getMonth() == d.getMonth() && b.getDate() == d.getDate() && b.getFullYear() == d.getFullYear()) { return true } } } return false }, _isDisabled: function (d) { var e = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]; var b = d.getDay(); var c = e[b]; if (this.selectableDays.indexOf(c) == -1) { return true } if (this._isRestrictedDate(d)) { return true } return false }, refreshCalendarCells: function (x, f, m) { if (this.view == "year" || this.view == "decade" || this.view == "centuries") { this.refreshViews(x, f, m); return } var s = this.table; var q = s.find("#cellTable" + m.toString()); var e = f; var c = new Array(); var n = 0; var u = new a.jqx._jqxDateTimeInput.getDateTime(new Date()); for (var p = 0; p < 6; p++) { for (var o = 0; o < 7; o++) { var d = p + 1; var h = o; if (this.rtl) { h = 6 - h } var t = h + 1; var l = "#cell" + d + t + this.element.id; var w = new Date(e.dateTime.getFullYear(), e.dateTime.getMonth(), e.dateTime.getDate()); var b = new a.jqx._jqxCalendar.cell(w); var g = a(q[0].rows[p].cells[t - 1]); g[0].id = l.substring(1); b.element = g; b.row = p; b.column = o; b.isVisible = true; b.isOtherMonth = false; b.isToday = false; b.isWeekend = false; b.isHighlighted = false; b.isSelected = false; if (e.month != this.value.month) { b.isOtherMonth = true; b.isVisible = this.showOtherMonthDays } if (this._isRestrictedDate(w)) { b.isRestricted = true; b.isDisabled = true } if (!b.isDisabled) { if (w < this.getMinDate() || w > this.getMaxDate() || this._isDisabled(w)) { b.isDisabled = true } } if (e.month == u.month && e.day == u.day && e.year == u.year) { b.isToday = true } if (e.isWeekend()) { b.isWeekend = true } a.data(this.element, "cellContent" + l.substring(1), b); a.data(this.element, l.substring(1), b); c[n] = b; n++; a.jqx.utilities.html(g, e.day); this._applyCellStyle(b, g, g); e = new a.jqx._jqxDateTimeInput.getDateTime(new Date(e._addDays(1))) } } var v = a.data(this.element, x[0].id); if (v != undefined && v != null) { v.cells = c } this.renderedCells = c; this._refreshOtherMonthRows(v, m) }, _getDecadeAndCenturiesData: function () { var k = new Array(); var p = new Array(); var c = this.getMaxDate().getFullYear() - this.getMinDate().getFullYear(); if (c < 12) { c = 12 } var f = this.getMinDate(); var b = this.getMaxDate(); var l = this.value.dateTime.getFullYear(); if (this.view == "decade") { if (l + 12 > b.getFullYear()) { l = b.getFullYear() - 11 } if (l < f.getFullYear()) { l = f.getFullYear() } for (var h = 0; h < c; h++) { var d = new Date(f.getFullYear() + h, 0, 1); if (f.getFullYear() <= l && l <= d.getFullYear()) { var g = new Date(d.getFullYear(), d.getMonth(), 1); for (var e = 0; e < 12; e++) { var o = new Date(g.getFullYear() + e, this.value.dateTime.getMonth(), this.value.dateTime.getDate()); var m = o.getFullYear(); if (f.getFullYear() <= m && m <= b.getFullYear()) { k.push(m); p.push(o); if (e == 0) { this._renderStartDate = o } this._renderEndDate = o } else { k.push(m); p.push(o) } } break } } } else { if (this.view == "centuries") { for (var h = 0; h < c; h += 120) { var d = new Date(f.getFullYear() + h + 120, 0, 1); if (f.getFullYear() <= l && l <= d.getFullYear()) { var g = new Date(d.getFullYear() - 130, d.getMonth(), 1); if (g < f) { g = f } for (var e = 0; e < 12; e++) { var n = new Date(g.getFullYear() + e * 10, g.getMonth(), 1); if (g.getFullYear() >= f.getFullYear() && n.getFullYear() <= b.getFullYear()) { k.push("<span style='visibility: hidden;'>-</span>" + n.getFullYear() + "-" + (n.getFullYear() + 9)); p.push(n); if (e == 0) { this._renderCenturyStartDate = n } this._renderCenturyEndDate = new Date(n.getFullYear() + 9, 0, 1) } } break } } } } return { years: k, dates: p } }, refreshViews: function (A, m, s) { var B = this; var c = new Array(); var w = A.find("#cellTable" + s.toString()); var D = this._getDecadeAndCenturiesData(); var l = D.years; var C = D.dates; var t = 0; var f = this.getMinDate(); var n = this.getMaxDate(); for (var v = 0; v < 3; v++) { for (var u = 0; u < 4; u++) { var d = v + 1; var q = u; if (this.rtl) { q = 3 - q } var x = q + 1; var z = new Date(this.value.dateTime); z.setDate(1); z.setMonth(v * 4 + q); var b = new a.jqx._jqxCalendar.cell(z); var e = w[0].rows["row" + (1 + v) + this.element.id]; var o = a(e.cells[u]); b.isSelected = false; b.isVisible = true; b.element = o; b.row = v; b.column = u; b.index = c.length; var p = ""; if (this.view == "year") { var h = this.localization.calendar.months.names; var g = h[v * 4 + q]; switch (this.monthNameFormat) { case "default": g = this.localization.calendar.months.namesAbbr[v * 4 + q]; break; case "shortest": g = this.localization.calendar.months.namesShort[v * 4 + q]; break; case "firstTwoLetters": g = g.substring(0, 2); break; case "firstLetter": g = g.substring(0, 1); break } p = g } else { if (this.view == "decade" || this.view == "centuries") { p = l[v * 4 + q]; if (undefined == p) { p = "<span style='cursor: default; visibility: hidden;'>2013</span>" } b.setDate(C[v * 4 + q]) } } var z = b.getDate(); if (this.view == "year") { if (z.getMonth() == this.getDate().getMonth() && z.getFullYear() == this.getDate().getFullYear()) { b.isSelected = true } } else { if (z.getFullYear() == this.getDate().getFullYear()) { b.isSelected = true } } if (this.view == "year") { if (this._getYearAndMonthPart(z) < this._getYearAndMonthPart(f)) { b.isDisabled = true } if (this._getYearAndMonthPart(z) > this._getYearAndMonthPart(n)) { b.isDisabled = true } } else { if (z.getFullYear() < f.getFullYear()) { b.isDisabled = true } if (z.getFullYear() > n.getFullYear()) { b.isDisabled = true } } a.jqx.utilities.html(o, p); c[t] = b; t++ } } var y = a.data(this.element, A[0].id); if (y != undefined && y != null) { y.cells = c } this.renderedCells = c; this._applyCellStyles() }, _createViewClone: function () { var b = this.host.find(".jqx-calendar-month"); var c = b.clone(); c.css("position", "absolute"); c.css("top", b.position().top); return c }, _addCellsTable: function (h, g) { var e = this; var c = this.showFooter ? 20 : 0; if (this.view != "month") { g.height(this.host.height() - this.titleHeight) } else { g.height(this.host.height() - this.titleHeight - this.columnHeaderHeight - c) } this._viewAnimating = true; var b = this.host.find(".jqx-calendar-month-container"); b.css("position", "relative"); var d = this.host.find(".jqx-calendar-month"); var f = this._createViewClone(); b.append(f); if (this.view != "month") { this.header.fadeOut(0); if (this.showWeekNumbers) { this.rowHeader.fadeOut(0) } if (this.showFooter) { this._footer.fadeOut(0) } } else { this.header.fadeIn(this.navigationDelay + 200); if (this.showWeekNumbers) { this.rowHeader.fadeIn(this.navigationDelay + 200) } if (this.showFooter) { this._footer.fadeIn(this.navigationDelay + 200) } } h.children().remove(); h.append(g); this._animateViews(f, g, function () { if (!e.selectedDate && e.selectionMode != "range") { e.selectedDate = e.renderedCells[0].getDate() } try { e.renderedCells[0].element.focus(); setTimeout(function () { e.renderedCells[0].element.focus() }, 10) } catch (i) { } e._viewAnimating = false }); g.addClass(this.toThemeProperty("jqx-calendar-view")) }, _animateViews: function (c, b, e) { var d = this; d._viewAnimating = true; if (d.oldView == d.view) { c.remove(); b.fadeOut(0); b.fadeIn(0); e(); return } c.fadeOut(this.navigationDelay + 100, function () { c.remove() }); b.fadeOut(0); b.fadeIn(this.navigationDelay + 200, function () { e() }) }, focus: function () { try { if (this.renderedCells && this.renderedCells.length > 0) { var d = this; var c = false; if (!d.selectedDate && d.selectionMode != "range") { this.setDate(new Date(), "mouse") } this.element.focus() } } catch (b) { } }, renderViews: function (E, n, v) { var F = this; var e = new Array(); var z = a("<table role='grid' style='border-color: transparent; width: 100%; height: 100%;' cellspacing='2' cellpadding='0' id=cellTable" + v.toString() + "><tr role='row' id='row1" + this.element.id + "'><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td></tr><tr role='row' id='row2" + this.element.id + "'><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td></tr><tr role='row' id='row3" + this.element.id + "'><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td></tr></table>"); var q = this.host.find(".jqx-calendar-month-container"); q.css("position", "relative"); var A = E.find("#cellsTable" + E[0].id); A[0].style.borderColor = "transparent"; var I = this._getDecadeAndCenturiesData(); var m = I.years; var H = I.dates; var w = 0; var g = this.getMinDate(); var o = this.getMaxDate(); var t = new Date(this.value.dateTime); t.setDate(1); for (var y = 0; y < 3; y++) { for (var x = 0; x < 4; x++) { var d = y + 1; var u = x; if (this.rtl) { u = 3 - u } var B = u + 1; var f = z[0].rows["row" + (1 + y) + this.element.id]; var D = new Date(t); D.setMonth(y * 4 + u); var c = new a.jqx._jqxCalendar.cell(D); var p = a(f.cells[x]); c.isVisible = true; c.element = p; c.row = y; c.column = x; c.index = e.length; c.isSelected = false; var s = ""; if (this.view == "year") { if (D.getMonth() == this.getDate().getMonth() && D.getFullYear() == this.getDate().getFullYear()) { c.isSelected = true } var l = this.localization.calendar.months.names; var h = l[y * 4 + u]; switch (this.monthNameFormat) { case "default": h = this.localization.calendar.months.namesAbbr[y * 4 + u]; break; case "shortest": h = this.localization.calendar.months.namesShort[y * 4 + u]; break; case "firstTwoLetters": h = h.substring(0, 2); break; case "firstLetter": h = h.substring(0, 1); break } s = h } else { if (this.view == "decade" || this.view == "centuries") { s = m[y * 4 + u]; c.setDate(H[y * 4 + u]); if (c.getDate().getFullYear() == this.getDate().getFullYear()) { c.isSelected = true } if (undefined == s) { s = "<span style='cursor: default; visibility: hidden;'>2013</span>" } } } var D = c.getDate(); if (this.view == "year") { var b = new Date(D); b.setDate(1); b.setHours(0, 0, 0, 0); b.setMonth(D.getMonth() + 1); b = new Date(b.valueOf() - 1); if (this._getYearAndMonthPart(D) < this._getYearAndMonthPart(g) || this._getYearAndMonthPart(D) > this._getYearAndMonthPart(o) || !this._hasUnrestrictedRanges(D, b)) { c.isDisabled = true } } else { var G = new Date(D); G.setMonth(0); G.setDate(1); G.setHours(0, 0, 0, 0); G.setFullYear(D.getFullYear() + 1); G = new Date(G.valueOf() - 1); if (D.getFullYear() < g.getFullYear() || D.getFullYear() > o.getFullYear() || !this._hasUnrestrictedRanges(D, G)) { c.isDisabled = true } } a.jqx.utilities.html(p, s); e[w] = c; w++ } } a.each(e, function () { var j = this.element; var i = this; if (!F.disabled) { F.addHandler(j, "mousedown", function (k) { F._setDateAndSwitchViews(i, k, "mouse") }); F.addHandler(j, "mouseover", function (r) { var k = F.renderedCells[i.index]; if (F.view != "centuries" && k.element.html().toLowerCase().indexOf("span") != -1) { return } k.isHighlighted = true; F._applyCellStyle(k, k.element, k.element) }); F.addHandler(j, "mouseout", function (r) { var k = F.renderedCells[i.index]; if (F.view != "centuries" && k.element.html().toLowerCase().indexOf("span") != -1) { return } k.isHighlighted = false; F._applyCellStyle(k, k.element, k.element) }) } }); var C = a.data(this.element, E[0].id); if (C != undefined && C != null) { C.cells = e } this.renderedCells = e; this._addCellsTable(A, z); this._applyCellStyles() }, _setDateAndSwitchViews: function (m, d, j) { if (!this._viewAnimating && !this._animating) { var g = this.getDate(); var e = this.renderedCells[m.index].getDate(); var k = this.value.dateTime.getDate(); var l = new Date(e); if (this.views.indexOf("month") != -1) { l.setDate(k) } else { l.setDate(1); e.setDate(1) } if (l.getMonth() == e.getMonth()) { e = l } var i = this.getMinDate(); var c = this.getMaxDate(); if (this.view == "year") { if (this._getYearAndMonthPart(e) < this._getYearAndMonthPart(i)) { return } if (this._getYearAndMonthPart(e) > this._getYearAndMonthPart(c)) { return } } else { if (e.getFullYear() < i.getFullYear()) { return } if (e.getFullYear() > c.getFullYear()) { return } } if (this.selectionMode != "range") { this._selectDate(e, j) } this.oldView = this.view; switch (this.view) { case "year": this.view = "month"; break; case "decade": this.view = "year"; break } if (this.views.indexOf("month") == -1) { this.view = "year" } if (this.views.indexOf("year") == -1) { this.view = "decade" } if (this.view == "year") { if (this._getYearAndMonthPart(e) < this._getYearAndMonthPart(i)) { e = i } if (this._getYearAndMonthPart(e) > this._getYearAndMonthPart(c)) { e = c } } else { if (e.getFullYear() < i.getFullYear()) { e = i } if (e.getFullYear() > c.getFullYear()) { e = c } } if (this.changing && (this.selectedDate && (this.selectedDate.getFullYear() != e.getFullYear() || this.selectedDate.getMonth() != e.getMonth() || this.selectedDate.getDate() != e.getDate()))) { e = this.selectedDate } this.value._setYear(e.getFullYear()); this.value._setDay(e.getDate()); this.value._setMonth(e.getMonth() + 1); this.value._setDay(e.getDate()); var h = this.getVisibleDate(); var b = this.getFirstDayOfWeek(h); var f = "View" + this.element.id; this.renderCalendarCells(this.month, b, f, true); this.refreshTitle(this.month); if (this.showWeekNumbers) { this.refreshRowHeader(this.month, f) } if (this.views.length == 3) { if (this.view == "month") { if (this.selectionMode != "range") { this._selectDate(this.selectedDate, "view") } else { var n = this; a.each(this.renderedCells, function (r) { var o = this; var t = o.getDate(); var p = a(o.element); var q = p; if (p.length == 0) { return false } var s = function (v) { if (v == null) { return new Date() } var u = new Date(); u.setHours(0, 0, 0, 0); u.setFullYear(v.getFullYear(), v.getMonth(), v.getDate()); return u }; if (!o.isOtherMonth && s(t).toString() == s(e).toString()) { n.value._setMonth(e.getMonth() + 1); n.value._setDay(e.getDate()); n.value._setYear(e.getFullYear()) } o.isSelected = false; o.isDisabled = false; if (s(t) < s(n.selection.from) && n._clicks == 1) { o.isDisabled = true } if (n.getMaxDate() < t) { o.isDisabled = true } if (n.getMinDate() > t) { o.isDisabled = true } if (n._isDisabled(t)) { o.isDisabled = true } if (!o.isDisabled) { if (s(t) >= s(n.selection.from) && s(t) <= s(n.selection.to)) { o.isSelected = true } } }); this._applyCellStyles() } } } if (this.view != "month") { if (this.oldView == "year" || (this.views.indexOf("year") == -1 && this.view == "decade")) { if (j != "keyboard") { this._raiseEvent("3") } this._raiseEvent("5", { selectionType: "mouse" }) } } this._raiseEvent("8") } }, renderCalendarCells: function (D, m, s, q) { if (this.view == "year" || this.view == "decade" || this.view == "centuries") { this.renderViews(D, m, s); return } var x = a("<table role='grid' style='width: 100%; height: 100%; border-color: transparent;' cellspacing='2' cellpadding='1' id=cellTable" + s.toString() + "><tr role='row'><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td></tr><tr role='row'><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td></tr><tr role='row'><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td></tr><tr role='row'><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td></tr><tr role='row'><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td></tr><tr role='row'><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td></tr></table>"); var y = this.table; y[0].style.borderColor = "transparent"; if (q == undefined) { var g = y.find("#cellTable" + s.toString()); if (g != null) { g.remove() } y.append(x) } var l = m; var b = this.showDayNames ? 1 : 0; var f = this.showWeekNumbers ? 1 : 0; var d = new Array(); var t = 0; var v = (D.width() - this.rowHeaderWidth - 2) / 7; if (!this.showWeekNumbers) { v = (D.width() - 2) / 7 } v = parseInt(v); var A = new a.jqx._jqxDateTimeInput.getDateTime(new Date()); for (var w = 0; w < 6; w++) { for (var u = 0; u < 7; u++) { var e = w + 1; var o = u; if (this.rtl) { o = 6 - o } var z = o + 1; var p = "#cell" + e + z + this.element.id; var C = new Date(l.dateTime.getFullYear(), l.dateTime.getMonth(), l.dateTime.getDate()); var c = new a.jqx._jqxCalendar.cell(C); var n = a(x[0].rows[w].cells[z - 1]); n[0].id = p.substring(1); c.isVisible = true; c.isDisabled = false; if (l.month != this.value.month) { c.isOtherMonth = true; c.isVisible = this.showOtherMonthDays } if (this._isRestrictedDate(C)) { c.isRestricted = true; c.isDisabled = true } if (!c.isDisabled) { if (C < this.getMinDate() || C > this.getMaxDate() || this._isDisabled(C)) { c.isDisabled = true } } if (l.month == A.month && l.day == A.day && l.year == A.year) { c.isToday = true } if (l.isWeekend()) { c.isWeekend = true } c.element = n; c.row = b; c.column = f; a.jqx.utilities.html(n, l.day); l = new a.jqx._jqxDateTimeInput.getDateTime(new Date(l._addDays(1))); a.data(this.element, "cellContent" + p.substring(1), c); a.data(this.element, "" + p.substring(1), c); var E = this; this.addHandler(n, "mousedown", function (I) { if (!E.readOnly && !E.disabled) { var H = a(I.target); var j = a.data(E.element, H[0].id); var i = E._raiseEvent(3, I); if (j != null && j != undefined) { var r = j.getDate(); if (E.getMinDate() <= r && r <= E.getMaxDate()) { if (!j.isDisabled) { if (j.isOtherMonth && E.enableAutoNavigation) { if (j.row < 2) { E.navigateBackward() } else { E.navigateForward() } E._selectDate(j.getDate(), "mouse", I.shiftKey) } else { var F = new Date(E.getDate()); E._selectDate(j.getDate(), "mouse", I.shiftKey); E.value._setYear(r.getFullYear()); E.value._setDay(1); E.value._setMonth(r.getMonth() + 1); E.value._setDay(r.getDate()); var G = E.host.find(".jqx-calendar-month"); G.stop(); G.css("margin-left", "0px"); var k = E.getDate(); E._raiseEvent("2"); if (j.isOtherMonth) { E._raiseEvent("5", { selectionType: "mouse" }) } } } } } return false } }); if (!E.disabled) { var h = function (F, j) { if (!E.readOnly) { var r = a(F.target); var i = a.data(E.element, r[0].id); if (i != null && i != undefined) { var k = i.getDate(); if (E.getMinDate() <= k && k <= E.getMaxDate()) { i.isHighlighted = j; E._applyCellStyle(i, i.element, r) } } } }; this.addHandler(n, "mouseenter", function (i) { h(i, true); return false }); this.addHandler(n, "mouseleave", function (i) { h(i, false); return false }) } f++; d[t] = c; t++ } f = 0; b++ } var B = a.data(this.element, D[0].id); if (B != undefined && B != null) { B.cells = d } this.renderedCells = d; if (q != undefined) { this._addCellsTable(y, x) } this._applyCellStyles(); this._refreshOtherMonthRows(B, s) }, setMaxDate: function (b, c) { if (b != null && typeof (b) == "string") { b = new Date(b); if (b == "Invalid Date") { return } } this.maxDate = a.jqx._jqxDateTimeInput.getDateTime(b); if (c !== false) { this.render() } }, getMaxDate: function () { if (this.maxDate != null && this.maxDate != undefined) { return this.maxDate.dateTime } return null }, setMinDate: function (b, c) { if (b != null && typeof (b) == "string") { b = new Date(b); if (b == "Invalid Date") { return } } this.minDate = a.jqx._jqxDateTimeInput.getDateTime(b); if (c !== false) { this.render() } }, getMinDate: function () { if (this.minDate != null && this.minDate != undefined) { return this.minDate.dateTime } return null }, navigateTo: function (f, h) { if (this.view == "month") { var g = this.getMinDate(); var c = new Date(this.getMaxDate().getFullYear(), this.getMaxDate().getMonth() + 1, this.getMaxDate().getDate()); if ((f < this._getYearAndMonthPart(g)) || (f > this._getYearAndMonthPart(c))) { return false } } else { if (f && (f.getFullYear() < this.getMinDate().getFullYear() || f.getFullYear() > this.getMaxDate().getFullYear())) { return false } } if (f == null) { return false } if (h == undefined) { var i = this; if (this._animating) { return } this._animating = true; var d = this.host.find(".jqx-calendar-month-container"); if (this._viewClone) { this._viewClone.stop(); this._viewClone.remove() } if (this._newViewClone) { this._newViewClone.stop(); this._newViewClone.remove() } var k = this.host.find(".jqx-calendar-month"); k.stop(); k.css("margin-left", "0px"); var b = k.clone(); this._viewClone = b; var j = new Date(this.value.dateTime); this.value._setYear(f.getFullYear()); this.value._setDay(f.getDate()); this.value._setMonth(f.getMonth() + 1); i.refreshControl(); d.css("position", "relative"); b.css("position", "absolute"); b.css("top", k.position().top); d.append(b); if (a.jqx.browser.msie && a.jqx.browser.version < 8) { this.month.css("position", "relative"); this.month.css("overflow", "hidden"); this.table.css("position", "relative"); this.table.css("overflow", "hidden") } var e = -this.host.width(); if (f < j) { if (this.view == "month" && f.getMonth() != j.getMonth()) { e = this.host.width() } else { if (f.getFullYear() != j.getFullYear()) { e = this.host.width() } } } b.animate({ marginLeft: parseInt(e) + "px" }, this.navigationDelay, function () { b.remove() }); var l = k.clone(); this._newViewClone = l; l.css("position", "absolute"); l.css("top", k.position().top); d.append(l); l.css("margin-left", -e); k.css("visibility", "hidden"); l.animate({ marginLeft: "0px" }, this.navigationDelay, function () { l.remove(); k.css("visibility", "inherit"); i._animating = false }) } else { this.value._setYear(f.getFullYear()); this.value._setDay(f.getDate()); this.value._setMonth(f.getMonth() + 1); var k = this.host.find(".jqx-calendar-month"); k.stop(); k.css("margin-left", "0px"); this.refreshControl() } this._raiseEvent("2"); this._raiseEvent("8"); return true }, setDate: function (b) { if (b != null && typeof (b) == "string") { b = new Date(b) } if (this.canRender == false) { this.canRender = true; this.render() } this.navigateTo(b, "api"); this._selectDate(b); if (this.selectionMode == "range") { this._selectDate(b, "mouse") } return true }, val: function (b) { if (arguments.length != 0) { if (b == null) { this.setDate(null) } if (b instanceof Date) { this.setDate(b) } if (typeof (b) == "string") { this.setDate(b) } } return this.getDate() }, getDate: function () { if (this.selectedDate == undefined) { return new Date() } return this.selectedDate }, getValue: function () { if (this.value == undefined) { return new Date() } return this.value.dateTime }, setRange: function (c, b) { if (this.canRender == false) { this.canRender = true; this.render() } this.navigateTo(c, "api"); this._selectDate(c, "mouse"); this._selectDate(b, "mouse") }, getRange: function () { return this.selection }, _selectDate: function (d, g, c) { if (this.selectionMode == "none") { return } if (g == null || g == undefined) { g = "none" } if (c == null || c == undefined) { c = false } var i = a.data(this.element, "View" + this.element.id); if (i == undefined || i == null) { return } if (this.changing) { if (d && this.selectedDate) { if (this.selectedDate.getFullYear() != d.getFullYear() || this.selectedDate.getDate() != d.getDate() || this.selectedDate.getMonth() != d.getMonth()) { var j = this.changing(this.selectedDate, d) } if (j) { d = j } } } var k = this; if (this.input) { if (d != null) { this.input.val(d.toString()) } else { this.input.val("") } } var e = this.selectedDate; this.selectedDate = d; if (this.view != "month") { if (e != d) { this._raiseEvent(7, { selectionType: g }) } a.each(this.renderedCells, function (p) { var l = this; var q = l.getDate(); var m = a(l.element); var o = m.find("#cellContent" + m[0].id); if (d == null) { l.isSelected = false; l.isDisabled = false } else { l.isSelected = false; if (q) { if ((q.getMonth() == d.getMonth() && k.view == "year" && q.getFullYear() == d.getFullYear()) || (k.view == "decade" && q.getFullYear() == d.getFullYear())) { l.isSelected = true; try { if (g != "none") { l.element.focus() } } catch (n) { } } } } k._applyCellStyle(l, m, m) }); if (this.change) { this.change(d) } return } if (this.view == "month") { if (this.selectionMode == "range" && g == "key") { var f = this.getVisibleDate(); var b = this.getFirstDayOfWeek(f); this.refreshCalendarCells(this.month, b, "View" + this.element.id) } } var h = false; a.each(this.renderedCells, function (r) { var w = this; var o = w.getDate(); var v = a(w.element); var l = v; if (v.length == 0) { return false } if (d == null) { w.isSelected = false; w.isDisabled = false; if (r == 0) { k.selection = { from: null, to: null }; k._raiseEvent("2"); k._raiseEvent("5", { selectionType: g }) } } else { if (k.selectionMode != "range" || g == "key") { if (o.getDate() == d.getDate() && o.getMonth() == d.getMonth() && o.getFullYear() == d.getFullYear() && w.isSelected) { k._applyCellStyle(w, v, l); k._raiseEvent("5", { selectionType: g }); return } if (w.isSelected) { k._raiseEvent("6", { selectionType: g }) } w.isSelected = false; if (o.getDate() == d.getDate() && o.getMonth() == d.getMonth() && o.getFullYear() == d.getFullYear()) { w.isSelected = true; if (r == 0) { k.selection = { date: d } } try { if (g != "none") { w.element.focus(); k.host.focus() } } catch (s) { } if (!w.isOtherMonth) { k.value._setMonth(d.getMonth() + 1); k.value._setDay(d.getDate()); k.value._setYear(d.getFullYear()); k._raiseEvent("2"); k._raiseEvent("5", { selectionType: g }) } } if (k.selectionMode == "range") { k._clicks = 0; k.selection = { from: d, to: d } } } else { if (k.selectionMode == "range") { if (g == "view") { w.isSelected = false; w.isDisabled = false; if (k.getMaxDate() < o) { w.isDisabled = true } if (k.getMinDate() > o) { w.isDisabled = true } if (k._isRestrictedDate(o)) { w.isDisabled = true; w.isRestricted = true } if (!w.isDisabled && k._isDisabled(o)) { w.isDisabled = true } k._applyCellStyle(w, v, l); return true } if (r == 0) { if (g != "none") { if (k._clicks == undefined) { k._clicks = 0 } k._clicks++; if (c) { k._clicks++ } if (k._clicks == 1) { k.selection = { from: d, to: d } } else { var u = k.selection.from; var q = u <= d ? u : d; var t = u <= d ? d : u; if (q) { var m = new Date(q.getFullYear(), q.getMonth(), q.getDate()) } if (t) { var n = new Date(t.getFullYear(), t.getMonth(), t.getDate(), 23, 59, 59) } k.selection = { from: m, to: n }; k._clicks = 0 } } else { if (k.selection == null || k.selection.from == null) { k.selection = { from: d, to: d }; if (k._clicks == undefined) { k._clicks = 0 } k._clicks++; if (k._clicks == 2) { k._clicks = 0 } } } } var p = function (y) { if (y == null) { return new Date() } var x = new Date(); x.setHours(0, 0, 0, 0); x.setFullYear(y.getFullYear(), y.getMonth(), y.getDate()); return x }; if (!w.isOtherMonth && p(o).toString() == p(d).toString()) { k.value._setMonth(d.getMonth() + 1); k.value._setDay(d.getDate()); k.value._setYear(d.getFullYear()); k._raiseEvent("2"); k._raiseEvent("5", { selectionType: g }) } w.isSelected = false; w.isDisabled = h; if (p(o) < p(k.selection.from) && k._clicks == 1) { w.isDisabled = true } if (k.getMaxDate() < o) { w.isDisabled = true } if (k.getMinDate() > o) { w.isDisabled = true } if (k._isRestrictedDate(o)) { w.isRestricted = true; w.isDisabled = true } if (!w.isDisabled && k._isDisabled(o)) { w.isDisabled = true } if (!w.isDisabled) { if (p(o) >= p(k.selection.from) && p(o) <= p(k.selection.to)) { w.isSelected = true } } else { if (!k.allowRestrictedDaysInRange && p(o) >= p(k.selection.from) && k.selection.to == k.selection.from) { h = true } } } } } k._applyCellStyle(w, v, l) }); if (k.selectionMode == "range" && k._clicks == 0) { k._raiseEvent(7, { selectionType: g }); return } else { if (k.selectionMode == "range") { return } } if (e != d) { k._raiseEvent(7, { selectionType: g }); if (this.change) { this.change(d) } } }, _getSelectedDate: function () { var d = a.data(this.element, "View" + this.element.id); if (d == undefined || d == null) { return } if (this.view != "month") { return this.selectedDate } for (var c = 0; c < d.cells.length; c++) { var b = d.cells[c]; var e = b.getDate(); if (b.isSelected) { return e } } if (this.selectedDate) { return this.selectedDate } }, _getSelectedCell: function () { var d = a.data(this.element, "View" + this.element.id); if (d == undefined || d == null) { return } for (var c = 0; c < d.cells.length; c++) { var b = d.cells[c]; var e = b.getDate(); if (b.isSelected) { return b } } }, _applyCellStyle: function (c, d, g) { var e = this; if (g == null || (g != null && g.length == 0)) { g = d } var b = ""; b = this.toThemeProperty("jqx-rc-all"); b += " " + this.toThemeProperty("jqx-item"); if (this.disabled || (c.isDisabled && !c.isRestricted)) { b += " " + this.toThemeProperty("jqx-calendar-cell-disabled"); b += " " + this.toThemeProperty("jqx-fill-state-disabled") } if (!this.disabled && c.isRestricted) { b += " " + this.toThemeProperty("jqx-calendar-cell-restrictedDate") } if (c.isOtherMonth && this.enableOtherMonthDays && c.isVisible) { b += " " + this.toThemeProperty("jqx-calendar-cell-othermonth") } if (c.isWeekend && this.enableWeekend && c.isVisible && c.isVisible) { b += " " + this.toThemeProperty("jqx-calendar-cell-weekend") } if (!c.isVisible) { b += " " + this.toThemeProperty("jqx-calendar-cell-hidden") } else { b += " " + this.toThemeProperty("jqx-calendar-cell"); if (this.view != "month") { if (g.length > 0 && g.html().toLowerCase().indexOf("span") != -1) { g.css("cursor", "default") } } } g.removeAttr("aria-selected"); if (c.isSelected && c.isVisible) { b += " " + this.toThemeProperty("jqx-calendar-cell-selected"); b += " " + this.toThemeProperty("jqx-fill-state-pressed"); g.attr("aria-selected", true); this.host.removeAttr("aria-activedescendant").attr("aria-activedescendant", g[0].id); var f = c.getDate(); if (this._isDisabled(f)) { b += " " + this.toThemeProperty("jqx-calendar-cell-selected-invalid") } } if (c.isHighlighted && c.isVisible && this.enableHover) { if (!c.isDisabled) { b += " " + this.toThemeProperty("jqx-calendar-cell-hover"); b += " " + this.toThemeProperty("jqx-fill-state-hover") } } b += " " + this.toThemeProperty("jqx-calendar-cell-" + this.view); if (c.isToday && c.isVisible) { b += " " + this.toThemeProperty("jqx-calendar-cell-today") } g[0].className = b; if (this.specialDates.length > 0) { var h = this; a.each(this.specialDates, function () { if (this.Class != undefined && this.Class != null && this.Class != "") { g.removeClass(this.Class) } else { g.removeClass(e.toThemeProperty("jqx-calendar-cell-specialDate")) } var i = c.getDate(); if (i.getFullYear() == this.Date.getFullYear() && i.getMonth() == this.Date.getMonth() && i.getDate() == this.Date.getDate()) { if (c.tooltip == null && this.Tooltip != null) { c.tooltip = this.Tooltip; if (a(g).jqxTooltip) { var j = this.Class; a(g).jqxTooltip({ value: { cell: c, specialDate: this.Date }, name: h.element.id, content: this.Tooltip, position: "mouse", theme: h.theme, opening: function (k) { if (g.hasClass(e.toThemeProperty("jqx-calendar-cell-specialDate"))) { return true } if (g.hasClass(j)) { return true } return false } }) } } g.removeClass(e.toThemeProperty("jqx-calendar-cell-othermonth")); g.removeClass(e.toThemeProperty("jqx-calendar-cell-weekend")); if (this.Class == undefined || this.Class == "") { g.addClass(e.toThemeProperty("jqx-calendar-cell-specialDate")); return false } else { g.addClass(this.Class); return false } } }) } }, _applyCellStyles: function () { var f = a.data(this.element, "View" + this.element.id); if (f == undefined || f == null) { return } for (var e = 0; e < f.cells.length; e++) { var b = f.cells[e]; var c = a(b.element); var d = c.find("#cellContent" + c[0].id); if (d.length == 0) { d = c } this._applyCellStyle(b, c, d) } }, getWeekOfYear: function (f) { var b = new Date(f.dateTime); dowOffset = this.firstDayOfWeek; var e = new Date(b.getFullYear(), 0, 1); var c = e.getDay() - dowOffset; c = (c >= 0 ? c : c + 7); var d = Math.floor((b.getTime() - e.getTime() - (b.getTimezoneOffset() - e.getTimezoneOffset()) * 60000) / 86400000) + 1; var g; if (c < 4) { g = Math.floor((d + c - 1) / 7) + 1; if (g > 52) { nYear = new Date(b.getFullYear() + 1, 0, 1); nday = nYear.getDay() - dowOffset; nday = nday >= 0 ? nday : nday + 7; g = nday < 4 ? 1 : 53 } } else { g = Math.floor((d + c - 1) / 7) } return g }, renderColumnHeader: function (w) { if (!this.showDayNames) { return } var t = a("<table role='grid' style='border-spacing: 0px; border-collapse: collapse; width: 100%; height: 100%;' cellspacing='0' cellpadding='1'><tr role='row'><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td><td role='gridcell'></td></tr></table>"); t.find("table").addClass(this.toThemeProperty("jqx-reset")); t.find("tr").addClass(this.toThemeProperty("jqx-reset")); t.find("td").css({ background: "transparent", padding: 1, margin: 0, border: "none" }); t.addClass(this.toThemeProperty("jqx-reset")); t.addClass(this.toThemeProperty("jqx-widget-content")); t.addClass(this.toThemeProperty("jqx-calendar-column-header")); this.columnHeader.append(t); var d = this.getVisibleDate(); var h = this.getFirstDayOfWeek(d); var m = h.dayOfWeek; var x = this.getWeekOfYear(h); var q = this.firstDayOfWeek; var v = this.localization.calendar.days.names; var n = new Array(); var g = h; var o = (w.width() - this.rowHeaderWidth - 2) / 7; if (!this.showWeekNumbers) { o = (w.width() - 2) / 7 } for (var s = 0; s < 7; s++) { var f = v[q]; if (this.rtl) { f = v[6 - q] } switch (this.dayNameFormat) { case "default": f = this.localization.calendar.days.namesAbbr[q]; if (this.rtl) { f = this.localization.calendar.days.namesAbbr[6 - q] } break; case "shortest": f = this.localization.calendar.days.namesShort[q]; if (this.rtl) { f = this.localization.calendar.days.namesShort[6 - q] } break; case "firstTwoLetters": f = f.substring(0, 2); break; case "firstLetter": f = f.substring(0, 1); break } var b = new a.jqx._jqxCalendar.cell(g.dateTime); var k = s + 1; var l = k + this.element.id; var j = a(t[0].rows[0].cells[s]); var p = s; if (this.enableTooltips) { if (a(j).jqxTooltip) { a(j).jqxTooltip({ name: this.element.id, content: v[q], theme: this.theme, position: "mouse" }) } } if (q >= 6) { q = 0 } else { q++ } s = p; b.element = j; b.row = 0; b.column = s + 1; var e = this._textwidth(f); var c = "<div style='padding: 0; margin: 0; border: none; background: transparent;' id='columnCell" + l + "'>" + f + "</div>"; j.append(c); j.find("#columnCell" + l).addClass(this.toThemeProperty("jqx-calendar-column-cell")); j.width(o); if (this.disabled) { j.find("#columnCell" + l).addClass(this.toThemeProperty("jqx-calendar-column-cell-disabled")) } if (e > 0 && o > 0) { while (e > j.width()) { if (f.length == 0) { break } f = f.substring(0, f.length - 1); a.jqx.utilities.html(j.find("#columnCell" + l), f); e = this._textwidth(f) } } n[s] = b; g = new a.jqx._jqxDateTimeInput.getDateTime(new Date(g._addDays(1))) } if (parseInt(this.columnHeader.width()) > parseInt(this.host.width())) { this.columnHeader.width(this.host.width()) } var u = a.data(this.element, w[0].id); u.columnCells = n }, _format: function (d, e, b) { var f = false; try { if (Globalize != undefined) { f = true } } catch (c) { } if (a.global) { a.global.culture.calendar = this.localization.calendar; return a.global.format(d, e, this.culture) } else { if (f) { try { if (Globalize.cultures[this.culture]) { Globalize.cultures[this.culture].calendar = this.localization.calendar; return Globalize.format(d, e, this.culture) } else { return Globalize.format(d, e, this.culture) } } catch (c) { return Globalize.format(d, e) } } else { if (a.jqx.dataFormat) { return a.jqx.dataFormat.formatdate(d, e, this.localization.calendar) } } } }, _textwidth: function (d) { var c = a("<span>" + d + "</span>"); c.addClass(this.toThemeProperty("jqx-calendar-column-cell")); a(this.host).append(c); var b = c.width(); c.remove(); return b }, _textheight: function (d) { var c = a("<span>" + d + "</span>"); a(this.host).append(c); var b = c.height(); c.remove(); return b }, _renderRowHeader: function (k) { var g = this.getVisibleDate(); var c = this.getFirstDayOfWeek(g); var f = c.dayOfWeek; var s = this.getWeekOfYear(c); var o = new a.jqx._jqxDateTimeInput.getDateTime(new Date(c.dateTime)); o._addDays(5); o.dayOfWeek = o.dateTime.getDay(); var m = this.getWeekOfYear(o); if (53 == s && o.dateTime.getMonth() == 0) { s = 1 } var l = a("<table style='overflow: hidden; width: 100%; height: 100%;' cellspacing='0' cellpadding='1'><tr><td></td></tr><tr><td/></tr><tr><td/></tr><tr><td/></tr><tr><td/></tr><tr><td/></tr></table>"); l.find("table").addClass(this.toThemeProperty("jqx-reset")); l.find("td").addClass(this.toThemeProperty("jqx-reset")); l.find("tr").addClass(this.toThemeProperty("jqx-reset")); l.addClass(this.toThemeProperty("jqx-calendar-row-header")); l.width(this.rowHeaderWidth); this.rowHeader.append(l); var d = c; var r = new Array(); for (var h = 0; h < 6; h++) { var e = s.toString(); var q = new a.jqx._jqxCalendar.cell(d.dateTime); var j = h + 1 + this.element.id; var p = a(l[0].rows[h].cells[0]); q.element = p; q.row = h; q.column = 0; var b = "<div style='background: transparent; border: none; padding: 0; margin: 0;' id ='headerCellContent" + j + "'>" + e + "</div>"; p.append(b); p.find("#headerCellContent" + j).addClass(this.toThemeProperty("jqx-calendar-row-cell")); r[h] = q; d = new a.jqx._jqxDateTimeInput.getDateTime(new Date(d._addWeeks(1))); s = this.getWeekOfYear(d) } var n = a.data(this.element, k[0].id); n.rowCells = r }, getFirstDayOfWeek: function (e) { var d = e; if (this.firstDayOfWeek < 0 || this.firstDayOfWeek > 6) { this.firstDayOfWeek = 6 } var c = d.dayOfWeek - this.firstDayOfWeek; if (c <= 0) { c += 7 } var b = a.jqx._jqxDateTimeInput.getDateTime(d._addDays(-c)); return b }, getVisibleDate: function () { var c = new a.jqx._jqxDateTimeInput.getDateTime(new Date(this.value.dateTime)); if (c < this.minDate) { c = this.minDate } if (c > this.maxDate) { this.visibleDate = this.maxDate } c.dateTime.setHours(0); var d = c.day; var b = a.jqx._jqxDateTimeInput.getDateTime(c._addDays(-d + 1)); c = b; return c }, destroy: function (b) { this.host.removeClass(); if (b != false) { this.host.remove() } }, _raiseEvent: function (d, i) { if (i == undefined) { i = { owner: null } } var h = this.events[d]; var g = i ? i : {}; g.owner = this; var c = new a.Event(h); c.owner = this; c.args = g; if (d == 0 || d == 1 || d == 2 || d == 3 || d == 4 || d == 5 || d == 6 || d == 7 || d == 8) { c.args.date = c.args.selectedDate = this.getDate(); c.args.range = this.getRange(); var e = this.getViewStart(); var f = this.getViewEnd(); c.args.view = { from: e, to: f } } if (d == 7) { var b = g.selectionType; if (!b) { b = null } if (b == "key") { b = "keyboard" } if (b == "none") { b = null } g.type = b } var j = this.host.trigger(c); if (d == 0 || d == 1) { j = false } return j }, propertyMap: function (b) { if (b == "value") { if (this.selectionMode != "range") { return this.getDate() } else { return this.getRange() } } return null }, updateSize: function () { var d = this.host.find("#View" + this.element.id); if (d.length > 0) { this.setCalendarSize(); if (this.height != undefined && !isNaN(this.height)) { d.height(this.height) } else { if (this.height != null && this.height.toString().indexOf("px") != -1) { d.height(this.height) } } if (this.width != undefined && !isNaN(this.width)) { d.width(this.width) } else { if (this.width != null && this.width.toString().indexOf("px") != -1) { d.width(this.width) } } var c = this.host.height() - this.titleHeight - this.columnHeaderHeight; var b = "View" + this.element.id; d.find("#cellsTable" + b).height(c); d.find("#calendarRowHeader" + b).height(c); this.refreshControl() } }, resize: function () { this.updateSize() }, clear: function () { if (this.selectionMode == "range") { this._clicks = 1; this.setRange(null, null); this._raiseEvent(7) } else { this.setDate(null, "mouse") } this._clicks = 0; this.selection = { from: null, to: null } }, today: function () { if (this.selectionMode == "range") { this.setRange(new Date(), new Date()) } else { this.setDate(new Date(), "mouse") } }, propertyChangedHandler: function (d, e, g, f) { if (this.isInitialized == undefined || this.isInitialized == false) { return } if (e == "enableHover") { return } if (e == "keyboardNavigation") { return } if (e == "localization") { if (this.localization) { if (this.localization.backString) { this.backText = this.localization.backString } if (this.localization.forwardString) { this.forwardText = this.localization.forwardString } if (this.localization.todayString) { this.todayString = this.localization.todayString } if (this.localization.clearString) { this.clearString = this.localization.clearString } this.firstDayOfWeek = this.localization.calendar.firstDay } } if (e == "culture") { try { if (a.global) { a.global.preferCulture(d.culture); d.localization.calendar = a.global.culture.calendar } else { if (Globalize) { var b = Globalize.culture(d.culture); d.localization.calendar = b.calendar } } if (d.localization.calendar && d.localization.calendar.firstDay != undefined && d.culture != "default") { d.firstDayOfWeek = d.localization.calendar.firstDay } } catch (c) { } } if (e == "views") { if (d.views.indexOf("month") == -1) { d.view = "year" } if (d.views.indexOf("year") == -1 && d.views.indexOf("month") == -1) { d.view = "decade" } d.render(); return } if (e == "showFooter") { d.render() } if (e == "width" || e == "height") { d.updateSize(); return } else { if (e == "theme") { a.jqx.utilities.setTheme(g, f, d.host) } else { if (e == "rowHeaderWidth" || e == "showWeekNumbers") { d.render() } else { d.view = "month"; d.render() } } } } }) })(jqxBaseFramework); (function (a) { a.jqx._jqxCalendar.cell = function (c) { var b = { dateTime: new a.jqx._jqxDateTimeInput.getDateTime(c), _date: c, getDate: function () { return this._date }, setDate: function (d) { this.dateTime = new a.jqx._jqxDateTimeInput.getDateTime(d); this._date = d }, isToday: false, isWeekend: false, isOtherMonth: false, isVisible: true, isSelected: false, isHighlighted: false, element: null, row: -1, column: -1, tooltip: null }; return b }; a.jqx._jqxCalendar.monthView = function (c, h, d, b, f, e) { var g = { start: c, end: h, cells: d, rowCells: b, columnCells: f, element: e }; return g } })(jqxBaseFramework);

