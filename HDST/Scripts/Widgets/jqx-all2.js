/*
jqxdata
*/

(function (i) { i.jqx.observableArray = function (e, J) { if (typeof (e) == "string") { e = i.parseJSON(e) } if (!Object.defineProperty || !(function () { try { Object.defineProperty({}, "x", {}); return true } catch (M) { return false } } ())) { var L = Object.defineProperty; Object.defineProperty = function (O, P, N) { if (L) { try { return L(O, P, N) } catch (M) { } } if (O !== Object(O)) { throw TypeError("Object.defineProperty called on non-object") } if (Object.prototype.__defineGetter__ && ("get" in N)) { Object.prototype.__defineGetter__.call(O, P, N.get) } if (Object.prototype.__defineSetter__ && ("set" in N)) { Object.prototype.__defineSetter__.call(O, P, N.set) } if ("value" in N) { O[P] = N.value } else { if (!O[P]) { O[P] = N } } return O } } if (!Array.prototype.forEach) { Array.prototype.forEach = function (N) { if (this === void 0 || this === null) { throw TypeError() } var Q = Object(this); var M = Q.length >>> 0; if (typeof N !== "function") { throw TypeError() } var P = arguments[1], O; for (O = 0; O < M; O++) { if (O in Q) { N.call(P, Q[O], O, Q) } } } } if (typeof Object.getOwnPropertyNames !== "function") { Object.getOwnPropertyNames = function (O) { if (O !== Object(O)) { throw TypeError("Object.getOwnPropertyNames called on non-object") } var M = [], N; for (N in O) { if (Object.prototype.hasOwnProperty.call(O, N)) { M.push(N) } } return M } } var I = this, H, K = []; I.notifier = null; I.name = "observableArray"; I.observing = true; I.changes = new Array(); var J = J; I.observe = function () { I.observing = true; if (arguments.length == 1) { J = arguments[0] } }; I.unobserve = function () { I.observing = false }; I.toArray = function () { return K.slice(0) }; I.toJSON = function (X, O) { var U = K; if (O) { U = O } var T = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, W = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" }; function M(Z) { return '"' + Z.replace(T, function (aa) { var ab = W[aa]; return typeof ab === "string" ? ab : "\\u" + ("0000" + aa.charCodeAt(0).toString(16)).slice(-4) }) + '"' } function N(Z) { return Z < 10 ? "0" + Z : Z } function P(aa) { var Z; if (isFinite(aa.valueOf())) { Z = aa.getUTCFullYear() + "-" + N(aa.getUTCMonth() + 1) + "-" + N(aa.getUTCDate()) + "T" + N(aa.getUTCHours()) + ":" + N(aa.getUTCMinutes()) + ":" + N(aa.getUTCSeconds()) + 'Z"' } else { Z = "null" } return Z } function Q(ac) { var Z = ac.length, aa = [], ab; for (ab = 0; ab < Z; ab++) { aa.push(R(ab, ac) || "null") } return "[" + aa.join(",") + "]" } function Y(ac) { var aa = [], ab, Z; for (ab in ac) { if (Object.prototype.hasOwnProperty.call(ac, ab)) { if (ab != "" && X && X.indexOf(ab) === -1) { continue } Z = R(ab, ac); if (Z) { aa.push(M(ab) + ":" + Z) } } } return "{" + aa.join(",") + "}" } function S(Z) { switch (Object.prototype.toString.call(Z)) { case "[object Date]": return P(Z); case "[object Array]": return Q(Z) } return Y(Z) } function V(aa, Z) { switch (Z) { case "string": return M(aa); case "number": case "float": case "integer": case "int": return isFinite(aa) ? aa : "null"; case "boolean": return aa } return "null" } function R(aa, Z) { var ac = Z[aa], ab = typeof ac; if (ac && typeof ac === "object" && typeof ac.toJSON === "function") { ac = ac.toJSON(aa); ab = typeof ac } if (/(number|float|int|integer|string|boolean)/.test(ab) || (!ac && ab === "object")) { return V(ac, ab) } else { return S(ac) } } if (!X && window.JSON && typeof window.JSON.stringify === "function") { return window.JSON.stringify(U) } return R("", { "": U }) }; I.defineIndexProperty = function (O) { if (!(O in I)) { var M = function (V, S, U, R) { var T = V[S]; var Q = T; var P = function () { return Q }; var W = function (ab) { T = ab; if (Q !== T) { var aa = Q; Q = T; if (typeof H === "function") { var Y = K.indexOf(R); var Z = ""; var X = function (ad, ac) { Object.getOwnPropertyNames(ad).forEach(function (ae) { var af = i.type(ad[ae]); if (af == "array" || af == "object") { X(ad[ae], ac + "." + ae) } else { if (S === ae) { Z = ac + "." + ae } } }) }; X(R, Y); H({ object: I, type: "update", path: Z, index: Y, name: S, newValue: T, oldValue: aa }) } } Q = T; return T }; if (V[S] && S != "length") { if (Object.defineProperty) { Object.defineProperty(V, S, { get: P, set: W }) } else { if (Object.prototype.__defineGetter__ && Object.prototype.__defineSetter__) { Object.prototype.__defineGetter__.call(V, S, P); Object.prototype.__defineSetter__.call(V, S, W) } } } }; var N = function (S, R, P) { var Q = i.type(S); if (/(number|float|int|integer|string|boolean)/.test(Q)) { return } if (S === undefined) { return } Object.getOwnPropertyNames(S).forEach(function (T) { var U = i.type(S[T]); if (U == "array" || U == "object") { M(S, T, R + "." + T, P); N(S[T], R + "." + T, P) } else { M(S, T, R + "." + T, P) } }) }; Object.defineProperty(I, O, { configurable: true, enumerable: true, get: function () { return K[O] }, set: function (Q) { var P = K[O]; if (I.toJSON(null, P) != I.toJSON(null, Q)) { K[O] = Q; if (typeof H === "function") { H({ object: I, type: "update", path: O.toString(), index: O, name: "index", newValue: Q, oldValue: P }) } N(Q, O, Q) } } }); N(I[O], O, I[O]) } }; I.push = function () { var M; for (var N = 0, O = arguments.length; N < O; N++) { M = K.length; K.push(arguments[N]); I.defineIndexProperty(M); if (typeof H === "function") { H({ object: I, type: "add", name: "length", index: M, newValue: K.length, oldValue: M }) } } return K.length }; I.pop = function () { if (~K.length) { var M = K.length - 1, N = K.pop(); delete I[M]; if (typeof H === "function") { H({ object: I, type: "delete", name: "length", index: M, newValue: K.length, oldValue: M }) } return N } }; I.unshift = function () { var M = K.length; for (var N = 0, O = arguments.length; N < O; N++) { K.splice(N, 0, arguments[N]); I.defineIndexProperty(K.length - 1) } if (typeof H === "function") { H({ object: I, type: "add", index: 0, name: "length", newValue: K.length, oldValue: M }) } return K.length }; I.shift = function () { var M = K.length; if (~K.length) { var N = K.shift(); K.length === 0 && delete I[M]; if (typeof H === "function") { H({ object: I, type: "delete", index: M, name: "length", newValue: K.length, oldValue: M }) } return N } }; I.slice = function (Q, N, P) { var M = K.slice(Q, N); var O = new i.jqx.observableArray(M, P); return O }; I.splice = function (Q, R, M) { var P = [], U, T; Q = ! ~Q ? K.length - Q : Q; R = (R == null ? K.length - Q : R) || 0; while (R--) { U = K.splice(Q, 1)[0]; P.push(U); delete I[K.length]; if (typeof H === "function") { H({ object: I, type: "delete", index: Q, name: "length", newValue: -1, oldValue: Q }) } } for (var N = 2, S = arguments.length; N < S; N++) { K.splice(Q, 0, arguments[N]); defineIndexProperty(K.length - 1); if (typeof H === "function") { H({ object: I, type: "add", index: Q, name: "length", newValue: K.length - 1, oldValue: Q }) } Q++ } var O = new i.jqx.observableArray(P, M); return O }; Object.defineProperty(I, "length", { configurable: false, enumerable: true, get: function () { return K.length }, set: function (M) { var N = Number(M); if (N % 1 === 0 && N >= 0) { if (N < K.length) { I.splice(N) } else { if (N > K.length) { I.push.apply(I, new Array(N - K.length)) } } } else { throw new RangeError("Invalid array length") } return M } }); i.jqx.observableArray.prototype.fromArray = function (O, N) { var M = new i.jqx.observableArray(O, N); return M }; i.jqx.observableArray.prototype.clone = function () { var M = new i.jqx.observableArray(K, J); M.observing = I.observing; M.changes = I.changes; M.notifier = I.notifier; return M }; I.remove = function (N) { if (N < 0 || N >= I.length) { throw new Error("Invalid index : " + N) } if (I.hasOwnProperty(N)) { var M = I[N]; I[N] = undefined; K[N] = undefined; if (typeof H === "function") { H({ object: I, type: "delete", index: N, name: "index", newValue: undefined, oldValue: M }) } return true } return false }; I.concat = function (N, P) { var M = K.concat(N); var O = new i.jqx.observableArray(M, P); return O }; Object.getOwnPropertyNames(Array.prototype).forEach(function (M) { if (!(M in I)) { var N = function () { var Q = I.observing; I.observing = false; var P = K[M]; var O = P.apply(K, arguments); I.observing = Q; return O }; Object.defineProperty(I, M, { configurable: false, enumerable: true, writeable: false, value: N }) } }); I.set = function (N, P) { if (i.type(N) == "string" && N.split(".").length > 1) { var M = N.split("."); var Q = I; for (var O = 0; O < M.length; O++) { if (O === 0) { if (M[O] >= I.length) { throw new Error("Invalid Index: " + N) } } if (O < M.length - 1) { Q = Q[M[O]] } else { Q[M[O]] = P } } return true } if (N >= I.length) { I.push(P) } else { I[N] = P } return true }; I.get = function (M) { return I[M] }; if (e instanceof Array) { I.push.apply(I, e) } H = function () { if (!I.observing) { return } if (arguments && arguments[0]) { I.changes.push(arguments[0]) } if (J) { J.apply(I, arguments) } if (I.notifier) { I.notifier.apply(I, arguments) } }; return I }; i.jqx.formatDate = function (H, J, I) { var e = i.jqx.dataFormat.formatdate(H, J, I); return e }; i.jqx.formatNumber = function (H, J, I) { var e = i.jqx.dataFormat.formatnumber(H, J, I); return e }; i.jqx.dataAdapter = function (J, e) { if (J != undefined) { if (J.dataFields !== undefined) { J.datafields = J.dataFields } if (J.dataType !== undefined) { J.datatype = J.dataType } if (J.localData !== undefined) { J.localdata = J.localData } if (J.sortColumn !== undefined) { J.sortcolumn = J.sortColumn } if (J.sortDirection !== undefined) { J.sortdirection = J.sortDirection } if (J.sortOrder !== undefined) { J.sortdirection = J.sortOrder } if (J.formatData !== undefined) { J.formatdata = J.formatData } if (J.processData !== undefined) { J.processdata = J.processData } if (J.pageSize !== undefined) { J.pagesize = J.pageSize } if (J.pageNum !== undefined) { J.pagenum = J.pageNum } if (J.updateRow !== undefined) { J.updaterow = J.updateRow } if (J.addRow !== undefined) { J.addrow = J.addRow } if (J.deleteRow !== undefined) { J.deleterow = J.deleteRow } if (J.contentType !== undefined) { J.contenttype = J.contentType } if (J.totalRecords != undefined) { J.totalrecords = J.totalRecords } if (J.loadError != undefined) { J.loadError = J.loadError } if (J.sortComparer != undefined) { J.sortcomparer = J.sortComparer } } this._source = J; this._options = e || {}; if (J.beforeLoadComplete != undefined) { this._options.beforeLoadComplete = this._source.beforeLoadComplete } if (J.downloadComplete != undefined) { this._options.downloadComplete = this._source.downloadComplete } if (J.loadComplete != undefined) { this._options.loadComplete = this._source.loadComplete } if (J.autoBind != undefined) { this._options.downloadComplete = this._source.autoBind } if (J.formatData != undefined) { this._options.formatData = this._source.formatData } if (J.loadError != undefined) { this._options.loadError = this._source.loadError } if (J.beforeSend != undefined) { this._options.beforeSend = this._source.beforeSend } if (J.contentType != undefined) { this._options.contentType = this._source.contentType } if (J.async != undefined) { this._options.async = this._source.async } if (J.loadServerData != undefined) { this._options.loadServerData = this._source.loadServerData } if (J.uniqueDataFields != undefined) { this._options.uniqueDataFields = this._source.uniqueDataFields } this.records = new Array(); this._downloadComplete = new Array(); this._bindingUpdate = new Array(); if (J != undefined && J.localdata != null && typeof J.localdata == "function") { var I = J.localdata(); if (I != null) { J._localdata = J.localdata; var H = this; if (J._localdata.subscribe) { H._oldlocaldata = []; J._localdata.subscribe(function (K) { var L = function (M) { if (i.isArray(M)) { return i.makeArray(L(i(M))) } return i.extend(true, {}, M) }; if (H.suspendKO == false || H.suspendKO == undefined || H._oldlocaldata.length == 0) { H._oldlocaldata = L(K) } }, J._localdata, "beforeChange"); J._localdata.subscribe(function (L) { if (H.suspendKO == false || H.suspendKO == undefined) { var K = ""; H._oldrecords = H.records; if (H._oldlocaldata.length == 0) { J.localdata = J._localdata() } if (H._oldlocaldata.length == 0) { K = "change" } else { if (L) { if (H._oldlocaldata.length == L.length) { K = "update" } if (H._oldlocaldata.length > L.length) { K = "remove" } if (H._oldlocaldata.length < L.length) { K = "add" } } } H.dataBind(null, K) } }, J._localdata, "change"); H._knockoutdatasource = true } J.localdata = I } } if (this._options.autoBind == true) { this.dataBind() } }; i.jqx.dataAdapter.prototype = { getrecords: function () { return this.records }, beginUpdate: function () { this.isUpdating = true }, endUpdate: function (e) { this.isUpdating = false; if (e != false) { if (this._changedrecords && this._changedrecords.length > 0) { this.callBindingUpdate("update"); this._changedrecords = [] } else { this.dataBind(null, "") } } }, formatDate: function (H, J, I) { var e = i.jqx.dataFormat.formatdate(H, J, I); return e }, formatNumber: function (H, J, I) { var e = i.jqx.dataFormat.formatnumber(H, J, I); return e }, dataBind: function (R, aa) { if (this.isUpdating == true) { return } var W = this._source; if (!W) { return } if (W.generatedfields) { W.datafields = null; W.generatedfields = null } i.jqx.dataFormat.datescache = new Array(); if (W.dataFields != null) { W.datafields = W.dataFields } if (W.recordstartindex == undefined) { W.recordstartindex = 0 } if (W.recordendindex == undefined) { W.recordendindex = 0 } if (W.loadallrecords == undefined) { W.loadallrecords = true } if (W.root == undefined) { W.root = "" } if (W.record == undefined) { W.record = "" } if (W.sort != undefined) { this.sort = W.sort } if (W.filter != undefined) { this.filter = W.filter } else { this.filter = null } if (W.sortcolumn != undefined) { this.sortcolumn = W.sortcolumn } if (W.sortdirection != undefined) { this.sortdirection = W.sortdirection } if (W.sortcomparer != undefined) { this.sortcomparer = W.sortcomparer } this.records = new Array(); var K = this._options || {}; this.virtualmode = K.virtualmode != undefined ? K.virtualmode : false; this.totalrecords = K.totalrecords != undefined ? K.totalrecords : 0; this.pageable = K.pageable != undefined ? K.pageable : false; this.pagesize = K.pagesize != undefined ? K.pagesize : 0; this.pagenum = K.pagenum != undefined ? K.pagenum : 0; this.cachedrecords = K.cachedrecords != undefined ? K.cachedrecords : new Array(); this.originaldata = new Array(); this.recordids = new Array(); this.updaterow = K.updaterow != undefined ? K.updaterow : null; this.addrow = K.addrow != undefined ? K.addrow : null; this.deleterow = K.deleterow != undefined ? K.deleterow : null; this.cache = K.cache != undefined ? K.cache : false; this.unboundmode = false; if (W.formatdata != undefined) { K.formatData = W.formatdata } if (W.data != undefined) { if (K.data == undefined) { K.data = {} } i.extend(K.data, W.data) } if (W.mapchar != undefined) { this.mapChar = W.mapchar ? W.mapchar : ">" } else { this.mapChar = K.mapChar ? K.mapChar : ">" } if (K.unboundmode || W.unboundmode) { this.unboundmode = K.unboundmode || W.unboundmode } if (W.cache != undefined) { this.cache = W.cache } if (this.koSubscriptions) { for (var ac = 0; ac < this.koSubscriptions.length; ac++) { this.koSubscriptions[ac].dispose() } } this.koSubscriptions = new Array(); if (this.pagenum < 0) { this.pagenum = 0 } var ah = this; var Q = W.datatype; if (W.datatype === "csv" || W.datatype === "tab" || W.datatype === "tsv" || W.datatype == "text") { Q = "text" } var N = K.async != undefined ? K.async : true; if (W.async != undefined) { N = W.async } switch (Q) { case "local": case "array": case "observablearray": case "observableArray": default: if (W.localdata == undefined && W.length) { W.localdata = new Array(); for (var Z = 0; Z < W.length; Z++) { W.localdata[W.localdata.length] = W[Z]; W[Z].uid = Z } } if (W.beforeprocessing && i.isFunction(W.beforeprocessing)) { W.beforeprocessing(W.localdata) } var M = W.localdata.length; this.totalrecords = this.virtualmode ? (W.totalrecords || M) : M; if (this.unboundmode) { this.totalrecords = this.unboundmode ? (W.totalrecords || M) : M; var ad = W.datafields ? W.datafields.length : 0; if (ad > 0) { for (var Z = 0; Z < this.totalrecords; Z++) { var I = {}; for (var Y = 0; Y < ad; Y++) { I[W.datafields[Y].name] = "" } I.uid = Z; W.localdata[W.localdata.length] = I } } } if (this.totalrecords == undefined) { this.totalrecords = 0 } var ad = W.datafields ? W.datafields.length : 0; var H = function (ao, aq) { var ap = {}; for (var am = 0; am < aq; am++) { var al = W.datafields ? W.datafields[am] : {}; var ar = ""; if (undefined == al || al == null) { continue } if (al.map) { if (i.isFunction(al.map)) { ar = al.map(ao) } else { var aj = al.map.split(ah.mapChar); if (aj.length > 0) { var an = ao; for (var ak = 0; ak < aj.length; ak++) { if (!an) { continue } an = an[aj[ak]] } ar = an } else { ar = ao[al.map] } } if (ar != undefined && ar != null) { ar = ar.toString() } else { if (ar == undefined && ar != null) { ar = "" } } } var at = false; if (ar == "") { at = true; ar = ao[al.name]; if (ar != undefined && ar != null) { if (W._localdata && ar.subscribe) { ar = ar() } else { if (al.type != "array") { ar = ar.toString() } } } } if (ar == "[object Object]" && al.map && at) { ar = "" } ar = ah.getvaluebytype(ar, al); if (al.displayname != undefined) { ap[al.displayname] = ar } else { ap[al.name] = ar } } return ap }; if (W._localdata) { this._changedrecords = []; this.records = new Array(); var ag = W._localdata(); i.each(ag, function (am, ap) { if (typeof ap === "string") { ah.records.push(ap) } else { var ak = {}; var ao = 0; var an = this; i.each(this, function (ay, aD) { var at = null; var aE = "string"; var aC = ay; if (ad > 0) { var aG = false; var aB = false; for (var ax = 0; ax < ad; ax++) { var aw = W.datafields[ax]; if (aw != undefined && (aw.name == ay)) { aG = true; at = aw.map; aE = aw.type; aC = aw.name; break } else { if (aw != undefined && aw.map && (aw.map.indexOf(ay) >= 0)) { aG = true; at = aw.map; aE = aw.type; aC = aw.name; aB = true; var aF = an[ay]; if (at != null) { var ar = at.split(ah.mapChar); if (ar.length > 0) { var az = an; for (var au = 0; au < ar.length; au++) { az = az[ar[au]] } aF = az } else { aF = an[at] } } if (aE != "string") { aF = ah.getvaluebytype(aF, { type: aE }) } ak[aC] = aF; if (ak[aC] != undefined) { ao += ak[aC].toString().length + ak[aC].toString().substr(0, 1) } } } } if (!aG) { return true } if (aB) { return true } } var av = i.isFunction(an[ay]); if (av) { var aF = an[ay](); if (aE != "string") { aF = ah.getvaluebytype(aF, { type: aE }) } ak[ay] = aF; if (an[ay].subscribe) { var aA = am; ah.koSubscriptions[ah.koSubscriptions.length] = an[ay].subscribe(function (aI) { var aH = aA; ak[ay] = aI; var aJ = { index: aH, oldrecord: ak, record: ak }; ah._changedrecords.push(aJ); if (ah.isUpdating) { return } ah.callBindingUpdate("update"); ah._changedrecords = []; return false }) } } else { var aF = an[ay]; if (at != null) { var ar = at.split(ah.mapChar); if (ar.length > 0) { var az = an; for (var au = 0; au < ar.length; au++) { az = az[ar[au]] } aF = az } else { aF = an[at] } } if (aE != "string") { aF = ah.getvaluebytype(aF, { type: aE }) } ak[aC] = aF; if (ak[aC] != undefined) { ao += ak[aC].toString().length + ak[aC].toString().substr(0, 1) } } }); var al = ah.getid(W.id, an, am); ak.uid = al; ah.records.push(ak); ak._koindex = ao; if (ah._oldrecords) { var aj = ah.records.length - 1; if (aa == "update") { if (ah._oldrecords[aj]._koindex != ao) { var aq = { index: aj, oldrecord: ah._oldrecords[aj], record: ak }; ah._changedrecords.push(aq) } } } } }); if (aa == "add") { var M = ah.records.length; for (var Z = 0; Z < M; Z++) { var I = ah.records[Z]; var L = false; for (var U = 0; U < ah._oldrecords.length; U++) { if (ah._oldrecords[U]._koindex === I._koindex) { L = true; break } } if (!L) { ah._changedrecords.push({ index: Z, oldrecord: null, record: I, position: (Z != 0 ? "last" : "first") }) } } } else { if (aa == "remove") { var M = ah._oldrecords.length; for (var Z = 0; Z < M; Z++) { var P = ah._oldrecords[Z]; if (!ah.records[Z]) { ah._changedrecords.push({ index: Z, oldrecord: P, record: null }) } else { if (ah.records[Z]._koindex != P._koindex) { ah._changedrecords.push({ index: Z, oldrecord: P, record: null }) } } } } } } else { if (!i.isArray(W.localdata)) { this.records = new Array(); var V = 0; var T = new Array(); i.each(W.localdata, function (al) { var ak = ah.getid(W.id, this, al); if (ad == 0) { if (!(typeof this === "string" || this instanceof String)) { for (var an in this) { V++; var ao = i.type(this[an]); T.push({ name: an, type: ao }) } ad = V; W.datafields = T; W.generatedfields = T } } if (ad > 0) { var aj = this; var am = H(aj, ad); am.uid = ak; ah.records[ah.records.length] = am } else { this.uid = ak; ah.records[ah.records.length] = this } }) } else { if (ad == 0) { var V = 0; var T = new Array(); i.each(W.localdata, function (al, an) { var aj = i.extend({}, this); if (typeof an === "string") { ah.records = W.localdata; return false } else { var ak = ah.getid(W.id, aj, al); if (typeof (ak) === "object") { ak = al } aj.uid = ak; if (al == 0) { for (var ao in this) { V++; var ap = i.type(this[ao]); T.push({ name: ao, type: ap }) } ad = V; W.datafields = T; W.generatedfields = T } if (ad > 0) { var am = H(aj, ad); am.uid = ak; ah.records[ah.records.length] = am } else { ah.records[ah.records.length] = aj } } }) } else { i.each(W.localdata, function (al) { var aj = this; var am = H(aj, ad); var ak = ah.getid(W.id, am, al); if (typeof (ak) === "object") { ak = al } var aj = i.extend({}, am); aj.uid = ak; ah.records[ah.records.length] = aj }) } } } this.originaldata = W.localdata; this.cachedrecords = this.records; this.addForeignValues(W); if (K.uniqueDataFields) { var S = this.getUniqueRecords(this.records, K.uniqueDataFields); this.records = S; this.cachedrecords = S } if (K.beforeLoadComplete) { var ae = K.beforeLoadComplete(ah.records, this.originaldata); if (ae != undefined) { ah.records = ae; ah.cachedrecords = ae } } if (K.autoSort && K.autoSortField) { var O = Object.prototype.toString; Object.prototype.toString = (typeof field == "function") ? field : function () { return this[K.autoSortField] }; ah.records.sort(function (ak, aj) { if (ak === undefined) { ak = null } if (aj === undefined) { aj = null } if (ak === null && aj === null) { return 0 } if (ak === null && aj !== null) { return 1 } if (ak !== null && aj === null) { return -1 } ak = ak.toString(); aj = aj.toString(); if (ak === null && aj === null) { return 0 } if (ak === null && aj !== null) { return 1 } if (ak !== null && aj === null) { return -1 } if (i.jqx.dataFormat.isNumber(ak) && i.jqx.dataFormat.isNumber(aj)) { if (ak < aj) { return -1 } if (ak > aj) { return 1 } return 0 } else { if (i.jqx.dataFormat.isDate(ak) && i.jqx.dataFormat.isDate(aj)) { if (ak < aj) { return -1 } if (ak > aj) { return 1 } return 0 } else { if (!i.jqx.dataFormat.isNumber(ak) && !i.jqx.dataFormat.isNumber(aj)) { ak = String(ak).toLowerCase(); aj = String(aj).toLowerCase() } } } try { if (ak < aj) { return -1 } if (ak > aj) { return 1 } } catch (al) { var am = al } return 0 }); Object.prototype.toString = O } ah.loadedData = W.localdata; ah.buildHierarchy(); if (i.isFunction(K.loadComplete)) { K.loadComplete(W.localdata, ah.records) } break; case "json": case "jsonp": case "xml": case "xhtml": case "script": case "text": case "ics": if (W.localdata != null && !W.url) { if (i.isFunction(W.beforeprocessing)) { W.beforeprocessing(W.localdata) } if (W.datatype === "xml") { ah.loadxml(W.localdata, W.localdata, W) } else { if (Q === "text") { ah.loadtext(W.localdata, W) } else { if (Q === "ics") { ah.loadics(W.localdata, W) } else { ah.loadjson(W.localdata, W.localdata, W) } } } ah.addForeignValues(W); if (K.uniqueDataFields) { var S = ah.getUniqueRecords(ah.records, K.uniqueDataFields); ah.records = S; ah.cachedrecords = S } if (K.beforeLoadComplete) { var ae = K.beforeLoadComplete(ah.records, this.originaldata); if (ae != undefined) { ah.records = ae; ah.cachedrecords = ae } } ah.loadedData = W.localdata; ah.buildHierarchy.call(ah); if (i.isFunction(K.loadComplete)) { K.loadComplete(W.localdata, ah.records) } ah.callBindingUpdate(aa); return } var af = K.data != undefined ? K.data : {}; if (W.processdata) { W.processdata(af) } if (i.isFunction(K.processData)) { K.processData(af) } if (i.isFunction(K.formatData)) { var e = K.formatData(af); if (e != undefined) { af = e } } var ab = "application/x-www-form-urlencoded"; if (K.contentType) { ab = K.contentType } var J = "GET"; if (W.type) { J = W.type } if (K.type) { J = K.type } var X = Q; if (Q == "ics") { X = "text" } if (W.url && W.url.length > 0) { if (i.isFunction(K.loadServerData)) { ah._requestData(af, W, K) } else { this.xhr = i.jqx.data.ajax({ dataType: X, cache: this.cache, type: J, url: W.url, async: N, timeout: W.timeout, contentType: ab, data: af, success: function (am, aj, ap) { if (i.isFunction(W.beforeprocessing)) { var ao = W.beforeprocessing(am, aj, ap); if (ao != undefined) { am = ao } } if (i.isFunction(K.downloadComplete)) { var ao = K.downloadComplete(am, aj, ap); if (ao != undefined) { am = ao } } if (am == null) { ah.records = new Array(); ah.cachedrecords = new Array(); ah.originaldata = new Array(); ah.callDownloadComplete(); if (i.isFunction(K.loadComplete)) { K.loadComplete(new Array()) } return } var ak = am; if (am.records) { ak = am.records } if (am.totalrecords != undefined) { W.totalrecords = am.totalrecords } else { if (am.totalRecords != undefined) { W.totalrecords = am.totalRecords } } if (W.datatype === "xml") { ah.loadxml(null, ak, W) } else { if (Q === "text") { ah.loadtext(ak, W) } else { if (Q === "ics") { ah.loadics(ak, W) } else { ah.loadjson(null, ak, W) } } } ah.addForeignValues(W); if (K.uniqueDataFields) { var al = ah.getUniqueRecords(ah.records, K.uniqueDataFields); ah.records = al; ah.cachedrecords = al } if (K.beforeLoadComplete) { var an = K.beforeLoadComplete(ah.records, am); if (an != undefined) { ah.records = an; ah.cachedrecords = an } } ah.loadedData = am; ah.buildHierarchy.call(ah); ah.callDownloadComplete(); if (i.isFunction(K.loadComplete)) { K.loadComplete(am, aj, ap, ah.records) } }, error: function (al, aj, ak) { if (i.isFunction(W.loaderror)) { W.loaderror(al, aj, ak) } if (i.isFunction(K.loadError)) { K.loadError(al, aj, ak) } al = null; ah.callDownloadComplete() }, beforeSend: function (ak, aj) { if (i.isFunction(K.beforeSend)) { K.beforeSend(ak, aj) } if (i.isFunction(W.beforesend)) { W.beforesend(ak, aj) } } }) } } else { ah.buildHierarchy(new Array()); ah.callDownloadComplete(); if (i.isFunction(K.loadComplete)) { if (!ai) { var ai = {} } K.loadComplete(ai) } } break } this.callBindingUpdate(aa) }, buildHierarchy: function (K) { var e = this._source; var P = new Array(); if (!e.datafields) { return } if (e.hierarchy && !e.hierarchy.reservedNames) { e.hierarchy.reservedNames = { leaf: "leaf", parent: "parent", expanded: "expanded", checked: "checked", selected: "selected", level: "level", icon: "icon", data: "data"} } else { if (e.hierarchy) { var O = e.hierarchy.reservedNames; if (!O.leaf) { O.leaf = "leaf" } if (!O.parent) { O.parent = "parent" } if (!O.expanded) { O.expanded = "expanded" } if (!O.checked) { O.checked = "checked" } if (!O.selected) { O.selected = "selected" } if (!O.level) { O.level = "level" } if (!O.data) { O.data = "data" } } } if (!e.hierarchy) { return } var N = this; var O = e.hierarchy.reservedNames; if (e.hierarchy.root) { if (e.dataType == "xml") { var P = this.getRecordsHierarchy("uid", "parentuid", "records", null, K); this.hierarchy = P; return P } else { this.hierarchy = this.records; var R = e.hierarchy.root; for (var L = 0; L < this.records.length; L++) { var M = this.records[L]; if (!M) { continue } var H = function (S) { if (e.hierarchy.record) { S.records = S[R][e.hierarchy.record] } else { var U = R.split(N.mapChar); var T = null; if (U.length > 1) { var W = S; for (var V = 0; V < U.length; V++) { if (W != undefined) { W = W[U[V]] } } T = W } else { T = S[R] } S.records = T } if (S.records == null || (S.records && S.records.length == 0)) { S[O.leaf] = true } }; H(M); M[O.level] = 0; var I = this.getid(e.id, M, L); M.uid = I; M[O.parent] = null; M[O.data] = M; if (M[O.expanded] === undefined) { M[O.expanded] = false } var Q = function (W, U) { if (!U) { W.records = new Array(); return } for (var V = 0; V < U.length; V++) { var S = U[V]; if (!S) { continue } H(S); S[O.level] = W[O.level] + 1; S[O.parent] = W; S[O.data] = S; var T = N.getid(e.id, S, V); if (T == V && e.id == null) { S.uid = W.uid + "_" + T } else { S.uid = T } if (S[O.expanded] === undefined) { S[O.expanded] = false } Q(S, S.records) } }; Q(M, M.records) } } return this.hierarchy } if (e.hierarchy.keyDataField && e.hierarchy.parentDataField) { var P = this.getRecordsHierarchy(e.hierarchy.keyDataField.name, e.hierarchy.parentDataField.name, "records", null, K); this.hierarchy = P; return P } if (e.hierarchy.groupingDataFields) { var J = new Array(); for (var L = 0; L < e.hierarchy.groupingDataFields.length; L++) { J.push(e.hierarchy.groupingDataFields[L].name) } var P = this.getGroupedRecords(J, "records", "label", null, "data", null, "parent", K); this.hierarchy = P; return P } }, addRecord: function (H, e, M, I) { var J = this; var N = function () { return { leaf: "leaf", parent: "parent", expanded: "expanded", checked: "checked", selected: "selected", level: "level", icon: "icon", data: "data"} }; if (H != undefined) { if (M != undefined) { if (this.hierarchy.length > 0) { var K = function (O) { if (O) { for (var P = 0; P < O.length; P++) { var Q = O[P]; if (Q.uid == M) { var R = (J._source && J._source.hierarchy) ? J._source.hierarchy.reservedNames : null; if (R == null) { R = N() } H[R.parent] = Q; H[R.level] = Q[R.level] + 1; if (!Q.records) { Q.records = new Array(); Q[R.leaf] = false } else { Q[R.leaf] = false } if (e == "last") { Q.records.push(H) } else { if (typeof e === "number" && isFinite(e)) { Q.records.splice(e, 0, H) } else { Q.records.splice(0, 0, H) } } return true } if (Q.records) { K(Q.records) } } } }; K(this.hierarchy) } } else { if (this.hierarchy && this.hierarchy.length >= 0 && (this._source.hierarchy || I)) { var L = (J._source && J._source.hierarchy) ? J._source.hierarchy.reservedNames : null; if (L == null) { L = N() } H[L.level] = 0; if (e == "last") { this.hierarchy.push(H) } else { if (typeof e === "number" && isFinite(e)) { this.hierarchy.splice(e, 0, H) } else { this.hierarchy.splice(0, 0, H) } } } else { if (e == "last") { this.records.push(H) } else { if (typeof e === "number" && isFinite(e)) { this.records.splice(e, 0, H) } else { this.records.splice(0, 0, H) } } } return true } } return false }, deleteRecord: function (H) { var J = this; if (this.hierarchy.length > 0) { var K = function (L) { if (L) { for (var O = 0; O < L.length; O++) { var P = L[O]; if (P.uid == H) { L.splice(O, 1); if (J.recordids[H]) { delete J.recordids[H] } var N = function (T) { for (var Q = 0; Q < T.length; Q++) { var S = T[Q].uid; for (var R = 0; R < J.records.length; R++) { var U = J.records[R]; if (U.uid == S) { J.records.splice(R, 1); break } } if (T[Q].records) { N(T[Q].records) } } }; if (P.records) { N(P.records) } for (var M = 0; M < J.records.length; M++) { var P = J.records[M]; if (P.uid == H) { J.records.splice(M, 1); break } } return true } if (P.records) { K(P.records) } } } }; K(this.hierarchy) } else { for (var e = 0; e < this.records.length; e++) { var I = this.records[e]; if (I.uid == H) { this.records.splice(e, 1); return true } } } return false }, addForeignValues: function (H) { var Q = this; var V = H.datafields ? H.datafields.length : 0; for (var N = 0; N < V; N++) { var L = H.datafields[N]; if (L != undefined) { if (L.values != undefined) { if (L.value == undefined) { L.value = L.name } if (L.values.value == undefined) { L.values.value = L.value } var T = new Array(); var K, M; if (Q.pageable && Q.virtualmode) { K = Q.pagenum * Q.pagesize; M = K + Q.pagesize; if (M > Q.totalrecords) { M = Q.totalrecords } } else { if (Q.virtualmode) { K = H.recordstartindex; M = H.recordendindex; if (M > Q.totalrecords) { M = Q.totalrecords } } else { K = 0; M = Q.records.length } } for (var O = K; O < M; O++) { var P = Q.records[O]; var I = L.name; var U = P[L.value]; if (T[U] != undefined) { P[I] = T[U] } else { for (var J = 0; J < L.values.source.length; J++) { var S = L.values.source[J]; var e = S[L.values.value]; if (e == undefined) { e = S.uid } if (e == U) { var R = S[L.values.name]; P[I] = R; T[U] = R; break } } } } } else { if (L.value != undefined) { for (var O = 0; O < Q.records.length; O++) { var P = Q.records[O]; P[L.name] = P[L.value] } } } } } }, abort: function () { if (this.xhr && this.xhr.readyState != 4) { this.xhr.abort(); me.callDownloadComplete() } }, _requestData: function (H, J, e) { var I = this; var K = function (P) { if (P.totalrecords) { J.totalrecords = P.totalrecords; I.totalrecords = P.totalrecords } if (P.records) { I.records = P.records; I.cachedrecords = P.records } I.addForeignValues(J); if (e.uniqueDataFields) { var N = I.getUniqueRecords(I.records, e.uniqueDataFields); I.records = N; I.cachedrecords = N } if (e.beforeLoadComplete) { var O = e.beforeLoadComplete(I.records, data); if (O != undefined) { I.records = O; I.cachedrecords = O } } for (var M = 0; M < I.records.length; M++) { var L = I.records[M]; if (undefined == L) { continue } if (undefined == L.uid) { L.uid = I.getid(J.id, L, M) } } I.buildHierarchy.call(I); if (i.isFunction(e.loadComplete)) { e.loadComplete(P) } I.callDownloadComplete() }; e.loadServerData(H, J, K) }, getUniqueRecords: function (I, L) { if (I && L) { var e = I.length; var Q = L.length; var N = new Array(); var O = new Array(); for (var P = 0; P < e; P++) { var M = I[P]; var J = ""; if (M == undefined) { continue } for (var K = 0; K < Q; K++) { var H = L[K]; J += M[H] + "_" } if (!O[J]) { N[N.length] = M } O[J] = true } } return N }, getAggregatedData: function (S, P, M, H) { var L = M; if (!L) { L = this.records } var Q = {}; var K = new Array(); var J = L.length; if (J == 0) { return } if (J == undefined) { return } for (var O = 0; O < J; O++) { var R = L[O]; for (var N = 0; N < S.length; N++) { var I = S[N]; var U = R[I.name]; if (I.aggregates) { Q[I.name] = Q[I.name] || {}; K[I.name] = K[I.name] || 0; K[I.name]++; var e = function (W) { for (obj in W) { var X = Q[I.name][obj]; if (X == null) { Q[I.name][obj] = 0; X = 0 } if (i.isFunction(W[obj])) { X = W[obj](X, U, I.name, R, H) } Q[I.name][obj] = X } }; var T = parseFloat(U); if (isNaN(T)) { T = false } else { T = true } if (T) { U = parseFloat(U) } if (typeof U === "number" && isFinite(U)) { i.each(I.aggregates, function () { var W = Q[I.name][this]; if (W == null) { W = 0; if (this == "min") { W = 9999999999999 } if (this == "max") { W = -9999999999999 } } if (this == "sum" || this == "avg" || this == "stdev" || this == "stdevp" || this == "var" || this == "varp") { W += parseFloat(U) } else { if (this == "product") { if (O == 0) { W = parseFloat(U) } else { W *= parseFloat(U) } } else { if (this == "min") { W = Math.min(W, parseFloat(U)) } else { if (this == "max") { W = Math.max(W, parseFloat(U)) } else { if (this == "count") { W++ } else { if (typeof (this) == "object") { e(this); return } } } } } } Q[I.name][this] = W }) } else { i.each(I.aggregates, function () { if (this == "min" || this == "max" || this == "count" || this == "product" || this == "sum" || this == "avg" || this == "stdev" || this == "stdevp" || this == "var" || this == "varp") { if (U === null) { return true } var W = Q[I.name][this]; if (W == null) { W = 0 } Q[I.name][this] = W; return true } if (typeof (this) == "object") { e(this) } }) } } } } for (var N = 0; N < S.length; N++) { var I = S[N]; if (!Q[I.name]) { Q[I.name] = {}; i.each(I.aggregates, function (W) { Q[I.name][this] = 0 }) } if (Q[I.name]["avg"] != undefined) { var U = Q[I.name]["avg"]; var V = K[I.name]; if (V === 0 || V == undefined) { Q[I.name]["avg"] = 0 } else { Q[I.name]["avg"] = U / V } } else { if (Q[I.name]["count"] != undefined) { Q[I.name]["count"] = J } } if (Q[I.name]["stdev"] || Q[I.name]["stdevp"] || Q[I.name]["var"] || Q[I.name]["varp"]) { i.each(I.aggregates, function (ac) { if (this == "stdev" || this == "var" || this == "varp" || this == "stdevp") { var ad = Q[I.name][this]; var ab = J; var W = (ad / J); var Y = 0; for (var Z = 0; Z < J; Z++) { var aa = L[Z]; var ae = aa[I.name]; Y += (ae - W) * (ae - W) } var X = (this == "stdevp" || this == "varp") ? ab : ab - 1; if (X == 0) { X = 1 } if (this == "var" || this == "varp") { Q[I.name][this] = Y / X } else { if (this == "stdevp" || this == "stdev") { Q[I.name][this] = Math.sqrt(Y / X) } } } }) } if (I.formatStrings) { i.each(I.aggregates, function (X) { var W = I.formatStrings[X]; if (W) { if (this == "min" || this == "max" || this == "count" || this == "product" || this == "sum" || this == "avg" || this == "stdev" || this == "stdevp" || this == "var" || this == "varp") { var Y = Q[I.name][this]; Q[I.name][this] = i.jqx.dataFormat.formatnumber(Y, W, P) } else { if (typeof this == "object") { for (obj in this) { var Y = Q[I.name][obj]; Q[I.name][obj] = i.jqx.dataFormat.formatnumber(Y, W, P) } } } } }) } } return Q }, bindDownloadComplete: function (H, e) { this._downloadComplete[this._downloadComplete.length] = { id: H, func: e} }, unbindDownloadComplete: function (H) { for (var e = 0; e < this._downloadComplete.length; e++) { if (this._downloadComplete[e].id == H) { this._downloadComplete[e].func = null; this._downloadComplete.splice(e, 1); break } } }, callDownloadComplete: function () { for (var e = 0; e < this._downloadComplete.length; e++) { var H = this._downloadComplete[e]; if (H.func != null) { H.func() } } }, setSource: function (e) { this._source = e }, generatekey: function () { var e = function () { return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1) }; return (e() + e() + "-" + e() + "-" + e() + "-" + e() + "-" + e() + e() + e()) }, getGroupedRecords: function (aj, am, W, ae, ak, ab, ad, an, K) { var ag = 0; var aa = this; if (!K) { K = 0 } var I = new Array(); for (var N = 0; N < aj.length; N++) { I[N] = aa.generatekey() } if (!am) { am = "items" } if (!W) { W = "group" } if (!ak) { ak = "record" } if (!ad) { ad = "parentItem" } if (undefined === ab) { ab = "value" } var S = new Array(); var L = 0; var J = new Array(); var R = aj.length; var al = new Array(); if (!an) { var an = this.records } var P = an.length; var af = function (ao) { var ap = ao; if (ae) { i.each(ae, function () { if (this.name && this.map) { ap[this.map] = ap[this.name] } }) } return ap }; for (var V = 0; V < P; V++) { var ai = af(an[V]); id = ai[aa.uniqueId]; var H = new Array(); var X = 0; for (N = 0; N < R; N++) { var Q = aj[N]; var ac = ai[Q]; if (null == ac) { continue } H[X++] = { value: ac, hash: I[N]} } if (H.length != R) { break } var Y = null; var T = ""; var e = -1; for (var Z = 0; Z < H.length; Z++) { e++; var ah = H[Z].value; var M = H[Z].hash; T = T + "_" + M + "_" + ah; if (J[T] != undefined && J[T] != null) { Y = J[T]; continue } if (Y == null) { Y = { level: 0 }; Y[ad] = null; Y[W] = ah; Y[ak] = ai; if (ai.expanded !== undefined) { Y.expanded = ai.expanded } else { Y.expanded = false } if (ab) { Y[ab] = ai[ab] } Y[am] = new Array(); var O = S.length + K; if (!this._source.id || typeof ai.uid === "number" || isFinite(ai.uid)) { O = "Row" + O } Y.uid = O; S[L++] = Y } else { var U = { level: Y.level + 1 }; U[ad] = Y; U[W] = ah; U[am] = new Array(); U[ak] = ai; if (ai.expanded !== undefined) { U.expanded = ai.expanded } else { U.expanded = false } if (ab) { U[ab] = ai[ab] } U.uid = Y.uid + "_" + Y[am].length; Y[am][Y[am].length] = U; Y = U } J[T] = Y } if (ai) { ai.leaf = true } if (Y != null) { if (this._source.id == null) { if (undefined == ai.uid) { ai.uid = Y.uid + "_" + Y[am].length } else { if (ai.uid.toString().indexOf(Y.uid) == -1) { ai.uid = Y.uid + "_" + ai.uid } } } ai[ad] = Y; ai.level = Y.level + 1; Y[am][Y[am].length] = ai } else { if (undefined == ai.uid) { ai.uid = this.generatekey() } } } return S }, getRecordsHierarchy: function (L, J, aa, U, H) { var e = new Array(); var I = this.records; if (H) { I = H } if (this.records.length == 0) { return null } var Y = aa != null ? aa : "items"; var R = []; var ab = I; var O = ab.length; var P = (this._source && this._source.hierarchy) ? this._source.hierarchy.reservedNames : null; var W = function (ac) { var ad = ac; if (U) { i.each(U, function () { if (this.name && this.map) { ad[this.map] = ad[this.name] } }) } return ad }; for (var X = 0; X < O; X++) { var Z = i.extend({}, ab[X]); var T = Z[J]; var S = Z[L]; R[S] = { parentid: T, item: Z} } for (var X = 0; X < O; X++) { var Z = i.extend({}, ab[X]); var T = Z[J]; var S = Z[L]; if (R[T] != undefined) { var Z = { parentid: T, item: R[S].item }; var Q = R[T].item; if (!Q[Y]) { Q[Y] = [] } var M = Q[Y].length; var K = Z.item; if (!P) { if (K.parent == undefined) { K.parent = Q } } else { if (K[P.parent] == undefined) { K[P.parent] = Q } } var N = W(K); Q[Y][M] = N; R[T].item = Q; R[S] = Z } else { var K = R[S].item; if (!P) { if (K.parent == undefined) { K.parent = null } } else { if (K[P.parent] == undefined) { K[P.parent] = null } } var N = W(K); if (!P) { N.level = 0 } else { N[P.level] = 0 } e[e.length] = N } } if (e.length != 0) { var V = function (af, ac) { for (var ad = 0; ad < ac.length; ad++) { if (!P) { ac[ad].level = af } else { ac[ad][P.level] = af } var ae = ac[ad][Y]; if (ae) { if (ae.length > 0) { V(af + 1, ae) } else { if (!P) { ac[ad].leaf = true } else { ac[ad][P.leaf] = true } } } else { if (!P) { ac[ad].leaf = true } else { ac[ad][P.leaf] = true } } } }; V(0, e) } return e }, bindBindingUpdate: function (H, e) { this._bindingUpdate[this._bindingUpdate.length] = { id: H, func: e} }, unbindBindingUpdate: function (H) { for (var e = 0; e < this._bindingUpdate.length; e++) { if (this._bindingUpdate[e].id == H) { this._bindingUpdate[e].func = null; this._bindingUpdate.splice(e, 1); break } } }, callBindingUpdate: function (e) { for (var I = 0; I < this._bindingUpdate.length; I++) { var H = this._bindingUpdate[I]; if (H.func != null) { H.func(e) } } }, getid: function (N, H, K) { if (N != null && N.name != undefined) { if (N.name) { var e = i(H).attr(N.name); if (e != null && e.toString().length > 0) { return e } else { if (N.map) { try { var e = i(H).attr(N.map); if (e != null && e.toString().length > 0) { return e } else { if (i(N.map, H).length > 0) { return i(N.map, H).text() } else { if (i(N.name, H).length > 0) { return i(N.name, H).text() } } } } catch (J) { return K } } } return } } if (i(N, H).length > 0) { return i(N, H).text() } if (N) { if (N.toString().length > 0) { var e = i(H).attr(N); if (e != null && e.toString().length > 0) { return i.trim(e).split(" ").join("").replace(/([ #;?%&,.+*~\':"!^$[\]()=>|\/@])/g, "") } else { var I = N.split(this.mapChar); if (I.length > 1) { var M = H; for (var L = 0; L < I.length; L++) { if (M != undefined) { M = M[I[L]] } } if (M != undefined) { return M } } else { if (H[N] != undefined) { return H[N] } } } } } return K }, loadjson: function (ae, af, R) { if (typeof (ae) == "string") { ae = i.parseJSON(ae) } if (R.root == undefined) { R.root = "" } if (R.record == undefined) { R.record = "" } var ae = ae || af; if (!ae) { ae = [] } var ad = this; if (R.root != "") { var K = R.root.split(ad.mapChar); if (K.length > 1) { var aa = ae; for (var Q = 0; Q < K.length; Q++) { if (aa != undefined) { aa = aa[K[Q]] } } ae = aa } else { if (ae[R.root] !== undefined) { ae = ae[R.root] } else { if (ae[0] && ae[0][R.root] !== undefined) { ae = ae[0][R.root] } else { i.each(ae, function (ah) { var ag = this; if (this == R.root) { ae = this; return false } else { if (this[R.root] != undefined) { ae = this[R.root] } } }) } } if (!ae) { var K = R.root.split(ad.mapChar); if (K.length > 0) { var aa = ae; for (var Q = 0; Q < K.length; Q++) { if (aa != undefined) { aa = aa[K[Q]] } } ae = aa } } } } else { if (!ae.length) { for (obj in ae) { if (i.isArray(ae[obj])) { ae = ae[obj]; break } } } } if (ae != null && ae.length == undefined) { ae = i.makeArray(ae) } if (ae == null || ae == undefined || ae == "undefined" || ae.length == undefined) { throw new Error("jqxDataAdapter: JSON Parse error! Invalid JSON. Please, check your JSON or your jqxDataAdapter initialization!"); return } if (ae.length == 0) { this.totalrecords = 0; return } var J = ae.length; this.totalrecords = this.virtualmode ? (R.totalrecords || J) : J; this.records = new Array(); this.originaldata = new Array(); var W = this.records; var T = !this.pageable ? R.recordstartindex : this.pagesize * this.pagenum; this.recordids = new Array(); if (R.loadallrecords) { T = 0; J = this.totalrecords } var P = 0; if (this.virtualmode) { T = !this.pageable ? R.recordstartindex : this.pagesize * this.pagenum; P = T; T = 0; J = this.totalrecords } var Y = R.datafields ? R.datafields.length : 0; if (Y == 0) { var e = ae[0]; var ab = new Array(); for (obj in e) { var H = obj; ab[ab.length] = { name: H} } R.datafields = ab; R.generatedfields = R.datafields; Y = ab.length } var M = T; for (var V = T; V < J; V++) { var I = ae[V]; if (I == undefined) { break } if (R.record && R.record != "") { I = I[R.record]; if (I == undefined) { continue } } var ac = this.getid(R.id, I, V); if (typeof (ac) === "object") { ac = V } if (!this.recordids[ac]) { this.recordids[ac] = I; var L = {}; for (var U = 0; U < Y; U++) { var N = R.datafields[U]; var S = ""; if (undefined == N || N == null) { continue } if (N.map) { if (i.isFunction(N.map)) { S = N.map(I) } else { var K = N.map.split(ad.mapChar); if (K.length > 0) { var Z = I; for (var Q = 0; Q < K.length; Q++) { if (Z != undefined) { Z = Z[K[Q]] } } S = Z } else { S = I[N.map] } } if (S != undefined && S != null) { S = this.getvaluebytype(S, N) } else { if (S == undefined && S != null) { S = "" } } } if (S == "" && !N.map) { S = I[N.name]; if (S == undefined && S != null) { S = "" } if (N.value != undefined) { if (S != undefined) { var X = S[N.value]; if (X != undefined) { S = X } } } } S = this.getvaluebytype(S, N); if (N.displayname != undefined) { L[N.displayname] = S } else { L[N.name] = S } if (N.type === "array") { var O = function (aj) { if (!aj) { return } for (var ap = 0; ap < aj.length; ap++) { var am = aj[ap]; if (!am) { continue } for (var an = 0; an < Y; an++) { var ai = R.datafields[an]; var ao = ""; if (undefined == ai || ai == null) { continue } if (ai.map) { if (i.isFunction(ai.map)) { ao = ai.map(am) } else { var ag = ai.map.split(ad.mapChar); if (ag.length > 0) { var al = am; for (var ah = 0; ah < ag.length; ah++) { if (al != undefined) { al = al[ag[ah]] } } ao = al } else { ao = am[ai.map] } } if (ao != undefined && ao != null) { ao = this.getvaluebytype(ao, ai) } else { if (ao == undefined && ao != null) { ao = "" } } } if (ao == "" && !ai.map) { ao = am[ai.name]; if (ao == undefined && ao != null) { ao = "" } if (ai.value != undefined) { if (ao != undefined) { var ak = ao[ai.value]; if (ak != undefined) { ao = ak } } } } ao = this.getvaluebytype(ao, ai); if (ai.displayname != undefined) { am[ai.displayname] = ao } else { am[ai.name] = ao } if (ai.type === "array") { O.call(this, ao) } } } }; O.call(this, S) } } if (R.recordendindex <= 0 || T < R.recordendindex) { W[P + M] = i.extend({}, L); W[P + M].uid = ac; this.originaldata[P + M] = i.extend({}, W[V]); M++ } } } this.records = W; this.cachedrecords = this.records }, loadxml: function (K, ai, U) { if (typeof (K) == "string") { K = ai = i(i.parseXML(K)); K = null } if (U.root == undefined) { U.root = "" } if (U.record == undefined) { U.record = "" } var K; if (i.jqx.browser.msie && ai) { if (ai.xml != undefined) { K = i(U.root + " " + U.record, i.parseXML(ai.xml)) } else { K = K || i(U.root + " " + U.record, ai) } } else { K = K || i(U.root + " " + U.record, ai) } if (!K) { K = [] } var J = K.length; if (K.length == 0) { return } this.totalrecords = this.virtualmode ? (U.totalrecords || J) : J; this.records = new Array(); this.originaldata = new Array(); var aa = this.records; var X = !this.pageable ? U.recordstartindex : this.pagesize * this.pagenum; this.recordids = new Array(); if (U.loadallrecords) { X = 0; J = this.totalrecords } var S = 0; if (this.virtualmode) { X = !this.pageable ? U.recordstartindex : this.pagesize * this.pagenum; S = X; X = 0; J = this.totalrecords } var ac = U.datafields ? U.datafields.length : 0; if (ac == 0) { var e = K[0]; var af = new Array(); for (obj in e) { var H = obj; af[af.length] = { name: H} } U.datafields = af; U.generatedfields = U.datafields; ac = af.length } var T = X; var ae = false; for (var Z = X; Z < J; Z++) { var I = K[Z]; if (I == undefined) { break } var ah = this.getid(U.id, I, Z); if (!this.recordids[ah]) { this.recordids[ah] = I; var L = {}; var P = false; if (U.hierarchy && U.hierarchy.root) { P = true } for (var Y = 0; Y < ac; Y++) { var Q = U.datafields[Y]; var W = ""; if (undefined == Q || Q == null) { continue } if (Q.map) { if (i.isFunction(Q.map)) { W = Q.map(I) } else { var M = Q.map.indexOf("["); if (M < 0) { W = i(Q.map, I); if (W.length == 1) { W = W.text() } else { ae = true; var ag = new Array(); for (var ab = 0; ab < W.length; ab++) { ag.push(i(W[ab]).text()) } W = ag; if (P && ag.length > 0) { W = ag[0] } } } else { var ad = Q.map.substring(0, M - 1); var O = Q.map.indexOf("]"); var R = Q.map.substring(M + 1, O); W = i(ad, I).attr(R); if (W == undefined) { W = i(I).attr(R) } if (W == undefined) { W = "" } } if (W == "") { W = i(I).attr(Q.map); if (W == undefined) { W = "" } } } } if (W == "") { W = i(Q.name, I); if (W.length == 1) { W = W.text() } else { var ag = new Array(); for (var ab = 0; ab < W.length; ab++) { ag.push(i(W[ab]).text()) } W = ag; if (P && ag.length > 0) { W = ag[0] } } if (W == "") { W = i(I).attr(Q.name); if (W == undefined) { W = "" } } if (W == "") { if (I.nodeName && I.nodeName == Q.name && I.firstChild) { W = i(I.firstChild).text() } } } var V = W; W = this.getvaluebytype(W, Q); if (Q.displayname != undefined) { L[Q.displayname] = W } else { L[Q.name] = W } } if (U.recordendindex <= 0 || X < U.recordendindex) { aa[S + T] = i.extend({}, L); aa[S + T].uid = ah; this.originaldata[S + T] = i.extend({}, aa[Z]); T++ } } } if (U.hierarchy && U.hierarchy.root) { for (var Z = X; Z < J; Z++) { var I = K[Z]; var N = aa[Z]; if (i(I).parent().length > 0) { var ah = this.getid(U.id, i(I).parents(U.hierarchy.record + ":first")); N.parentuid = ah } else { N.parentuid = null } } } this.records = aa; this.cachedrecords = this.records }, loadics: function (N, H) { if (N == null) { return } var S = H.rowDelimiter || this.rowDelimiter || "\n"; var R = N.split(S); var K = R.length; var Q = N.split("\r"); if (K == 1 && Q.length > 1) { R = Q; K = R.length } this.records = new Array(); this.originaldata = new Array(); var L = this.records; this.recordids = new Array(); var I = 0; var P = function (V) { var T = /^(\d{4})(\d{2})(\d{2})(T(\d{2})(\d{2})(\d{2})Z)?$/; var U = T.exec(V); if (!U) { throw new Error("Invalid UNTIL value: " + V) } return new Date(Date.UTC(U[1], U[2] - 1, U[3], U[5] || 0, U[6] || 0, U[7] || 0)) }; for (var M = 0; M < K; M++) { var O = R[M]; if (O == "BEGIN:VEVENT") { var e = {}; continue } if (O.indexOf("SUMMARY") >= 0) { e.SUMMARY = O.substring(O.indexOf("SUMMARY") + 8); continue } if (O.indexOf("LOCATION") >= 0) { e.LOCATION = O.substring(O.indexOf("LOCATION") + 9); continue } if (O.indexOf("DESCRIPTION") >= 0) { e.DESCRIPTION = O.substring(O.indexOf("DESCRIPTION") + 12); continue } if (O.indexOf("RRULE") >= 0) { e.RRULE = O.substring(O.indexOf("RRULE") + 6); continue } if (O.indexOf("EXDATE") >= 0) { var J = O.substring(O.indexOf("EXDATE") + 7); e.EXDATE = J; continue } if (O.indexOf("DTEND") >= 0) { e.DTEND = P(O.substring(O.indexOf("DTEND") + 6)); continue } if (O.indexOf("DTSTART") >= 0) { e.DTSTART = P(O.substring(O.indexOf("DTSTART") + 8)); continue } if (O.indexOf("UID") >= 0) { e.uid = e.UID = O.substring(O.indexOf("UID") + 4); continue } if (O.indexOf("STATUS") >= 0) { e.STATUS = O.substring(O.indexOf("STATUS") + 7); continue } if (O == "END:VEVENT") { L.push(e); continue } } this.records = L; this.cachedrecords = this.records }, loadtext: function (Y, P) { if (Y == null) { return } var e = P.rowDelimiter || this.rowDelimiter || "\n"; var L = Y.split(e); var J = L.length; var X = Y.split("\r"); if (J == 1 && X.length > 1) { L = X; J = L.length } this.totalrecords = this.virtualmode ? (P.totalrecords || J) : J; this.records = new Array(); this.originaldata = new Array(); var U = this.records; var R = !this.pageable ? P.recordstartindex : this.pagesize * this.pagenum; this.recordids = new Array(); if (P.loadallrecords) { R = 0; J = this.totalrecords } var N = 0; if (this.virtualmode) { R = !this.pageable ? P.recordstartindex : this.pagesize * this.pagenum; N = R; R = 0; J = this.totalrecords } var V = P.datafields.length; var O = P.columnDelimiter || this.columnDelimiter; if (!O) { O = (P.datatype === "tab" || P.datatype === "tsv") ? "\t" : "," } for (var T = R; T < J; T++) { var I = L[T]; var W = null; if (!this.recordids[W]) { if (P.id == null) { W = T; this.recordids[W] = I } var K = {}; var H = L[T].split(O); for (var S = 0; S < V; S++) { if (S >= H.length) { continue } var M = P.datafields[S]; var Q = H[S]; if (M.map && i.isFunction(M.map)) { Q = M.map(I) } if (M.type) { Q = this.getvaluebytype(Q, M) } var Z = M.map || M.name || S.toString(); K[Z] = Q; if (P.id != null) { if (P.id === M.name) { W = Q; this.recordids[W] = I } } } if (W == null) { W = T } U[N + T] = i.extend({}, K); U[N + T].uid = W; this.originaldata[N + T] = i.extend({}, U[T]) } } this.records = U; this.cachedrecords = this.records }, getvaluebytype: function (L, H) { var J = L; if (L == null) { return L } if (i.isArray(L) && H.type != "array") { for (var I = 0; I < L.length; I++) { L[I] = this.getvaluebytype(L[I], H) } return L } if (H.type == "date") { if (L == "NaN") { L = "" } else { var K = new Date(L); if (typeof L == "string") { if (H.format) { var e = i.jqx.dataFormat.parsedate(L, H.format); if (e != null) { K = e } } } if (K.toString() == "NaN" || K.toString() == "Invalid Date") { if (i.jqx.dataFormat) { L = i.jqx.dataFormat.tryparsedate(L) } else { L = K } } else { L = K } if (L == null) { L = J } } } else { if (H.type == "float" || H.type == "number" || H.type == "decimal") { if (L == "NaN") { L = "" } else { var L = parseFloat(L); if (isNaN(L)) { L = J } } } else { if (H.type == "int" || H.type == "integer") { var L = parseInt(L); if (isNaN(L)) { L = J } } else { if (H.type == "bool" || H.type == "boolean") { if (L != null) { if (L.toLowerCase != undefined) { if (L.toLowerCase() == "false") { L = false } else { if (L.toLowerCase() == "true") { L = true } } } } if (L == 1) { L = true } else { if (L == 0 && L !== "") { L = false } else { L = "" } } } } } } return L } }; i.jqx.dataFormat = {}; i.extend(i.jqx.dataFormat, { regexTrim: /^\s+|\s+$/g, regexInfinity: /^[+-]?infinity$/i, regexHex: /^0x[a-f0-9]+$/i, regexParseFloat: /^[+-]?\d*\.?\d*(e[+-]?\d+)?$/, toString: Object.prototype.toString, isBoolean: function (e) { return typeof e === "boolean" }, isObject: function (e) { return (e && (typeof e === "object" || i.isFunction(e))) || false }, isDate: function (e) { return e instanceof Date }, arrayIndexOf: function (J, I) { if (J.indexOf) { return J.indexOf(I) } for (var e = 0, H = J.length; e < H; e++) { if (J[e] === I) { return e } } return -1 }, isString: function (e) { return typeof e === "string" }, isNumber: function (e) { return typeof e === "number" && isFinite(e) }, isNull: function (e) { return e === null }, isUndefined: function (e) { return typeof e === "undefined" }, isValue: function (e) { return (this.isObject(e) || this.isString(e) || this.isNumber(e) || this.isBoolean(e)) }, isEmpty: function (e) { if (!this.isString(e) && this.isValue(e)) { return false } else { if (!this.isValue(e)) { return true } } e = i.trim(e).replace(/\&nbsp\;/ig, "").replace(/\&#160\;/ig, ""); return e === "" }, startsWith: function (H, e) { return H.indexOf(e) === 0 }, endsWith: function (H, e) { return H.substr(H.length - e.length) === e }, trim: function (e) { return (e + "").replace(this.regexTrim, "") }, isArray: function (e) { return this.toString.call(e) === "[object Array]" }, defaultcalendar: function () { var e = { "/": "/", ":": ":", firstDay: 0, days: { names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"] }, months: { names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""] }, AM: ["AM", "am", "AM"], PM: ["PM", "pm", "PM"], eras: [{ name: "A.D.", start: null, offset: 0}], twoDigitYearMax: 2029, patterns: { d: "M/d/yyyy", D: "dddd, MMMM dd, yyyy", t: "h:mm tt", T: "h:mm:ss tt", f: "dddd, MMMM dd, yyyy h:mm tt", F: "dddd, MMMM dd, yyyy h:mm:ss tt", M: "MMMM dd", Y: "yyyy MMMM", S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss", ISO: "yyyy-MM-dd hh:mm:ss", ISO2: "yyyy-MM-dd HH:mm:ss", d1: "dd.MM.yyyy", d2: "dd-MM-yyyy", d3: "MM-dd-yyyy", zone1: "yyyy-MM-ddTHH:mm:ss-HH:mm", zone2: "yyyy-MM-ddTHH:mm:ss+HH:mm", custom: "yyyy-MM-ddTHH:mm:ss.fff", custom2: "yyyy-MM-dd HH:mm:ss.fff" }, percentsymbol: "%", currencysymbol: "$", currencysymbolposition: "before", decimalseparator: ".", thousandsseparator: "," }; return e }, expandFormat: function (K, J) { J = J || "F"; var I, H = K.patterns, e = J.length; if (e === 1) { I = H[J]; if (!I) { throw "Invalid date format string '" + J + "'." } J = I } else { if (e === 2 && J.charAt(0) === "%") { J = J.charAt(1) } } return J }, getEra: function (I, H) { if (!H) { return 0 } if (typeof I === "string") { return 0 } var L, K = I.getTime(); for (var J = 0, e = H.length; J < e; J++) { L = H[J].start; if (L === null || K >= L) { return J } } return 0 }, toUpper: function (e) { return e.split("\u00A0").join(" ").toUpperCase() }, toUpperArray: function (e) { var J = []; for (var I = 0, H = e.length; I < H; I++) { J[I] = this.toUpper(e[I]) } return J }, getEraYear: function (H, J, e, K) { var I = H.getFullYear(); if (!K && J.eras) { I -= J.eras[e].offset } return I }, toUpper: function (e) { if (e) { return e.toUpperCase() } return "" }, getDayIndex: function (K, J, H) { var e, L = K.days, I = K._upperDays; if (!I) { K._upperDays = I = [this.toUpperArray(L.names), this.toUpperArray(L.namesAbbr), this.toUpperArray(L.namesShort)] } J = J.toUpperCase(); if (H) { e = this.arrayIndexOf(I[1], J); if (e === -1) { e = this.arrayIndexOf(I[2], J) } } else { e = this.arrayIndexOf(I[0], J) } return e }, getMonthIndex: function (N, M, I) { var e = N.months, H = N.monthsGenitive || N.months, K = N._upperMonths, L = N._upperMonthsGen; if (!K) { N._upperMonths = K = [this.toUpperArray(e.names), this.toUpperArray(e.namesAbbr)]; N._upperMonthsGen = L = [this.toUpperArray(H.names), this.toUpperArray(H.namesAbbr)] } M = this.toUpper(M); var J = this.arrayIndexOf(I ? K[1] : K[0], M); if (J < 0) { J = this.arrayIndexOf(I ? L[1] : L[0], M) } return J }, appendPreOrPostMatch: function (J, e) { var I = 0, L = false; for (var K = 0, H = J.length; K < H; K++) { var M = J.charAt(K); switch (M) { case "'": if (L) { e.push("'") } else { I++ } L = false; break; case "\\": if (L) { e.push("\\") } L = !L; break; default: e.push(M); L = false; break } } return I }, getTokenRegExp: function () { return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g }, formatlink: function (e, I) { var H = ""; if (I && I.target) { H = "target=" + I.target } if (H != "") { return "<a " + H + ' href="' + e + '">' + e + "</a>" } return '<a href="' + e + '">' + e + "</a>" }, formatemail: function (e) { return '<a href="mailto:' + e + '">' + e + "</a>" }, formatNumber: function (e, I, H) { return this.formatnumber(e, I, H) }, formatnumber: function (T, S, O) { if (O == undefined || O == null || O == "") { O = this.defaultcalendar() } if (S === "" || S === null) { return T } if (!this.isNumber(T)) { T *= 1 } var P; if (S.length > 1) { P = parseInt(S.slice(1), 10) } var V = {}; var Q = S.charAt(0).toUpperCase(); V.thousandsSeparator = O.thousandsseparator; V.decimalSeparator = O.decimalseparator; switch (Q) { case "D": case "d": case "F": case "f": V.decimalPlaces = P; break; case "N": case "n": V.decimalPlaces = 0; break; case "C": case "c": V.decimalPlaces = P; if (O.currencysymbolposition == "before") { V.prefix = O.currencysymbol } else { V.suffix = O.currencysymbol } break; case "P": case "p": V.suffix = O.percentsymbol; V.decimalPlaces = P; break; default: throw "Bad number format specifier: " + Q } if (this.isNumber(T)) { var K = (T < 0); var I = T + ""; var R = (V.decimalSeparator) ? V.decimalSeparator : "."; var e; if (this.isNumber(V.decimalPlaces)) { var L = V.decimalPlaces; var N = Math.pow(10, L); I = (T * N).toFixed(0) / N + ""; e = I.lastIndexOf("."); if (L > 0) { if (e < 0) { I += R; e = I.length - 1 } else { if (R !== ".") { I = I.replace(".", R) } } while ((I.length - 1 - e) < L) { I += "0" } } } else { var I = T + ""; e = I.lastIndexOf("."); if (e > 0 && L == undefined) { if (R !== ".") { I = I.replace(".", R) } } } if (V.thousandsSeparator) { var U = V.thousandsSeparator; e = I.lastIndexOf(R); e = (e > -1) ? e : I.length; var J = I.substring(e); var H = -1; for (var M = e; M > 0; M--) { H++; if ((H % 3 === 0) && (M !== e) && (!K || (M > 1))) { J = U + J } J = I.charAt(M - 1) + J } I = J } I = (V.prefix) ? V.prefix + I : I; I = (V.suffix) ? I + V.suffix : I; return I } else { return T } }, tryparsedate: function (ai, aj) { if (aj == undefined || aj == null) { aj = this.defaultcalendar() } var O = this; if (ai == "") { return null } if (ai != null && !ai.substring) { ai = ai.toString() } if (ai != null && ai.substring(0, 6) == "/Date(") { var ar = /^\/Date\((-?\d+)(\+|-)?(\d+)?\)\/$/; var ap = new Date(+ai.replace(/\/Date\((\d+)\)\//, "$1")); if (ap == "Invalid Date") { var al = ai.match(/^\/Date\((\d+)([-+]\d\d)(\d\d)\)\/$/); var ap = null; if (al) { ap = new Date(1 * al[1] + 3600000 * al[2] + 60000 * al[3]) } } if (ap == null || ap == "Invalid Date" || isNaN(ap)) { var P = ar.exec(ai); if (P) { var R = new Date(parseInt(P[1])); if (P[2]) { var X = parseInt(P[3]); if (P[2] === "-") { X = -X } var T = R.getUTCMinutes(); R.setUTCMinutes(T - X) } if (!isNaN(R.valueOf())) { return R } } } return ap } patterns = aj.patterns; for (prop in patterns) { ap = O.parsedate(ai, patterns[prop], aj); if (ap) { if (prop == "ISO") { var aa = O.parsedate(ai, patterns.ISO2, aj); if (aa) { return aa } } return ap } } if (ai != null) { var aa = null; var L = [":", "/", "-"]; var an = true; for (var N = 0; N < L.length; N++) { if (ai.indexOf(L[N]) != -1) { an = false } } if (an) { var at = new Number(ai); if (!isNaN(at)) { return new Date(at) } } } if (i.type(ai) === "string") { var ae = O; ai = ae.trim(ai); var ak = [":", "/", "-", " ", ","]; var M = function (ax, av, aw) { return aw.replace(new RegExp(ax, "g"), av) }; ai = M(", ", ",", ai); var I = ""; var W = ai; if (ai.indexOf(":") >= 0) { I = ai.substring(ai.indexOf(":") - 2); I = ae.trim(I); W = ai.substring(0, ai.indexOf(":") - 2) } else { if (ai.toUpperCase().indexOf("AM") >= 0) { I = ai.substring(ai.toUpperCase().indexOf("AM") - 2); I = ae.trim(I); W = ai.substring(0, ai.toUpperCase().indexOf("AM") - 2) } else { if (ai.toUpperCase().indexOf("PM") >= 0) { I = ai.substring(ai.toUpperCase().indexOf("PM") - 2); I = ae.trim(I); W = ai.substring(0, ai.toUpperCase().indexOf("PM") - 2) } } } var e = new Date(); var ag = false; if (W) { for (var ao = 0; ao < ak.length; ao++) { if (W.indexOf(ak[ao]) >= 0) { L = W.split(ak[ao]); break } } var H = new Array(); var U = new Array(); var ac = new Array(); var Q = null; var au = null; for (var ao = 0; ao < L.length; ao++) { var N = L[ao]; var ab = ae.parsedate(N, "d", aj) || ae.parsedate(N, "dd", aj) || ae.parsedate(N, "ddd", aj) || ae.parsedate(N, "dddd", aj); if (ab) { if (N.length <= 2) { Q = ao; H.push(ab.getDate()); break } } } for (var ao = 0; ao < L.length; ao++) { var N = L[ao]; var S = ae.parsedate(N, "M", aj) || ae.parsedate(N, "MM", aj) || ae.parsedate(N, "MMM", aj) || ae.parsedate(N, "MMMM", aj); if (S) { if (Q != undefined && Q == ao) { continue } U.push(S.getMonth()); if (N.length > 2) { au = ao; break } } } for (var ao = 0; ao < L.length; ao++) { var N = L[ao]; var ad = ae.parsedate(N, "yyyy", aj); if (ad) { if (Q != undefined && Q == ao) { continue } if (au != undefined && au == ao) { continue } ac.push(ad.getFullYear()) } } var am = new Array(); for (var aq = 0; aq < H.length; aq++) { for (var al = 0; al < U.length; al++) { for (var ah = 0; ah < ac.length; ah++) { var R = new Date(ac[ah], U[al], H[aq]); if (ac[ah] < 1970) { R.setFullYear(ac[ah]) } if (R.getTime() != NaN) { am.push(R) } } } } if (am.length > 0) { e = am[0]; ag = true } } if (I) { var af = I.indexOf(":") >= 0 ? I.split(":") : I; var K = ae.parsedate(I, "h:mm tt", aj) || ae.parsedate(I, "h:mm:ss tt", aj) || ae.parsedate(I, "HH:mm:ss.fff", aj) || ae.parsedate(I, "HH:mm:ss.ff", aj) || ae.parsedate(I, "HH:mm:ss.tttt", aj) || ae.parsedate(I, "HH:mm:ss", aj) || ae.parsedate(I, "HH:mm", aj) || ae.parsedate(I, "HH", aj); var V = 0, J = 0, Y = 0, Z = 0; if (K && K.getTime() != NaN) { V = K.getHours(); J = K.getMinutes(); Y = K.getSeconds(); Z = K.getMilliseconds() } else { if (af.length == 1) { V = parseInt(af[0]) } if (af.length == 2) { V = parseInt(af[0]); J = parseInt(af[1]) } if (af.length == 3) { V = parseInt(af[0]); J = parseInt(af[1]); if (af[2].indexOf(".") >= 0) { Y = parseInt(af[2].toString().split(".")[0]); Z = parseInt(af[2].toString().split(".")[1]) } else { Y = parseInt(af[2]) } } if (af.length == 4) { V = parseInt(af[0]); J = parseInt(af[1]); Y = parseInt(af[2]); Z = parseInt(af[3]) } } if (e && !isNaN(V) && !isNaN(J) && !isNaN(Y) && !isNaN(Z)) { e.setHours(V, J, Y, Z); ag = true } } if (ag) { return e } } return null }, getparseregexp: function (e, R) { var T = e._parseRegExp; if (!T) { e._parseRegExp = T = {} } else { var K = T[R]; if (K) { return K } } var Q = this.expandFormat(e, R).replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1"), O = ["^"], H = [], N = 0, J = 0, W = this.getTokenRegExp(), L; while ((L = W.exec(Q)) !== null) { var V = Q.slice(N, L.index); N = W.lastIndex; J += this.appendPreOrPostMatch(V, O); if (J % 2) { O.push(L[0]); continue } var I = L[0], M = I.length, S; switch (I) { case "dddd": case "ddd": case "MMMM": case "MMM": case "gg": case "g": S = "(\\D+)"; break; case "tt": case "t": S = "(\\D*)"; break; case "yyyy": case "fff": case "ff": case "f": S = "(\\d{" + M + "})"; break; case "dd": case "d": case "MM": case "M": case "yy": case "y": case "HH": case "H": case "hh": case "h": case "mm": case "m": case "ss": case "s": S = "(\\d\\d?)"; break; case "zzz": S = "([+-]?\\d\\d?:\\d{2})"; break; case "zz": case "z": S = "([+-]?\\d\\d?)"; break; case "/": S = "(\\" + e["/"] + ")"; break; default: throw "Invalid date format pattern '" + I + "'."; break } if (S) { O.push(S) } H.push(L[0]) } this.appendPreOrPostMatch(Q.slice(N), O); O.push("$"); var U = O.join("").replace(/\s+/g, "\\s+"), P = { regExp: U, groups: H }; return T[R] = P }, outOfRange: function (I, e, H) { return I < e || I > H }, expandYear: function (L, J) { var H = new Date(), e = this.getEra(H); if (J < 100) { var I = L.twoDigitYearMax; I = typeof I === "string" ? new Date().getFullYear() % 100 + parseInt(I, 10) : I; var K = this.getEraYear(H, L, e); J += K - (K % 100); if (J > I) { J -= 100 } } return J }, parsedate: function (ab, ai, W) { if (W == undefined || W == null) { W = this.defaultcalendar() } ab = this.trim(ab); var T = W, an = this.getparseregexp(T, ai), N = new RegExp(an.regExp).exec(ab); if (N === null) { return null } var aj = an.groups, Z = null, R = null, am = null, al = null, S = null, L = 0, ae, ad = 0, ak = 0, e = 0, I = null, U = false; for (var af = 0, ah = aj.length; af < ah; af++) { var H = N[af + 1]; if (H) { var aa = aj[af], K = aa.length, M = parseInt(H, 10); switch (aa) { case "dd": case "d": al = M; if (this.outOfRange(al, 1, 31)) { return null } break; case "MMM": case "MMMM": am = this.getMonthIndex(T, H, K === 3); if (this.outOfRange(am, 0, 11)) { return null } break; case "M": case "MM": am = M - 1; if (this.outOfRange(am, 0, 11)) { return null } break; case "y": case "yy": case "yyyy": R = K < 4 ? this.expandYear(T, M) : M; if (this.outOfRange(R, 0, 9999)) { return null } break; case "h": case "hh": L = M; if (L === 12) { L = 0 } if (this.outOfRange(L, 0, 11)) { return null } break; case "H": case "HH": L = M; if (this.outOfRange(L, 0, 23)) { return null } break; case "m": case "mm": ad = M; if (this.outOfRange(ad, 0, 59)) { return null } break; case "s": case "ss": ak = M; if (this.outOfRange(ak, 0, 59)) { return null } break; case "tt": case "t": U = T.PM && (H === T.PM[0] || H === T.PM[1] || H === T.PM[2]); if (!U && (!T.AM || (H !== T.AM[0] && H !== T.AM[1] && H !== T.AM[2]))) { return null } break; case "f": case "ff": case "fff": e = M * Math.pow(10, 3 - K); if (this.outOfRange(e, 0, 999)) { return null } break; case "ddd": case "dddd": S = this.getDayIndex(T, H, K === 3); if (this.outOfRange(S, 0, 6)) { return null } break; case "zzz": var J = H.split(/:/); if (J.length !== 2) { return null } ae = parseInt(J[0], 10); if (this.outOfRange(ae, -12, 13)) { return null } var P = parseInt(J[1], 10); if (this.outOfRange(P, 0, 59)) { return null } I = (ae * 60) + (this.startsWith(H, "-") ? -P : P); break; case "z": case "zz": ae = M; if (this.outOfRange(ae, -12, 13)) { return null } I = ae * 60; break; case "g": case "gg": var V = H; if (!V || !T.eras) { return null } V = trim(V.toLowerCase()); for (var ag = 0, ac = T.eras.length; ag < ac; ag++) { if (V === T.eras[ag].name.toLowerCase()) { Z = ag; break } } if (Z === null) { return null } break } } } var Q = new Date(), Y, O = T.convert; Y = Q.getFullYear(); if (R === null) { R = Y } else { if (T.eras) { R += T.eras[(Z || 0)].offset } } if (am === null) { am = 0 } if (al === null) { al = 1 } if (O) { Q = O.toGregorian(R, am, al); if (Q === null) { return null } } else { Q.setFullYear(R, am, al); if (Q.getDate() !== al) { return null } if (S !== null && Q.getDay() !== S) { return null } } if (U && L < 12) { L += 12 } Q.setHours(L, ad, ak, e); if (I !== null) { var X = Q.getMinutes() - (I + Q.getTimezoneOffset()); Q.setHours(Q.getHours() + parseInt(X / 60, 10), X % 60) } return Q }, cleardatescache: function () { this.datescache = new Array() }, formatDate: function (e, I, H) { return this.formatdate(e, I, H) }, formatdate: function (Z, ad, U) { if (U == undefined || U == null) { U = this.defaultcalendar() } if (typeof Z === "string") { return Z } var J = Z.toString() + "_" + ad; if (this.datescache && this.datescache[J]) { return this.datescache[J] } if (!ad || !ad.length || ad === "i") { var af; af = this.formatDate(Z, U.patterns.F, U); return af } var aa = U.eras, H = ad === "s"; ad = this.expandFormat(U, ad); af = []; var M, ab = ["0", "00", "000"], Q, R, e = /([^d]|^)(d|dd)([^d]|$)/g, ae = 0, W = this.getTokenRegExp(), I; function O(ag, aj) { var ai, ah = ag + ""; if (aj > 1 && ah.length < aj) { ai = (ab[aj - 2] + ah); return ai.substr(ai.length - aj, aj) } else { ai = ah } return ai } function ac() { if (Q || R) { return Q } Q = e.test(ad); R = true; return Q } function K(ah, ag) { if (I) { return I[ag] } if (ah.getMonth != undefined) { switch (ag) { case 0: return ah.getFullYear(); case 1: return ah.getMonth(); case 2: return ah.getDate() } } } for (; ; ) { var N = W.lastIndex, V = W.exec(ad); var S = ad.slice(N, V ? V.index : ad.length); ae += this.appendPreOrPostMatch(S, af); if (!V) { break } if (ae % 2) { af.push(V[0]); continue } var X = V[0], L = X.length; switch (X) { case "ddd": case "dddd": var T = (L === 3) ? U.days.namesAbbr : U.days.names; af.push(T[Z.getDay()]); break; case "d": case "dd": Q = true; af.push(O(K(Z, 2), L)); break; case "MMM": case "MMMM": var Y = K(Z, 1); af.push(U.months[L === 3 ? "namesAbbr" : "names"][Y]); break; case "M": case "MM": af.push(O(K(Z, 1) + 1, L)); break; case "y": case "yy": case "yyyy": Y = this.getEraYear(Z, U, this.getEra(Z, aa), H); if (L < 4) { Y = Y % 100 } af.push(O(Y, L)); break; case "h": case "hh": M = Z.getHours() % 12; if (M === 0) { M = 12 } af.push(O(M, L)); break; case "H": case "HH": af.push(O(Z.getHours(), L)); break; case "m": case "mm": af.push(O(Z.getMinutes(), L)); break; case "s": case "ss": af.push(O(Z.getSeconds(), L)); break; case "t": case "tt": Y = Z.getHours() < 12 ? (U.AM ? U.AM[0] : " ") : (U.PM ? U.PM[0] : " "); af.push(L === 1 ? Y.charAt(0) : Y); break; case "f": case "ff": case "fff": af.push(O(Z.getMilliseconds(), 3).substr(0, L)); break; case "z": case "zz": M = Z.getTimezoneOffset() / 60; af.push((M <= 0 ? "+" : "-") + O(Math.floor(Math.abs(M)), L)); break; case "zzz": M = Z.getTimezoneOffset() / 60; af.push((M <= 0 ? "+" : "-") + O(Math.floor(Math.abs(M)), 2) + ":" + O(Math.abs(Z.getTimezoneOffset() % 60), 2)); break; case "g": case "gg": if (U.eras) { af.push(U.eras[this.getEra(Z, aa)].name) } break; case "/": af.push(U["/"]); break; default: throw "Invalid date format pattern '" + X + "'."; break } } var P = af.join(""); if (!this.datescache) { this.datescache = new Array() } this.datescache[J] = P; return P } }); i.jqx.data = {}; var l, E, p = /#.*$/, a = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, f = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/, j = /^(?:GET|HEAD)$/, o = /^\/\//, k = /\?/, b = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, d = /([?&])_=[^&]*/, h = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, t = /\s+/, F = i.fn.load, G = {}, C = {}, q = ["*/"] + ["*"]; try { E = location.href } catch (A) { E = document.createElement("a"); E.href = ""; E = E.href } l = h.exec(E.toLowerCase()) || []; function r(e) { return function (K, M) { if (typeof K !== "string") { M = K; K = "*" } var H, N, O, J = K.toLowerCase().split(t), I = 0, L = J.length; if (i.isFunction(M)) { for (; I < L; I++) { H = J[I]; O = /^\+/.test(H); if (O) { H = H.substr(1) || "*" } N = e[H] = e[H] || []; N[O ? "unshift" : "push"](M) } } } } function v(H, Q, L, O, N, J) { N = N || Q.dataTypes[0]; J = J || {}; J[N] = true; var P, M = H[N], I = 0, e = M ? M.length : 0, K = (H === G); for (; I < e && (K || !P); I++) { P = M[I](Q, L, O); if (typeof P === "string") { if (!K || J[P]) { P = undefined } else { Q.dataTypes.unshift(P); P = v(H, Q, L, O, P, J) } } } if ((K || !P) && !J["*"]) { P = v(H, Q, L, O, "*", J) } return P } function u(I, J) { var H, e, K = i.jqx.data.ajaxSettings.flatOptions || {}; for (H in J) { if (J[H] !== undefined) { (K[H] ? I : (e || (e = {})))[H] = J[H] } } if (e) { i.extend(true, I, e) } } i.extend(i.jqx.data, { ajaxSetup: function (H, e) { if (e) { u(H, i.jqx.data.ajaxSettings) } else { e = H; H = i.jqx.data.ajaxSettings } u(H, e); return H }, ajaxSettings: { url: E, isLocal: f.test(l[1]), global: true, type: "GET", contentType: "application/x-www-form-urlencoded; charset=UTF-8", processData: true, async: true, accepts: { xml: "application/xml, text/xml", html: "text/html", text: "text/plain", json: "application/json, text/javascript", "*": q }, contents: { xml: /xml/, html: /html/, json: /json/ }, responseFields: { xml: "responseXML", text: "responseText" }, converters: { "* text": window.String, "text html": true, "text json": i.parseJSON, "text xml": i.parseXML }, flatOptions: { context: true, url: true} }, ajaxPrefilter: r(G), ajaxTransport: r(C), ajax: function (M, J) { if (typeof M === "object") { J = M; M = undefined } J = J || {}; var P, ad, K, Y, R, V, I, X, Q = i.jqx.data.ajaxSetup({}, J), af = Q.context || Q, T = af !== Q && (af.nodeType || af instanceof i) ? i(af) : i.event, ae = i.Deferred(), aa = i.Callbacks("once memory"), N = Q.statusCode || {}, U = {}, ab = {}, L = 0, O = "canceled", W = { readyState: 0, setRequestHeader: function (ag, ah) { if (!L) { var e = ag.toLowerCase(); ag = ab[e] = ab[e] || ag; U[ag] = ah } return this }, getAllResponseHeaders: function () { return L === 2 ? ad : null }, getResponseHeader: function (ag) { var e; if (L === 2) { if (!K) { K = {}; while ((e = a.exec(ad))) { K[e[1].toLowerCase()] = e[2] } } e = K[ag.toLowerCase()] } return e === undefined ? null : e }, overrideMimeType: function (e) { if (!L) { Q.mimeType = e } return this }, abort: function (e) { e = e || O; if (Y) { Y.abort(e) } S(0, e); return this } }; function S(ak, ag, al, ai) { var e, ao, am, aj, an, ah = ag; if (L === 2) { return } L = 2; if (R) { clearTimeout(R) } Y = undefined; ad = ai || ""; W.readyState = ak > 0 ? 4 : 0; if (al) { aj = B(Q, W, al) } if (ak >= 200 && ak < 300 || ak === 304) { if (Q.ifModified) { an = W.getResponseHeader("Last-Modified"); if (an) { i.lastModified[P] = an } an = W.getResponseHeader("Etag"); if (an) { i.etag[P] = an } } if (ak === 304) { ah = "notmodified"; e = true } else { e = c(Q, aj); ah = e.state; ao = e.data; am = e.error; e = !am } } else { am = ah; if (!ah || ak) { ah = "error"; if (ak < 0) { ak = 0 } } } W.status = ak; W.statusText = (ag || ah) + ""; if (e) { ae.resolveWith(af, [ao, ah, W]) } else { ae.rejectWith(af, [W, ah, am]) } W.statusCode(N); N = undefined; if (I) { T.trigger("ajax" + (e ? "Success" : "Error"), [W, Q, e ? ao : am]) } aa.fireWith(af, [W, ah]); if (I) { T.trigger("ajaxComplete", [W, Q]); if (!(--i.active)) { i.event.trigger("ajaxStop") } } } ae.promise(W); W.success = W.done; W.error = W.fail; W.complete = aa.add; W.statusCode = function (ag) { if (ag) { var e; if (L < 2) { for (e in ag) { N[e] = [N[e], ag[e]] } } else { e = ag[W.status]; W.always(e) } } return this }; Q.url = ((M || Q.url) + "").replace(p, "").replace(o, l[1] + "//"); Q.dataTypes = i.trim(Q.dataType || "*").toLowerCase().split(t); if (Q.crossDomain == null) { V = h.exec(Q.url.toLowerCase()); Q.crossDomain = !!(V && (V[1] !== l[1] || V[2] !== l[2] || (V[3] || (V[1] === "http:" ? 80 : 443)) != (l[3] || (l[1] === "http:" ? 80 : 443)))) } if (Q.data && Q.processData && typeof Q.data !== "string") { Q.data = i.param(Q.data, Q.traditional) } v(G, Q, J, W); if (L === 2) { return W } I = Q.global; Q.type = Q.type.toUpperCase(); Q.hasContent = !j.test(Q.type); if (I && i.active++ === 0) { i.event.trigger("ajaxStart") } if (!Q.hasContent) { if (Q.data) { Q.url += (k.test(Q.url) ? "&" : "?") + Q.data; delete Q.data } P = Q.url; if (Q.cache === false) { var H = i.now(), ac = Q.url.replace(d, "$1_=" + H); Q.url = ac + ((ac === Q.url) ? (k.test(Q.url) ? "&" : "?") + "_=" + H : "") } } if (Q.data && Q.hasContent && Q.contentType !== false || J.contentType) { W.setRequestHeader("Content-Type", Q.contentType) } if (Q.ifModified) { P = P || Q.url; if (i.lastModified[P]) { W.setRequestHeader("If-Modified-Since", i.lastModified[P]) } if (i.etag[P]) { W.setRequestHeader("If-None-Match", i.etag[P]) } } W.setRequestHeader("Accept", Q.dataTypes[0] && Q.accepts[Q.dataTypes[0]] ? Q.accepts[Q.dataTypes[0]] + (Q.dataTypes[0] !== "*" ? ", " + q + "; q=0.01" : "") : Q.accepts["*"]); for (X in Q.headers) { W.setRequestHeader(X, Q.headers[X]) } if (Q.beforeSend && (Q.beforeSend.call(af, W, Q) === false || L === 2)) { return W.abort() } O = "abort"; for (X in { success: 1, error: 1, complete: 1 }) { W[X](Q[X]) } Y = v(C, Q, J, W); if (!Y) { S(-1, "No Transport") } else { W.readyState = 1; if (I) { T.trigger("ajaxSend", [W, Q]) } if (Q.async && Q.timeout > 0) { R = setTimeout(function () { W.abort("timeout") }, Q.timeout) } try { L = 1; Y.send(U, S) } catch (Z) { if (L < 2) { S(-1, Z) } else { throw Z } } } return W }, active: 0, lastModified: {}, etag: {} }); function B(P, O, L) { var K, M, J, e, H = P.contents, N = P.dataTypes, I = P.responseFields; for (M in I) { if (M in L) { O[I[M]] = L[M] } } while (N[0] === "*") { N.shift(); if (K === undefined) { K = P.mimeType || O.getResponseHeader("content-type") } } if (K) { for (M in H) { if (H[M] && H[M].test(K)) { N.unshift(M); break } } } if (N[0] in L) { J = N[0] } else { for (M in L) { if (!N[0] || P.converters[M + " " + N[0]]) { J = M; break } if (!e) { e = M } } J = J || e } if (J) { if (J !== N[0]) { N.unshift(J) } return L[J] } } function c(R, J) { var P, H, N, L, O = R.dataTypes.slice(), I = O[0], Q = {}, K = 0; if (R.dataFilter) { J = R.dataFilter(J, R.dataType) } if (O[1]) { for (P in R.converters) { Q[P.toLowerCase()] = R.converters[P] } } for (; (N = O[++K]); ) { if (N !== "*") { if (I !== "*" && I !== N) { P = Q[I + " " + N] || Q["* " + N]; if (!P) { for (H in Q) { L = H.split(" "); if (L[1] === N) { P = Q[I + " " + L[0]] || Q["* " + L[0]]; if (P) { if (P === true) { P = Q[H] } else { if (Q[H] !== true) { N = L[0]; O.splice(K--, 0, N) } } break } } } } if (P !== true) { if (P && R["throws"]) { J = P(J) } else { try { J = P(J) } catch (M) { return { state: "parsererror", error: P ? M : "No conversion from " + I + " to " + N} } } } } I = N } } return { state: "success", data: J} } var y = [], n = /\?/, D = /(=)\?(?=&|$)|\?\?/, z = i.now(); i.jqx.data.ajaxSetup({ jsonp: "callback", jsonpCallback: function () { var e = y.pop() || (i.expando + "_" + (z++)); this[e] = true; return e } }); i.jqx.data.ajaxPrefilter("json jsonp", function (Q, L, P) { var O, e, N, J = Q.data, H = Q.url, I = Q.jsonp !== false, M = I && D.test(H), K = I && !M && typeof J === "string" && !(Q.contentType || "").indexOf("application/x-www-form-urlencoded") && D.test(J); if (Q.dataTypes[0] === "jsonp" || M || K) { O = Q.jsonpCallback = i.isFunction(Q.jsonpCallback) ? Q.jsonpCallback() : Q.jsonpCallback; e = window[O]; if (M) { Q.url = H.replace(D, "$1" + O) } else { if (K) { Q.data = J.replace(D, "$1" + O) } else { if (I) { Q.url += (n.test(H) ? "&" : "?") + Q.jsonp + "=" + O } } } Q.converters["script json"] = function () { if (!N) { i.error(O + " was not called") } return N[0] }; Q.dataTypes[0] = "json"; window[O] = function () { N = arguments }; P.always(function () { window[O] = e; if (Q[O]) { Q.jsonpCallback = L.jsonpCallback; y.push(O) } if (N && i.isFunction(e)) { e(N[0]) } N = e = undefined }); return "script" } }); i.jqx.data.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /javascript|ecmascript/ }, converters: { "text script": function (e) { i.globalEval(e); return e } } }); i.jqx.data.ajaxPrefilter("script", function (e) { if (e.cache === undefined) { e.cache = false } if (e.crossDomain) { e.type = "GET"; e.global = false } }); i.jqx.data.ajaxTransport("script", function (I) { if (I.crossDomain) { var e, H = document.head || document.getElementsByTagName("head")[0] || document.documentElement; return { send: function (J, K) { e = document.createElement("script"); e.async = "async"; if (I.scriptCharset) { e.charset = I.scriptCharset } e.src = I.url; e.onload = e.onreadystatechange = function (M, L) { if (L || !e.readyState || /loaded|complete/.test(e.readyState)) { e.onload = e.onreadystatechange = null; if (H && e.parentNode) { H.removeChild(e) } e = undefined; if (!L) { K(200, "success") } } }; H.insertBefore(e, H.firstChild) }, abort: function () { if (e) { e.onload(0, 1) } } } } }); var w, x = window.ActiveXObject ? function () { for (var e in w) { w[e](0, 1) } } : false, m = 0; function g() { try { return new window.XMLHttpRequest() } catch (H) { } } function s() { try { return new window.ActiveXObject("Microsoft.XMLHTTP") } catch (H) { } } i.jqx.data.ajaxSettings.xhr = window.ActiveXObject ? function () { return !this.isLocal && g() || s() } : g; (function (e) { i.extend(i.support, { ajax: !!e, cors: !!e && ("withCredentials" in e) }) })(i.jqx.data.ajaxSettings.xhr()); if (i.support.ajax) { i.jqx.data.ajaxTransport(function (e) { if (!e.crossDomain || i.support.cors) { var H; return { send: function (N, I) { var L, K, M = e.xhr(); if (e.username) { M.open(e.type, e.url, e.async, e.username, e.password) } else { M.open(e.type, e.url, e.async) } if (e.xhrFields) { for (K in e.xhrFields) { M[K] = e.xhrFields[K] } } if (e.mimeType && M.overrideMimeType) { M.overrideMimeType(e.mimeType) } if (!e.crossDomain && !N["X-Requested-With"]) { N["X-Requested-With"] = "XMLHttpRequest" } try { for (K in N) { M.setRequestHeader(K, N[K]) } } catch (J) { } M.send((e.hasContent && e.data) || null); H = function (W, Q) { var R, P, O, U, T; try { if (H && (Q || M.readyState === 4)) { H = undefined; if (L) { M.onreadystatechange = i.noop; if (x) { delete w[L] } } if (Q) { if (M.readyState !== 4) { M.abort() } } else { R = M.status; O = M.getAllResponseHeaders(); U = {}; T = M.responseXML; if (T && T.documentElement) { U.xml = T } try { U.text = M.responseText } catch (V) { } try { P = M.statusText } catch (V) { P = "" } if (!R && e.isLocal && !e.crossDomain) { R = U.text ? 200 : 404 } else { if (R === 1223) { R = 204 } } } } } catch (S) { if (!Q) { I(-1, S) } } if (U) { I(R, P, U, O) } }; if (!e.async) { H() } else { if (M.readyState === 4) { setTimeout(H, 0) } else { L = ++m; if (x) { if (!w) { w = {}; i(window).unload(x) } w[L] = H } M.onreadystatechange = H } } }, abort: function () { if (H) { H(0, 1) } } } } }) } i.jqx.filter = function () { this.operator = "and"; var M = 0; var J = 1; var P = ["EMPTY", "NOT_EMPTY", "CONTAINS", "CONTAINS_CASE_SENSITIVE", "DOES_NOT_CONTAIN", "DOES_NOT_CONTAIN_CASE_SENSITIVE", "STARTS_WITH", "STARTS_WITH_CASE_SENSITIVE", "ENDS_WITH", "ENDS_WITH_CASE_SENSITIVE", "EQUAL", "EQUAL_CASE_SENSITIVE", "NULL", "NOT_NULL"]; var R = ["EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "NULL", "NOT_NULL"]; var S = ["EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "NULL", "NOT_NULL"]; var L = ["EQUAL", "NOT_EQUAL"]; var K = new Array(); var Q = new Array(); this.evaluate = function (X) { var V = true; for (var W = 0; W < K.length; W++) { var U = K[W].evaluate(X); if (W == 0) { V = U } else { if (Q[W] == J || Q[W] == "or") { V = V || U } else { V = V && U } } } return V }; this.getfilterscount = function () { return K.length }; this.setoperatorsbyfiltertype = function (U, V) { switch (U) { case "numericfilter": R = V; break; case "stringfilter": P = V; break; case "datefilter": S = V; break; case "booleanfilter": L = V; break } }; this.getoperatorsbyfiltertype = function (U) { var V = new Array(); switch (U) { case "numericfilter": V = R.slice(0); break; case "stringfilter": V = P.slice(0); break; case "datefilter": V = S.slice(0); break; case "booleanfilter": V = L.slice(0); break } return V }; var O = function () { var U = function () { return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1) }; return (U() + "-" + U() + "-" + U()) }; this.createfilter = function (Y, V, X, W, U, Z) { if (Y == null || Y == undefined) { return null } switch (Y) { case "numericfilter": return new N(V, X.toUpperCase()); case "stringfilter": return new T(V, X.toUpperCase()); case "datefilter": return new H(V, X.toUpperCase(), U, Z); case "booleanfilter": return new I(V, X.toUpperCase()); case "custom": return new e(V, X.toUpperCase(), W) } throw new Error("jqxGrid: There is no such filter type. The available filter types are: 'numericfilter', 'stringfilter', 'datefilter' and 'booleanfilter'"); return null }; this.getfilters = function () { var U = new Array(); for (var V = 0; V < K.length; V++) { var W = { value: K[V].filtervalue, condition: K[V].comparisonoperator, operator: Q[V], type: K[V].type }; if (K[V].data) { W.id = K[V].data } U[V] = W } return U }; this.addfilter = function (U, V) { K[K.length] = V; V.key = O(); Q[Q.length] = U }; this.removefilter = function (V) { for (var U = 0; U < K.length; U++) { if (K[U].key == V.key) { K.splice(U, 1); Q.splice(U, 1); break } } }; this.getoperatorat = function (U) { if (U == undefined || U == null) { return null } if (U < 0 || U > K.length) { return null } return Q[U] }; this.setoperatorat = function (V, U) { if (V == undefined || V == null) { return null } if (V < 0 || V > K.length) { return null } Q[U] = U }; this.getfilterat = function (U) { if (U == undefined || U == null) { return null } if (U < 0 || U > K.length) { return null } return K[U] }; this.setfilterat = function (U, V) { if (U == undefined || U == null) { return null } if (U < 0 || U > K.length) { return null } V.key = O(); K[U] = V }; this.clear = function () { K = new Array(); Q = new Array() }; var T = function (V, U) { this.filtervalue = V; this.comparisonoperator = U; this.type = "stringfilter"; this.evaluate = function (af) { var ae = this.filtervalue; var al = this.comparisonoperator; if (af == null || af == undefined || af == "") { if (al == "NULL") { return true } if (al == "EQUAL" && af == ae) { return true } if (al == "NOT_EQUAL" && af != ae) { return true } if (al != "EMPTY") { return false } else { if (af == "") { return true } } } var an = ""; try { an = af.toString() } catch (ag) { return true } var am = function (ap, ao) { switch (al) { case "EQUAL": return i.jqx.string.equalsIgnoreCase(ap, ao); case "EQUAL_CASE_SENSITIVE": return i.jqx.string.equals(ap, ao); case "NOT_EQUAL": return !i.jqx.string.equalsIgnoreCase(ap, ao); case "NOT_EQUAL_CASE_SENSITIVE": return !i.jqx.string.equals(ap, ao); case "CONTAINS": return i.jqx.string.containsIgnoreCase(ap, ao); case "CONTAINS_CASE_SENSITIVE": return i.jqx.string.contains(ap, ao); case "DOES_NOT_CONTAIN": return !i.jqx.string.containsIgnoreCase(ap, ao); case "DOES_NOT_CONTAIN_CASE_SENSITIVE": return !i.jqx.string.contains(ap, ao); case "EMPTY": return ap == ""; case "NOT_EMPTY": return ap != ""; case "NOT_NULL": return ap != null; case "STARTS_WITH": return i.jqx.string.startsWithIgnoreCase(ap, ao); case "ENDS_WITH": return i.jqx.string.endsWithIgnoreCase(ap, ao); case "ENDS_WITH_CASE_SENSITIVE": return i.jqx.string.endsWith(ap, ao); case "STARTS_WITH_CASE_SENSITIVE": return i.jqx.string.startsWith(ap, ao); default: return false } }; var Z = new Array(); if (ae && ae.indexOf) { if (ae.indexOf("|") >= 0 || ae.indexOf(" AND ") >= 0 || ae.indexOf(" OR ") >= 0 || ae.indexOf(" and ") >= 0 || ae.indexOf(" or ") >= 0) { var aa = am(an, ae); if (aa) { return aa } var ab = ae.indexOf(" AND ") >= 0 ? ae.split(" AND ") : new Array(); var Y = ae.indexOf(" OR ") >= 0 ? ae.split(" OR ") : new Array(); var X = ae.indexOf(" and ") >= 0 ? ae.split(" and ") : new Array(); var ac = ae.indexOf(" or ") >= 0 ? ae.split(" or ") : new Array(); var W = ae.indexOf("|") >= 0 ? ae.split("|") : new Array(); if (W.length > 0) { for (var ak = 0; ak < W.length; ak++) { W[ak] = i.trim(W[ak]) } } var aj = ae.indexOf(" ") >= 0 ? ae.split(" ") : new Array(); if (aj.length > 0) { for (var ak = 0; ak < aj.length; ak++) { aj[ak] = i.trim(aj[ak]) } } ab = ab.concat(aj); ab = ab.concat(X); Y = Y.concat(W); Y = Y.concat(ac); if (ab.length > 0) { for (var ak = 0; ak < ab.length; ak++) { if (!ab[ak].indexOf(" OR ") >= 0) { Z.push(ab[ak]) } } } if (Y.length > 0) { for (var ak = 0; ak < Y.length; ak++) { if (!Y[ak].indexOf(" AND ") >= 0) { Z.push(Y[ak]) } } } var ai = undefined; for (var ah = 0; ah < Z.length; ah++) { var af = Z[ah]; var aa = am(an, af); var ad = ah < ab.length ? "and" : "or"; if (ai == undefined) { ai = aa } else { if (ad == "or") { ai = ai || aa } else { ai = ai && aa } } } return ai } } return am(an, ae) } }; var I = function (V, U) { this.filtervalue = V; this.comparisonoperator = U; this.type = "booleanfilter"; this.evaluate = function (Y) { var X = this.filtervalue; var W = this.comparisonoperator; if (Y == null || Y == undefined) { if (W == "NULL") { return true } return false } var Z = Y; switch (W) { case "EQUAL": return Z == X || Z.toString() == X.toString(); case "NOT_EQUAL": return Z != X && Z.toString() != X.toString(); default: return false } } }; var N = function (V, U) { this.filtervalue = V; this.comparisonoperator = U; this.type = "numericfilter"; this.evaluate = function (ag) { var af = this.filtervalue; var al = this.comparisonoperator; if (ag === null || ag === undefined || ag === "") { if (al == "NOT_NULL") { return false } if (al == "NULL") { return true } else { switch (al) { case "EQUAL": return ag == af; case "NOT_EQUAL": return ag != af } return false } } else { if (al == "NULL") { return false } if (al == "NOT_NULL") { return true } } var an = ag; try { an = parseFloat(an) } catch (ah) { if (ag.toString() != "") { return false } } var am = function (ap, ao) { switch (al) { case "EQUAL": return ap == ao; case "NOT_EQUAL": return ap != ao; case "GREATER_THAN": return ap > ao; case "GREATER_THAN_OR_EQUAL": return ap >= ao; case "LESS_THAN": return ap < ao; case "LESS_THAN_OR_EQUAL": return ap <= ao; case "STARTS_WITH": return i.jqx.string.startsWithIgnoreCase(ap.toString(), ao.toString()); case "ENDS_WITH": return i.jqx.string.endsWithIgnoreCase(ap.toString(), ao.toString()); case "ENDS_WITH_CASE_SENSITIVE": return i.jqx.string.endsWith(ap.toString(), ao.toString()); case "STARTS_WITH_CASE_SENSITIVE": return i.jqx.string.startsWith(ap.toString(), ao.toString()); case "CONTAINS": return i.jqx.string.containsIgnoreCase(ap.toString(), ao.toString()); case "CONTAINS_CASE_SENSITIVE": return i.jqx.string.contains(ap.toString(), ao.toString()); case "DOES_NOT_CONTAIN": return !i.jqx.string.containsIgnoreCase(ap.toString(), ao.toString()); case "DOES_NOT_CONTAIN_CASE_SENSITIVE": return !i.jqx.string.contains(ap.toString(), ao.toString()); default: return true } }; var aa = new Array(); if (af && af.indexOf) { if (af.indexOf("|") >= 0 || af.indexOf(" AND ") >= 0 || af.indexOf(" OR ") >= 0 || af.indexOf(" and ") >= 0 || af.indexOf(" or ") >= 0) { var ab = am(an, af); if (ab) { return ab } af = af.toString(); var ac = af.indexOf(" AND ") >= 0 ? af.split(" AND ") : new Array(); var Z = af.indexOf(" OR ") >= 0 ? af.split(" OR ") : new Array(); var Y = af.indexOf(" and ") >= 0 ? af.split(" and ") : new Array(); var ad = af.indexOf(" or ") >= 0 ? af.split(" or ") : new Array(); ac = ac.concat(Y); Z = Z.concat(ad); var X = af.indexOf("|") >= 0 ? af.split("|") : new Array(); if (X.length > 0) { for (var ak = 0; ak < X.length; ak++) { X[ak] = i.trim(X[ak]) } } Z = Z.concat(X); if (ac.length > 0) { for (var ak = 0; ak < ac.length; ak++) { if (!ac[ak].indexOf(" OR ") >= 0) { aa.push(ac[ak]) } } } if (Z.length > 0) { for (var ak = 0; ak < Z.length; ak++) { if (!Z[ak].indexOf(" AND ") >= 0) { aa.push(Z[ak]) } } } var aj = undefined; for (var ai = 0; ai < aa.length; ai++) { var ag = aa[ai]; if (ag && ag.indexOf && ag.indexOf("..") >= 0) { var W = ag.toString().split(".."); if (W.length == 2) { ab = an >= W[0] && an <= W[1] } } else { var ab = am(an, ag) } var ae = ai < ac.length ? "and" : "or"; if (aj == undefined) { aj = ab } else { if (ae == "or") { aj = aj || ab } else { aj = aj && ab } } } return aj } } if (af && af.indexOf && af.indexOf("..") >= 0) { aa = af.toString().split(".."); if (aa.length == 2) { return an >= aa[0] && an <= aa[1] } } return am(an, af) } }; var H = function (X, V, W, ab) { this.filtervalue = X; this.type = "datefilter"; var Z = this; if (W != undefined && ab != undefined) { var Y = i.jqx.dataFormat.parsedate(X, W, ab); if (Y != null) { this.filterdate = Y } else { var U = i.jqx.dataFormat.tryparsedate(X, ab); if (U != null) { this.filterdate = U } } } else { var aa = new Date(X); if (aa.toString() == "NaN" || aa.toString() == "Invalid Date") { this.filterdate = i.jqx.dataFormat.tryparsedate(X) } else { this.filterdate = aa } } if (!this.filterdate) { var aa = new Date(X); if (aa.toString() == "NaN" || aa.toString() == "Invalid Date") { this.filterdate = i.jqx.dataFormat.tryparsedate(X) } else { this.filterdate = aa } } this.comparisonoperator = V; this.evaluate = function (ao) { var an = this.filtervalue; var aw = this.comparisonoperator; if (ao == null || ao == undefined || ao == "") { if (aw == "NOT_NULL") { return false } if (aw == "NULL") { return true } else { switch (aw) { case "EQUAL": return ao == an; case "NOT_EQUAL": return ao != an } return false } } else { if (aw == "NULL") { return false } if (aw == "NOT_NULL") { return true } } var ay = new Date(); ay.setFullYear(1900, 0, 1); ay.setHours(12, 0, 0, 0); try { var av = new Date(ao); if (av.toString() == "NaN" || av.toString() == "Invalid Date") { ao = i.jqx.dataFormat.tryparsedate(ao) } else { ao = av } ay = ao; var at = false; if (W != undefined && ab != undefined) { if (W.indexOf("t") >= 0 || W.indexOf("T") >= 0 || W.indexOf(":") >= 0 || W.indexOf("f") >= 0) { at = true; if (an && an.toString().indexOf(":") == -1) { var aj = i.jqx.dataFormat.tryparsedate(an.toString() + ":00", ab); if (aj != null) { Z.filterdate = aj } } } } if (!at) { ay.setHours(0); ay.setMinutes(0); ay.setSeconds(0) } } catch (ap) { if (ao.toString() != "") { return false } } if (Z.filterdate != null) { an = Z.filterdate } else { if (an && an.indexOf) { if (an.indexOf(":") != -1 || !isNaN(parseInt(an))) { var ai = new Date(ay); ai.setHours(12, 0, 0, 0); var ah = an.split(":"); for (var au = 0; au < ah.length; au++) { if (au == 0) { ai.setHours(ah[au]) } if (au == 1) { ai.setMinutes(ah[au]) } if (au == 2) { ai.setSeconds(ah[au]) } } an = ai } } } if (at) { if (an && an.setFullYear) { if (ay && ay.getFullYear) { if (W.indexOf("d") == -1 && W.indexOf("M") == -1 && W.indexOf("y") == -1) { an.setFullYear(ay.getFullYear(), ay.getMonth(), ay.getDate()) } } } } var ax = function (aA, az) { if (aA == null) { aA = "" } switch (aw) { case "EQUAL": return aA.toString() == az.toString(); case "NOT_EQUAL": return aA.toString() != az.toString(); case "GREATER_THAN": return aA > az; case "GREATER_THAN_OR_EQUAL": return aA >= az; case "LESS_THAN": return aA < az; case "LESS_THAN_OR_EQUAL": return aA <= az; case "STARTS_WITH": return i.jqx.string.startsWithIgnoreCase(aA.toString(), az.toString()); case "ENDS_WITH": return i.jqx.string.endsWithIgnoreCase(aA.toString(), az.toString()); case "ENDS_WITH_CASE_SENSITIVE": return i.jqx.string.endsWith(aA.toString(), az.toString()); case "STARTS_WITH_CASE_SENSITIVE": return i.jqx.string.startsWith(aA.toString(), az.toString()); case "CONTAINS": return i.jqx.string.containsIgnoreCase(aA.toString(), az.toString()); case "CONTAINS_CASE_SENSITIVE": return i.jqx.string.contains(aA.toString(), az.toString()); case "DOES_NOT_CONTAIN": return !i.jqx.string.containsIgnoreCase(aA.toString(), az.toString()); case "DOES_NOT_CONTAIN_CASE_SENSITIVE": return !i.jqx.string.contains(aA.toString(), az.toString()); default: return true } }; var ag = new Array(); if (an && an.indexOf) { if (an.indexOf("|") >= 0 || an.indexOf(" AND ") >= 0 || an.indexOf(" OR ") >= 0 || an.indexOf(" and ") >= 0 || an.indexOf(" or ") >= 0) { var aj = ax(ay, an); if (aj) { return aj } var ak = an.indexOf(" AND ") >= 0 ? an.split(" AND ") : new Array(); var af = an.indexOf(" OR ") >= 0 ? an.split(" OR ") : new Array(); var ae = an.indexOf(" and ") >= 0 ? an.split(" and ") : new Array(); var al = an.indexOf(" or ") >= 0 ? an.split(" or ") : new Array(); ak = ak.concat(ae); af = af.concat(al); var ad = an.indexOf("|") >= 0 ? an.split("|") : new Array(); if (ad.length > 0) { for (var au = 0; au < ad.length; au++) { ad[au] = i.trim(ad[au]) } } af = af.concat(ad); if (ak.length > 0) { for (var au = 0; au < ak.length; au++) { if (!ak[au].indexOf(" OR ") >= 0) { ag.push(ak[au]) } } } if (af.length > 0) { for (var au = 0; au < af.length; au++) { if (!af[au].indexOf(" AND ") >= 0) { ag.push(af[au]) } } } var ar = undefined; for (var aq = 0; aq < ag.length; aq++) { var ao = ag[aq]; if (ao && ao.indexOf && ao.indexOf("..") >= 0) { var ac = ao.toString().split(".."); if (ac.length == 2) { aj = ay >= ac[0] && ay <= ac[1] } } else { var aj = ax(ay, ao) } var am = aq < ak.length ? "and" : "or"; if (ar == undefined) { ar = aj } else { if (am == "or") { ar = ar || aj } else { ar = ar && aj } } } return ar } } if (an && an.indexOf && an.indexOf("..") >= 0) { ag = an.toString().split(".."); if (ag.length == 2) { return ay >= ag[0] && ay <= ag[1] } } return ax(ay, an) } }; var e = function (V, U, W) { this.filtervalue = V; this.comparisonoperator = U; this.evaluate = function (Y, X) { return W(this.filtervalue, Y, this.comparisonoperator) } } }; i.jqx.longInt = function () { var H = this; H.longObj = new Object(); var e = H.longObj; e.mathObj = new Object(); e.mathObj.Long = new Object(); e.mathObj.Long = function (I, J) { this.lowBits = I | 0; this.highBits = J | 0 }; e.mathObj.Long.IntCache = {}; e.mathObj.Long.fromInt = function (I) { if (-128 <= I && I < 128) { var K = e.mathObj.Long.IntCache[I]; if (K) { return K } } var J = new e.mathObj.Long(I | 0, I < 0 ? -1 : 0); if (-128 <= I && I < 128) { e.mathObj.Long.IntCache[I] = J } return J }; e.mathObj.Long.fromNumber = function (I) { if (isNaN(I) || !isFinite(I)) { return e.mathObj.Long.ZERO } else { if (I <= -e.mathObj.Long.TWO_PWR_63_DBL_) { return e.mathObj.Long.MIN_VALUE } else { if (I + 1 >= e.mathObj.Long.TWO_PWR_63_DBL_) { return e.mathObj.Long.MAX_VALUE } else { if (I < 0) { return e.mathObj.Long.fromNumber(-I).negate() } else { return new e.mathObj.Long((I % e.mathObj.Long.TWO_PWR_32_DBL_) | 0, (I / e.mathObj.Long.TWO_PWR_32_DBL_) | 0) } } } } }; e.mathObj.Long.fromBits = function (I, J) { return new e.mathObj.Long(I, J) }; e.mathObj.Long.fromString = function (K, N) { if (K.length === 0) { throw new Error("number format error: empty string") } var L = N || 10; if (L < 2 || 36 < L) { throw new Error("radix out of range: " + L) } if (K.charAt(0) === "-") { return e.mathObj.Long.fromString(K.substring(1), L).negate() } else { if (K.indexOf("-") >= 0) { throw new Error('number format error: interior "-" character: ' + K) } } var O = e.mathObj.Long.fromNumber(Math.pow(L, 8)); var Q = e.mathObj.Long.ZERO; for (var J = 0; J < K.length; J += 8) { var P = Math.min(8, K.length - J); var M = parseInt(K.substring(J, J + P), L); if (P < 8) { var I = e.mathObj.Long.fromNumber(Math.pow(L, P)); Q = Q.multiply(I).add(e.mathObj.Long.fromNumber(M)) } else { Q = Q.multiply(O); Q = Q.add(e.mathObj.Long.fromNumber(M)) } } return Q }; e.mathObj.Long.TWO_PWR_16_DBL_ = 1 << 16; e.mathObj.Long.TWO_PWR_24_DBL_ = 1 << 24; e.mathObj.Long.TWO_PWR_32_DBL_ = e.mathObj.Long.TWO_PWR_16_DBL_ * e.mathObj.Long.TWO_PWR_16_DBL_; e.mathObj.Long.TWO_PWR_31_DBL_ = e.mathObj.Long.TWO_PWR_32_DBL_ / 2; e.mathObj.Long.TWO_PWR_48_DBL_ = e.mathObj.Long.TWO_PWR_32_DBL_ * e.mathObj.Long.TWO_PWR_16_DBL_; e.mathObj.Long.TWO_PWR_64_DBL_ = e.mathObj.Long.TWO_PWR_32_DBL_ * e.mathObj.Long.TWO_PWR_32_DBL_; e.mathObj.Long.TWO_PWR_63_DBL_ = e.mathObj.Long.TWO_PWR_64_DBL_ / 2; e.mathObj.Long.ZERO = e.mathObj.Long.fromInt(0); e.mathObj.Long.ONE = e.mathObj.Long.fromInt(1); e.mathObj.Long.NEG_ONE = e.mathObj.Long.fromInt(-1); e.mathObj.Long.MAX_VALUE = e.mathObj.Long.fromBits(4294967295 | 0, 2147483647 | 0); e.mathObj.Long.MIN_VALUE = e.mathObj.Long.fromBits(0, 2147483648 | 0); e.mathObj.Long.TWO_PWR_24_ = e.mathObj.Long.fromInt(1 << 24); e.mathObj.Long.prototype.toInt = function () { return this.lowBits }; e.mathObj.Long.prototype.toNumber = function () { return this.highBits * e.mathObj.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned() }; e.mathObj.Long.prototype.toString = function (O) { var M = O || 10; if (M < 2 || 36 < M) { throw new Error("radix out of range: " + M) } if (this.isZero()) { return "0" } var P, R; if (this.isNegative()) { if (this.equals(e.mathObj.Long.MIN_VALUE)) { var K = e.mathObj.Long.fromNumber(M); var I = this.div(K); P = I.multiply(K).subtract(this); return I.toString(M) + P.toInt().toString(M) } else { switch (M) { case 2: case 8: case 16: R = "-" + this.negate().toString(2); return H._negativeBinary(R, M); default: R = "-" + this.negate().toString(M); return R } } } var Q = e.mathObj.Long.fromNumber(Math.pow(M, 6)); P = this; R = ""; while (true) { var N = P.div(Q); var L = P.subtract(N.multiply(Q)).toInt(); var J = L.toString(M); P = N; if (P.isZero()) { return J + R } else { while (J.length < 6) { J = "0" + J } R = "" + J + R } } }; e.mathObj.Long.prototype.getHighBits = function () { return this.highBits }; e.mathObj.Long.prototype.getLowBits = function () { return this.lowBits }; e.mathObj.Long.prototype.getLowBitsUnsigned = function () { return (this.lowBits >= 0) ? this.lowBits : e.mathObj.Long.TWO_PWR_32_DBL_ + this.lowBits }; e.mathObj.Long.prototype.getNumBitsAbs = function () { if (this.isNegative()) { if (this.equals(e.mathObj.Long.MIN_VALUE)) { return 64 } else { return this.negate().getNumBitsAbs() } } else { var J = this.highBits !== 0 ? this.highBits : this.lowBits; for (var I = 31; I > 0; I--) { if ((J & (1 << I)) !== 0) { break } } return this.highBits !== 0 ? I + 33 : I + 1 } }; e.mathObj.Long.prototype.isZero = function () { return this.highBits === 0 && this.lowBits === 0 }; e.mathObj.Long.prototype.isNegative = function () { return this.highBits < 0 }; e.mathObj.Long.prototype.isOdd = function () { return (this.lowBits & 1) === 1 }; e.mathObj.Long.prototype.equals = function (I) { return (this.highBits === I.highBits) && (this.lowBits === I.lowBits) }; e.mathObj.Long.prototype.notEquals = function (I) { return (this.highBits !== I.highBits) || (this.lowBits !== I.lowBits) }; e.mathObj.Long.prototype.lessThan = function (I) { return this.compare(I) < 0 }; e.mathObj.Long.prototype.lessThanOrEqual = function (I) { return this.compare(I) <= 0 }; e.mathObj.Long.prototype.greaterThan = function (I) { return this.compare(I) > 0 }; e.mathObj.Long.prototype.greaterThanOrEqual = function (I) { return this.compare(I) >= 0 }; e.mathObj.Long.prototype.compare = function (J) { if (this.equals(J)) { return 0 } var I = this.isNegative(); var K = J.isNegative(); if (I && !K) { return -1 } if (!I && K) { return 1 } if (this.subtract(J).isNegative()) { return -1 } else { return 1 } }; e.mathObj.Long.prototype.negate = function () { if (this.equals(e.mathObj.Long.MIN_VALUE)) { return e.mathObj.Long.MIN_VALUE } else { return this.not().add(e.mathObj.Long.ONE) } }; e.mathObj.Long.prototype.add = function (P) { var N = this.highBits >>> 16; var J = this.highBits & 65535; var Q = this.lowBits >>> 16; var K = this.lowBits & 65535; var S = P.highBits >>> 16; var L = P.highBits & 65535; var T = P.lowBits >>> 16; var M = P.lowBits & 65535; var U = 0, O = 0, I = 0, R = 0; R += K + M; I += R >>> 16; R &= 65535; I += Q + T; O += I >>> 16; I &= 65535; O += J + L; U += O >>> 16; O &= 65535; U += N + S; U &= 65535; return e.mathObj.Long.fromBits((I << 16) | R, (U << 16) | O) }; e.mathObj.Long.prototype.subtract = function (I) { return this.add(I.negate()) }; e.mathObj.Long.prototype.multiply = function (P) { if (this.isZero()) { return e.mathObj.Long.ZERO } else { if (P.isZero()) { return e.mathObj.Long.ZERO } } if (this.equals(e.mathObj.Long.MIN_VALUE)) { return P.isOdd() ? e.mathObj.Long.MIN_VALUE : e.mathObj.Long.ZERO } else { if (P.equals(e.mathObj.Long.MIN_VALUE)) { return this.isOdd() ? e.mathObj.Long.MIN_VALUE : e.mathObj.Long.ZERO } } if (this.isNegative()) { if (P.isNegative()) { return this.negate().multiply(P.negate()) } else { return this.negate().multiply(P).negate() } } else { if (P.isNegative()) { return this.multiply(P.negate()).negate() } } if (this.lessThan(e.mathObj.Long.TWO_PWR_24_) && P.lessThan(e.mathObj.Long.TWO_PWR_24_)) { return e.mathObj.Long.fromNumber(this.toNumber() * P.toNumber()) } var N = this.highBits >>> 16; var J = this.highBits & 65535; var Q = this.lowBits >>> 16; var K = this.lowBits & 65535; var S = P.highBits >>> 16; var L = P.highBits & 65535; var T = P.lowBits >>> 16; var M = P.lowBits & 65535; var U = 0, O = 0, I = 0, R = 0; R += K * M; I += R >>> 16; R &= 65535; I += Q * M; O += I >>> 16; I &= 65535; I += K * T; O += I >>> 16; I &= 65535; O += J * M; U += O >>> 16; O &= 65535; O += Q * T; U += O >>> 16; O &= 65535; O += K * L; U += O >>> 16; O &= 65535; U += N * M + J * T + Q * L + K * S; U &= 65535; return e.mathObj.Long.fromBits((I << 16) | R, (U << 16) | O) }; e.mathObj.Long.prototype.div = function (K) { if (K.isZero()) { throw new Error("division by zero") } else { if (this.isZero()) { return e.mathObj.Long.ZERO } } var N, P; if (this.equals(e.mathObj.Long.MIN_VALUE)) { if (K.equals(e.mathObj.Long.ONE) || K.equals(e.mathObj.Long.NEG_ONE)) { return e.mathObj.Long.MIN_VALUE } else { if (K.equals(e.mathObj.Long.MIN_VALUE)) { return e.mathObj.Long.ONE } else { var I = this.shiftRight(1); N = I.div(K).shiftLeft(1); if (N.equals(e.mathObj.Long.ZERO)) { return K.isNegative() ? e.mathObj.Long.ONE : e.mathObj.Long.NEG_ONE } else { P = this.subtract(K.multiply(N)); var R = N.add(P.div(K)); return R } } } } else { if (K.equals(e.mathObj.Long.MIN_VALUE)) { return e.mathObj.Long.ZERO } } if (this.isNegative()) { if (K.isNegative()) { return this.negate().div(K.negate()) } else { return this.negate().div(K).negate() } } else { if (K.isNegative()) { return this.div(K.negate()).negate() } } var L = e.mathObj.Long.ZERO; P = this; while (P.greaterThanOrEqual(K)) { N = Math.max(1, Math.floor(P.toNumber() / K.toNumber())); var Q = Math.ceil(Math.log(N) / Math.LN2); var O = (Q <= 48) ? 1 : Math.pow(2, Q - 48); var J = e.mathObj.Long.fromNumber(N); var M = J.multiply(K); while (M.isNegative() || M.greaterThan(P)) { N -= O; J = e.mathObj.Long.fromNumber(N); M = J.multiply(K) } if (J.isZero()) { J = e.mathObj.Long.ONE } L = L.add(J); P = P.subtract(M) } return L }; e.mathObj.Long.prototype.modulo = function (I) { return this.subtract(this.div(I).multiply(I)) }; e.mathObj.Long.prototype.not = function () { return e.mathObj.Long.fromBits(~this.lowBits, ~this.highBits) }; e.mathObj.Long.prototype.and = function (I) { return e.mathObj.Long.fromBits(this.lowBits & I.lowBits, this.highBits & I.highBits) }; e.mathObj.Long.prototype.or = function (I) { return e.mathObj.Long.fromBits(this.lowBits | I.lowBits, this.highBits | I.highBits) }; e.mathObj.Long.prototype.xor = function (I) { return e.mathObj.Long.fromBits(this.lowBits ^ I.lowBits, this.highBits ^ I.highBits) }; e.mathObj.Long.prototype.shiftLeft = function (K) { K &= 63; if (K === 0) { return this } else { var I = this.lowBits; if (K < 32) { var J = this.highBits; return e.mathObj.Long.fromBits(I << K, (J << K) | (I >>> (32 - K))) } else { return e.mathObj.Long.fromBits(0, I << (K - 32)) } } }; e.mathObj.Long.prototype.shiftRight = function (K) { K &= 63; if (K === 0) { return this } else { var J = this.highBits; if (K < 32) { var I = this.lowBits; return e.mathObj.Long.fromBits((I >>> K) | (J << (32 - K)), J >> K) } else { return e.mathObj.Long.fromBits(J >> (K - 32), J >= 0 ? 0 : -1) } } }; e.mathObj.Long.prototype.shiftRightUnsigned = function (K) { K &= 63; if (K === 0) { return this } else { var J = this.highBits; if (K < 32) { var I = this.lowBits; return e.mathObj.Long.fromBits((I >>> K) | (J << (32 - K)), J >>> K) } else { if (K === 32) { return e.mathObj.Long.fromBits(J, 0) } else { return e.mathObj.Long.fromBits(J >>> (K - 32), 0) } } } }; return e }; i.jqx.math = function () { var H = new Object(); var e = new i.jqx.longInt(); H.getDecimalNotation = function (M, K) { if (K === "decimal") { return M } M = M.toString(); function I(T) { var S = "-0123456789"; var Q = "⁻⁰¹²³⁴⁵⁶⁷⁸⁹"; var P = ""; for (var R = 0; R < T.length; R++) { var U = S.indexOf(T.charAt(R)); P += (U !== -1 ? Q[U] : T[R]) } return P } function O(R) { if (R === "0") { return parseInt(R).toExponential() } var Q; if (R.charAt(0) === "-") { Q = "-"; R = R.slice(1, R.length) } else { Q = "" } var S = R.length - 1; while (R.charAt(R.length - 1) === "0") { R = R.slice(0, R.length - 1) } var P = R.slice(1, R.length); if (P !== "") { P = "." + P } return Q + "" + R.charAt(0) + P + "e+" + S } function L(S) { var R = S.indexOf("e"); var Q = S.slice(R + 1); var P = S.slice(0, R + 1); P = P.replace("e", "×10"); P += I(Q); P = P.replace("+", ""); return P } function J(V) { var U = V.indexOf("e"); var T = V.slice(U + 1); var R = V.slice(0, U); var S = parseInt(T, 10) % 3; R = R * Math.pow(10, S); var Q = V.slice(0, U).length - S - 2; if (Q >= 0) { R = R.toFixed(Q) } var P = R + "×10" + I((parseInt(T, 10) - S).toString()); return P } var N = O(M); if (K === "scientific") { return L(N) } else { if (K === "engineering") { return J(N) } else { return N } } }; i.extend(H, e.mathObj.Long); return H } })(jqxBaseFramework);

/*
jqxscrollbar
*/

(function (a) { a.jqx.jqxWidget("jqxScrollBar", "", {}); a.extend(a.jqx._jqxScrollBar.prototype, { defineInstance: function () { var b = { height: null, width: null, vertical: false, min: 0, max: 1000, value: 0, step: 10, largestep: 50, thumbMinSize: 10, thumbSize: 0, thumbStep: "auto", roundedCorners: "all", showButtons: true, disabled: false, touchMode: "auto", touchModeStyle: "auto", thumbTouchSize: 0, _triggervaluechanged: true, rtl: false, areaDownCapture: false, areaUpCapture: false, _initialLayout: false }; a.extend(true, this, b); return b }, createInstance: function (b) { this.render() }, render: function () { this._mouseup = new Date(); var c = this; var d = "<div id='jqxScrollOuterWrap' style='box-sizing: content-box; width:100%; height: 100%; align:left; border: 0px; valign:top; position: relative;'><div id='jqxScrollWrap' style='box-sizing: content-box; width:100%; height: 100%; left: 0px; top: 0px; align:left; valign:top; position: absolute;'><div id='jqxScrollBtnUp' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'><div></div></div><div id='jqxScrollAreaUp' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='jqxScrollThumb' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='jqxScrollAreaDown' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='jqxScrollBtnDown' style='box-sizing: content-box; align:left; valign:top; left: 0px; top: 0px; position: absolute;'><div></div></div></div></div>"; if (a.jqx.utilities && a.jqx.utilities.scrollBarButtonsVisibility == "hidden") { this.showButtons = false } if (c.WinJS) { MSApp.execUnsafeLocalFunction(function () { c.host.html(d) }) } else { this.element.innerHTML = d } if (this.width != undefined && parseInt(this.width) > 0) { this.host.width(parseInt(this.width)) } if (this.height != undefined && parseInt(this.height) > 0) { this.host.height(parseInt(this.height)) } this.isPercentage = false; if (this.width != null && this.width.toString().indexOf("%") != -1) { this.host.width(this.width); this.isPercentage = true } if (this.height != null && this.height.toString().indexOf("%") != -1) { this.host.height(this.height); this.isPercentage = true } if (this.isPercentage) { var e = this; a.jqx.utilities.resize(this.host, function () { e._arrange() }, false) } this.thumbCapture = false; this.scrollOuterWrap = a(this.element.firstChild); this.scrollWrap = a(this.scrollOuterWrap[0].firstChild); this.btnUp = a(this.scrollWrap[0].firstChild); this.areaUp = a(this.btnUp[0].nextSibling); this.btnThumb = a(this.areaUp[0].nextSibling); this.arrowUp = a(this.btnUp[0].firstChild); this.areaDown = a(this.btnThumb[0].nextSibling); this.btnDown = a(this.areaDown[0].nextSibling); this.arrowDown = a(this.btnDown[0].firstChild); var b = this.element.id; this.btnUp[0].id = "jqxScrollBtnUp" + b; this.btnDown[0].id = "jqxScrollBtnDown" + b; this.btnThumb[0].id = "jqxScrollThumb" + b; this.areaUp[0].id = "jqxScrollAreaUp" + b; this.areaDown[0].id = "jqxScrollAreaDown" + b; this.scrollWrap[0].id = "jqxScrollWrap" + b; this.scrollOuterWrap[0].id = "jqxScrollOuterWrap" + b; if (!this.host.jqxRepeatButton) { throw new Error("jqxScrollBar: Missing reference to jqxbuttons.js."); return } this.btnUp.jqxRepeatButton({ _ariaDisabled: true, overrideTheme: true, disabled: this.disabled }); this.btnDown.jqxRepeatButton({ _ariaDisabled: true, overrideTheme: true, disabled: this.disabled }); this.btnDownInstance = a.data(this.btnDown[0], "jqxRepeatButton").instance; this.btnUpInstance = a.data(this.btnUp[0], "jqxRepeatButton").instance; this.areaUp.jqxRepeatButton({ _scrollAreaButton: true, _ariaDisabled: true, overrideTheme: true }); this.areaDown.jqxRepeatButton({ _scrollAreaButton: true, _ariaDisabled: true, overrideTheme: true }); this.btnThumb.jqxButton({ _ariaDisabled: true, overrideTheme: true, disabled: this.disabled }); this.propertyChangeMap.value = function (f, h, g, i) { if (!(isNaN(i))) { if (g != i) { f.setPosition(parseFloat(i), true) } } }; this.propertyChangeMap.width = function (f, h, g, i) { if (f.width != undefined && parseInt(f.width) > 0) { f.host.width(parseInt(f.width)); f._arrange() } }; this.propertyChangeMap.height = function (f, h, g, i) { if (f.height != undefined && parseInt(f.height) > 0) { f.host.height(parseInt(f.height)); f._arrange() } }; this.propertyChangeMap.theme = function (f, h, g, i) { f.setTheme() }; this.propertyChangeMap.max = function (f, h, g, i) { if (!(isNaN(i))) { if (g != i) { f.max = parseInt(i); if (f.min > f.max) { f.max = f.min + 1 } f._arrange(); f.setPosition(f.value) } } }; this.propertyChangeMap.min = function (f, h, g, i) { if (!(isNaN(i))) { if (g != i) { f.min = parseInt(i); if (f.min > f.max) { f.max = f.min + 1 } f._arrange(); f.setPosition(f.value) } } }; this.propertyChangeMap.disabled = function (f, h, g, i) { if (g != i) { if (i) { f.host.addClass(f.toThemeProperty("jqx-fill-state-disabled")) } else { f.host.removeClass(f.toThemeProperty("jqx-fill-state-disabled")) } f.btnUp.jqxRepeatButton("disabled", f.disabled); f.btnDown.jqxRepeatButton("disabled", f.disabled); f.btnThumb.jqxButton("disabled", f.disabled) } }; this.propertyChangeMap.touchMode = function (f, h, g, i) { if (g != i) { f._updateTouchBehavior(); if (i === true) { f.showButtons = false; f.refresh() } else { if (i === false) { f.showButtons = true; f.refresh() } } } }; this.propertyChangeMap.rtl = function (f, h, g, i) { if (g != i) { f.refresh() } }; this.buttonUpCapture = false; this.buttonDownCapture = false; this._updateTouchBehavior(); this.setPosition(this.value); this._addHandlers(); this.setTheme() }, resize: function (c, b) { this.width = c; this.height = b; this._arrange() }, _updateTouchBehavior: function () { this.isTouchDevice = a.jqx.mobile.isTouchDevice(); if (this.touchMode == true) { if (a.jqx.browser.msie && a.jqx.browser.version < 9) { this.setTheme(); return } this.isTouchDevice = true; a.jqx.mobile.setMobileSimulator(this.btnThumb[0]); this._removeHandlers(); this._addHandlers(); this.setTheme() } else { if (this.touchMode == false) { this.isTouchDevice = false } } }, _addHandlers: function () { var j = this; var e = false; try { if (("ontouchstart" in window) || window.DocumentTouch && document instanceof DocumentTouch) { e = true; this._touchSupport = true } } catch (f) { } if (j.isTouchDevice || e) { this.addHandler(this.btnThumb, a.jqx.mobile.getTouchEventName("touchend"), function (k) { var l = j.vertical ? j.toThemeProperty("jqx-scrollbar-thumb-state-pressed") : j.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal"); var m = j.toThemeProperty("jqx-fill-state-pressed"); j.btnThumb.removeClass(l); j.btnThumb.removeClass(m); if (!j.disabled) { j.handlemouseup(j, k) } return false }); this.addHandler(this.btnThumb, a.jqx.mobile.getTouchEventName("touchstart"), function (k) { if (!j.disabled) { if (j.touchMode == true) { k.clientX = k.originalEvent.clientX; k.clientY = k.originalEvent.clientY } else { var l = k; if (l.originalEvent.touches && l.originalEvent.touches.length) { k.clientX = l.originalEvent.touches[0].clientX; k.clientY = l.originalEvent.touches[0].clientY } else { k.clientX = k.originalEvent.clientX; k.clientY = k.originalEvent.clientY } } j.handlemousedown(k); if (k.preventDefault) { k.preventDefault() } } }); a.jqx.mobile.touchScroll(this.element, j.max, function (q, p, l, k, m) { if (j.host.css("visibility") == "visible") { if (j.touchMode == true) { m.clientX = m.originalEvent.clientX; m.clientY = m.originalEvent.clientY } else { var o = m; if (o.originalEvent.touches && o.originalEvent.touches.length) { m.clientX = o.originalEvent.touches[0].clientX; m.clientY = o.originalEvent.touches[0].clientY } else { m.clientX = m.originalEvent.clientX; m.clientY = m.originalEvent.clientY } } var n = j.vertical ? j.toThemeProperty("jqx-scrollbar-thumb-state-pressed") : j.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal"); j.btnThumb.addClass(n); j.btnThumb.addClass(j.toThemeProperty("jqx-fill-state-pressed")); j.thumbCapture = true; j.handlemousemove(m) } }, j.element.id) } if (!this.isTouchDevice) { try { if (document.referrer != "" || window.frameElement) { if (window.top != null && window.top != window.self) { var b = null; if (window.parent && document.referrer) { b = document.referrer } if (b && b.indexOf(document.location.host) != -1) { var g = function (k) { if (!j.disabled) { j.handlemouseup(j, k) } }; if (window.top.document.addEventListener) { window.top.document.addEventListener("mouseup", g, false) } else { if (window.top.document.attachEvent) { window.top.document.attachEvent("onmouseup", g) } } } } } } catch (i) { } var c = "click mouseup mousedown"; this.addHandler(this.btnDown, c, function (l) { var k = j.step; if (Math.abs(j.max - j.min) <= k) { k = 1 } if (j.rtl && !j.vertical) { k = -j.step } switch (l.type) { case "click": if (j.buttonDownCapture && !j.isTouchDevice) { if (!j.disabled) { j.setPosition(j.value + k) } } else { if (!j.disabled && j.isTouchDevice) { j.setPosition(j.value + k) } } break; case "mouseup": if (!j.btnDownInstance.base.disabled && j.buttonDownCapture) { j.buttonDownCapture = false; j.btnDown.removeClass(j.toThemeProperty("jqx-scrollbar-button-state-pressed")); j.btnDown.removeClass(j.toThemeProperty("jqx-fill-state-pressed")); j._removeArrowClasses("pressed", "down"); j.handlemouseup(j, l); j.setPosition(j.value + k); return false } break; case "mousedown": if (!j.btnDownInstance.base.disabled) { j.buttonDownCapture = true; j.btnDown.addClass(j.toThemeProperty("jqx-fill-state-pressed")); j.btnDown.addClass(j.toThemeProperty("jqx-scrollbar-button-state-pressed")); j._addArrowClasses("pressed", "down"); return false } break } }); this.addHandler(this.btnUp, c, function (l) { var k = j.step; if (Math.abs(j.max - j.min) <= k) { k = 1 } if (j.rtl && !j.vertical) { k = -j.step } switch (l.type) { case "click": if (j.buttonUpCapture && !j.isTouchDevice) { if (!j.disabled) { j.setPosition(j.value - k) } } else { if (!j.disabled && j.isTouchDevice) { j.setPosition(j.value - k) } } break; case "mouseup": if (!j.btnUpInstance.base.disabled && j.buttonUpCapture) { j.buttonUpCapture = false; j.btnUp.removeClass(j.toThemeProperty("jqx-scrollbar-button-state-pressed")); j.btnUp.removeClass(j.toThemeProperty("jqx-fill-state-pressed")); j._removeArrowClasses("pressed", "up"); j.handlemouseup(j, l); j.setPosition(j.value - k); return false } break; case "mousedown": if (!j.btnUpInstance.base.disabled) { j.buttonUpCapture = true; j.btnUp.addClass(j.toThemeProperty("jqx-fill-state-pressed")); j.btnUp.addClass(j.toThemeProperty("jqx-scrollbar-button-state-pressed")); j._addArrowClasses("pressed", "up"); return false } break } }) } var h = "click"; if (this.isTouchDevice) { h = a.jqx.mobile.getTouchEventName("touchend") } this.addHandler(this.areaUp, h, function (l) { if (!j.disabled) { var k = j.largestep; if (j.rtl && !j.vertical) { k = -j.largestep } j.setPosition(j.value - k); return false } }); this.addHandler(this.areaDown, h, function (l) { if (!j.disabled) { var k = j.largestep; if (j.rtl && !j.vertical) { k = -j.largestep } j.setPosition(j.value + k); return false } }); this.addHandler(this.areaUp, "mousedown", function (k) { if (!j.disabled) { j.areaUpCapture = true; return false } }); this.addHandler(this.areaDown, "mousedown", function (k) { if (!j.disabled) { j.areaDownCapture = true; return false } }); this.addHandler(this.btnThumb, "mousedown dragstart", function (k) { if (k.type === "dragstart") { return false } if (!j.disabled) { j.handlemousedown(k) } if (k.preventDefault) { k.preventDefault() } }); this.addHandler(a(document), "mouseup." + this.element.id, function (k) { if (!j.disabled) { j.handlemouseup(j, k) } }); if (!this.isTouchDevice) { this.mousemoveFunc = function (k) { if (!j.disabled) { j.handlemousemove(k) } }; this.addHandler(a(document), "mousemove." + this.element.id, this.mousemoveFunc); this.addHandler(a(document), "mouseleave." + this.element.id, function (k) { if (!j.disabled) { j.handlemouseleave(k) } }); this.addHandler(a(document), "mouseenter." + this.element.id, function (k) { if (!j.disabled) { j.handlemouseenter(k) } }); if (!j.disabled) { this.addHandler(this.btnUp, "mouseenter mouseleave", function (k) { if (k.type === "mouseenter") { if (!j.disabled && !j.btnUpInstance.base.disabled && j.touchMode != true) { j.btnUp.addClass(j.toThemeProperty("jqx-scrollbar-button-state-hover")); j.btnUp.addClass(j.toThemeProperty("jqx-fill-state-hover")); j._addArrowClasses("hover", "up") } } else { if (!j.disabled && !j.btnUpInstance.base.disabled && j.touchMode != true) { j.btnUp.removeClass(j.toThemeProperty("jqx-scrollbar-button-state-hover")); j.btnUp.removeClass(j.toThemeProperty("jqx-fill-state-hover")); j._removeArrowClasses("hover", "up") } } }); var d = j.toThemeProperty("jqx-scrollbar-thumb-state-hover"); if (!j.vertical) { d = j.toThemeProperty("jqx-scrollbar-thumb-state-hover-horizontal") } this.addHandler(this.btnThumb, "mouseenter mouseleave", function (k) { if (k.type === "mouseenter") { if (!j.disabled && j.touchMode != true) { j.btnThumb.addClass(d); j.btnThumb.addClass(j.toThemeProperty("jqx-fill-state-hover")) } } else { if (!j.disabled && j.touchMode != true) { j.btnThumb.removeClass(d); j.btnThumb.removeClass(j.toThemeProperty("jqx-fill-state-hover")) } } }); this.addHandler(this.btnDown, "mouseenter mouseleave", function (k) { if (k.type === "mouseenter") { if (!j.disabled && !j.btnDownInstance.base.disabled && j.touchMode != true) { j.btnDown.addClass(j.toThemeProperty("jqx-scrollbar-button-state-hover")); j.btnDown.addClass(j.toThemeProperty("jqx-fill-state-hover")); j._addArrowClasses("hover", "down") } } else { if (!j.disabled && !j.btnDownInstance.base.disabled && j.touchMode != true) { j.btnDown.removeClass(j.toThemeProperty("jqx-scrollbar-button-state-hover")); j.btnDown.removeClass(j.toThemeProperty("jqx-fill-state-hover")); j._removeArrowClasses("hover", "down") } } }) } } }, destroy: function () { var b = this.btnUp; var f = this.btnDown; var d = this.btnThumb; var c = this.scrollWrap; var h = this.areaUp; var e = this.areaDown; this.arrowUp.remove(); delete this.arrowUp; this.arrowDown.remove(); delete this.arrowDown; e.removeClass(); h.removeClass(); f.removeClass(); b.removeClass(); d.removeClass(); b.jqxRepeatButton("destroy"); f.jqxRepeatButton("destroy"); h.jqxRepeatButton("destroy"); e.jqxRepeatButton("destroy"); d.jqxButton("destroy"); var g = a.data(this.element, "jqxScrollBar"); this._removeHandlers(); this.btnUp = null; this.btnDown = null; this.scrollWrap = null; this.areaUp = null; this.areaDown = null; this.scrollOuterWrap = null; delete this.mousemoveFunc; delete this.btnDownInstance; delete this.btnUpInstance; delete this.scrollOuterWrap; delete this.scrollWrap; delete this.btnDown; delete this.areaDown; delete this.areaUp; delete this.btnDown; delete this.btnUp; delete this.btnThumb; delete this.propertyChangeMap.value; delete this.propertyChangeMap.min; delete this.propertyChangeMap.max; delete this.propertyChangeMap.touchMode; delete this.propertyChangeMap.disabled; delete this.propertyChangeMap.theme; delete this.propertyChangeMap; if (g) { delete g.instance } this.host.removeData(); this.host.remove(); delete this.host; delete this.set; delete this.get; delete this.call; delete this.element }, _removeHandlers: function () { this.removeHandler(this.btnUp, "mouseenter"); this.removeHandler(this.btnDown, "mouseenter"); this.removeHandler(this.btnThumb, "mouseenter"); this.removeHandler(this.btnUp, "mouseleave"); this.removeHandler(this.btnDown, "mouseleave"); this.removeHandler(this.btnThumb, "mouseleave"); this.removeHandler(this.btnUp, "click"); this.removeHandler(this.btnDown, "click"); this.removeHandler(this.btnDown, "mouseup"); this.removeHandler(this.btnUp, "mouseup"); this.removeHandler(this.btnDown, "mousedown"); this.removeHandler(this.btnUp, "mousedown"); this.removeHandler(this.areaUp, "mousedown"); this.removeHandler(this.areaDown, "mousedown"); this.removeHandler(this.areaUp, "click"); this.removeHandler(this.areaDown, "click"); this.removeHandler(this.btnThumb, "mousedown"); this.removeHandler(this.btnThumb, "dragstart"); this.removeHandler(a(document), "mouseup." + this.element.id); if (!this.mousemoveFunc) { this.removeHandler(a(document), "mousemove." + this.element.id) } else { this.removeHandler(a(document), "mousemove." + this.element.id, this.mousemoveFunc) } this.removeHandler(a(document), "mouseleave." + this.element.id); this.removeHandler(a(document), "mouseenter." + this.element.id); var b = this }, _addArrowClasses: function (c, b) { if (c == "pressed") { c = "selected" } if (c != "") { c = "-" + c } if (this.vertical) { if (b == "up" || b == undefined) { this.arrowUp.addClass(this.toThemeProperty("jqx-icon-arrow-up" + c)) } if (b == "down" || b == undefined) { this.arrowDown.addClass(this.toThemeProperty("jqx-icon-arrow-down" + c)) } } else { if (b == "up" || b == undefined) { this.arrowUp.addClass(this.toThemeProperty("jqx-icon-arrow-left" + c)) } if (b == "down" || b == undefined) { this.arrowDown.addClass(this.toThemeProperty("jqx-icon-arrow-right" + c)) } } }, _removeArrowClasses: function (c, b) { if (c == "pressed") { c = "selected" } if (c != "") { c = "-" + c } if (this.vertical) { if (b == "up" || b == undefined) { this.arrowUp.removeClass(this.toThemeProperty("jqx-icon-arrow-up" + c)) } if (b == "down" || b == undefined) { this.arrowDown.removeClass(this.toThemeProperty("jqx-icon-arrow-down" + c)) } } else { if (b == "up" || b == undefined) { this.arrowUp.removeClass(this.toThemeProperty("jqx-icon-arrow-left" + c)) } if (b == "down" || b == undefined) { this.arrowDown.removeClass(this.toThemeProperty("jqx-icon-arrow-right" + c)) } } }, setTheme: function () { var o = this.btnUp; var m = this.btnDown; var p = this.btnThumb; var e = this.scrollWrap; var g = this.areaUp; var h = this.areaDown; var f = this.arrowUp; var i = this.arrowDown; this.scrollWrap[0].className = this.toThemeProperty("jqx-reset"); this.scrollOuterWrap[0].className = this.toThemeProperty("jqx-reset"); var k = this.toThemeProperty("jqx-reset"); this.areaDown[0].className = k; this.areaUp[0].className = k; var d = this.toThemeProperty("jqx-scrollbar") + " " + this.toThemeProperty("jqx-widget") + " " + this.toThemeProperty("jqx-widget-content"); this.host.addClass(d); m[0].className = this.toThemeProperty("jqx-scrollbar-button-state-normal"); o[0].className = this.toThemeProperty("jqx-scrollbar-button-state-normal"); var q = ""; if (this.vertical) { f[0].className = k + " " + this.toThemeProperty("jqx-icon-arrow-up"); i[0].className = k + " " + this.toThemeProperty("jqx-icon-arrow-down"); q = this.toThemeProperty("jqx-scrollbar-thumb-state-normal") } else { f[0].className = k + " " + this.toThemeProperty("jqx-icon-arrow-left"); i[0].className = k + " " + this.toThemeProperty("jqx-icon-arrow-right"); q = this.toThemeProperty("jqx-scrollbar-thumb-state-normal-horizontal") } q += " " + this.toThemeProperty("jqx-fill-state-normal"); p[0].className = q; if (this.disabled) { e.addClass(this.toThemeProperty("jqx-fill-state-disabled")); e.removeClass(this.toThemeProperty("jqx-scrollbar-state-normal")) } else { e.addClass(this.toThemeProperty("jqx-scrollbar-state-normal")); e.removeClass(this.toThemeProperty("jqx-fill-state-disabled")) } if (this.roundedCorners == "all") { this.host.addClass(this.toThemeProperty("jqx-rc-all")); if (this.vertical) { var j = a.jqx.cssroundedcorners("top"); j = this.toThemeProperty(j); o.addClass(j); var c = a.jqx.cssroundedcorners("bottom"); c = this.toThemeProperty(c); m.addClass(c) } else { var n = a.jqx.cssroundedcorners("left"); n = this.toThemeProperty(n); o.addClass(n); var l = a.jqx.cssroundedcorners("right"); l = this.toThemeProperty(l); m.addClass(l) } } else { var b = a.jqx.cssroundedcorners(this.roundedCorners); b = this.toThemeProperty(b); elBtnUp.addClass(b); elBtnDown.addClass(b) } var b = a.jqx.cssroundedcorners(this.roundedCorners); b = this.toThemeProperty(b); if (!p.hasClass(b)) { p.addClass(b) } if (this.isTouchDevice && this.touchModeStyle != false) { this.showButtons = false; p.addClass(this.toThemeProperty("jqx-scrollbar-thumb-state-normal-touch")) } }, isScrolling: function () { if (this.thumbCapture == undefined || this.buttonDownCapture == undefined || this.buttonUpCapture == undefined || this.areaDownCapture == undefined || this.areaUpCapture == undefined) { return false } return this.thumbCapture || this.buttonDownCapture || this.buttonUpCapture || this.areaDownCapture || this.areaUpCapture }, handlemousedown: function (c) { if (this.thumbCapture == undefined || this.thumbCapture == false) { this.thumbCapture = true; var b = this.btnThumb; if (b != null) { b.addClass(this.toThemeProperty("jqx-fill-state-pressed")); if (this.vertical) { b.addClass(this.toThemeProperty("jqx-scrollbar-thumb-state-pressed")) } else { b.addClass(this.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal")) } } } this.dragStartX = c.clientX; this.dragStartY = c.clientY; this.dragStartValue = this.value }, toggleHover: function (c, b) { }, refresh: function () { this._arrange() }, _setElementPosition: function (c, b, d) { if (!isNaN(b)) { if (parseInt(c[0].style.left) != parseInt(b)) { c[0].style.left = b + "px" } } if (!isNaN(d)) { if (parseInt(c[0].style.top) != parseInt(d)) { c[0].style.top = d + "px" } } }, _setElementTopPosition: function (b, c) { if (!isNaN(c)) { b[0].style.top = c + "px" } }, _setElementLeftPosition: function (c, b) { if (!isNaN(b)) { c[0].style.left = b + "px" } }, handlemouseleave: function (e) { var b = this.btnUp; var d = this.btnDown; if (this.buttonDownCapture || this.buttonUpCapture) { b.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed")); d.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed")); this._removeArrowClasses("pressed") } if (this.thumbCapture != true) { return } var c = this.btnThumb; var f = this.vertical ? this.toThemeProperty("jqx-scrollbar-thumb-state-pressed") : this.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal"); c.removeClass(f); c.removeClass(this.toThemeProperty("jqx-fill-state-pressed")) }, handlemouseenter: function (e) { var b = this.btnUp; var d = this.btnDown; if (this.buttonUpCapture) { b.addClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed")); b.addClass(this.toThemeProperty("jqx-fill-state-pressed")); this._addArrowClasses("pressed", "up") } if (this.buttonDownCapture) { d.addClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed")); d.addClass(this.toThemeProperty("jqx-fill-state-pressed")); this._addArrowClasses("pressed", "down") } if (this.thumbCapture != true) { return } var c = this.btnThumb; if (this.vertical) { c.addClass(this.toThemeProperty("jqx-scrollbar-thumb-state-pressed")) } else { c.addClass(this.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal")) } c.addClass(this.toThemeProperty("jqx-fill-state-pressed")) }, handlemousemove: function (b) { var i = this.btnUp; var e = this.btnDown; var d = 0; if (e == null || i == null) { return } if (i != null && e != null && this.buttonDownCapture != undefined && this.buttonUpCapture != undefined) { if (this.buttonDownCapture && b.which == d) { e.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed")); e.removeClass(this.toThemeProperty("jqx-fill-state-pressed")); this._removeArrowClasses("pressed", "down"); this.buttonDownCapture = false } else { if (this.buttonUpCapture && b.which == d) { i.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed")); i.removeClass(this.toThemeProperty("jqx-fill-state-pressed")); this._removeArrowClasses("pressed", "up"); this.buttonUpCapture = false } } } if (this.thumbCapture != true) { return false } var k = this.btnThumb; if (b.which == d && !this.isTouchDevice && !this._touchSupport) { this.thumbCapture = false; this._arrange(); var j = this.vertical ? this.toThemeProperty("jqx-scrollbar-thumb-state-pressed") : this.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal"); k.removeClass(j); k.removeClass(this.toThemeProperty("jqx-fill-state-pressed")); return true } if (b.preventDefault != undefined) { b.preventDefault() } if (b.originalEvent != null) { b.originalEvent.mouseHandled = true } if (b.stopPropagation != undefined) { b.stopPropagation() } var l = 0; try { if (!this.vertical) { l = b.clientX - this.dragStartX } else { l = b.clientY - this.dragStartY } var f = this._btnAndThumbSize; if (!this._btnAndThumbSize) { f = (this.vertical) ? i.height() + e.height() + k.height() : i.width() + e.width() + k.width() } var g = (this.max - this.min) / (this.scrollBarSize - f); if (this.thumbStep == "auto") { l *= g } else { l *= g; if (Math.abs(this.dragStartValue + l - this.value) >= parseInt(this.thumbStep)) { var c = Math.round(parseInt(l) / this.thumbStep) * this.thumbStep; if (this.rtl && !this.vertical) { this.setPosition(this.dragStartValue - c) } else { this.setPosition(this.dragStartValue + c) } return false } else { return false } } var c = l; if (this.rtl && !this.vertical) { c = -l } this.setPosition(this.dragStartValue + c) } catch (h) { alert(h) } return false }, handlemouseup: function (d, g) { var c = false; if (this.thumbCapture) { this.thumbCapture = false; var e = this.btnThumb; var h = this.vertical ? this.toThemeProperty("jqx-scrollbar-thumb-state-pressed") : this.toThemeProperty("jqx-scrollbar-thumb-state-pressed-horizontal"); e.removeClass(h); e.removeClass(this.toThemeProperty("jqx-fill-state-pressed")); c = true; this._mouseup = new Date() } this.areaDownCapture = this.areaUpCapture = false; if (this.buttonUpCapture || this.buttonDownCapture) { var b = this.btnUp; var f = this.btnDown; this.buttonUpCapture = false; this.buttonDownCapture = false; b.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed")); f.removeClass(this.toThemeProperty("jqx-scrollbar-button-state-pressed")); b.removeClass(this.toThemeProperty("jqx-fill-state-pressed")); f.removeClass(this.toThemeProperty("jqx-fill-state-pressed")); this._removeArrowClasses("pressed"); c = true; this._mouseup = new Date() } if (c) { if (g.preventDefault != undefined) { g.preventDefault() } if (g.originalEvent != null) { g.originalEvent.mouseHandled = true } if (g.stopPropagation != undefined) { g.stopPropagation() } } }, setPosition: function (b, g) { var d = this.element; if (b == undefined || b == NaN) { b = this.min } if (b >= this.max) { b = this.max } if (b < this.min) { b = this.min } if (this.value !== b || g == true) { if (b == this.max) { var c = new a.Event("complete"); this.host.trigger(c) } var f = this.value; if (this._triggervaluechanged) { var e = new a.Event("valueChanged"); e.previousValue = this.value; e.currentValue = b } this.value = b; this._positionelements(); if (this._triggervaluechanged) { this.host.trigger(e) } if (this.valueChanged) { this.valueChanged({ currentValue: this.value, previousvalue: f }) } } return b }, val: function (b) { var c = function (e) { for (var d in e) { if (e.hasOwnProperty(d)) { return false } } if (typeof b == "number") { return false } if (typeof b == "date") { return false } if (typeof b == "boolean") { return false } if (typeof b == "string") { return false } return true }; if (c(b) || arguments.length == 0) { return this.value } else { this.setPosition(b); return b } }, _getThumbSize: function (c) { var b = this.max - this.min; var d = 0; if (b > 1) { d = (c / (b + c) * c) } else { if (b == 1) { d = c - 1 } else { if (b == 0) { d = c } } } if (this.thumbSize > 0) { d = this.thumbSize } if (d < this.thumbMinSize) { d = this.thumbMinSize } return Math.min(d, c) }, _positionelements: function () { var g = this.element; var n = this.areaUp; var e = this.areaDown; var h = this.btnUp; var f = this.btnDown; var o = this.btnThumb; var b = this.scrollWrap; var p = this._height ? this._height : this.host.height(); var c = this._width ? this._width : this.host.width(); var l = (!this.vertical) ? p : c; if (!this.showButtons) { l = 0 } var m = (!this.vertical) ? c : p; this.scrollBarSize = m; var d = this._getThumbSize(m - 2 * l); d = Math.floor(d); if (d < this.thumbMinSize) { d = this.thumbMinSize } if (p == NaN || p < 10) { p = 10 } if (c == NaN || c < 10) { c = 10 } l += 2; this.btnSize = l; var i = this._btnAndThumbSize; if (!this._btnAndThumbSize) { var i = (this.vertical) ? 2 * this.btnSize + o.outerHeight() : 2 * this.btnSize + o.outerWidth(); i = Math.round(i) } var k = (m - i) / (this.max - this.min) * (this.value - this.min); if (this.rtl && !this.vertical) { k = (m - i) / (this.max - this.min) * (this.max - this.value - this.min) } k = Math.round(k); if (k < 0) { k = 0 } if (this.vertical) { var j = m - k - i; if (j < 0) { j = 0 } e[0].style.height = j + "px"; n[0].style.height = k + "px"; this._setElementTopPosition(n, l); this._setElementTopPosition(o, l + k); this._setElementTopPosition(e, l + k + d) } else { n[0].style.width = k + "px"; if (m - k - i >= 0) { e[0].style.width = m - k - i + "px" } else { e[0].style.width = "0px" } this._setElementLeftPosition(n, l); this._setElementLeftPosition(o, l + k); this._setElementLeftPosition(e, 2 + l + k + d) } }, _arrange: function () { var m = this; if (m._initialLayout) { m._initialLayout = false; return } if (m.min > m.max) { var x = m.min; m.min = m.max; m.max = x } if (m.min < 0) { var k = m.max - m.min; m.min = 0; m.max = k } var d = m.element; var g = m.areaUp; var t = m.areaDown; var c = m.btnUp; var l = m.btnDown; var u = m.btnThumb; var p = m.scrollWrap; var n = parseInt(m.element.style.height); var q = parseInt(m.element.style.width); if (m.isPercentage) { var n = m.host.height(); var q = m.host.width() } if (isNaN(n)) { n = 0 } if (isNaN(q)) { q = 0 } m._width = q; m._height = n; var b = (!m.vertical) ? n : q; if (!m.showButtons) { b = 0 } c[0].style.width = b + "px"; c[0].style.height = b + "px"; l[0].style.width = b + "px"; l[0].style.height = b + "px"; if (m.vertical) { p[0].style.width = q + 2 + "px" } else { p[0].style.height = n + 2 + "px" } m._setElementPosition(c, 0, 0); var s = b + 2; if (m.vertical) { m._setElementPosition(l, 0, n - s) } else { m._setElementPosition(l, q - s, 0) } var f = (!m.vertical) ? q : n; m.scrollBarSize = f; var h = m._getThumbSize(f - 2 * s); h = Math.floor(h - 2); if (h < m.thumbMinSize) { h = m.thumbMinSize } var o = false; if (m.isTouchDevice && m.touchModeStyle != false) { o = true } if (!m.vertical) { u[0].style.width = h + "px"; u[0].style.height = n + "px"; if (o && m.thumbTouchSize !== 0) { u.css({ height: m.thumbTouchSize + "px" }); u.css("margin-top", (m.host.height() - m.thumbTouchSize) / 2) } } else { u[0].style.width = q + "px"; u[0].style.height = h + "px"; if (o && m.thumbTouchSize !== 0) { u.css({ width: m.thumbTouchSize + "px" }); u.css("margin-left", (m.host.width() - m.thumbTouchSize) / 2) } } if (n == NaN || n < 10) { n = 10 } if (q == NaN || q < 10) { q = 10 } m.btnSize = b; var e = (m.vertical) ? 2 * s + (2 + parseInt(u[0].style.height)) : 2 * s + (2 + parseInt(u[0].style.width)); e = Math.round(e); m._btnAndThumbSize = e; var w = (f - e) / (m.max - m.min) * (m.value - m.min); if (m.rtl && !m.vertical) { w = (f - e) / (m.max - m.min) * (m.max - m.value - m.min) } w = Math.round(w); if (isNaN(w) || w < 0 || w === -Infinity || w === Infinity) { w = 0 } if (m.vertical) { var v = (f - w - e); if (v < 0) { v = 0 } t[0].style.height = v + "px"; t[0].style.width = q + "px"; g[0].style.height = w + "px"; g[0].style.width = q + "px"; var i = parseInt(m.element.style.height); if (m.isPercentage) { i = m.host.height() } u[0].style.visibility = "inherit"; if (i - 3 * parseInt(b) < 0 || i < e) { u[0].style.visibility = "hidden" } m._setElementPosition(g, 0, s); m._setElementPosition(u, 0, s + w); m._setElementPosition(t, 0, s + w + h) } else { if (w > 0) { g[0].style.width = w + "px" } if (n > 0) { g[0].style.height = n + "px" } var j = (f - w - e); if (j < 0) { j = 0 } t[0].style.width = j + "px"; t[0].style.height = n + "px"; var r = parseInt(m.element.style.width); if (m.isPercentage) { r = m.host.width() } u[0].style.visibility = "inherit"; if ((r - 3 * parseInt(b) < 0) || (r < e)) { u[0].style.visibility = "hidden" } m._setElementPosition(g, s, 0); m._setElementPosition(u, s + w, 0); m._setElementPosition(t, s + w + h, 0) } } }) })(jqxBaseFramework);

/*
jqxmenu
*/

(function (a) { a.jqx.jqxWidget("jqxMenu", "", {}); a.extend(a.jqx._jqxMenu.prototype, { defineInstance: function () { var b = { items: new Array(), mode: "horizontal", width: null, height: null, minimizeWidth: "auto", easing: "easeInOutSine", animationShowDuration: 200, animationHideDuration: 200, autoCloseInterval: 0, animationHideDelay: 100, animationShowDelay: 100, menuElements: new Array(), autoSizeMainItems: false, autoCloseOnClick: true, autoCloseOnMouseLeave: true, enableRoundedCorners: true, disabled: false, autoOpenPopup: true, enableHover: true, autoOpen: true, autoGenerate: true, clickToOpen: false, showTopLevelArrows: false, touchMode: "auto", source: null, popupZIndex: 17000, rtl: false, keyboardNavigation: false, lockFocus: false, title: "", events: ["shown", "closed", "itemclick", "initialized", "open", "close"] }; a.extend(true, this, b); return b }, createInstance: function (c) { var b = this; this.host.attr("role", "menubar"); a.jqx.utilities.resize(this.host, function () { b.refresh() }, false, this.mode != "popup"); if (this.minimizeWidth != "auto" && this.minimizeWidth != null && this.width && this.width.toString().indexOf("%") == -1) { a(window).resize(function () { b.refresh() }) } this.host.css("outline", "none"); if (this.source) { if (this.source != null) { var d = this.loadItems(this.source); this.element.innerHTML = d } } this._tmpHTML = this.element.innerHTML; if (this.element.innerHTML.indexOf("UL")) { var e = this.host.find("ul:first"); if (e.length > 0) { this._createMenu(e[0]) } } this.host.data("autoclose", {}); this._render(); this.setSize(); if (a.jqx.browser.msie && a.jqx.browser.version < 8) { this.host.attr("hideFocus", true) } }, focus: function () { try { this.host.focus(); if (this.mode === "popup") { var d = this.host.closest("div.jqx-menu-wrapper"); d.focus() } if (this.keyboardNavigation) { var c = this; var e = function () { if (!a.jqx.isHidden(a(c.items[0].element))) { a(c.items[0].element).addClass(c.toThemeProperty("jqx-fill-state-focus")); c.activeItem = c.items[0] } else { var f = c._nextVisibleItem(c.items[0], 0); if (f) { a(f.element).addClass(c.toThemeProperty("jqx-fill-state-focus")); c.activeItem = f } } }; if (!this.activeItem) { e() } else { if (!a.jqx.isHidden(a(this.activeItem.element))) { a(this.activeItem.element).addClass(this.toThemeProperty("jqx-fill-state-focus")) } else { a(this.activeItem.element).removeClass(this.toThemeProperty("jqx-fill-state-focus")); e() } } } } catch (b) { } }, loadItems: function (c, e) { if (c == null) { return } if (c.length == 0) { return "" } var b = this; this.items = new Array(); var d = '<ul class="jqx-menu-ul">'; if (e) { d = '<ul class="jqx-menu-ul" style="width:' + e + ';">' } a.map(c, function (f) { if (f == undefined) { return null } d += b._parseItem(f) }); d += "</ul>"; return d }, _parseItem: function (f) { var c = ""; if (f == undefined) { return null } var b = f.label; if (!f.label && f.html) { b = f.html } if (!b) { b = "Item" } if (typeof f === "string") { b = f } var e = false; if (f.selected != undefined && f.selected) { e = true } var d = false; if (f.disabled != undefined && f.disabled) { d = true } c += "<li"; if (d) { c += ' item-disabled="true" ' } if (f.label && !f.html) { c += ' item-label="' + b + '" ' } if (f.value != null) { c += ' item-value="' + f.value + '" ' } if (f.id != undefined) { c += ' id="' + f.id + '" ' } c += ">" + b; if (f.items) { if (f.subMenuWidth) { c += this.loadItems(f.items, f.subMenuWidth) } else { c += this.loadItems(f.items) } } c += "</li>"; return c }, setSize: function () { if (this.width != null && this.width.toString().indexOf("%") != -1) { this.host.width(this.width) } else { if (this.width != null && this.width.toString().indexOf("px") != -1) { this.host.width(this.width) } else { if (this.width != undefined && !isNaN(this.width)) { this.host.width(this.width) } } } if (this.height != null && this.height.toString().indexOf("%") != -1) { this.host.height(this.height) } else { if (this.height != null && this.height.toString().indexOf("px") != -1) { this.host.height(this.height) } else { if (this.height != undefined && !isNaN(this.height)) { this.host.height(this.height) } } } if (this.height === null) { this.host.height("auto") } var g = this; if (this.minimizeWidth != null && this.mode != "popup") { var f = a(window).width(); if (!a.jqx.response) { var e = false; if (navigator.userAgent.match(/Windows|Linux|MacOS/)) { var b = navigator.userAgent.indexOf("Windows Phone") >= 0 || navigator.userAgent.indexOf("WPDesktop") >= 0 || navigator.userAgent.indexOf("IEMobile") >= 0 || navigator.userAgent.indexOf("ZuneWP7") >= 0; if (!b) { e = true } } var c = this.minimizeWidth; if (e && this.minimizeWidth == "auto") { return } } if (this.minimizeWidth == "auto" && a.jqx.response) { var d = new a.jqx.response(); if (d.device.type == "Phone" || d.device.type == "Tablet") { if (!this.minimized) { this.minimize() } } } else { if ((f < c) && !this.minimized) { this.minimize() } else { if (this.minimized && f >= c) { this.restore() } } } } }, minimize: function () { if (this.minimized) { return } var e = this; this.host.addClass(this.toThemeProperty("jqx-menu-minimized")); this.minimized = true; this._tmpMode = this.mode; this.mode = "simple"; var h = this.host.closest("div.jqx-menu-wrapper"); h.remove(); a("#menuWrapper" + this.element.id).remove(); a.each(this.items, function () { var k = this; var j = a(k.element); var i = a(k.subMenuElement); var l = i.closest("div.jqx-menu-popup"); l.remove() }); if (this.source) { var d = this.loadItems(this.source); this.element.innerHTML = d; this._tmpHTML = this.element.innerHTML } this.element.innerHTML = this._tmpHTML; if (this.element.innerHTML.indexOf("UL")) { var g = this.host.find("ul:first"); if (g.length > 0) { this._createMenu(g[0]) } } this._render(); var c = this.host.find("ul:first"); c.wrap('<div class="jqx-menu-wrapper" style="z-index:' + this.popupZIndex + '; padding: 0px; display: none; margin: 0px; height: auto; width: auto; position: absolute; top: 0; left: 0; display: block; visibility: visible;"></div>'); var h = c.closest("div.jqx-menu-wrapper"); h[0].id = "menuWrapper" + this.element.id; h.detach(); h.appendTo(a(document.body)); h.addClass(this.toThemeProperty("jqx-widget")); h.addClass(this.toThemeProperty("jqx-menu")); h.addClass(this.toThemeProperty("jqx-menu-minimized")); h.addClass(this.toThemeProperty("jqx-widget-header")); c.children().hide(); h.hide(); h.find("ul").addClass(this.toThemeProperty("jqx-menu-ul-minimized")); this.minimizedItem = a("<div></div>"); this.minimizedItem.addClass(this.toThemeProperty("jqx-item")); this.minimizedItem.addClass(this.toThemeProperty("jqx-menu-item-top")); this.addHandler(h, "keydown", function (i) { return e.handleKeyDown(i) }); this.minimizedItem.addClass(this.toThemeProperty("jqx-menu-minimized-button")); this.minimizedItem.prependTo(this.host); this.titleElement = a("<div>" + this.title + "</div>"); this.titleElement.addClass(this.toThemeProperty("jqx-item")); this.titleElement.addClass(this.toThemeProperty("jqx-menu-title")); this.titleElement.prependTo(this.host); a("<div style='clear:both;'></div>").insertAfter(this.minimizedItem); e.minimizedHidden = true; var b = function (j) { e.minimizedHidden = true; e.minimizedItem.show(); var i = false; if (e.minimizedItem.css("float") == "right") { i = true } h.animate({ left: !i ? -h.outerWidth() : e.host.coord().left + e.host.width() + h.width(), opacity: 0 }, e.animationHideDuration, function () { h.find("ul:first").children().hide(); h.hide() }) }; var f = function (k) { if (e.minimizedHidden) { h.find("ul:first").children().show(); e.minimizedHidden = false; h.show(); h.css("opacity", 0); h.css("left", -h.outerWidth()); var j = false; var i = h.width(); if (e.minimizedItem.css("float") == "right") { h.css("left", e.host.coord().left + e.host.width() + i); j = true } h.css("top", e.host.coord().top + e.host.height()); h.animate({ left: !j ? e.host.coord().left : e.host.coord().left + e.host.width() - i, opacity: 0.95 }, e.animationShowDuration, function () { }) } else { b(k) } e._raiseEvent("2", { type: "mouse", item: e.minimizedItem[0], event: k }); e.setSize() }; this.addHandler(a(window), "orientationchange.jqxmenu" + this.element.id, function (i) { setTimeout(function () { if (!e.minimizedHidden) { var j = h.width(); var k = false; var j = h.width(); if (e.minimizedItem.css("float") == "right") { k = true } h.css("top", e.host.coord().top + e.host.height()); h.css({ left: !k ? e.host.coord().left : e.host.coord().left + e.host.width() - j }) } }, 25) }); this.addHandler(this.minimizedItem, "click", function (i) { f(i) }) }, restore: function () { if (!this.minimized) { return } this.host.find("ul").removeClass(this.toThemeProperty("jqx-menu-ul-minimized")); this.host.removeClass(this.toThemeProperty("jqx-menu-minimized")); this.minimized = false; this.mode = this._tmpMode; if (this.minimizedItem) { this.minimizedItem.remove() } var d = a("#menuWrapper" + this.element.id); d.remove(); if (this.source) { var b = this.loadItems(this.source); this.element.innerHTML = b; this._tmpHTML = b } this.element.innerHTML = this._tmpHTML; if (this.element.innerHTML.indexOf("UL")) { var c = this.host.find("ul:first"); if (c.length > 0) { this._createMenu(c[0]) } } this.setSize(); this._render() }, isTouchDevice: function () { if (this._isTouchDevice != undefined) { return this._isTouchDevice } var b = a.jqx.mobile.isTouchDevice(); if (this.touchMode == true) { b = true } else { if (this.touchMode == false) { b = false } } if (b) { this.host.addClass(this.toThemeProperty("jqx-touch")); a(".jqx-menu-item").addClass(this.toThemeProperty("jqx-touch")) } this._isTouchDevice = b; return b }, refresh: function (b) { if (!b) { this.setSize() } }, resize: function (c, b) { this.width = c; this.height = b; this.refresh() }, _closeAll: function (f) { var d = f != null ? f.data : this; var b = d.items; a.each(b, function () { var e = this; if (e.hasItems == true) { if (e.isOpen) { d._closeItem(d, e) } } }); if (d.mode == "popup") { if (f != null) { var c = d._isRightClick(f); if (!c) { d.close() } } } }, closeItem: function (e) { if (e == null) { return false } var b = e; var c = document.getElementById(b); var d = this; a.each(d.items, function () { var f = this; if (f.isOpen == true && f.element == c) { d._closeItem(d, f); if (f.parentId) { d.closeItem(f.parentId) } } }); return true }, openItem: function (e) { if (e == null) { return false } var b = e; var c = document.getElementById(b); var d = this; a.each(d.items, function () { var f = this; if (f.isOpen == false && f.element == c) { d._openItem(d, f); if (f.parentId) { d.openItem(f.parentId) } } }); return true }, _getClosedSubMenuOffset: function (c) { var b = a(c.subMenuElement); var f = -b.outerHeight(); var e = -b.outerWidth(); var d = c.level == 0 && this.mode == "horizontal"; if (d) { e = 0 } else { f = 0 } switch (c.openVerticalDirection) { case "up": case "center": f = b.outerHeight(); break } switch (c.openHorizontalDirection) { case this._getDir("left"): if (d) { e = 0 } else { e = b.outerWidth() } break; case "center": if (d) { e = 0 } else { e = b.outerWidth() } break } return { left: e, top: f} }, _closeItem: function (l, o, g, c) { if (l == null || o == null) { return false } var j = a(o.subMenuElement); var b = o.level == 0 && this.mode == "horizontal"; var f = this._getClosedSubMenuOffset(o); var m = f.top; var e = f.left; var i = a(o.element); var k = j.closest("div.jqx-menu-popup"); if (k != null) { var h = l.animationHideDelay; if (c == true) { h = 0 } if (j.data("timer") && j.data("timer").show != null) { clearTimeout(j.data("timer").show); j.data("timer").show = null } var n = function () { o.isOpen = false; if (b) { j.stop().animate({ top: m }, l.animationHideDuration, function () { a(o.element).removeClass(l.toThemeProperty("jqx-fill-state-pressed")); a(o.element).removeClass(l.toThemeProperty("jqx-menu-item-top-selected")); a(o.element).removeClass(l.toThemeProperty("jqx-rc-b-expanded")); k.removeClass(l.toThemeProperty("jqx-rc-t-expanded")); var p = a(o.arrow); if (p.length > 0 && l.showTopLevelArrows) { p.removeClass(); if (o.openVerticalDirection == "down") { p.addClass(l.toThemeProperty("jqx-menu-item-arrow-down")); p.addClass(l.toThemeProperty("jqx-icon-arrow-down")) } else { p.addClass(l.toThemeProperty("jqx-menu-item-arrow-up")); p.addClass(l.toThemeProperty("jqx-icon-arrow-up")) } } a.jqx.aria(a(o.element), "aria-expanded", false); k.css({ display: "none" }); if (l.animationHideDuration == 0) { j.css({ top: m }) } l._raiseEvent("1", o) }) } else { if (!a.jqx.browser.msie) { } j.stop().animate({ left: e }, l.animationHideDuration, function () { if (l.animationHideDuration == 0) { j.css({ left: e }) } if (o.level > 0) { a(o.element).removeClass(l.toThemeProperty("jqx-fill-state-pressed")); a(o.element).removeClass(l.toThemeProperty("jqx-menu-item-selected")); var p = a(o.arrow); if (p.length > 0) { p.removeClass(); if (o.openHorizontalDirection != "left") { p.addClass(l.toThemeProperty("jqx-menu-item-arrow-" + l._getDir("right"))); p.addClass(l.toThemeProperty("jqx-icon-arrow-" + l._getDir("right"))) } else { p.addClass(l.toThemeProperty("jqx-menu-item-arrow-" + l._getDir("left"))); p.addClass(l.toThemeProperty("jqx-icon-arrow-" + l._getDir("left"))) } } } else { a(o.element).removeClass(l.toThemeProperty("jqx-fill-state-pressed")); a(o.element).removeClass(l.toThemeProperty("jqx-menu-item-top-selected")); var p = a(o.arrow); if (p.length > 0) { p.removeClass(); if (o.openHorizontalDirection != "left") { p.addClass(l.toThemeProperty("jqx-menu-item-arrow-top-" + l._getDir("right"))); p.addClass(l.toThemeProperty("jqx-icon-arrow-" + l._getDir("right"))) } else { p.addClass(l.toThemeProperty("jqx-menu-item-arrow-top-" + l._getDir("left"))); p.addClass(l.toThemeProperty("jqx-icon-arrow-" + l._getDir("left"))) } } } a.jqx.aria(a(o.element), "aria-expanded", false); k.css({ display: "none" }); l._raiseEvent("1", o) }) } }; if (h > 0) { if (j.data("timer")) { j.data("timer").hide = setTimeout(function () { n() }, h) } } else { n() } if (g != undefined && g) { var d = j.children(); a.each(d, function () { if (l.menuElements[this.id] && l.menuElements[this.id].isOpen) { var p = a(l.menuElements[this.id].subMenuElement); l._closeItem(l, l.menuElements[this.id], true, true) } }) } } }, getSubItems: function (i, h) { if (i == null) { return false } var g = this; var c = new Array(); if (h != null) { a.extend(c, h) } var d = i; var f = this.menuElements[d]; var b = a(f.subMenuElement); var e = b.find(".jqx-menu-item"); a.each(e, function () { c[this.id] = g.menuElements[this.id]; var j = g.getSubItems(this.id, c); a.extend(c, j) }); return c }, disable: function (g, d) { if (g == null) { return } var c = g; var f = this; if (this.menuElements[c]) { var e = this.menuElements[c]; e.disabled = d; var b = a(e.element); e.element.disabled = d; a.each(b.children(), function () { this.disabled = d }); if (d) { b.addClass(f.toThemeProperty("jqx-menu-item-disabled")); b.addClass(f.toThemeProperty("jqx-fill-state-disabled")) } else { b.removeClass(f.toThemeProperty("jqx-menu-item-disabled")); b.removeClass(f.toThemeProperty("jqx-fill-state-disabled")) } } }, getItem: function (c) { if (this.menuElements[c]) { var b = this.menuElements[c]; return b } return null }, disableItem: function (b) { this.disable(b, true) }, hideItem: function (c) { if (this.menuElements[c]) { var b = this.menuElements[c]; a(b.element).hide() } }, showItem: function (c) { if (this.menuElements[c]) { var b = this.menuElements[c]; a(b.element).show() } }, enableItem: function (b) { this.disable(b, false) }, _setItemProperty: function (g, c, f) { if (g == null) { return } var b = g; var e = this; if (this.menuElements[b]) { var d = this.menuElements[b]; if (d[c]) { d[c] = f } } }, setItemOpenDirection: function (d, c, e) { if (d == null) { return } var j = d; var g = this; var f = a.jqx.browser.msie && a.jqx.browser.version < 8; if (this.menuElements[j]) { var i = this.menuElements[j]; if (c != null) { i.openHorizontalDirection = c; if (i.hasItems && i.level > 0) { var h = a(i.element); if (h != undefined) { var b = a(i.arrow); if (i.arrow == null) { b = a('<span id="arrow' + h[0].id + '"></span>'); if (!f) { b.prependTo(h) } else { b.appendTo(h) } i.arrow = b[0] } b.removeClass(); if (i.openHorizontalDirection == "left") { b.addClass(g.toThemeProperty("jqx-menu-item-arrow-" + g._getDir("left"))); b.addClass(g.toThemeProperty("jqx-icon-arrow-" + g._getDir("left"))) } else { b.addClass(g.toThemeProperty("jqx-menu-item-arrow-" + g._getDir("right"))); b.addClass(g.toThemeProperty("jqx-icon-arrow-" + g._getDir("right"))) } b.css("visibility", "visible"); if (!f) { b.css("display", "block"); b.css("float", "right") } else { b.css("display", "inline-block"); b.css("float", "none") } } } } if (e != null) { i.openVerticalDirection = e; var b = a(i.arrow); var h = a(i.element); if (!g.showTopLevelArrows) { return } if (h != undefined) { if (i.arrow == null) { b = a('<span id="arrow' + h[0].id + '"></span>'); if (!f) { b.prependTo(h) } else { b.appendTo(h) } i.arrow = b[0] } b.removeClass(); if (i.openVerticalDirection == "down") { b.addClass(g.toThemeProperty("jqx-menu-item-arrow-down")); b.addClass(g.toThemeProperty("jqx-icon-arrow-down")) } else { b.addClass(g.toThemeProperty("jqx-menu-item-arrow-up")); b.addClass(g.toThemeProperty("jqx-icon-arrow-up")) } b.css("visibility", "visible"); if (!f) { b.css("display", "block"); b.css("float", "right") } else { b.css("display", "inline-block"); b.css("float", "none") } } } } }, _getSiblings: function (d) { var e = new Array(); var b = 0; for (var c = 0; c < this.items.length; c++) { if (this.items[c] == d) { continue } if (this.items[c].parentId == d.parentId && this.items[c].hasItems) { e[b++] = this.items[c] } } return e }, _openItem: function (s, r, q) { if (s == null || r == null) { return false } if (r.isOpen) { return false } if (r.disabled) { return false } if (s.disabled) { return false } var l = s.popupZIndex; if (q != undefined) { l = q } var e = s.animationHideDuration; s.animationHideDuration = 0; s._closeItem(s, r, true, true); s.animationHideDuration = e; a(r.element).focus(); var f = [5, 5]; var t = a(r.subMenuElement); if (t != null) { t.stop() } if (t.data("timer") && t.data("timer").hide != null) { clearTimeout(t.data("timer").hide) } var o = t.closest("div.jqx-menu-popup"); var h = a(r.element); var i = r.level == 0 ? this._getOffset(r.element) : h.position(); if (r.level > 0 && this.hasTransform) { var p = parseInt(h.coord().top) - parseInt(this._getOffset(r.element).top); i.top += p } if (r.level == 0 && this.mode == "popup") { i = h.coord() } var j = r.level == 0 && this.mode == "horizontal"; var b = j ? i.left : this.menuElements[r.parentId] != null && this.menuElements[r.parentId].subMenuElement != null ? parseInt(a(a(this.menuElements[r.parentId].subMenuElement).closest("div.jqx-menu-popup")).outerWidth()) - f[0] : parseInt(t.outerWidth()); o.css({ visibility: "visible", display: "block", left: b, top: j ? i.top + h.outerHeight() : i.top, zIndex: l }); t.css("display", "block"); if (this.mode != "horizontal" && r.level == 0) { var d = this._getOffset(this.element); o.css("left", -1 + d.left + this.host.outerWidth()); t.css("left", -t.outerWidth()) } else { var c = this._getClosedSubMenuOffset(r); t.css("left", c.left); t.css("top", c.top) } o.css({ height: parseInt(t.outerHeight()) + parseInt(f[1]) + "px" }); var n = 0; var g = 0; switch (r.openVerticalDirection) { case "up": if (j) { t.css("top", t.outerHeight()); n = f[1]; var k = parseInt(t.parent().css("padding-bottom")); if (isNaN(k)) { k = 0 } if (k > 0) { o.addClass(this.toThemeProperty("jqx-menu-popup-clear")) } t.css("top", t.outerHeight() - k); o.css({ display: "block", top: i.top - o.outerHeight(), zIndex: l }) } else { n = f[1]; t.css("top", t.outerHeight()); o.css({ display: "block", top: i.top - o.outerHeight() + f[1] + h.outerHeight(), zIndex: l }) } break; case "center": if (j) { t.css("top", 0); o.css({ display: "block", top: i.top - o.outerHeight() / 2 + f[1], zIndex: l }) } else { t.css("top", 0); o.css({ display: "block", top: i.top + h.outerHeight() / 2 - o.outerHeight() / 2 + f[1], zIndex: l }) } break } switch (r.openHorizontalDirection) { case this._getDir("left"): if (j) { o.css({ left: i.left - (o.outerWidth() - h.outerWidth() - f[0]) }) } else { g = 0; t.css("left", o.outerWidth()); o.css({ left: i.left - (o.outerWidth()) + 2 * r.level }) } break; case "center": if (j) { o.css({ left: i.left - (o.outerWidth() / 2 - h.outerWidth() / 2 - f[0] / 2) }) } else { o.css({ left: i.left - (o.outerWidth() / 2 - h.outerWidth() / 2 - f[0] / 2) }); t.css("left", o.outerWidth()) } break } if (j) { if (parseInt(t.css("top")) == n) { r.isOpen = true; return } } else { if (parseInt(t.css("left")) == g) { r.isOpen == true; return } } a.each(s._getSiblings(r), function () { s._closeItem(s, this, true, true) }); var m = a.data(s.element, "animationHideDelay"); s.animationHideDelay = m; if (this.autoCloseInterval > 0) { if (this.host.data("autoclose") != null && this.host.data("autoclose").close != null) { clearTimeout(this.host.data("autoclose").close) } if (this.host.data("autoclose") != null) { this.host.data("autoclose").close = setTimeout(function () { s._closeAll() }, this.autoCloseInterval) } } if (t.data("timer")) { t.data("timer").show = setTimeout(function () { if (o != null) { if (j) { t.stop(); t.css("left", g); if (!a.jqx.browser.msie) { } h.addClass(s.toThemeProperty("jqx-fill-state-pressed")); h.addClass(s.toThemeProperty("jqx-menu-item-top-selected")); if (r.openVerticalDirection == "down") { a(r.element).addClass(s.toThemeProperty("jqx-rc-b-expanded")); o.addClass(s.toThemeProperty("jqx-rc-t-expanded")) } else { a(r.element).addClass(s.toThemeProperty("jqx-rc-t-expanded")); o.addClass(s.toThemeProperty("jqx-rc-b-expanded")) } var u = a(r.arrow); if (u.length > 0 && s.showTopLevelArrows) { u.removeClass(); if (r.openVerticalDirection == "down") { u.addClass(s.toThemeProperty("jqx-menu-item-arrow-down-selected")); u.addClass(s.toThemeProperty("jqx-icon-arrow-down")) } else { u.addClass(s.toThemeProperty("jqx-menu-item-arrow-up-selected")); u.addClass(s.toThemeProperty("jqx-icon-arrow-up")) } } if (s.animationShowDuration == 0) { t.css({ top: n }); r.isOpen = true; s._raiseEvent("0", r); a.jqx.aria(a(r.element), "aria-expanded", true) } else { t.animate({ top: n }, s.animationShowDuration, s.easing, function () { r.isOpen = true; a.jqx.aria(a(r.element), "aria-expanded", true); s._raiseEvent("0", r) }) } } else { t.stop(); t.css("top", n); if (!a.jqx.browser.msie) { } if (r.level > 0) { h.addClass(s.toThemeProperty("jqx-fill-state-pressed")); h.addClass(s.toThemeProperty("jqx-menu-item-selected")); var u = a(r.arrow); if (u.length > 0) { u.removeClass(); if (r.openHorizontalDirection != "left") { u.addClass(s.toThemeProperty("jqx-menu-item-arrow-" + s._getDir("right") + "-selected")); u.addClass(s.toThemeProperty("jqx-icon-arrow-" + s._getDir("right"))) } else { u.addClass(s.toThemeProperty("jqx-menu-item-arrow-" + s._getDir("left") + "-selected")); u.addClass(s.toThemeProperty("jqx-icon-arrow-" + s._getDir("left"))) } } } else { h.addClass(s.toThemeProperty("jqx-fill-state-pressed")); h.addClass(s.toThemeProperty("jqx-menu-item-top-selected")); var u = a(r.arrow); if (u.length > 0) { u.removeClass(); if (r.openHorizontalDirection != "left") { u.addClass(s.toThemeProperty("jqx-menu-item-arrow-" + s._getDir("right") + "-selected")); u.addClass(s.toThemeProperty("jqx-icon-arrow-" + s._getDir("right"))) } else { u.addClass(s.toThemeProperty("jqx-menu-item-arrow-" + s._getDir("left") + "-selected")); u.addClass(s.toThemeProperty("jqx-icon-arrow-" + s._getDir("left"))) } } } if (!a.jqx.browser.msie) { } if (s.animationShowDuration == 0) { t.css({ left: g }); s._raiseEvent("0", r); r.isOpen = true; a.jqx.aria(a(r.element), "aria-expanded", true) } else { t.animate({ left: g }, s.animationShowDuration, s.easing, function () { s._raiseEvent("0", r); r.isOpen = true; a.jqx.aria(a(r.element), "aria-expanded", true) }) } } } }, this.animationShowDelay) } }, _getDir: function (b) { switch (b) { case "left": return !this.rtl ? "left" : "right"; case "right": return this.rtl ? "left" : "right" } return "left" }, _applyOrientation: function (i, d) { var g = this; var f = 0; g.host.removeClass(g.toThemeProperty("jqx-menu-horizontal")); g.host.removeClass(g.toThemeProperty("jqx-menu-vertical")); g.host.removeClass(g.toThemeProperty("jqx-menu")); g.host.removeClass(g.toThemeProperty("jqx-widget")); g.host.addClass(g.toThemeProperty("jqx-widget")); g.host.addClass(g.toThemeProperty("jqx-menu")); if (i != undefined && d != undefined && d == "popup") { if (g.host.parent().length > 0 && g.host.parent().parent().length > 0 && g.host.parent().parent()[0] == document.body) { var h = a.data(document.body, "jqxMenuOldHost" + g.element.id); if (h != null) { var e = g.host.closest("div.jqx-menu-wrapper"); e.remove(); e.appendTo(h); g.host.css("display", "block"); g.host.css("visibility", "visible"); e.css("display", "block"); e.css("visibility", "visible") } } } else { if (i == undefined && d == undefined) { a.data(document.body, "jqxMenuOldHost" + g.element.id, g.host.parent()[0]) } } if (g.autoOpenPopup) { if (g.mode == "popup") { g.addHandler(a(document), "contextmenu." + g.element.id, function (j) { return false }); g.addHandler(a(document), "mousedown.menu" + g.element.id, function (j) { g._openContextMenu(j) }) } else { g.removeHandler(a(document), "contextmenu." + g.element.id); g.removeHandler(a(document), "mousedown.menu" + g.element.id) } } else { g.removeHandler(a(document), "contextmenu." + g.element.id); g.removeHandler(a(document), "mousedown.menu" + g.element.id); g.addHandler(a(document), "contextmenu." + g.element.id, function (j) { if (j.target && j.target.className.indexOf && j.target.className.indexOf("jqx-menu") >= 0) { return false } }) } if (g.rtl) { g.host.addClass(g.toThemeProperty("jqx-rtl")) } switch (g.mode) { case "horizontal": g.host.addClass(g.toThemeProperty("jqx-widget-header")); g.host.addClass(g.toThemeProperty("jqx-menu-horizontal")); a.each(g.items, function () { var l = this; $element = a(l.element); var k = a(l.arrow); k.removeClass(); if (l.hasItems && l.level > 0) { var k = a('<span style="border: none; background-color: transparent;" id="arrow' + $element[0].id + '"></span>'); k.prependTo($element); k.css("float", g._getDir("right")); k.addClass(g.toThemeProperty("jqx-menu-item-arrow-" + g._getDir("right"))); k.addClass(g.toThemeProperty("jqx-icon-arrow-" + g._getDir("right"))); l.arrow = k[0] } if (l.level == 0) { a(l.element).css("float", g._getDir("left")); if (!l.ignoretheme && l.hasItems && g.showTopLevelArrows) { var k = a('<span style="border: none; background-color: transparent;" id="arrow' + $element[0].id + '"></span>'); var j = a.jqx.browser.msie && a.jqx.browser.version < 8; if (l.arrow == null) { if (!j) { k.prependTo($element) } else { k.appendTo($element) } } else { k = a(l.arrow) } if (l.openVerticalDirection == "down") { k.addClass(g.toThemeProperty("jqx-menu-item-arrow-down")); k.addClass(g.toThemeProperty("jqx-icon-arrow-down")) } else { k.addClass(g.toThemeProperty("jqx-menu-item-arrow-up")); k.addClass(g.toThemeProperty("jqx-icon-arrow-up")) } k.css("visibility", "visible"); if (!j) { k.css("display", "block"); k.css("float", "right") } else { k.css("display", "inline-block") } l.arrow = k[0] } else { if (!l.ignoretheme && l.hasItems && !g.showTopLevelArrows) { if (l.arrow != null) { var k = a(l.arrow); k.remove(); l.arrow = null } } } f = Math.max(f, $element.height()) } }); break; case "vertical": case "popup": case "simple": g.host.addClass(g.toThemeProperty("jqx-menu-vertical")); a.each(g.items, function () { var k = this; $element = a(k.element); if (k.hasItems && !k.ignoretheme) { if (k.arrow) { a(k.arrow).remove() } if (g.mode == "simple") { return true } var j = a('<span style="border: none; background-color: transparent;" id="arrow' + $element[0].id + '"></span>'); j.prependTo($element); j.css("float", "right"); if (k.level == 0) { j.addClass(g.toThemeProperty("jqx-menu-item-arrow-top-" + g._getDir("right"))); j.addClass(g.toThemeProperty("jqx-icon-arrow-" + g._getDir("right"))) } else { j.addClass(g.toThemeProperty("jqx-menu-item-arrow-" + g._getDir("right"))); j.addClass(g.toThemeProperty("jqx-icon-arrow-" + g._getDir("right"))) } k.arrow = j[0] } $element.css("float", "none") }); if (g.mode == "popup") { g.host.addClass(g.toThemeProperty("jqx-widget-content")); g.host.wrap('<div tabindex=0 class="jqx-menu-wrapper" style="z-index:' + g.popupZIndex + '; border: none; background-color: transparent; padding: 0px; margin: 0px; position: absolute; top: 0; left: 0; display: block; visibility: visible;"></div>'); var e = g.host.closest("div.jqx-menu-wrapper"); g.host.addClass(g.toThemeProperty("jqx-popup")); e[0].id = "menuWrapper" + g.element.id; e.appendTo(a(document.body)); g.addHandler(e, "keydown", function (j) { return g.handleKeyDown(j) }) } else { g.host.addClass(g.toThemeProperty("jqx-widget-header")) } if (g.mode == "popup") { var b = g.host.height(); g.host.css("position", "absolute"); g.host.css("top", "0"); g.host.css("left", "0"); if (g.mode != "simple") { g.host.height(b); g.host.css("display", "none") } } break } var c = g.isTouchDevice(); if (g.autoCloseOnClick) { g.removeHandler(a(document), "mousedown.menu" + g.element.id, g._closeAfterClick); g.addHandler(a(document), "mousedown.menu" + g.element.id, g._closeAfterClick, g); if (c) { g.removeHandler(a(document), a.jqx.mobile.getTouchEventName("touchstart") + ".menu" + g.element.id, g._closeAfterClick, g); g.addHandler(a(document), a.jqx.mobile.getTouchEventName("touchstart") + ".menu" + g.element.id, g._closeAfterClick, g) } } }, _getBodyOffset: function () { var c = 0; var b = 0; if (a("body").css("border-top-width") != "0px") { c = parseInt(a("body").css("border-top-width")); if (isNaN(c)) { c = 0 } } if (a("body").css("border-left-width") != "0px") { b = parseInt(a("body").css("border-left-width")); if (isNaN(b)) { b = 0 } } return { left: b, top: c} }, _getOffset: function (c) { var e = a.jqx.mobile.isSafariMobileBrowser(); var i = a(c).coord(true); var h = i.top; var g = i.left; if (a("body").css("border-top-width") != "0px") { h = parseInt(h) + this._getBodyOffset().top } if (a("body").css("border-left-width") != "0px") { g = parseInt(g) + this._getBodyOffset().left } var d = a.jqx.mobile.isWindowsPhone(); var f = a.jqx.mobile.isTouchDevice(); if (this.hasTransform || (e != null && e) || d || f) { var b = { left: a.jqx.mobile.getLeftPos(c), top: a.jqx.mobile.getTopPos(c) }; return b } else { return { left: g, top: h} } }, _isRightClick: function (c) { var b; if (!c) { var c = window.event } if (c.which) { b = (c.which == 3) } else { if (c.button) { b = (c.button == 2) } } return b }, _openContextMenu: function (d) { var c = this; var b = c._isRightClick(d); if (b) { c.open(parseInt(d.clientX) + 5, parseInt(d.clientY) + 5) } }, close: function () { var c = this; var d = a.data(this.element, "contextMenuOpened" + this.element.id); if (d) { var b = this.host; a.each(c.items, function () { var e = this; if (e.hasItems) { c._closeItem(c, e) } }); a.each(c.items, function () { var e = this; if (e.isOpen == true) { $submenu = a(e.subMenuElement); var f = $submenu.closest("div.jqx-menu-popup"); f.hide(this.animationHideDuration) } }); this.host.hide(this.animationHideDuration); a.data(c.element, "contextMenuOpened" + this.element.id, false); c._raiseEvent("1", c); c._raiseEvent("5") } }, open: function (e, d) { if (this.mode == "popup") { var c = 0; if (this.host.css("display") == "block") { this.close(); c = this.animationHideDuration } var b = this; if (e == undefined || e == null) { e = 0 } if (d == undefined || d == null) { d = 0 } setTimeout(function () { b.host.show(b.animationShowDuration); b.host.css("visibility", "visible"); a.data(b.element, "contextMenuOpened" + b.element.id, true); b._raiseEvent("0", b); b._raiseEvent("4", { left: e, top: d }); b.host.css("z-index", 9999); if (e != undefined && d != undefined) { b.host.css({ left: e, top: d }) } b.focus() }, c) } }, _renderHover: function (c, e, b) { var d = this; if (!e.ignoretheme) { this.addHandler(c, "mouseenter", function () { d.hoveredItem = e; if (!e.disabled && !e.separator && d.enableHover && !d.disabled) { if (e.level > 0) { c.addClass(d.toThemeProperty("jqx-fill-state-hover")); c.addClass(d.toThemeProperty("jqx-menu-item-hover")) } else { c.addClass(d.toThemeProperty("jqx-fill-state-hover")); c.addClass(d.toThemeProperty("jqx-menu-item-top-hover")) } } }); this.addHandler(c, "mouseleave", function () { if (!e.disabled && !e.separator && d.enableHover && !d.disabled) { if (e.level > 0) { c.removeClass(d.toThemeProperty("jqx-fill-state-hover")); c.removeClass(d.toThemeProperty("jqx-menu-item-hover")) } else { c.removeClass(d.toThemeProperty("jqx-fill-state-hover")); c.removeClass(d.toThemeProperty("jqx-menu-item-top-hover")) } } }) } }, _closeAfterClick: function (c) { var b = c != null ? c.data : this; var d = false; if (b.autoCloseOnClick) { a.each(a(c.target).parents(), function () { if (this.className.indexOf) { if (this.className.indexOf("jqx-menu") != -1) { d = true; return false } } }); if (!d) { c.data = b; b._closeAll(c) } } }, _autoSizeHorizontalMenuItems: function () { var c = this; if (c.autoSizeMainItems && this.mode == "horizontal") { var b = this.maxHeight; if (parseInt(b) > parseInt(this.host.height())) { b = parseInt(this.host.height()) } b = parseInt(this.host.height()); a.each(this.items, function () { var l = this; $element = a(l.element); if (l.level == 0 && b > 0) { var d = $element.children().length > 0 ? parseInt($element.children().height()) : $element.height(); var g = c.host.find("ul:first"); var h = parseInt(g.css("padding-top")); var m = parseInt(g.css("margin-top")); var j = b - 2 * (m + h); var i = parseInt(j) / 2 - d / 2; var e = parseInt(i); var k = parseInt(i); $element.css("padding-top", e); $element.css("padding-bottom", k); if (parseInt($element.outerHeight()) > j) { var f = 1; $element.css("padding-top", e - f); e = e - f } } }) } a.each(this.items, function () { var f = this; $element = a(f.element); if (f.hasItems && f.level > 0) { if (f.arrow) { var e = a(f.arrow); var d = a(f.element).height(); if (d > 15) { e.css("margin-top", (d - 15) / 2) } } } }) }, _nextVisibleItem: function (c, d) { if (c == null || c == undefined) { return null } var b = c; while (b != null) { b = b.nextItem; if (this._isVisible(b) && !b.disabled && b.type !== "separator") { if (this.minimized) { return b } if (d != undefined) { if (b && b.level != d) { continue } } return b } } return null }, _prevVisibleItem: function (c, d) { if (c == null || c == undefined) { return null } var b = c; while (b != null) { b = b.prevItem; if (this._isVisible(b) && !b.disabled && b.type !== "separator") { if (this.minimized) { return b } if (d != undefined) { if (b && b.level != d) { continue } } return b } } return null }, _parentItem: function (d) { if (d == null || d == undefined) { return null } var c = d.parentElement; if (!c) { return null } var b = null; a.each(this.items, function () { if (this.element == c) { b = this; return false } }); return b }, _isElementVisible: function (b) { if (b == null) { return false } if (a(b).css("display") != "none" && a(b).css("visibility") != "hidden") { return true } return false }, _isVisible: function (c) { if (c == null || c == undefined) { return false } if (!this._isElementVisible(c.element)) { return false } var b = this._parentItem(c); if (b == null) { return true } if (this.minimized) { return true } if (b != null) { if (!this._isElementVisible(b.element)) { return false } if (b.isOpen || this.minimized) { while (b != null) { b = this._parentItem(b); if (b != null && !this._isElementVisible(b.element)) { return false } if (b != null && !b.isOpen) { return false } } } else { return false } } return true }, _render: function (f, g) { if (this.disabled) { this.host.addClass(this.toThemeProperty("jqx-fill-state-disabled")); this.host.addClass(this.toThemeProperty("jqx-menu-disabled")) } if (this.host.attr("tabindex") == undefined) { this.host.attr("tabindex", 0) } var i = this.popupZIndex; var d = [5, 5]; var h = this; a.data(h.element, "animationHideDelay", h.animationHideDelay); var e = this.isTouchDevice(); var c = e && (a.jqx.mobile.isWindowsPhone() || navigator.userAgent.indexOf("Touch") >= 0); var j = false; if (navigator.platform.toLowerCase().indexOf("win") != -1) { if (navigator.userAgent.indexOf("Windows Phone") >= 0 || navigator.userAgent.indexOf("WPDesktop") >= 0 || navigator.userAgent.indexOf("IEMobile") >= 0 || navigator.userAgent.indexOf("ZuneWP7") >= 0) { this.touchDevice = true } else { if (navigator.userAgent.indexOf("Touch") >= 0) { var b = ("MSPointerDown" in window); if (b || a.jqx.mobile.isWindowsPhone() || navigator.userAgent.indexOf("ARM") >= 0) { j = true; c = true; h.clickToOpen = true; h.autoCloseOnClick = false; h.enableHover = false } } } } a.data(document.body, "menuel", this); this.hasTransform = a.jqx.utilities.hasTransform(this.host); this._applyOrientation(f, g); this.removeHandler(this.host, "blur"); this.removeHandler(this.host, "focus"); this.addHandler(this.host, "blur", function (k) { if (h.keyboardNavigation) { if (h.activeItem) { if (h.mode === "popup") { if (document.activeElement && document.activeElement.className.indexOf("jqx-menu-wrapper") >= 0) { return } } a(h.activeItem.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = null } } }); this.addHandler(this.host, "focus", function (k) { if (h.keyboardNavigation) { if (!h.activeItem) { if (h.hoveredItem) { a(h.hoveredItem.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = h.hoveredItem } else { var l = function () { if (!a.jqx.isHidden(a(h.items[0].element))) { a(h.items[0].element).addClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = h.items[0] } else { var m = h._nextVisibleItem(h.items[0], 0); if (m) { a(m.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = m } } }; if (!h.activeItem) { l() } else { if (!a.jqx.isHidden(a(h.activeItem.element))) { a(h.activeItem.element).addClass(h.toThemeProperty("jqx-fill-state-focus")) } else { a(h.activeItem.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); l() } } } } } }); this.removeHandler(this.host, "keydown"); h.handleKeyDown = function (k) { if (h.keyboardNavigation) { if (k.target.nodeName.toLowerCase() === "input") { return true } var q = null; var o = null; a.each(h.items, function () { var A = this; if (this.disabled) { return true } if (this.element.className.indexOf("pressed") >= 0) { o = this } if (this.element.className.indexOf("focus") >= 0) { q = this; return false } }); if (!q && o) { q = o } if (!q) { a(h.items[0].element).addClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = h.items[0]; q = h.activeItem } var t = false; if (k.keyCode == 27) { k.data = h; h._closeAll(k); if (q) { var z = q; while (z != null) { if (z.parentItem) { z = z.parentItem } else { a(h.activeItem.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = z; a(h.activeItem.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); z = z.parentItem } } } t = true } if (k.keyCode == 13) { if (q) { t = true; h._raiseEvent("2", { item: q.element, event: k, type: "keyboard" }); var r = q.anchor != null ? a(q.anchor) : null; if (r != null && r.length > 0) { var l = r.attr("href"); var u = r.attr("target"); if (l != null) { if (u != null) { window.open(l, u) } else { window.location = l } } } k.preventDefault(); k.stopPropagation(); a(q.element).focus() } } var n = function (D) { if (D == null) { return new Array() } var C = new Array(); var A = 0; for (var B = 0; B < h.items.length; B++) { if (h.items[B].parentId == D.parentId) { C[A++] = h.items[B] } } return C }; var v = ""; switch (k.keyCode) { case 40: v = "down"; break; case 38: v = "up"; break; case 39: v = "right"; break; case 37: v = "left"; break } if (q && q.openHorizontalDirection === "left" && v === "left") { v = "right" } if (q && q.openHorizontalDirection === "left" && v === "right") { v = "left" } if (q && q.openVerticalDirection === "top" && v === "top") { v = "bottom" } if (q && q.openVerticalDirection === "top" && v === "bottom") { v = "top" } if (h.rtl) { if (v === "right") { v = "left" } else { if (v === "left") { v = "right" } } } if (v === "right" && !h.minimized) { if (k.altKey && (q.level != 0 && q.hasItems || h.mode != "horizontal")) { h._openItem(h, q) } else { var x = h._nextVisibleItem(q, 0); var m = h._nextVisibleItem(q); var w = n(m); if (!x) { x = m } if (x && ((x.parentId === q.parentId && x.level == 0 && h.mode == "horizontal") || (m.id == w[0].id && m.level != 0))) { if (m.id == w[0].id && ((q.level != 0) || (q.level == 0 && h.mode != "horizontal"))) { x = m } a(x.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = x } } k.preventDefault(); k.stopPropagation() } if (v === "left" && !h.minimized) { if (k.altKey && ((q.level != 0 && h.mode !== "horizontal") || (q.level > 1 && h.mode === "horizontal") || (q.level == 1 && q.hasItems && h.mode === "horizontal"))) { if (q.hasItems) { h._closeItem(h, q) } else { if (q.parentItem) { h._closeItem(h, q.parentItem); a(q.parentItem.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = q.parentItem } } } else { var x = h._prevVisibleItem(q, 0); var y = q.parentItem; if (x && (x.parentId === q.parentId && x.level == 0 && h.mode == "horizontal")) { a(x.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = x } else { if (!(y && y.level == 0 && h.mode == "horizontal") && y && y.level == q.level - 1) { a(y.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = y } } } k.preventDefault(); k.stopPropagation() } if (v === "down") { if (k.altKey) { if (q.level == 0 && q.hasItems) { h._openItem(h, q) } if (h.minimized) { if (h.minimizedHidden) { h.minimizedItem.trigger("click") } } } else { var x = h._nextVisibleItem(q, q.level); var w = n(x); if (h.minimized && x) { a(x.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = x } else { if (x && (x.parentId === q.parentId || (x.id == w[0].id && h.mode == "horizontal"))) { if (!(x.level == 0 && h.mode == "horizontal")) { a(x.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = x } } if (h.mode === "horizontal" && q.level === 0 && q.isOpen && q.hasItems) { var x = h._nextVisibleItem(q); a(x.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = x } } } k.preventDefault(); k.stopPropagation() } else { if (v === "up") { if (k.altKey) { if (q.parentItem && q.parentItem.level == 0) { h._closeItem(h, q.parentItem); a(q.parentItem.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = q.parentItem } else { if (q.parentItem === null && q.level === 0 && h.mode === "horizontal") { h._closeItem(h, q) } } if (h.minimized) { if (!h.minimizedHidden) { h.minimizedItem.trigger("click") } } } else { var x = h._prevVisibleItem(q, q.level); var w = n(q); if (h.minimized && x) { a(x.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = x } else { if (x && (x.parentId === q.parentId || (x.id == q.parentId && x.level == 0 && h.mode == "horizontal"))) { if (!(x.level == 0 && h.mode === "horizontal" && q.level === 0)) { a(x.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = x } } else { if (q && q.id == w[0].id && q.parentItem && q.parentItem.level === 0 && h.mode === "horizontal") { var x = q.parentItem; a(x.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = x } } } } k.preventDefault(); k.stopPropagation() } } if (k.keyCode == 9) { var x = k.shiftKey ? h._prevVisibleItem(q) : h._nextVisibleItem(q); if (x) { a(x.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = x; k.preventDefault(); k.stopPropagation() } else { if (h.lockFocus) { var w = new Array(); var s = 0; for (var p = 0; p < h.items.length; p++) { if (h.items[p] == q) { continue } if (h.items[p].parentId == q.parentId) { w[s++] = h.items[p] } } if (w.length > 0) { if (k.shiftKey) { a(w[w.length - 1].element).addClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = w[w.length - 1] } else { a(w[0].element).addClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = w[0] } a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")) } k.preventDefault(); k.stopPropagation() } else { if (q) { a(q.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")); h.activeItem = null } } } } } else { return true } }; this.addHandler(this.host, "keydown", function (k) { h.handleKeyDown(k) }); if (h.enableRoundedCorners) { this.host.addClass(h.toThemeProperty("jqx-rc-all")) } a.each(this.items, function () { var r = this; var n = a(r.element); n.attr("role", "menuitem"); if (h.enableRoundedCorners) { n.addClass(h.toThemeProperty("jqx-rc-all")) } h.removeHandler(n, "click"); h.addHandler(n, "click", function (w) { if (r.disabled) { return } if (h.disabled) { return } if (h.keyboardNavigation) { if (h.activeItem) { a(h.activeItem.element).removeClass(h.toThemeProperty("jqx-fill-state-focus")) } h.activeItem = r; a(r.element).addClass(h.toThemeProperty("jqx-fill-state-focus")); if (h.minimized) { w.stopPropagation() } } h._raiseEvent("2", { type: "mouse", item: r.element, event: w }); if (!h.autoOpen) { if (r.level > 0) { if (h.autoCloseOnClick && !e && !h.clickToOpen) { w.data = h; h._closeAll(w) } } } else { if (h.autoCloseOnClick && !e && !h.clickToOpen) { if (r.closeOnClick) { w.data = h; h._closeAll(w) } } } if (e && h.autoCloseOnClick) { w.data = h; if (!r.hasItems) { h._closeAll(w) } } if (w.target.tagName != "A" && w.target.tagName != "a") { var u = r.anchor != null ? a(r.anchor) : null; if (u != null && u.length > 0) { var t = u.attr("href"); var v = u.attr("target"); if (t != null) { if (v != null) { window.open(t, v) } else { window.location = t } } } } }); h.removeHandler(n, "mouseenter"); h.removeHandler(n, "mouseleave"); if (!c && h.mode != "simple") { h._renderHover(n, r, e) } if (r.subMenuElement != null) { var o = a(r.subMenuElement); if (h.mode == "simple") { o.show(); return true } o.wrap('<div class="jqx-menu-popup ' + h.toThemeProperty("jqx-menu-popup") + '" style="border: none; background-color: transparent; z-index:' + i + '; padding: 0px; margin: 0px; position: absolute; top: 0; left: 0; display: block; visibility: hidden;"><div style="background-color: transparent; border: none; position:absolute; overflow:hidden; left: 0; top: 0; right: 0; width: 100%; height: 100%;"></div></div>'); o.css({ overflow: "hidden", position: "absolute", left: 0, display: "inherit", top: -o.outerHeight() }); o.data("timer", {}); if (r.level > 0) { o.css("left", -o.outerWidth()) } else { if (h.mode == "horizontal") { o.css("left", 0) } } i++; var q = a(r.subMenuElement).closest("div.jqx-menu-popup").css({ width: parseInt(a(r.subMenuElement).outerWidth()) + parseInt(d[0]) + "px", height: parseInt(a(r.subMenuElement).outerHeight()) + parseInt(d[1]) + "px" }); var s = n.closest("div.jqx-menu-popup"); if (s.length > 0) { var k = o.css("margin-left"); var m = o.css("margin-right"); var l = o.css("padding-left"); var p = o.css("padding-right"); q.appendTo(s); o.css("margin-left", k); o.css("margin-right", m); o.css("padding-left", l); o.css("padding-right", p) } else { var k = o.css("margin-left"); var m = o.css("margin-right"); var l = o.css("padding-left"); var p = o.css("padding-right"); q.appendTo(a(document.body)); o.css("margin-left", k); o.css("margin-right", m); o.css("padding-left", l); o.css("padding-right", p) } if (!h.clickToOpen) { if (e || c) { h.removeHandler(n, a.jqx.mobile.getTouchEventName("touchstart")); h.addHandler(n, a.jqx.mobile.getTouchEventName("touchstart"), function (t) { clearTimeout(o.data("timer").hide); if (o != null) { o.stop() } if (r.level == 0 && !r.isOpen && h.mode != "popup") { t.data = h; h._closeAll(t) } if (!r.isOpen) { h._openItem(h, r) } else { h._closeItem(h, r, true) } return false }) } if (!c) { h.addHandler(n, "mouseenter", function () { if (h.autoOpen || (r.level > 0 && !h.autoOpen)) { clearTimeout(o.data("timer").hide) } if (r.parentId && r.parentId != 0) { if (h.menuElements[r.parentId]) { var t = h.menuElements[r.parentId].isOpen; if (!t) { return } } } if (h.autoOpen || (r.level > 0 && !h.autoOpen)) { h._openItem(h, r) } return false }); h.addHandler(n, "mousedown", function () { if (!h.autoOpen && r.level == 0) { clearTimeout(o.data("timer").hide); if (o != null) { o.stop() } if (!r.isOpen) { h._openItem(h, r) } else { h._closeItem(h, r, true) } } }); h.addHandler(n, "mouseleave", function (u) { if (h.autoCloseOnMouseLeave) { clearTimeout(o.data("timer").hide); var x = a(r.subMenuElement); var t = { left: parseInt(u.pageX), top: parseInt(u.pageY) }; var w = { left: parseInt(x.coord().left), top: parseInt(x.coord().top), width: parseInt(x.outerWidth()), height: parseInt(x.outerHeight()) }; var v = true; if (w.left - 5 <= t.left && t.left <= w.left + w.width + 5) { if (w.top <= t.top && t.top <= w.top + w.height) { v = false } } if (v) { h._closeItem(h, r, true) } } }); h.removeHandler(q, "mouseenter"); h.addHandler(q, "mouseenter", function () { clearTimeout(o.data("timer").hide) }); h.removeHandler(q, "mouseleave"); h.addHandler(q, "mouseleave", function (t) { if (h.autoCloseOnMouseLeave) { clearTimeout(o.data("timer").hide); clearTimeout(o.data("timer").show); if (o != null) { o.stop() } h._closeItem(h, r, true) } }) } } else { h.removeHandler(n, "mousedown"); h.addHandler(n, "mousedown", function (t) { clearTimeout(o.data("timer").hide); if (o != null) { o.stop() } if (r.level == 0 && !r.isOpen) { t.data = h; h._closeAll(t) } if (!r.isOpen) { h._openItem(h, r) } else { h._closeItem(h, r, true) } }) } } }); if (this.mode == "simple") { this._renderSimpleMode() } this._autoSizeHorizontalMenuItems(); this._raiseEvent("3", this) }, _renderSimpleMode: function () { this.host.show() }, createID: function () { var b = Math.random() + ""; b = b.replace(".", ""); b = "99" + b; b = b / 1; while (this.items[b]) { b = Math.random() + ""; b = b.replace(".", ""); b = b / 1 } return "menuItem" + b }, _createMenu: function (c, f) { if (c == null) { return } if (f == undefined) { f = true } if (f == null) { f = true } var o = this; var u = a(c).find("li"); var q = 0; this.itemMapping = new Array(); for (var j = 0; j < u.length; j++) { var m = u[j]; var s = a(m); if (m.className.indexOf("jqx-menu") == -1 && this.autoGenerate == false) { continue } var p = m.id; if (!p) { p = this.createID() } if (f) { m.id = p; this.items[q] = new a.jqx._jqxMenu.jqxMenuItem(); this.menuElements[p] = this.items[q] } q += 1; var t = 0; var x = this; var h = s.children(); h.each(function () { if (!f) { this.className = ""; if (x.autoGenerate) { a(x.items[q - 1].subMenuElement)[0].className = ""; if (!x.minimized) { a(x.items[q - 1].subMenuElement).addClass(x.toThemeProperty("jqx-widget-content")) } a(x.items[q - 1].subMenuElement).addClass(x.toThemeProperty("jqx-menu-dropdown")); a(x.items[q - 1].subMenuElement).addClass(x.toThemeProperty("jqx-popup")) } } if (this.className.indexOf("jqx-menu-dropdown") != -1) { if (f) { x.items[q - 1].subMenuElement = this } return false } else { if (x.autoGenerate && (this.tagName == "ul" || this.tagName == "UL")) { if (f) { x.items[q - 1].subMenuElement = this } this.className = ""; if (!x.minimized) { a(this).addClass(x.toThemeProperty("jqx-widget-content")) } a(this).addClass(x.toThemeProperty("jqx-menu-dropdown")); a(this).addClass(x.toThemeProperty("jqx-popup")); a(this).attr("role", "menu"); if (x.rtl) { a(this).addClass(x.toThemeProperty("jqx-rc-l")) } else { a(this).addClass(x.toThemeProperty("jqx-rc-r")) } a(this).addClass(x.toThemeProperty("jqx-rc-b")); return false } } }); var w = s.parents(); w.each(function () { if (this.className.indexOf("jqx-menu-item") != -1) { t = this.id; return false } else { if (x.autoGenerate && (this.tagName == "li" || this.tagName == "LI")) { t = this.id; return false } } }); var e = false; var d = m.getAttribute("type"); var b = m.getAttribute("ignoretheme") || m.getAttribute("data-ignoretheme"); if (b) { if (b == "true" || b == true) { b = true } } else { b = false } if (!d) { d = m.type } else { if (d == "separator") { var e = true } } if (!e) { if (t) { d = "sub" } else { d = "top" } } var g = this.items[q - 1]; if (f) { g.id = p; g.parentId = t; g.type = d; g.separator = e; g.element = u[j]; var l = s.children("a"); g.disabled = m.getAttribute("item-disabled") == "true" ? true : false; g.level = s.parents("li").length; g.anchor = l.length > 0 ? l : null; if (g.anchor) { a(g.anchor).attr("tabindex", -1) } } g.ignoretheme = b; var n = this.menuElements[t]; if (n != null) { if (n.ignoretheme) { g.ignoretheme = n.ignoretheme; b = n.ignoretheme } g.parentItem = n; g.parentElement = n.element } if (this.autoGenerate) { if (d == "separator") { s.removeClass(); s.addClass(this.toThemeProperty("jqx-menu-item-separator")); s.attr("role", "separator") } else { if (!b) { s[0].className = ""; if (this.rtl) { s.addClass(this.toThemeProperty("jqx-rtl")) } if (g.level > 0 && !x.minimized) { s.addClass(this.toThemeProperty("jqx-item")); s.addClass(this.toThemeProperty("jqx-menu-item")) } else { s.addClass(this.toThemeProperty("jqx-item")); s.addClass(this.toThemeProperty("jqx-menu-item-top")) } } } } if (g.disabled) { s.addClass(x.toThemeProperty("jqx-menu-item-disabled")); s.addClass(x.toThemeProperty("jqx-fill-state-disabled")) } this.itemMapping[j] = { element: u[j], item: g }; this.itemMapping["id" + u[j].id] = this.itemMapping[j]; if (f && !b) { g.hasItems = s.find("li").length > 0; if (g.hasItems) { if (g.element) { a.jqx.aria(a(g.element), "aria-haspopup", true); if (!g.subMenuElement.id) { g.subMenuElement.id = a.jqx.utilities.createId() } a.jqx.aria(a(g.element), "aria-owns", g.subMenuElement.id) } } } } for (var r = 0; r < u.length; r++) { var v = u[r]; if (this.itemMapping["id" + v.id]) { var g = this.itemMapping["id" + v.id].item; if (!g) { continue } g.prevItem = null; g.nextItem = null; if (r > 0) { if (this.itemMapping["id" + u[r - 1].id]) { g.prevItem = this.itemMapping["id" + u[r - 1].id].item } } if (r < u.length - 1) { if (this.itemMapping["id" + u[r + 1].id]) { g.nextItem = this.itemMapping["id" + u[r + 1].id].item } } } } }, destroy: function () { var b = this; a.jqx.utilities.resize(b.host, null, true); var d = b.host.closest("div.jqx-menu-wrapper"); b.removeHandler(d, "keydown"); d.remove(); b.removeHandler(a("#menuWrapper" + b.element.id), "keydown"); a("#menuWrapper" + b.element.id).remove(); b.removeHandler(b.host, "keydown"); b.removeHandler(b.host, "focus"); b.removeHandler(b.host, "blur"); b.removeHandler(a(document), "mousedown.menu" + b.element.id, b._closeAfterClick); b.removeHandler(a(document), "mouseup.menu" + b.element.id, b._closeAfterClick); b.removeHandler(a(document), "contextmenu." + b.element.id); b.removeHandler(b.host, "contextmenu." + b.element.id); a.data(document.body, "jqxMenuOldHost" + b.element.id, null); if (b.isTouchDevice()) { b.removeHandler(a(document), a.jqx.mobile.getTouchEventName("touchstart") + ".menu" + b.element.id, b._closeAfterClick, this) } if (a(window).off) { a(window).off("resize.menu" + b.element.id) } a.each(b.items, function () { var g = this; var f = a(g.element); b.removeHandler(f, "click"); b.removeHandler(f, "selectstart"); b.removeHandler(f, "mouseenter"); b.removeHandler(f, "mouseleave"); b.removeHandler(f, "mousedown"); b.removeHandler(f, "mouseleave"); var e = a(g.subMenuElement); var h = e.closest("div.jqx-menu-popup"); h.remove(); delete this.subMenuElement; delete this.element }); a.data(document.body, "menuel", null); delete b.menuElements; b.items = new Array(); delete b.items; var c = a.data(b.element, "jqxMenu"); if (c) { delete c.instance } b.host.removeClass(); b.host.remove(); delete b.host; delete b.element }, _raiseEvent: function (f, c) { if (c == undefined) { c = { owner: null} } var d = this.events[f]; args = c; args.owner = this; var e = new a.Event(d); if (f == "2") { args = c.item; args.owner = this; args.clickType = c.type; a.extend(e, c.event); e.type = "itemclick" } e.owner = this; e.args = args; var b = this.host.trigger(e); return b }, propertyChangedHandler: function (b, d, h, g) { if (this.isInitialized == undefined || this.isInitialized == false) { return } if (d == "disabled") { if (b.disabled) { b.host.addClass(b.toThemeProperty("jqx-fill-state-disabled")); b.host.addClass(b.toThemeProperty("jqx-menu-disabled")) } else { b.host.removeClass(b.toThemeProperty("jqx-fill-state-disabled")); b.host.removeClass(b.toThemeProperty("jqx-menu-disabled")) } } if (g == h) { return } if (d == "touchMode") { this._isTouchDevice = null; b._render(g, h) } if (d === "width" || d === "height") { b.setSize(); if (b.mode === "popup") { var e = this.host.closest("div.jqx-menu-wrapper"); e[d](g); var i = this.host[0].id; a("#" + i)[d](g) } return } if (d == "source") { if (b.source != null) { var c = b.loadItems(b.source); b.element.innerHTML = c; var f = b.host.find("ul:first"); if (f.length > 0) { b.refresh(); b._createMenu(f[0]); b._render() } } } if (d == "autoCloseOnClick") { if (g == false) { b.removeHandler(a(document), "mousedown.menu" + this.element.id, b._closeAll) } else { b.addHandler(a(document), "mousedown.menu" + this.element.id, b, b._closeAll) } } else { if (d == "mode" || d == "width" || d == "height" || d == "showTopLevelArrows") { b.refresh(); if (d == "mode") { b._render(g, h) } else { b._applyOrientation() } } else { if (d == "theme") { a.jqx.utilities.setTheme(h, g, b.host) } } } } }) })(jqxBaseFramework); (function (a) { a.jqx._jqxMenu.jqxMenuItem = function (e, d, c) { var b = { id: e, parentId: d, parentItem: null, anchor: null, type: c, disabled: false, level: 0, isOpen: false, hasItems: false, element: null, subMenuElement: null, arrow: null, openHorizontalDirection: "right", openVerticalDirection: "down", closeOnClick: true }; return b } })(jqxBaseFramework);

/*
jqxtabs
*/

(function (a) { a.jqx.jqxWidget("jqxTabs", "", {}); a.extend(a.jqx._jqxTabs.prototype, { defineInstance: function () { var b = { scrollAnimationDuration: 200, enabledHover: true, disabled: false, collapsible: false, animationType: "none", enableScrollAnimation: true, contentTransitionDuration: 450, toggleMode: "click", selectedItem: 0, height: "auto", width: "auto", position: "top", selectionTracker: false, scrollable: true, scrollPosition: "right", scrollStep: 70, autoHeight: true, headerHeight: null, showCloseButtons: false, canCloseAllTabs: true, closeButtonSize: 16, arrowButtonSize: 16, keyboardNavigation: true, reorder: false, selectionTrackerAnimationDuration: 300, _isTouchDevice: false, roundedCorners: true, _headerExpandingBalance: 0, _dragStarted: false, _tabCaptured: false, _lastUnorderedListPosition: 0, _selectedItem: 0, _titleList: [], _contentList: [], _contentWrapper: null, _unorderedList: null, _scrollTimeout: null, isCollapsed: false, touchMode: false, initTabContent: null, enableDropAnimation: false, _currentEvent: null, _needScroll: true, _isAnimated: {}, _events: ["created", "selected", "add", "removed", "enabled", "disabled", "selecting", "unselecting", "unselected", "dragStart", "dragEnd", "locked", "unlocked", "collapsed", "expanded", "tabclick"], _initTabContentList: [], _invalidArgumentExceptions: { invalidScrollAnimationDuration: "The scroll animation duration is not valid!", invalidWidth: "Width you've entered is invalid!", invalidHeight: "Height you've entered is invalid!", invalidAnimationType: "You've entered invalid animation type!", invalidcontentTransitionDuration: "You've entered invalid value for contentTransitionDuration!", invalidToggleMode: "You've entered invalid value for toggleMode!", invalidPosition: "You've entered invalid position!", invalidScrollPosition: "You've entered invalid scroll position!", invalidScrollStep: "You've entered invalid scroll step!", invalidStructure: "Invalid structure!", invalidArrowSize: "Invalid scroll button size!", invalidCloseSize: "Invalid close button size!" }, aria: { "aria-disabled": { name: "disabled", type: "boolean" } }, rtl: false }; a.extend(true, this, b); return b }, createInstance: function () { a.jqx.aria(this); this.host.addClass(this.toThemeProperty("jqx-tabs")); this.host.addClass(this.toThemeProperty("jqx-widget")); this.host.addClass(this.toThemeProperty("jqx-widget-content")); this.host.attr("role", "tablist"); this._unorderedList = this.host.children("ul"); this._titleList = this.host.children("ul").children("li"); this._contentList = this.host.children("div"); this._selectedItem = this.selectedItem; this._isTouchDevice = a.jqx.mobile.isTouchDevice(); this._needScroll = this.scrollable; if (this.selectionTracker) { this.selectionTracker = this._seletionTrackerBrowserCheck() } if (this._isTouchDevice) { this.reorder = false; this.keyboardNavigation = false } var b = this.length(); while (b) { b--; this._titleList[b] = a(this._titleList[b]); this._titleList[b].attr("role", "tab"); this._contentList[b] = a(this._contentList[b]); this._contentList[b].attr("role", "tabpanel") } this._validateProperties(); this._refresh(); this._moveSelectionTrack(this._selectedItem, 0); if (this.disabled) { this.disable() } this.element.tabIndex = 0; this._raiseEvent(0); this._enableWindowResize() }, _hiddenParent: function () { var c = this; if (c.host.css("display") == "none") { return true } var b = false; a.each(c.host.parents(), function () { if (a(this).css("display") == "none") { b = true; return false } }); return b }, _enableWindowResize: function () { var b = this; var c = a.jqx.isHidden(b.host); a.jqx.utilities.resize(this.host, function () { if (c) { b._uiRefresh(true); c = false } else { b.refresh() } }) }, resize: function (c, b) { this.width = c; this.height = b; var d = a.jqx.isHidden(this.host); if (d) { this._uiRefresh(true); d = false } else { this.refresh() } }, refresh: function (b) { if (true != b || b == undefined) { this._performResize() } }, _seletionTrackerBrowserCheck: function () { var b = "Browser CodeName: " + navigator.appCodeName + ""; b += "Browser Name: " + navigator.appName + ""; b += "Browser Version: " + navigator.appVersion + ""; b += "Platform: " + navigator.platform + ""; b += "User-agent header: " + navigator.userAgent + ""; if (b.indexOf("IEMobile") != -1) { return false } if (b.indexOf("Windows Phone OS") != -1) { return false } if (a.jqx.browser.msie && a.jqx.browser.version <= 7) { return false } return true }, render: function () { this._refresh() }, _uiRefresh: function (b) { this._unorderedListLeftBackup = this._unorderedList.css("left"); if (b) { this._render() } this._addStyles(); this._performLayout(); this._prepareTabs(); this._removeEventHandlers(); this._addEventHandlers(); if (this._unorderedListLeftBackup === "auto") { this._unorderedListLeftBackup = this._getArrowsDisplacement() } this._unorderedList.css("left", this._unorderedListLeftBackup); if (this.rtl) { if (this.scrollable && this._rightArrow && this._rightArrow.css("visibility") != "hidden") { var d = 2 * this.arrowButtonSize; var c = this.host.width() - parseInt(this._unorderedList.width() + d + +parseInt(this._unorderedList.css("margin-left")), 10); this._unorderedList.css("left", c + "px") } } }, _refresh: function () { if (a.jqx.isHidden(this.host)) { return } this._uiRefresh(true) }, _addStyles: function () { this._unorderedList.addClass(this.toThemeProperty("jqx-tabs-title-container")); this._unorderedList.css({ outline: "none", "white-space": "nowrap", "margin-top": "0px", "margin-bottom": "0px", padding: "0px", background: "transparent", border: "none", "border-style": "none", "text-indent": "0px" }); var b = this.length(); while (b) { b--; this._titleList[b].removeClass(); this._titleList[b].css("padding", ""); this._titleList[b].addClass("jqx-reset"); this._titleList[b].addClass("jqx-disableselect"); this._titleList[b].addClass(this.toThemeProperty("jqx-tabs-title")); this._titleList[b].addClass(this.toThemeProperty("jqx-item")); if (this.position == "bottom") { this._titleList[b].addClass(this.toThemeProperty("jqx-tabs-title-bottom")) } if (this._titleList[b].disabled) { this._titleList[b].addClass(this.toThemeProperty("jqx-tabs-title-disable")); this._titleList[b].addClass(this.toThemeProperty("jqx-fill-state-disabled")) } this._titleList[b].removeClass(this.toThemeProperty("jqx-rc-b")); this._titleList[b].removeClass(this.toThemeProperty("jqx-rc-t")); this._contentList[b].removeClass(this.toThemeProperty("jqx-rc-b")); this._contentList[b].removeClass(this.toThemeProperty("jqx-rc-t")); switch (this.position) { case "top": this._titleList[b].addClass(this.toThemeProperty("jqx-rc-t")); this._contentList[b].addClass(this.toThemeProperty("jqx-rc-b")); break; case "bottom": this._titleList[b].addClass(this.toThemeProperty("jqx-rc-b")); this._contentList[b].addClass(this.toThemeProperty("jqx-rc-t")); break } } if (this.selectionTracker) { this._selectionTracker.removeClass(this.toThemeProperty("jqx-rc-b")); this._selectionTracker.removeClass(this.toThemeProperty("jqx-rc-t")); switch (this.position) { case "top": this._selectionTracker.addClass(this.toThemeProperty("jqx-rc-t")); break; case "bottom": this._selectionTracker.addClass(this.toThemeProperty("jqx-rc-b")); break } } }, _raiseEvent: function (d, g) { var f = new a.Event(this._events[d]); f.owner = this; f.args = g; if (d === 6 || d === 7) { f.cancel = false; this._currentEvent = f } var b = ""; try { b = this.host.trigger(f); if (d == 1) { var e = this; if (this.selectionTracker || this.animationType != "none") { setTimeout(function () { if (!e._initTabContentList[e.selectedItem]) { if (e.initTabContent) { e.initTabContent(e.selectedItem); e._initTabContentList[e.selectedItem] = true } } var h = new a.Event("loadContent"); h.owner = this; if (e._contentList.length > 0 && e._contentList[e.selectedItem]) { e._contentList[e.selectedItem].find("div").trigger(h) } }, 50 + e.selectionTrackerAnimationDuration) } else { var f = new a.Event("loadContent"); if (!e._initTabContentList[e.selectedItem]) { if (e.initTabContent) { e.initTabContent(e.selectedItem); e._initTabContentList[e.selectedItem] = true } } f.owner = this; var f = new a.Event("resize"); this.host.trigger(f) } } } catch (c) { if (c && console) { console.log(c) } } return b }, _getArrowsDisplacement: function () { if (!this._needScroll) { return 0 } var d; var c = this.arrowButtonSize; var b = this.arrowButtonSize; if (this.scrollPosition === "left") { d = c + b } else { if (this.scrollPosition === "both") { d = c } else { d = 0 } } return d }, _scrollRight: function (e, h) { this._unorderedList.stop(); this._unlockAnimation("unorderedList"); var f = parseInt(this._unorderedList.width() + parseInt(this._unorderedList.css("margin-left")), 10), i = parseInt(this.host.width(), 10), g, j, b = parseInt(this._unorderedList.css("left"), 10), c = this._getArrowsDisplacement(), d = 0, k = undefined; if (this.scrollable) { g = parseInt(this._leftArrow.outerWidth(), 10); j = parseInt(this._rightArrow.outerWidth(), 10) } else { g = 0; j = 0 } e = (this.enableScrollAnimation) ? e : 0; if (parseInt(this._headerWrapper.width(), 10) > parseInt(this._unorderedList.css("margin-left")) + parseInt(this._unorderedList.width(), 10)) { d = c } else { if (Math.abs(b) + this.scrollStep < Math.abs(i - f) + g + j + c) { d = b - this.scrollStep; k = b - this.scrollStep + parseInt(this._titleList[this._selectedItem].position().left) } else { d = i - f - (2 * this.arrowButtonSize - c); if (d < parseInt(this._unorderedList.css("left"), 10) - 4 && d > parseInt(this._unorderedList.css("left"), 10) + 4) { k = i - f - g - j + parseInt(this._titleList[this._selectedItem].position().left) } } } this._performScrollAnimation(d, k, e) }, _scrollLeft: function (f, g) { this._unorderedList.stop(); this._unlockAnimation("unorderedList"); var b = parseInt(this._unorderedList.css("left")), c = this._getArrowsDisplacement(), e = 0, d = undefined; f = (this.enableScrollAnimation) ? f : 0; if (parseInt(this._headerWrapper.width()) >= parseInt(this._unorderedList.width())) { e = c } else { if (b + this.scrollStep < c) { e = b + this.scrollStep; d = b + this.scrollStep + parseInt(this._titleList[this._selectedItem].position().left) } else { e = c; if (e < parseInt(this._unorderedList.css("left")) - 4 && e > parseInt(this._unorderedList.css("left")) + 4) { d = parseInt(this._titleList[this._selectedItem].position().left) } } } this._performScrollAnimation(e, d, f) }, _performScrollAnimation: function (e, d, c) { var b = this; if (d !== undefined) { this._moveSelectionTrack(this._selectedItem, 0, d) } this._lockAnimation("unorderedList"); this._unorderedList.animate({ left: e }, c, function () { b._moveSelectionTrack(b.selectedItem, 0); b._unlockAnimation("unorderedList") }) }, _addKeyboardHandlers: function () { var b = this; if (this.keyboardNavigation) { this.addHandler(this.host, "keydown", function (e) { if (!b._activeAnimation()) { var f = b._selectedItem; var d = b.selectionTracker; var c = b.getContentAt(f); if (a(e.target).ischildof(c)) { return true } switch (e.keyCode) { case 37: if (b.rtl) { b.next() } else { b.previous() } return false; case 39: if (b.rtl) { b.previous() } else { b.next() } return false; case 36: b.first(); return false; case 35: b.last(); return false; case 27: if (b._tabCaptured) { b._cancelClick = true; b._uncapture(null, b.selectedItem); b._tabCaptured = false } break } b.selectionTracker = d } return true }) } }, _addScrollHandlers: function () { var b = this; this.addHandler(this._leftArrow, "mousedown", function () { b._startScrollRepeat(true, b.scrollAnimationDuration) }); this.addHandler(this._rightArrow, "mousedown", function () { b._startScrollRepeat(false, b.scrollAnimationDuration) }); this.addHandler(this._rightArrow, "mouseleave", function () { clearTimeout(b._scrollTimeout) }); this.addHandler(this._leftArrow, "mouseleave", function () { clearTimeout(b._scrollTimeout) }); this.addHandler(a(document), "mouseup.tab" + this.element.id, this._mouseUpScrollDocumentHandler, this); this.addHandler(a(document), "mouseleave.tab" + this.element.id, this._mouseLeaveScrollDocumentHandler, this) }, _mouseLeaveScrollDocumentHandler: function (c) { var b = c.data; if (!b._scrollTimeout) { return } clearTimeout(b._scrollTimeout) }, _mouseUpScrollDocumentHandler: function (c) { var b = c.data; clearTimeout(b._scrollTimeout) }, _mouseUpDragDocumentHandler: function (c) { var b = c.data; if (b._tabCaptured && b._dragStarted) { b._uncapture(c) } b._tabCaptured = false }, _addReorderHandlers: function () { var b = this; this.addHandler(a(document), "mousemove.tab" + this.element.id, this._moveElement, this); this.addHandler(a(document), "mouseup.tab" + this.element.id, this._mouseUpDragDocumentHandler, this) }, _addEventHandlers: function () { var e = this.length(); while (e) { e--; this._addEventListenerAt(e) } if (this.keyboardNavigation) { this._addKeyboardHandlers() } if (this.scrollable) { this._addScrollHandlers() } if (this.reorder && !this._isTouchDevice) { this._addReorderHandlers() } var d = this; try { if (document.referrer != "" || window.frameElement) { if (window.top != null && window.top != window.self) { var c = function (g) { if (d._tabCaptured) { d._cancelClick = true; d._uncapture(null, d.selectedItem); d._tabCaptured = false } }; var f = null; if (window.parent && document.referrer) { f = document.referrer } if (f && f.indexOf(document.location.host) != -1) { if (window.top.document) { this.addHandler(a(window.top.document), "mouseup", c) } } } } } catch (b) { } }, focus: function () { try { this.host.focus(); var c = this; setTimeout(function () { c.host.focus() }, 25) } catch (b) { } }, _getFocusedItem: function (f, e) { var i = this.length(); while (i) { i--; var h = this._titleList[i], g = parseInt(h.outerWidth(true)), d = parseInt(h.offset().left), c = parseInt(this._unorderedList.offset().left), j = parseInt(this.host.offset().left), b = d; if ((b <= f && b + g >= f) && (h !== this._capturedElement) && (!this._titleList[i].locked) && (this._titleList[i].disabled !== true)) { return i } } return -1 }, _uncapture: function (e) { var d = this.selectionTracker; this._unorderedListLeftBackup = this._unorderedList.css("left"); this._dragStarted = false; this._tabCaptured = false; var b = this._indexOf(this._capturedElement); if (!this._capturedElement) { return } switch (this.position) { case "top": this._capturedElement.css("bottom", 0); break; case "bottom": this._capturedElement.css("top", 0); break } if (e) { var c = this._getFocusedItem(e.clientX, e.clientY) } if (c === -1 || !e) { this._capturedElement.css("left", 0) } else { this._raiseEvent(10, { item: b, dropIndex: c }); this._reorderItems(c, b) } a.each(this._titleList, function () { this.css("position", "static") }); this._reorderHeaderElements(); this._unorderedList.css({ position: "relative", top: "0px" }); this._prepareTabs(); if (c === -1 || !e) { this._selectedItem = b; this._moveSelectionTrack(b, 0); this._addSelectStyle(this._selectedItem, true) } else { this._moveSelectionTrack(this._selectedItem, 0); this._addSelectStyle(this._selectedItem, true) } if (document.selection) { document.selection.clear() } this._unorderedList.css("left", this._unorderedListLeftBackup); this.selectionTracker = d }, _reorderItems: function (c, b) { var d = this._titleList[this.selectedItem]; var e = this._contentList[b]; if (typeof this._capturedElement === "undefined") { this._capturedElement = this._titleList[b] } this._titleList[b].remove(); if (b < c) { this._titleList[b].insertAfter(this._titleList[c]) } else { this._titleList[b].insertBefore(this._titleList[c]) } this._reorderElementArrays(c, b); this._getSelectedItem(d); this._removeEventHandlers(); this._addEventHandlers() }, _reorderElementArrays: function (d, b) { var e = this._titleList[this.selectedItem]; var f = this._contentList[b]; if (b < d) { for (var c = b; c <= d; c++) { this._titleList[c] = this._titleList[c + 1]; this._contentList[c] = this._contentList[c + 1] } this._contentList[d] = f; this._titleList[d] = this._capturedElement } else { for (var c = b; c >= d; c--) { this._titleList[c] = this._titleList[c - 1]; this._contentList[c] = this._contentList[c - 1] } this._contentList[d] = f; this._titleList[d] = this._capturedElement } }, getSelectedItem: function () { return this.selectedItem }, _getSelectedItem: function (c) { var b = this.length(); while (b) { b--; if (this._titleList[b] === c) { this._selectedItem = this.selectedItem = b; break } } }, _moveElement: function (c, b) { var b = c.data; if (b._tabCaptured) { if (document.selection) { document.selection.clear() } if (!b._dragStarted) { unorderedListLeft = -parseInt(b._unorderedList.css("left"), 10); if (c.clientX + unorderedListLeft > b._startX + 3 || c.clientX + unorderedListLeft < b._startX - 3) { b._prepareTabForDragging(); b._dragStarted = true } } else { b._performDrag(c); clearTimeout(b._scrollTimeout) } } }, _performDrag: function (c) { var b = this.getZoomFactor(); unorderedListLeft = -parseInt(this._unorderedList.css("left"), 10); this._capturedElement.css("left", unorderedListLeft + c.clientX / b - this._startX / b); this._lastX = c.clientX / b; this._moveSelectionTrack(this.selectedItem, 0) }, getZoomFactor: function () { var c = 1; if (document.body.getBoundingClientRect) { var d = document.body.getBoundingClientRect(); var e = d.right - d.left; var b = document.body.offsetWidth; c = Math.round((e / b) * 100) / 100 } return c }, _prepareTabForDragging: function () { this._capturedElement.css({ position: "relative", left: "0px", top: "0px", "z-index": "300" }); this.selectedItem = this._indexOf(this._capturedElement); switch (this.position) { case "top": this._capturedElement.css("bottom", parseInt(this._capturedElement.css("top"))); break; case "bottom": this._capturedElement.css("top", parseInt(this._capturedElement.css("top"))); break } this._raiseEvent(9, { item: this._indexOf(this._capturedElement) }) }, _dragScroll: function (d) { var c = parseInt(this._unorderedList.css("left")); var b = this; var e = parseInt(this._capturedElement.css("left")); if (d.clientX <= this._headerWrapper.offset().left) { this._scrollLeft(this.scrollAnimationDuration); this._capturedElement.css("left", parseInt(this._capturedElement.css("left")) + this._lastUnorderedListPosition - c) } else { if (d.clientX > this._headerWrapper.offset().left + parseInt(this._headerWrapper.width(), 10)) { this._scrollRight(this.scrollAnimationDuration); this._capturedElement.css("left", parseInt(this._capturedElement.css("left")) + this._lastUnorderedListPosition - c) } else { this._unorderedList.stop(); this._unlockAnimation("unorderedList"); clearTimeout(this._scrollTimeout) } } var b = this; this._scrollTimeout = setTimeout(function () { b._dragScroll(d) }, this.scrollAnimationDuration); this._lastUnorderedListPosition = c }, _captureElement: function (c, b) { if (!this._tabCaptured && !this._titleList[b].locked && this._titleList[b].disabled !== true && !this._activeAnimation()) { unorderedListLeft = -parseInt(this._unorderedList.css("left"), 10); this._startX = unorderedListLeft + c.clientX; this._startY = c.clientY; this._lastX = c.clientX; this._lastY = c.clientY; this._tabCaptured = true; this._capturedElement = this._titleList[b] } }, _titleInteractionTrigger: function (b) { if (this._headerExpandingBalance > 0) { this._removeOppositeBorder() } if (this._selectedItem !== b) { this.select(this._titleList[b], "toggle"); this._titleList[b].collapsed = false; if (!this.collapsible) { if (this.height !== "auto") { this._contentWrapper.css("visibility", "visible") } else { this._contentWrapper.css("display", "block") } } } else { if (this.collapsible) { if (this.isCollapsed) { this.expand() } else { this.collapse() } } } }, collapse: function () { var c = this._selectedItem, b = this; this.isCollapsed = true; if (b.height !== "auto") { b._contentWrapper.css("visibility", "hidden") } else { b._contentWrapper.hide() } b._raiseEvent(13, { item: c }); if (this.position == "top") { b._headerWrapper.addClass(this.toThemeProperty("jqx-tabs-header-collapsed")); b.host.addClass(this.toThemeProperty("jqx-tabs-collapsed")) } else { b._headerWrapper.addClass(this.toThemeProperty("jqx-tabs-header-collapsed-bottom")); b.host.addClass(this.toThemeProperty("jqx-tabs-collapsed-bottom")) } }, expand: function () { var c = this._selectedItem, b = this; this.isCollapsed = false; this._select(c, b.contentTransitionDuration, null, false, true); if (b.height !== "auto") { b._contentWrapper.css("visibility", "visible") } else { b._contentWrapper.show() } b._raiseEvent(14, { item: c }); if (this.position == "top") { b._headerWrapper.removeClass(this.toThemeProperty("jqx-tabs-header-collapsed")); b.host.removeClass(this.toThemeProperty("jqx-tabs-collapsed")) } else { b._headerWrapper.removeClass(this.toThemeProperty("jqx-tabs-header-collapsed-bottom")); b.host.removeClass(this.toThemeProperty("jqx-tabs-collapsed-bottom")) } }, _addSelectHandler: function (c) { var b = this; this.addHandler(this._titleList[c], "selectstart", function (d) { return false }); this.addHandler(this._titleList[c], this.toggleMode, function (d) { return function () { b._raiseEvent("15", { item: d }); if (!b._tabCaptured && !b._cancelClick) { b._titleInteractionTrigger(d) } return true } }(c)) }, _addDragDropHandlers: function (c) { var b = this; this.addHandler(this._titleList[c], "mousedown", function (d) { b._captureElement(d, c); return false }); this.addHandler(this._titleList[c], "mouseup", function (d) { if (b._tabCaptured && b._dragStarted) { b._cancelClick = true; b._uncapture(d, c) } else { b._cancelClick = false } b._tabCaptured = false; return false }) }, _removeHoverStates: function () { var b = this; a.each(this._titleList, function () { this.removeClass(b.toThemeProperty("jqx-tabs-title-hover-top")); this.removeClass(b.toThemeProperty("jqx-tabs-title-hover-bottom")) }) }, _addHoverHandlers: function (c) { var b = this; var d = this._titleList[c]; this.addHandler(d, "mouseenter", function (f) { if (c != b._selectedItem) { if (b.position == "top") { d.addClass(b.toThemeProperty("jqx-tabs-title-hover-top")) } else { d.addClass(b.toThemeProperty("jqx-tabs-title-hover-bottom")) } d.addClass(b.toThemeProperty("jqx-fill-state-hover")); if (b.showCloseButtons) { var e = d.children(0).children(b.toThemeProperty(".jqx-tabs-close-button", true)); e.addClass(b.toThemeProperty("jqx-tabs-close-button-hover", true)) } } }); this.addHandler(d, "mouseleave", function (f) { if (c != b._selectedItem) { if (b.position == "top") { d.removeClass(b.toThemeProperty("jqx-tabs-title-hover-top")) } else { d.removeClass(b.toThemeProperty("jqx-tabs-title-hover-bottom")) } d.removeClass(b.toThemeProperty("jqx-fill-state-hover")); if (b.showCloseButtons) { var e = d.children(0).children(b.toThemeProperty(".jqx-tabs-close-button", true)); e.removeClass(b.toThemeProperty("jqx-tabs-close-button-hover", true)) } } }) }, _addEventListenerAt: function (d) { var c = this; if (this._titleList[d].disabled) { return } if (this.reorder && !this._isTouchDevice) { this._addDragDropHandlers(d) } this._addSelectHandler(d); if (this.enabledHover) { this._addHoverHandlers(d) } var b = this._titleList[d].find(this.toThemeProperty(".jqx-tabs-close-button", true)); this.removeHandler(b, "click"); this.addHandler(b, "click", function (e) { c.removeAt(d); return false }) }, _removeEventHandlers: function () { var b = this; var c = this.length(); while (c) { c--; this._removeEventListenerAt(c) } if (this.scrollable) { this.removeHandler(this._leftArrow, "mousedown"); this.removeHandler(this._rightArrow, "mousedown") } this.removeHandler(a(document), "mousemove.tab" + this.element.id, this._moveElement); this.removeHandler(a(document), "mouseup.tab" + this.element.id, this._mouseUpScrollDocumentHandler); this.removeHandler(a(document), "mouseup.tab" + this.element.id, this._mouseUpDragDocumentHandler); this.removeHandler(this.host, "keydown") }, _removeEventListenerAt: function (d) { var c = this; this.removeHandler(this._titleList[d], this.toggleMode); this.removeHandler(this._titleList[d], "mouseenter"); this.removeHandler(this._titleList[d], "mouseleave"); this.removeHandler(this._titleList[d], "mousedown"); this.removeHandler(this._titleList[d], "mouseup"); var b = this._titleList[d].children(0).children(this.toThemeProperty(".jqx-tabs-close-button", true)); this.removeHandler(b, "click") }, _moveSelectionTrack: function (l, c, b) { var m = this; if (l == -1) { return } if (this._titleList.length == 0) { return } if (l >= this._titleList.length) { return } if (this.selectionTracker && this._selectionTracker) { this._selectionTracker.stop(); this._unlockAnimation("selectionTracker"); if (b === undefined) { var h = parseInt(this._titleList[l].position().left); if (!isNaN(parseInt(this._unorderedList.css("left")))) { h += parseInt(this._unorderedList.css("left")) } if (!isNaN(parseInt(this._unorderedList.css("margin-left")))) { h += parseInt(this._unorderedList.css("margin-left")) } if (!isNaN(parseInt(this._titleList[l].css("margin-left")))) { h += parseInt(this._titleList[l].css("margin-left")) } if (!isNaN(parseInt(this._titleList[l].css("margin-right")))) { } } else { var h = b } var g = 0; var e = 0; if (this.position === "top") { g = parseInt(this._headerWrapper.height()) - parseInt(this._titleList[l].outerHeight()); if (!this.autoHeight) { e += parseInt(this._titleList[l].css("margin-top")) } } this._lockAnimation("selectionTracker"); var k = parseInt(this._titleList[l].css("padding-left")) + parseInt(this._titleList[l].css("padding-right")); var f = this.position == "top" ? 0 : 1; var j = parseInt(this._headerWrapper.css("padding-top")); var i = parseInt(this._titleList[l].css("padding-top")) + parseInt(this._titleList[l].css("padding-bottom")); this._selectionTracker.css("visibility", "visible"); this._moveSelectionTrackerContainer.css("visibility", "visible"); var d = parseInt(this._titleList[l].css("margin-top")); if (isNaN(d)) { d = 0 } this._selectionTracker.animate({ top: j + d - f, left: h + "px", height: parseInt(this._titleList[l].height() + i), width: this._titleList[l].width() + k }, c, function () { m._unlockAnimation("selectionTracker"); m._selectionTracker.css("visibility", "hidden"); m._addSelectStyle(l, true); m._moveSelectionTrackerContainer.css("visibility", "hidden") }) } }, destroy: function () { a.jqx.utilities.resize(this.host, null, true); this.host.remove() }, _switchTabs: function (b, d) { if (b !== d && !this._activeAnimation() && !this._tabCaptured) { var c = this; this._raiseEvent(7, { item: d }); this._raiseEvent(6, { item: b }); if (this._currentEvent) { if (this._currentEvent.cancel) { this._currentEvent = null; return } } this._unselect(d, null, true); this._select(b, c.contentTransitionDuration, null, true); return true } return false }, _activeAnimation: function () { for (child in this._isAnimated) { if (this._isAnimated.hasOwnProperty(child)) { if (this._isAnimated[child]) { return true } } } return false }, _indexOf: function (c) { var b = this.length(); while (b) { b--; if (this._titleList[b][0] === c[0] || this._contentList[b][0] === c[0]) { return b } } return -1 }, _validateProperties: function () { try { if (this.scrollAnimationDuration < 0 || isNaN(this.scrollAnimationDuration)) { throw new Error(this._invalidArgumentExceptions.invalidScrollAnimationDuration) } if (parseInt(this.width) < 0 && this.width !== "auto") { throw new Error(this._invalidArgumentExceptions.invalidWidth) } if (parseInt(this.height) < 0 && this.height !== "auto") { throw new Error(this._invalidArgumentExceptions.invalidHeight) } if (this.animationType !== "none" && this.animationType !== "fade") { throw new Error(this._invalidArgumentExceptions.invalidAnimationType) } if (this.contentTransitionDuration < 0 || isNaN(this.contentTransitionDuration)) { throw new Error(this._invalidArgumentExceptions.invalidcontentTransitionDuration) } if (this.toggleMode !== "click" && this.toggleMode !== "dblclick" && this.toggleMode !== "mouseenter" && this.toggleMode !== "none") { throw new Error(this._invalidArgumentExceptions.invalidToggleMode) } if (this.position !== "top" && this.position !== "bottom") { throw new Error(this._invalidArgumentExceptions.invalidPosition) } if (this.scrollPosition !== "left" && this.scrollPosition !== "right" && this.scrollPosition !== "both") { throw new Error(this._invalidArgumentExceptions.invalidScrollPosition) } if (this.scrollStep < 0 || isNaN(this.scrollStep)) { throw new Error(this._invalidArgumentExceptions.invalidScrollStep) } if (this._titleList.length !== this._contentList.length || this._titleList.length == 0) { throw new Error(this._invalidArgumentExceptions.invalidStructure) } if (this.arrowButtonSize < 0 || isNaN(this.arrowButtonSize)) { throw new Error(this._invalidArgumentExceptions.invalidArrowSize) } if (this.closeButtonSize < 0 || isNaN(this.closeButtonSize)) { throw new Error(this._invalidArgumentExceptions.invalidCloseSize) } } catch (b) { alert(b) } }, _startScrollRepeat: function (d, c) { var b = this; if (d) { this._scrollLeft(c) } else { this._scrollRight(c) } if (this._scrollTimeout) { clearTimeout(this._scrollTimeout) } this._scrollTimeout = setTimeout(function () { b._startScrollRepeat(d, b.scrollAnimationDuration) }, c) }, _performLayout: function () { var b = this.length(); while (b) { b--; if (this.position === "top" || this.position === "bottom") { if (this.rtl) { this._titleList[b].css("float", "right") } else { this._titleList[b].css("float", "left") } } } this._fitToSize(); this._performHeaderLayout(); this._fitToSize() }, updatetabsheader: function () { this._performHeaderLayout() }, _performResize: function () { var b = this; this._fitToSize(); this._positionArrows(this._totalItemsWidth); if (this._totalItemsWidth > this.element.offsetWidth) { this._unorderedList.width(this._totalItemsWidth) } else { this._unorderedList[0].style.width = this.element.offsetWidth - 2 + "px" } this._fitToSize() }, _addArrows: function () { if (this._leftArrow && this._rightArrow) { this._leftArrow.remove(); this._rightArrow.remove() } this._leftArrow = a('<div><span style="display: block; width: 16px; height: 16px;" class="' + this.toThemeProperty("jqx-tabs-arrow-left") + '"></span></div>'); this._rightArrow = a('<div><span style="display: block; width: 16px; height: 16px;" class="' + this.toThemeProperty("jqx-tabs-arrow-right") + '"></span></div>'); this._leftArrow.addClass(this.toThemeProperty("jqx-tabs-arrow-background")); this._rightArrow.addClass(this.toThemeProperty("jqx-tabs-arrow-background")); this._leftArrow.addClass(this.toThemeProperty("jqx-widget-header")); this._rightArrow.addClass(this.toThemeProperty("jqx-widget-header")); this._headerWrapper.append(this._leftArrow); this._headerWrapper.append(this._rightArrow); this._leftArrow.width(this.arrowButtonSize); this._leftArrow.height("100%"); this._rightArrow.width(this.arrowButtonSize); this._rightArrow.height("100%"); this._leftArrow.css({ "z-index": "30" }); this._rightArrow.css({ "z-index": "30" }); this._leftArrow.css("display", "none"); this._rightArrow.css("display", "none") }, _tabsWithVisibleCloseButtons: function () { if (!this.showCloseButtons) { return 0 } var c = this.length(); var b = this; a.each(this._titleList, function () { var d = this.attr("hasclosebutton"); if (d != undefined && d != null) { if (d == "false" || d == false) { c-- } } }); return c }, _calculateTitlesSize: function () { var g = 0; var d = 0; var c = this.length(); if (this.rtl && a.jqx.browser.msie && a.jqx.browser.version < 8) { this._measureItem = a("<span style='position: relative; visibility: hidden;'></span>"); a(document.body).append(this._measureItem) } while (c) { c--; if (this._measureItem) { this._measureItem.html(this._titleList[c].html()); this._titleList[c].width(this._measureItem.width()) } this._titleList[c].css("position", "static"); this._titleList[c].find(this.toThemeProperty(".jqx-tabs-close-button", true)).css("display", "none"); d += parseInt(this._titleList[c].outerWidth(true)); if (g < this._titleList[c].outerHeight(true)) { g = Math.round(parseInt(this._titleList[c].outerHeight(true))) } if (this._titleList[c].height() == 0) { var f = this._titleList[c].clone(); a(document.body).append(f); g = Math.round(parseInt(f.outerHeight(true))); f.remove() } var b = this._titleList[c].attr("hasCloseButton"); if (b != undefined && b != null) { var e = false; if (this.hiddenCloseButtons) { if (this.hiddenCloseButtons[c] == 1) { this._titleList[c].find(this.toThemeProperty(".jqx-tabs-close-button", true)).css("display", "none"); e = true } } if (!e) { if (b == "true" || b == true) { d += this.closeButtonSize; this._titleList[c].find(this.toThemeProperty(".jqx-tabs-close-button", true)).css("display", "block") } else { if (b == "false" || b == false) { this._titleList[c].find(this.toThemeProperty(".jqx-tabs-close-button", true)).css("display", "none") } } } } else { if (this.showCloseButtons && (this.canCloseAllTabs || this._tabsWithVisibleCloseButtons() > 1)) { var e = false; if (this.hiddenCloseButtons) { if (this.hiddenCloseButtons[c] == 1) { this._titleList[c].find(this.toThemeProperty(".jqx-tabs-close-button", true)).css("display", "none"); e = true } } if (!e) { d += this.closeButtonSize; this._titleList[c].find(this.toThemeProperty(".jqx-tabs-close-button", true)).css("display", "block") } } } this._titleList[c].height(this._titleList[c].height()) } if (this._measureItem) { this._measureItem.remove() } return { height: g, width: 10 + d } }, _reorderHeaderElements: function () { if (this.selectionTracker) { this._moveSelectionTrackerContainer.css({ position: "absolute", height: "100%", top: "0px", left: "0px", width: "100%" }) } this._headerWrapper.css({ position: "relative", left: "0px", top: "0px" }); if (this.scrollable) { this._rightArrow.css({ width: this.arrowButtonSize, position: "absolute", top: "0px" }); this._leftArrow.css({ width: this.arrowButtonSize, position: "absolute", top: "0px" }); var c = this.theme && this.theme.indexOf("ui-") != -1 ? 3 : 0; if (c > 0) { this._rightArrow.addClass(this.toThemeProperty("jqx-rc-r")); this._leftArrow.addClass(this.toThemeProperty("jqx-rc-l")) } var b = this.scrollPosition; if (this.rtl) { if (b == "left") { b = "right" } if (b == "right") { b = "left" } } switch (b) { case "both": this._rightArrow.css("right", "0px"); this._leftArrow.css("left", "0px"); break; case "left": this._rightArrow.css("left", this.arrowButtonSize + "px"); this._leftArrow.css("left", "0px"); break; case "right": this._rightArrow.css("right", -c + "px"); this._leftArrow.css("right", (this.arrowButtonSize - c) + "px"); break } } }, _positionArrows: function (b) { if (b >= parseInt(this._headerWrapper[0].offsetWidth) && this.scrollable) { this._needScroll = true; if (this._unorderedList.position().left === 0) { this._unorderedListLeftBackup = this._getArrowsDisplacement() + "px" } this._leftArrow.css("display", "block"); this._rightArrow.css("display", "block") } else { this._needScroll = false; this._leftArrow[0].style.display = "none"; this._rightArrow[0].style.display = "none"; this._unorderedList[0].style.left = "0px" } }, _performHeaderLayout: function () { this._removeSelectStyle(); var b = this._calculateTitlesSize(); var d = b.height; var c = b.width; this._headerWrapper.height(d); this._unorderedList.height(d); if (this.headerHeight != null && this.headerHeight != "auto") { this._headerWrapper.height(this.headerHeight); this._unorderedList.height(this.headerHeight) } if (c > this.host.width()) { this._unorderedList.width(c) } else { this._unorderedList.width(this.host.width()) } if (a.jqx.browser.msie && a.jqx.browser.version < 8) { this._unorderedList.css("position", "relative"); this._headerWrapper.css("overflow", "hidden") } this._reorderHeaderElements(); c = c + parseInt(this._unorderedList.css("margin-left")); this._totalItemsWidth = c; this._positionArrows(c); this._unorderedList.css({ position: "relative", top: "0px" }); this._verticalAlignElements(); this._moveSelectionTrack(this._selectedItem, 0); this._addSelectStyle(this.selectedItem) }, _verticalAlignElements: function () { var k = this.length(); var p = this._maxHeightTab(); while (k) { k--; var b = this._titleList[k].find(".jqx-tabs-titleContentWrapper"), l = b.height(), o = this._titleList[k].find(this.toThemeProperty(".jqx-tabs-close-button", true)), m = parseInt(this._titleList[k].css("padding-top")); if (!m) { m = 0 } if (this.autoHeight) { var h = this._titleList[k].outerHeight(true) - this._titleList[k].height(); var c = parseInt(this._titleList[k].css("padding-top")); var q = parseInt(this._titleList[k].css("padding-bottom")); var j = parseInt(this._titleList[k].css("border-top-width")); var f = parseInt(this._titleList[k].css("border-bottom-width")); this._titleList[k].height(this._unorderedList.outerHeight() - c - q - j - f) } else { if (this.position === "top") { var i = parseInt(this._unorderedList.height()) - parseInt(this._titleList[k].outerHeight(true)); if (parseInt(this._titleList[k].css("margin-top")) !== i && i !== 0) { this._titleList[k].css("margin-top", i) } } else { this._titleList[k].height(this._titleList[k].height()) } } this._titleList[k].children(0).height("100%"); var e = parseInt(this._titleList[k].height()); var g = parseInt(e) / 2 - parseInt(o.height()) / 2; o.css("margin-top", 1 + g); var n = parseInt(e) / 2 - parseInt(b.height()) / 2; b.css("margin-top", n) } if (this.scrollable) { var h = parseInt(this._headerWrapper.outerHeight()) - this.arrowButtonSize; var d = h / 2; this._rightArrow.children(0).css("margin-top", d); this._rightArrow.height("100%"); this._leftArrow.height("100%"); this._leftArrow.children(0).css("margin-top", d) } }, _getImageUrl: function (c) { var b = c.css("background-image"); b = b.replace('url("', ""); b = b.replace('")', ""); b = b.replace("url(", ""); b = b.replace(")", ""); return b }, _fitToSize: function () { var c = false; var e = false; var d = this; if (d.width != null && d.width.toString().indexOf("%") != -1) { c = true } if (d.height != null && d.height.toString().indexOf("%") != -1) { e = true } if (c) { this.host[0].style.width = this.width; this._contentWrapper[0].style.width = "100%" } if (e) { this.host[0].style.height = this.height; this._contentWrapper[0].style.width = "100%"; this._contentWrapper[0].style.height = "auto"; var b = this.element.offsetHeight - this._headerWrapper[0].offsetHeight; this._contentWrapper[0].style.height = b + "px" } if (!c) { this.host.width(this.width); if (this.width != "auto") { this._contentWrapper.css("width", "100%") } } if (!e) { if (this.height !== "auto") { this.host.height(this.height); var b = this.host.height() - this._headerWrapper.outerHeight(); this._contentWrapper.height(b) } else { this._contentWrapper.css("height", "auto") } } }, _maxHeightTab: function () { var c = this.length(); var d = -1; var b = -1; while (c) { c--; if (d < parseInt(this._titleList[c].outerHeight(true))) { b = c } } return b }, _addSelectionTracker: function () { if (this._moveSelectionTrackerContainer) { this._moveSelectionTrackerContainer.remove() } this._moveSelectionTrackerContainer = a('<div class="' + this.toThemeProperty("jqx-tabs-selection-tracker-container") + '">'); var b = this.toThemeProperty("jqx-tabs-selection-tracker-" + this.position); this._selectionTracker = a('<div class="' + b + '">'); this._selectionTracker.css("color", "inherit"); this._moveSelectionTrackerContainer.append(this._selectionTracker); this._headerWrapper.append(this._moveSelectionTrackerContainer); this._selectionTracker.css({ position: "absolute", "z-index": "10", left: "0px", top: "0px", display: "inline-block" }) }, _addContentWrapper: function () { var d = "none"; var b = this._contentWrapper == undefined; this._contentWrapper = this._contentWrapper || a('<div class="' + this.toThemeProperty("jqx-tabs-content") + '" style="float:' + d + ';">'); this._contentWrapper.addClass(this.toThemeProperty("jqx-widget-content")); var c = this.length(); while (c) { c--; this._contentList[c].addClass(this.toThemeProperty("jqx-tabs-content-element")) } if (b) { this.host.find(".jqx-tabs-content-element").wrapAll(this._contentWrapper); this._contentWrapper = this.host.find(".jqx-tabs-content") } if (this.roundedCorners) { if (this.position == "top") { this._contentWrapper.addClass(this.toThemeProperty("jqx-rc-b")) } else { this._contentWrapper.addClass(this.toThemeProperty("jqx-rc-t")) } this.host.addClass(this.toThemeProperty("jqx-rc-all")) } }, _addHeaderWrappers: function () { var b = this.length(); this._unorderedList.remove(); this._headerWrapper = this._headerWrapper || a('<div class="jqx-tabs-headerWrapper" style="outline: none;">'); this._headerWrapper.remove(); if (this.position == "top") { this._headerWrapper.prependTo(this.host) } else { this._headerWrapper.appendTo(this.host) } this._unorderedList.appendTo(this._headerWrapper); this._headerWrapper.addClass(this.toThemeProperty("jqx-tabs-header")); this._headerWrapper.addClass(this.toThemeProperty("jqx-widget-header")); if (this.position == "bottom") { this._headerWrapper.addClass(this.toThemeProperty("jqx-tabs-header-bottom")) } else { this._headerWrapper.removeClass(this.toThemeProperty("jqx-tabs-header-bottom")) } if (this.roundedCorners) { if (this.position == "top") { this._headerWrapper.addClass(this.toThemeProperty("jqx-rc-t")); this._headerWrapper.removeClass(this.toThemeProperty("jqx-rc-b")) } else { this._headerWrapper.removeClass(this.toThemeProperty("jqx-rc-t")); this._headerWrapper.addClass(this.toThemeProperty("jqx-rc-b")) } } while (b) { b--; if (this._titleList[b].children(".jqx-tabs-titleWrapper").length <= 0) { var c = a('<div class="jqx-tabs-titleWrapper" style="outline: none; position: relative;">'); c.append(this._titleList[b].html()); this._titleList[b].empty(); c.appendTo(this._titleList[b]) } this._titleList[b].children(".jqx-tabs-titleWrapper").css("z-index", "15") } }, _render: function () { this._addCloseButtons(); this._addHeaderWrappers(); this._addContentWrapper(); if (this.selectionTracker) { this._addSelectionTracker() } this._addArrows() }, _addCloseButton: function (c) { var f = c; if (this._titleList[f].find(this.toThemeProperty(".jqx-tabs-close-button", true)).length <= 0 && this._titleList[f].find(".jqx-tabs-titleContentWrapper").length <= 0) { var d = a('<div class="jqx-tabs-titleContentWrapper"></div>'); var g = "left"; if (this.rtl) { g = "right" } d.css("float", g); d.addClass("jqx-disableselect"); d.append(this._titleList[f].html()); this._titleList[f].html(""); var b = a('<div class="' + this.toThemeProperty("jqx-tabs-close-button") + '"></div>'); b.css({ height: this.closeButtonSize, width: this.closeButtonSize, "float": g, "font-size": "1px" }); var e = this; this._titleList[f].append(d); this._titleList[f].append(b); if (!this.showCloseButtons) { b.css("display", "none") } else { if (this.hiddenCloseButtons) { if (this.hiddenCloseButtons[c] == 1) { b.css("display", "none") } } } } }, _addCloseButtons: function () { var b = this.length(); while (b) { b--; this._addCloseButton(b) } }, _prepareTabs: function () { var c = this.length(); var b = this.selectionTracker; this.selectionTracker = false; while (c) { c--; if (this._selectedItem !== c) { this._unselect(c, null, false) } } this._select(this._selectedItem, 0, null, false); this.selectionTracker = b; if (this.initTabContent) { if (!this._initTabContentList[this.selectedItem]) { if (!this._hiddenParent()) { this.initTabContent(this.selectedItem); this._initTabContentList[this.selectedItem] = true } } } }, _isValidIndex: function (b) { return (b >= 0 && b < this.length()) }, _removeSelectStyle: function () { var c = this.length(); while (c) { c--; var b = null; if (this.showCloseButtons) { var b = this._titleList[c].children(0).children(this.toThemeProperty(".jqx-tabs-close-button", true)); b.removeClass(this.toThemeProperty("jqx-tabs-close-button-selected")) } if (this.position == "top") { this._titleList[c].removeClass(this.toThemeProperty("jqx-tabs-title-selected-top")) } else { this._titleList[c].removeClass(this.toThemeProperty("jqx-tabs-title-selected-bottom")) } this._titleList[c].removeClass(this.toThemeProperty("jqx-fill-state-pressed")) } }, _addSelectStyle: function (c, e) { var d = this.length(); this._removeSelectStyle(); if (!this.selectionTracker || (e != undefined && e)) { if (c >= 0 && this._titleList[c] != undefined) { var b = null; if (this.showCloseButtons) { var b = this._titleList[c].children(0).children(this.toThemeProperty(".jqx-tabs-close-button", true)); if (this.hiddenCloseButtons) { if (this.hiddenCloseButtons[c] == 1) { b = null } } } this._titleList[c].removeClass(this.toThemeProperty("jqx-fill-state-hover")); if (this.position == "top") { this._titleList[c].removeClass(this.toThemeProperty("jqx-tabs-title-hover-top")); this._titleList[c].addClass(this.toThemeProperty("jqx-tabs-title-selected-top")) } else { this._titleList[c].removeClass(this.toThemeProperty("jqx-tabs-title-hover-bottom")); this._titleList[c].addClass(this.toThemeProperty("jqx-tabs-title-selected-bottom")) } this._titleList[c].addClass(this.toThemeProperty("jqx-fill-state-pressed")); if (b != null) { b.addClass(this.toThemeProperty("jqx-tabs-close-button-selected")) } } } }, _addItemTo: function (g, c, e) { if (c < g.length) { var b = undefined, f = undefined; for (var d = c; d + 1 < g.length; d++) { if (b === undefined) { b = g[d + 1]; g[d + 1] = g[d] } else { f = g[d + 1]; g[d + 1] = b; b = f } } if (b === undefined) { b = g[c] } g[c] = e; g.push(b) } else { g.push(e) } }, _select: function (d, g, h, b, f) { if (!this._tabCaptured) { this.host.attr("hideFocus", "true"); var c = this; if (f == undefined) { this._addSelectStyle(d) } else { this._addSelectStyle(d, f) } if (this.isCollapsed && this.collapsible) { this._contentList[d].css("display", "none"); this._selectCallback(d, h, b); return } switch (this.animationType) { case "none": if (!c.selectionTracker) { for (var e = 0; e < this._contentList.length; e++) { if (d != e && this._contentList[e].css("display") == "block") { this._contentList[e].css("display", "none"); a.jqx.aria(this._titleList[e], "aria-selected", false); a.jqx.aria(this._contentList[e], "aria-hidden", true) } } this._contentList[d].css("display", "block"); a.jqx.aria(this._titleList[d], "aria-selected", true); a.jqx.aria(this._contentList[d], "aria-hidden", false); a.jqx.aria(this, "aria-activedescendant", this._titleList[d][0].id) } else { setTimeout(function () { c._contentList[d].css("display", "block"); a.jqx.aria(c._titleList[d], "aria-selected", true); a.jqx.aria(c._contentList[d], "aria-hidden", false); a.jqx.aria(c, "aria-activedescendant", c._titleList[d][0].id) }, this.selectionTrackerAnimationDuration) } this._selectCallback(d, h, b); break; case "fade": this._lockAnimation("contentListSelect"); c._selectCallback(d, h, b); this._contentList[d].fadeIn(g, function () { c._unlockAnimation("contentListSelect"); a.jqx.aria(c._titleList[d], "aria-selected", true); a.jqx.aria(c._contentList[d], "aria-hidden", false); a.jqx.aria(c, "aria-activedescendant", c._titleList[d][0].id) }); break } } }, _selectCallback: function (c, d, b) { this._selectedItem = c; this.selectedItem = this._selectedItem; if (d) { d() } if (b) { this._raiseEvent(1, { item: c }) } }, _unselect: function (d, e, b) { if (d >= 0) { if (!this._tabCaptured) { var c = this; this._contentList[d].stop(); if (this.animationType == "fade") { this._contentList[d].css("display", "none"); a.jqx.aria(c._titleList[d], "aria-selected", false); a.jqx.aria(c._contentList[d], "aria-hidden", true) } else { if (this.selectionTracker) { setTimeout(function () { c._contentList[d].css("display", "none"); a.jqx.aria(c._titleList[d], "aria-selected", false); a.jqx.aria(c._contentList[d], "aria-hidden", true) }, this.selectionTrackerAnimationDuration) } else { this._contentList[d].css("display", "none"); a.jqx.aria(c._titleList[d], "aria-selected", false); a.jqx.aria(c._contentList[d], "aria-hidden", true) } } this._unselectCallback(d, e, b); if (!this.selectionTracker) { this._titleList[d].removeClass(this.toThemeProperty("jqx-tabs-title-selected")); this._titleList[d].removeClass(this.toThemeProperty("jqx-fill-state-pressed")) } } } }, _unselectCallback: function (c, d, b) { if (b) { this._raiseEvent(8, { item: c }) } if (d) { d() } }, disable: function () { var b = this.length(); while (b) { b--; this.disableAt(b) } }, enable: function () { var b = this.length(); while (b) { b--; this.enableAt(b) } }, getEnabledTabsCount: function () { var b = 0; a.each(this._titleList, function () { if (!this.disabled) { b++ } }); return b }, getDisabledTabsCount: function () { var b = 0; a.each(this._titleList, function () { if (this.disabled) { b++ } }); return b }, removeAt: function (d) { if (this._isValidIndex(d) && (this.canCloseAllTabs || this.length() > 1)) { this._removeHoverStates(); var b = this, c = this._titleList[this._selectedItem], e = parseInt(this._titleList[d].outerWidth(true)), i = this.getTitleAt(d); this._unorderedList.width(parseInt(this._unorderedList.width()) - e); this._titleList[d].remove(); this._contentList[d].remove(); var h = 0; this._titleList.splice(d, 1); this._contentList.splice(d, 1); this._addStyles(); this._performHeaderLayout(); this._removeEventHandlers(); this._addEventHandlers(); this._raiseEvent(3, { item: d, title: i }); this._isAnimated = {}; if (this.selectedItem > 0) { this._selectedItem = -1; var g = this._getPreviousIndex(this.selectedItem); this.select(g) } else { this._selectedItem = -1; var g = this._getNextIndex(this.selectedItem); this.select(g) } if (parseInt(this._unorderedList.css("left")) > this._getArrowsDisplacement()) { this._unorderedList.css("left", this._getArrowsDisplacement()) } if (parseInt(this._unorderedList.width()) <= parseInt(this._headerWrapper.width())) { var f = (this.enableScrollAnimation) ? this.scrollAnimationDuration : 0; this._lockAnimation("unorderedList"); this._unorderedList.animate({ left: 0 }, f, function () { b._unlockAnimation("unorderedList") }) } } }, removeFirst: function () { this.removeAt(0) }, removeLast: function () { this.removeAt(this.length() - 1) }, disableAt: function (b) { if (!this._titleList[b].disabled || this._titleList[b].disabled === undefined) { if (this.selectedItem == b) { var c = this.next(); if (!c) { c = this.previous() } } this._titleList[b].disabled = true; this.removeHandler(this._titleList[b], this.toggleMode); if (this.enabledHover) { this._titleList[b].off("mouseenter").off("mouseleave") } this._removeEventListenerAt(b); this._titleList[b].addClass(this.toThemeProperty("jqx-tabs-title-disable")); this._titleList[b].addClass(this.toThemeProperty("jqx-fill-state-disabled")); this._raiseEvent(5, { item: b }) } }, enableAt: function (b) { if (this._titleList[b].disabled) { this._titleList[b].disabled = false; this._addEventListenerAt(b); this._titleList[b].removeClass(this.toThemeProperty("jqx-tabs-title-disable")); this._titleList[b].removeClass(this.toThemeProperty("jqx-fill-state-disabled")); this._raiseEvent(4, { item: b }) } }, addAt: function (d, g, e) { if (d >= 0 || d <= this.length()) { this._removeHoverStates(); var b = a("<li>" + g + "</li>"); var f = a("<div>" + e + "</div>"); b.addClass(this.toThemeProperty("jqx-tabs-title")); b.addClass(this.toThemeProperty("jqx-item")); f.addClass(this.toThemeProperty("jqx-tabs-content-element")); if (this.position == "bottom") { b.addClass(this.toThemeProperty("jqx-tabs-title-bottom")) } var c = false; if (this._titleList.length == 0) { this._unorderedList.append(b) } else { if (d < this.length() && d >= 0) { this._titleList[d].before(b) } else { this._titleList[this.length() - 1].after(b) } } f.appendTo(this._contentWrapper); this._addItemTo(this._titleList, d, b); this._addItemTo(this._contentList, d, f); if (this._selectedItem > d) { this._selectedItem++ } this._switchTabs(d, this._selectedItem); this._selectedItem = d; if (this.showCloseButtons && this._titleList.length > 0) { this._addCloseButton(d) } this._uiRefresh(c); this._raiseEvent(2, { item: d }); this._moveSelectionTrack(this._selectedItem, 0) } }, addFirst: function (c, b) { this.addAt(0, c, b) }, addLast: function (c, b) { this.addAt(this.length(), c, b) }, val: function (b) { if (arguments.length == 0 || typeof (b) == "object") { return this._selectedItem } this.select(b); return this._selectedItem }, select: function (c, b) { if (typeof (c) === "object") { c = this._indexOf(c) } var e = c >= 0 && c < this._titleList.length ? this._titleList[c].attr("canselect") : true; if (e == undefined || e == "true" || e == true) { if (c !== this._selectedItem && this._isValidIndex(c)) { if (!this._activeAnimation() && !this._titleList[c].disabled) { var d = this._switchTabs(c, this._selectedItem); if (d) { this.ensureVisible(c) } } } } }, previous: function (c) { var b = this._selectedItem; if (c != undefined && !isNaN(c)) { b = c } while (b > 0 && b < this._titleList.length) { b--; if (!this._titleList[b].disabled) { this.select(b); return true } } return false }, _getPreviousIndex: function (c) { if (c != undefined && !isNaN(c)) { var b = c; while (c > 0 && c <= this._titleList.length) { c--; if (!this._titleList[c].disabled) { return c; break } } return b } else { return 0 } }, _getNextIndex: function (c) { if (c != undefined && !isNaN(c)) { var b = c; while (c >= 0 && c < this._titleList.length) { if (!this._titleList[c].disabled) { return c; break } c++ } return b } else { return 0 } }, next: function (c) { var b = this._selectedItem; if (c != undefined && !isNaN(c)) { b = c } while (b >= 0 && b < this._titleList.length - 1) { b++; if (!this._titleList[b].disabled) { this.select(b); return true } } return false }, first: function () { var b = 0; if (this._titleList[b].disabled) { this.next(b) } else { this.select(b) } }, last: function () { var b = this._titleList.length - 1; if (this._titleList[b].disabled) { this.previous(b) } else { this.select(b) } }, length: function () { return this._titleList.length }, lockAt: function (b) { if (this._isValidIndex(b) && (!this._titleList[b].locked || this._titleList[b].locked === undefined)) { this._titleList[b].locked = true; this._raiseEvent(11, { item: b }) } }, unlockAt: function (b) { if (this._isValidIndex(b) && this._titleList[b].locked) { this._titleList[b].locked = false; this._raiseEvent(12, { item: b }) } }, lockAll: function () { var b = this.length(); while (b) { b--; this.lockAt(b) } }, unlockAll: function () { var b = this.length(); while (b) { b--; this.unlockAt(b) } }, showCloseButtonAt: function (c) { if (this._isValidIndex(c)) { if (!this.showCloseButtons) { this.showCloseButtons = true; this.updatetabsheader() } var b = this._titleList[c].find(this.toThemeProperty(".jqx-tabs-close-button", true)); b.css("display", "block"); if (!this.hiddenCloseButtons) { this.hiddenCloseButtons = new Array() } this.hiddenCloseButtons[c] = 0 } }, hideCloseButtonAt: function (c) { if (this._isValidIndex(c)) { var b = this._titleList[c].find(this.toThemeProperty(".jqx-tabs-close-button", true)); b.css("display", "none"); if (!this.hiddenCloseButtons) { this.hiddenCloseButtons = new Array() } this.hiddenCloseButtons[c] = 1 } }, hideAllCloseButtons: function () { var b = this.length(); while (b) { b--; this.hideCloseButtonAt(b) } }, showAllCloseButtons: function () { var b = this.length(); while (b) { b--; this.showCloseButtonAt(b) } }, getTitleAt: function (b) { if (this._titleList[b]) { return this._titleList[b].text() } return null }, getContentAt: function (b) { if (this._contentList[b]) { return this._contentList[b] } return null }, setTitleAt: function (b, c) { if (this._titleList[b]) { this._titleList[b].text(c); if (this.showCloseButtons) { this._addCloseButton(b); this._removeEventHandlers(); this._addEventHandlers() } this.render(); this.refresh() } }, setContentAt: function (b, c) { if (this._contentList[b]) { this._contentList[b].html(c) } }, ensureVisible: function (d) { var k = this; if (d == undefined || d == -1 || d == null) { d = this.selectedItem } if (!this._isValidIndex(d)) { return false } var j = parseInt(this._titleList[d].position().left) + parseInt(this._unorderedList.css("margin-left")); var f = parseInt(this._unorderedList.css("left")); var i = parseInt(this._headerWrapper.outerWidth(true)); var e = parseInt(this._titleList[d].outerWidth(true)); var h = f - this._getArrowsDisplacement(); var b = i - this._getArrowsDisplacement() - h; var g, c; if (j < -h) { g = -j + this._getArrowsDisplacement(); c = this._getArrowsDisplacement() } else { if (j + e > b - this._getArrowsDisplacement()) { g = -j + i - e - ((this.scrollable) ? (2 * this.arrowButtonSize - this._getArrowsDisplacement()) : 0); c = i - e - this._getArrowsDisplacement() } else { this._moveSelectionTrack(d, this.selectionTrackerAnimationDuration); return true } } this._lockAnimation("unorderedList"); this._unorderedList.animate({ left: g }, this.scrollAnimationDuration, function () { k._unlockAnimation("unorderedList"); k._moveSelectionTrack(k._selectedItem, 0); return true }); this._moveSelectionTrack(d, this.selectionTrackerAnimationDuration, c); return true }, isVisibleAt: function (d) { var k = this; if (d == undefined || d == -1 || d == null) { d = this.selectedItem } if (!this._isValidIndex(d)) { return false } var j = parseInt(this._titleList[d].position().left) + parseInt(this._unorderedList.css("margin-left")); var f = parseInt(this._unorderedList.css("left")); var i = parseInt(this._headerWrapper.outerWidth(true)); var e = parseInt(this._titleList[d].outerWidth(true)); var h = f - this._getArrowsDisplacement(); var b = i - this._getArrowsDisplacement() - h; var g, c; if (j < -h) { return false } else { if (j + e > b) { return false } else { return true } } return true }, isDisabled: function (b) { return this._titleList[b].disabled }, _lockAnimation: function (b) { if (this._isAnimated) { this._isAnimated[b] = true } }, _unlockAnimation: function (b) { if (this._isAnimated) { this._isAnimated[b] = false } }, propertyChangedHandler: function (b, c, e, d) { this._validateProperties(); switch (c) { case "touchMode": if (d) { b.enabledHover = false; b.keyboardNavigation = false } break; case "width": case "height": b._performResize(); return; case "disabled": if (d) { this.disable() } else { this.enable() } return; case "showCloseButtons": if (d) { this.showAllCloseButtons() } else { this.hideAllCloseButtons() } this._moveSelectionTrack(this._selectedItem, this.selectionTrackerAnimationDuration); return; case "selectedItem": if (this._isValidIndex(d)) { this.select(d) } return; case "scrollStep": case "contentTransitionDuration": case "scrollAnimationDuration": case "enableScrollAnimation": return; case "selectionTracker": if (d) { this._refresh(); this.select(this._selectedItem) } else { if (this._selectionTracker != null) { this._selectionTracker.remove() } } return; case "scrollable": if (d) { this._refresh(); this.select(this._selectedItem) } else { this._leftArrow.remove(); this._rightArrow.remove(); this._performHeaderLayout() } return; case "autoHeight": this._performHeaderLayout(); return; case "theme": a.jqx.utilities.setTheme(e, d, this.host); return } this._unorderedList.css("left", "0px"); this._refresh(); this.select(this._selectedItem); this._addSelectStyle(this._selectedItem, true) } }) }(jqxBaseFramework));

/*
jqxbutton
*/

(function (a) { a.jqx.cssroundedcorners = function (b) { var c = { all: "jqx-rc-all", top: "jqx-rc-t", bottom: "jqx-rc-b", left: "jqx-rc-l", right: "jqx-rc-r", "top-right": "jqx-rc-tr", "top-left": "jqx-rc-tl", "bottom-right": "jqx-rc-br", "bottom-left": "jqx-rc-bl" }; for (prop in c) { if (!c.hasOwnProperty(prop)) { continue } if (b == prop) { return c[prop] } } }; a.jqx.jqxWidget("jqxButton", "", {}); a.extend(a.jqx._jqxButton.prototype, { defineInstance: function () { var b = { cursor: "arrow", roundedCorners: "all", disabled: false, height: null, width: null, overrideTheme: false, enableHover: true, enableDefault: true, enablePressed: true, rtl: false, _ariaDisabled: false, _scrollAreaButton: false, template: "default", aria: { "aria-disabled": { name: "disabled", type: "boolean"}} }; a.extend(true, this, b); return b }, createInstance: function (d) { var b = this; b._setSize(); if (!b._ariaDisabled) { b.host.attr("role", "button") } if (!b.overrideTheme) { b.host.addClass(b.toThemeProperty(a.jqx.cssroundedcorners(b.roundedCorners))); if (b.enableDefault) { b.host.addClass(b.toThemeProperty("jqx-button")) } b.host.addClass(b.toThemeProperty("jqx-widget")) } b.isTouchDevice = a.jqx.mobile.isTouchDevice(); if (!b._ariaDisabled) { a.jqx.aria(this) } if (b.cursor != "arrow") { if (!b.disabled) { b.host.css({ cursor: b.cursor }) } else { b.host.css({ cursor: "arrow" }) } } var g = "mouseenter mouseleave mousedown focus blur"; if (b._scrollAreaButton) { var g = "mousedown" } if (b.isTouchDevice) { b.addHandler(b.host, a.jqx.mobile.getTouchEventName("touchstart"), function (h) { b.isPressed = true; b.refresh() }); b.addHandler(a(document), a.jqx.mobile.getTouchEventName("touchend") + "." + b.element.id, function (h) { b.isPressed = false; b.refresh() }) } b.addHandler(b.host, g, function (h) { switch (h.type) { case "mouseenter": if (!b.isTouchDevice) { if (!b.disabled && b.enableHover) { b.isMouseOver = true; b.refresh() } } break; case "mouseleave": if (!b.isTouchDevice) { if (!b.disabled && b.enableHover) { b.isMouseOver = false; b.refresh() } } break; case "mousedown": if (!b.disabled) { b.isPressed = true; b.refresh() } break; case "focus": if (!b.disabled) { b.isFocused = true; b.refresh() } break; case "blur": if (!b.disabled) { b.isFocused = false; b.refresh() } break } }); b.mouseupfunc = function (h) { if (!b.disabled) { if (b.isPressed || b.isMouseOver) { b.isPressed = false; b.refresh() } } }; b.addHandler(a(document), "mouseup.button" + b.element.id, b.mouseupfunc); try { if (document.referrer != "" || window.frameElement) { if (window.top != null && window.top != window.self) { var f = ""; if (window.parent && document.referrer) { f = document.referrer } if (f.indexOf(document.location.host) != -1) { var e = function (h) { b.isPressed = false; b.refresh() }; if (window.top.document) { b.addHandler(a(window.top.document), "mouseup", e) } } } } } catch (c) { } b.propertyChangeMap.roundedCorners = function (h, j, i, k) { h.host.removeClass(h.toThemeProperty(a.jqx.cssroundedcorners(i))); h.host.addClass(h.toThemeProperty(a.jqx.cssroundedcorners(k))) }; b.propertyChangeMap.width = function (h, j, i, k) { h._setSize(); h.refresh() }; b.propertyChangeMap.height = function (h, j, i, k) { h._setSize(); h.refresh() }; b.propertyChangeMap.disabled = function (h, j, i, k) { if (i != k) { h.host[0].disabled = k; h.host.attr("disabled", k); h.refresh(); if (!k) { h.host.css({ cursor: h.cursor }) } else { h.host.css({ cursor: "default" }) } a.jqx.aria(h, "aria-disabled", h.disabled) } }; b.propertyChangeMap.rtl = function (h, j, i, k) { if (i != k) { h.refresh() } }; b.propertyChangeMap.template = function (h, j, i, k) { if (i != k) { h.host.removeClass("jqx-" + i); h.refresh() } }; b.propertyChangeMap.theme = function (h, j, i, k) { h.host.removeClass(); if (h.enableDefault) { h.host.addClass(h.toThemeProperty("jqx-button")) } h.host.addClass(h.toThemeProperty("jqx-widget")); if (!h.overrideTheme) { h.host.addClass(h.toThemeProperty(a.jqx.cssroundedcorners(h.roundedCorners))) } h._oldCSSCurrent = null; h.refresh() }; if (b.disabled) { b.element.disabled = true; b.host.attr("disabled", true) } }, resize: function (c, b) { this.width = c; this.height = b; this._setSize() }, val: function () { var c = this; var b = c.host.find("input"); if (b.length > 0) { if (arguments.length == 0 || typeof (value) == "object") { return b.val() } b.val(value); c.refresh(); return b.val() } if (arguments.length == 0 || typeof (value) == "object") { if (c.element.nodeName.toLowerCase() == "button") { return a(c.element).text() } return c.element.value } c.element.value = arguments[0]; if (c.element.nodeName.toLowerCase() == "button") { a(c.element).text(arguments[0]) } c.refresh() }, _setSize: function () { var b = this; if (b.width != null && (b.width.toString().indexOf("px") != -1 || b.width.toString().indexOf("%") != -1)) { b.host.css("width", b.width) } else { if (b.width != undefined && !isNaN(b.width)) { b.host.css("width", b.width) } } if (b.height != null && (b.height.toString().indexOf("px") != -1 || b.height.toString().indexOf("%") != -1)) { b.host.css("height", b.height) } else { if (b.height != undefined && !isNaN(b.height)) { b.host.css("height", parseInt(b.height)) } } }, _removeHandlers: function () { var b = this; b.removeHandler(b.host, "selectstart"); b.removeHandler(b.host, "click"); b.removeHandler(b.host, "focus"); b.removeHandler(b.host, "blur"); b.removeHandler(b.host, "mouseenter"); b.removeHandler(b.host, "mouseleave"); b.removeHandler(b.host, "mousedown"); b.removeHandler(a(document), "mouseup.button" + b.element.id, b.mouseupfunc); if (b.isTouchDevice) { b.removeHandler(b.host, a.jqx.mobile.getTouchEventName("touchstart")); b.removeHandler(a(document), a.jqx.mobile.getTouchEventName("touchend") + "." + b.element.id) } b.mouseupfunc = null; delete b.mouseupfunc }, focus: function () { this.host.focus() }, destroy: function () { var b = this; b._removeHandlers(); var c = a.data(b.element, "jqxButton"); if (c) { delete c.instance } b.host.removeClass(); b.host.removeData(); b.host.remove(); delete b.set; delete b.get; delete b.call; delete b.element; delete b.host }, render: function () { this.refresh() }, refresh: function () { var c = this; if (c.overrideTheme) { return } var e = c.toThemeProperty("jqx-fill-state-focus"); var i = c.toThemeProperty("jqx-fill-state-disabled"); var b = c.toThemeProperty("jqx-fill-state-normal"); if (!c.enableDefault) { b = "" } var h = c.toThemeProperty("jqx-fill-state-hover"); var f = c.toThemeProperty("jqx-fill-state-pressed"); var g = c.toThemeProperty("jqx-fill-state-pressed"); if (!c.enablePressed) { f = "" } var d = ""; if (!c.host) { return } c.host[0].disabled = c.disabled; if (c.disabled) { d = b + " " + i; if (c.template !== "default" && c.template !== "") { d += " jqx-" + c.template } c.host.addClass(d); c._oldCSSCurrent = d; return } else { if (c.isMouseOver && !c.isTouchDevice) { if (c.isPressed) { d = g } else { d = h } } else { if (c.isPressed) { d = f } else { d = b } } } if (c.isFocused) { d += " " + e } if (c.template !== "default" && c.template !== "") { d += " jqx-" + c.template } if (d != c._oldCSSCurrent) { if (c._oldCSSCurrent) { c.host.removeClass(c._oldCSSCurrent) } c.host.addClass(d); c._oldCSSCurrent = d } if (c.rtl) { c.host.addClass(c.toThemeProperty("jqx-rtl")); c.host.css("direction", "rtl") } } }); a.jqx.jqxWidget("jqxLinkButton", "", {}); a.extend(a.jqx._jqxLinkButton.prototype, { defineInstance: function () { this.disabled = false; this.height = null; this.width = null; this.rtl = false; this.href = null }, createInstance: function (d) { var c = this; this.host.onselectstart = function () { return false }; this.host.attr("role", "button"); var b = this.height || this.host.height(); var e = this.width || this.host.width(); this.href = this.host.attr("href"); this.target = this.host.attr("target"); this.content = this.host.text(); this.element.innerHTML = ""; this.host.append("<input type='button' class='jqx-wrapper'/>"); var f = this.host.find("input"); f.addClass(this.toThemeProperty("jqx-reset")); f.width(e); f.height(b); f.val(this.content); this.host.find("tr").addClass(this.toThemeProperty("jqx-reset")); this.host.find("td").addClass(this.toThemeProperty("jqx-reset")); this.host.find("tbody").addClass(this.toThemeProperty("jqx-reset")); this.host.css("color", "inherit"); this.host.addClass(this.toThemeProperty("jqx-link")); f.css({ width: e }); f.css({ height: b }); var g = d == undefined ? {} : d[0] || {}; f.jqxButton(g); if (this.disabled) { this.host[0].disabled = true } this.propertyChangeMap.disabled = function (h, j, i, k) { h.host[0].disabled = k; h.host.find("input").jqxButton({ disabled: k }) }; this.addHandler(f, "click", function (h) { if (!this.disabled) { c.onclick(h) } return false }) }, onclick: function (b) { if (this.target != null) { window.open(this.href, this.target) } else { window.location = this.href } } }); a.jqx.jqxWidget("jqxRepeatButton", "jqxButton", {}); a.extend(a.jqx._jqxRepeatButton.prototype, { defineInstance: function () { this.delay = 50 }, createInstance: function (e) { var c = this; var d = a.jqx.mobile.isTouchDevice(); var b = !d ? "mouseup." + this.base.element.id : "touchend." + this.base.element.id; var f = !d ? "mousedown." + this.base.element.id : "touchstart." + this.base.element.id; this.addHandler(a(document), b, function (g) { if (c.timeout != null) { clearTimeout(c.timeout); c.timeout = null; c.refresh() } if (c.timer != undefined) { clearInterval(c.timer); c.timer = null; c.refresh() } }); this.addHandler(this.base.host, f, function (g) { if (c.timer != null) { clearInterval(c.timer) } c.timeout = setTimeout(function () { clearInterval(c.timer); c.timer = setInterval(function (h) { c.ontimer(h) }, c.delay) }, 150) }); this.mousemovefunc = function (g) { if (!d) { if (g.which == 0) { if (c.timer != null) { clearInterval(c.timer); c.timer = null } } } }; this.addHandler(this.base.host, "mousemove", this.mousemovefunc) }, destroy: function () { var c = a.jqx.mobile.isTouchDevice(); var b = !c ? "mouseup." + this.base.element.id : "touchend." + this.base.element.id; var e = !c ? "mousedown." + this.base.element.id : "touchstart." + this.base.element.id; this.removeHandler(this.base.host, "mousemove", this.mousemovefunc); this.removeHandler(this.base.host, e); this.removeHandler(a(document), b); this.timer = null; delete this.mousemovefunc; delete this.timer; var d = a.data(this.base.element, "jqxRepeatButton"); if (d) { delete d.instance } a(this.base.element).removeData(); this.base.destroy(); delete this.base }, stop: function () { clearInterval(this.timer); this.timer = null }, ontimer: function (b) { var b = new a.Event("click"); if (this.base != null && this.base.host != null) { this.base.host.trigger(b) } } }); a.jqx.jqxWidget("jqxToggleButton", "jqxButton", {}); a.extend(a.jqx._jqxToggleButton.prototype, { defineInstance: function () { this.toggled = false; this.uiToggle = true; this.aria = { "aria-checked": { name: "toggled", type: "boolean" }, "aria-disabled": { name: "disabled", type: "boolean"}} }, createInstance: function (c) { var b = this; b.base.overrideTheme = true; b.isTouchDevice = a.jqx.mobile.isTouchDevice(); a.jqx.aria(this); b.propertyChangeMap.roundedCorners = function (d, f, e, g) { d.base.host.removeClass(d.toThemeProperty(a.jqx.cssroundedcorners(e))); d.base.host.addClass(d.toThemeProperty(a.jqx.cssroundedcorners(g))) }; b.propertyChangeMap.toggled = function (d, f, e, g) { d.refresh() }; b.propertyChangeMap.disabled = function (d, f, e, g) { d.base.disabled = g; d.refresh() }; b.addHandler(b.base.host, "click", function (d) { if (!b.base.disabled && b.uiToggle) { b.toggle() } }); if (!b.isTouchDevice) { b.addHandler(b.base.host, "mouseenter", function (d) { if (!b.base.disabled) { b.refresh() } }); b.addHandler(b.base.host, "mouseleave", function (d) { if (!b.base.disabled) { b.refresh() } }) } b.addHandler(b.base.host, "mousedown", function (d) { if (!b.base.disabled) { b.refresh() } }); b.addHandler(a(document), "mouseup.togglebutton" + b.base.element.id, function (d) { if (!b.base.disabled) { b.refresh() } }) }, destroy: function () { this._removeHandlers(); this.base.destroy() }, _removeHandlers: function () { this.removeHandler(this.base.host, "click"); this.removeHandler(this.base.host, "mouseenter"); this.removeHandler(this.base.host, "mouseleave"); this.removeHandler(this.base.host, "mousedown"); this.removeHandler(a(document), "mouseup.togglebutton" + this.base.element.id) }, toggle: function () { this.toggled = !this.toggled; this.refresh(); a.jqx.aria(this, "aria-checked", this.toggled) }, unCheck: function () { this.toggled = false; this.refresh() }, check: function () { this.toggled = true; this.refresh() }, refresh: function () { var c = this; var h = c.base.toThemeProperty("jqx-fill-state-disabled"); var b = c.base.toThemeProperty("jqx-fill-state-normal"); if (!c.base.enableDefault) { b = "" } var g = c.base.toThemeProperty("jqx-fill-state-hover"); var e = c.base.toThemeProperty("jqx-fill-state-pressed"); var f = c.base.toThemeProperty("jqx-fill-state-pressed"); var d = ""; c.base.host[0].disabled = c.base.disabled; if (c.base.disabled) { d = b + " " + h; c.base.host.addClass(d); return } else { if (c.base.isMouseOver && !c.isTouchDevice) { if (c.base.isPressed || c.toggled) { d = f } else { d = g } } else { if (c.base.isPressed || c.toggled) { d = e } else { d = b } } } if (c.base.template !== "default" && c.base.template !== "") { d += " jqx-" + c.base.template } if (c.base.host.hasClass(h) && h != d) { c.base.host.removeClass(h) } if (c.base.host.hasClass(b) && b != d) { c.base.host.removeClass(b) } if (c.base.host.hasClass(g) && g != d) { c.base.host.removeClass(g) } if (c.base.host.hasClass(e) && e != d) { c.base.host.removeClass(e) } if (c.base.host.hasClass(f) && f != d) { c.base.host.removeClass(f) } if (!c.base.host.hasClass(d)) { c.base.host.addClass(d) } } }) })(jqxBaseFramework);

/*
jqxgrid
*/

(function (b) { b.jqx.jqxWidget("jqxGrid", "", {}); b.extend(b.jqx._jqxGrid.prototype, { defineInstance: function () { var d = { disabled: false, width: 600, height: 400, pagerheight: 28, groupsheaderheight: 34, pagesize: 10, pagesizeoptions: ["5", "10", "20"], rowsheight: 25, columnsheight: 25, filterrowheight: 31, groupindentwidth: 30, rowdetails: false, enablerowdetailsindent: true, enablemousewheel: true, initrowdetails: null, layoutrowdetails: null, editable: false, editmode: "selectedcell", pageable: false, pagermode: "default", pagerbuttonscount: 5, groupable: false, sortable: false, filterable: false, filtermode: "default", autoshowfiltericon: true, showfiltercolumnbackground: true, showpinnedcolumnbackground: true, showsortcolumnbackground: true, altrows: false, altstart: 1, altstep: 1, showrowdetailscolumn: true, showtoolbar: false, toolbarheight: 34, showstatusbar: false, statusbarheight: 34, enableellipsis: true, groups: [], groupsrenderer: null, groupcolumnrenderer: null, groupsexpandedbydefault: false, pagerrenderer: null, touchmode: "auto", columns: [], selectedrowindex: -1, selectedrowindexes: new Array(), selectedcells: new Array(), autobind: true, selectedcell: null, tableZIndex: 799, headerZIndex: 299, updatefilterconditions: null, showaggregates: false, showfilterrow: false, showeverpresentrow: false, everpresentrowposition: "top", everpresentrowactions: "add reset", everpresentrowactionsmode: "buttons", everpresentrowheight: 30, autorowheight: false, autokoupdates: true, handlekeyboardnavigation: null, showsortmenuitems: true, showfiltermenuitems: true, showgroupmenuitems: true, enablebrowserselection: false, enablekeyboarddelete: true, clipboard: true, clipboardbegin: null, clipboardend: null, copytoclipboardwithheaders: false, copytoclipboardhiddencolumns: false, ready: null, updatefilterpanel: null, autogeneratecolumns: false, rowdetailstemplate: null, scrollfeedback: null, rendertoolbar: null, renderstatusbar: null, rendered: null, multipleselectionbegins: null, columngroups: null, cellhover: null, source: { beforeprocessing: null, beforesend: null, loaderror: null, localdata: null, data: null, datatype: "array", datafields: [], url: "", root: "", record: "", id: "", totalrecords: 0, recordstartindex: 0, recordendindex: 0, loadallrecords: true, sortcolumn: null, sortdirection: null, sort: null, filter: null, sortcomparer: null }, dataview: null, updatedelay: null, autoheight: false, autowidth: false, showheader: true, showgroupsheader: true, closeablegroups: true, scrollbarsize: b.jqx.utilities.scrollBarSize, touchscrollbarsize: b.jqx.utilities.touchScrollBarSize, scrollbarautoshow: b.jqx.utilities.scrollBarAutoShow, virtualmode: false, sort: null, columnsmenu: true, columnsresize: false, columnsautoresize: true, columnsreorder: false, columnsmenuwidth: 15, autoshowcolumnsmenubutton: true, popupwidth: "auto", popupheight: "auto", columnmenuopening: null, columnmenuclosing: null, sorttogglestates: 2, rendergridrows: null, enableanimations: true, enablecolumnsvirtualization: true, enabletooltips: false, selectionmode: "singlerow", enablehover: true, loadingerrormessage: "The data is still loading. When the data binding is completed, the Grid raises the 'bindingcomplete' event. Call this function in the 'bindingcomplete' event handler.", verticalscrollbarstep: 25, verticalscrollbarlargestep: 400, horizontalscrollbarstep: 10, horizontalscrollbarlargestep: 50, keyboardnavigation: true, touchModeStyle: "auto", autoshowloadelement: true, showdefaultloadelement: true, showemptyrow: true, autosavestate: false, autoloadstate: false, _updating: false, _pagescache: new Array(), _pageviews: new Array(), _cellscache: new Array(), _rowdetailscache: new Array(), _rowdetailselementscache: new Array(), _requiresupdate: false, _hasOpenedMenu: false, scrollmode: "physical", deferreddatafields: null, localization: null, rtl: false, menuitemsarray: [], events: ["initialized", "rowClick", "rowSelect", "rowUnselect", "groupExpand", "groupCollapse", "sort", "columnClick", "cellClick", "pageChanged", "pageSizeChanged", "bindingComplete", "groupsChanged", "filter", "columnResized", "cellSelect", "cellUnselect", "cellBeginEdit", "cellEndEdit", "cellValueChanged", "rowExpand", "rowCollapse", "rowDoubleClick", "cellDoubleClick", "columnReordered", "pageChanging"] }; b.extend(true, this, d); return d }, createInstance: function (i) { this.that = this; var h = this; h.pagesize = parseInt(h.pagesize); h.toolbarheight = parseInt(h.toolbarheight); h.columnsheight = parseInt(h.columnsheight); h.filterrowheight = parseInt(h.filterrowheight); h.statusbarheight = parseInt(h.statusbarheight); h.groupsheaderheight = parseInt(h.groupsheaderheight); h.detailsVisibility = new Array(); h.savedArgs = i && i.length > 0 ? i[0] : null; var g = "<div class='jqx-clear jqx-border-reset jqx-overflow-hidden jqx-max-size jqx-position-relative'><div tabindex='1' class='jqx-clear jqx-max-size jqx-position-relative jqx-overflow-hidden jqx-background-reset' id='wrapper" + h.element.id + "'><div class='jqx-clear jqx-position-absolute' id='toolbar' style='visibility: hidden;'></div><div class='jqx-clear jqx-position-absolute' id='groupsheader' style='visibility: hidden;'></div><div class='jqx-clear jqx-overflow-hidden jqx-position-absolute jqx-border-reset jqx-background-reset' id='content" + h.element.id + "'></div><div class='jqx-clear jqx-position-absolute' id='verticalScrollBar" + h.element.id + "'></div><div class='jqx-clear jqx-position-absolute' id='horizontalScrollBar" + h.element.id + "'></div><div class='jqx-clear jqx-position-absolute jqx-border-reset' id='bottomRight'></div><div class='jqx-clear jqx-position-absolute' id='addrow'></div><div class='jqx-clear jqx-position-absolute' id='statusbar'></div><div class='jqx-clear jqx-position-absolute' id='pager' style='z-index: 20;'></div></div></div>"; h.element.innerHTML = ""; if (b.jqx.utilities.scrollBarSize != 15) { h.scrollbarsize = b.jqx.utilities.scrollBarSize } if (h.source) { if (!h.source.dataBind) { if (!b.jqx.dataAdapter) { throw new Error("jqxGrid: Missing reference to jqxdata.js") } h.source = new b.jqx.dataAdapter(h.source) } var d = h.source._source.datafields; if (d && d.length > 0) { h.editmode = h.editmode.toLowerCase(); h.selectionmode = h.selectionmode.toLowerCase() } } h.host.attr("role", "grid"); h.host.attr("align", "left"); h.element.innerHTML = g; h.host.addClass(h.toTP("jqx-grid")); h.host.addClass(h.toTP("jqx-reset")); h.host.addClass(h.toTP("jqx-rc-all")); h.host.addClass(h.toTP("jqx-widget")); h.host.addClass(h.toTP("jqx-widget-content")); h.wrapper = h.host.find("#wrapper" + h.element.id); h.content = h.host.find("#content" + h.element.id); h.content.addClass(h.toTP("jqx-reset")); var k = h.host.find("#verticalScrollBar" + h.element.id); var o = h.host.find("#horizontalScrollBar" + h.element.id); h.bottomRight = h.host.find("#bottomRight").addClass(h.toTP("jqx-grid-bottomright")).addClass(h.toTP("jqx-scrollbar-state-normal")); if (!k.jqxScrollBar) { throw new Error("jqxGrid: Missing reference to jqxscrollbar.js"); return } h.editors = new Array(); h.vScrollBar = k.jqxScrollBar({ vertical: true, rtl: h.rtl, touchMode: h.touchmode, step: h.verticalscrollbarstep, largestep: h.verticalscrollbarlargestep, theme: h.theme, _triggervaluechanged: false }); h.hScrollBar = o.jqxScrollBar({ vertical: false, rtl: h.rtl, touchMode: h.touchmode, step: h.horizontalscrollbarstep, largestep: h.horizontalscrollbarlargestep, theme: h.theme, _triggervaluechanged: false }); h.addnewrow = h.host.find("#addrow"); h.addnewrow[0].id = "addrow" + h.element.id; h.addnewrow.addClass(h.toTP("jqx-widget-header")); h.pager = h.host.find("#pager"); h.pager[0].id = "pager" + h.element.id; h.toolbar = h.host.find("#toolbar"); h.toolbar[0].id = "toolbar" + h.element.id; h.toolbar.addClass(h.toTP("jqx-grid-toolbar")); h.toolbar.addClass(h.toTP("jqx-widget-header")); h.statusbar = h.host.find("#statusbar"); h.statusbar[0].id = "statusbar" + h.element.id; h.statusbar.addClass(h.toTP("jqx-grid-statusbar")); h.statusbar.addClass(h.toTP("jqx-widget-header")); h.pager.addClass(h.toTP("jqx-grid-pager")); h.pager.addClass(h.toTP("jqx-widget-header")); h.groupsheader = h.host.find("#groupsheader"); h.groupsheader.addClass(h.toTP("jqx-grid-groups-header")); h.groupsheader.addClass(h.toTP("jqx-widget-header")); h.groupsheader[0].id = "groupsheader" + h.element.id; h.vScrollBar.css("visibility", "hidden"); h.hScrollBar.css("visibility", "hidden"); h.vScrollInstance = b.data(h.vScrollBar[0], "jqxScrollBar").instance; h.hScrollInstance = b.data(h.hScrollBar[0], "jqxScrollBar").instance; h.gridtable = null; h.isNestedGrid = h.host.parent() ? h.host.parent().css("z-index") == 9999 : false; h.touchdevice = h.isTouchDevice(); if (h.localizestrings) { h.localizestrings(); if (h.localization != null) { h.localizestrings(h.localization, false) } } if (h.rowdetailstemplate) { if (undefined == h.rowdetailstemplate.rowdetails) { h.rowdetailstemplate.rowdetails = "<div></div>" } if (undefined == h.rowdetailstemplate.rowdetailsheight) { h.rowdetailstemplate.rowdetailsheight = 200 } if (undefined == h.rowdetailstemplate.rowdetailshidden) { h.rowdetailstemplate.rowdetailshidden = true } } if (h.showfilterrow && !h.filterable) { throw new Error('jqxGrid: "showfilterrow" requires setting the "filterable" property to true!'); h.host.remove(); return } if (h.autorowheight && !h.autoheight && !h.pageable) { throw new Error('jqxGrid: "autorowheight" requires setting the "autoheight" or "pageable" property to true!'); h.host.remove(); return } if (h.virtualmode && h.rendergridrows == null) { throw new Error('jqxGrid: "virtualmode" requires setting the "rendergridrows"!'); h.host.remove(); return } if (h.virtualmode && !h.pageable && h.groupable) { throw new Error('jqxGrid: "grouping" in "virtualmode" without paging is not supported!'); h.host.remove(); return } if (h._testmodules()) { return } h._builddataloadelement(); h._cachedcolumns = h.columns; if (h.columns && h.columns.length > 299) { h.headerZIndex = h.columns.length + 100 } if (h.rowsheight != 25) { h._measureElement("cell") } if (h.columnsheight != 25 || h.columngroups) { h._measureElement("column") } if (h.source) { var d = h.source.datafields; if (d == null && h.source._source) { d = h.source._source.datafields } if (d) { for (var e = 0; e < h.columns.length; e++) { var f = h.columns[e]; if (f && f.cellsformat && f.cellsformat.length > 2) { for (var n = 0; n < d.length; n++) { if (d[n].name == f.datafield && !d[n].format) { d[n].format = f.cellsformat; break } } } } } } h.databind(h.source); if (h.showtoolbar) { h.toolbar.css("visibility", "inherit") } if (h.showstatusbar) { h.statusbar.css("visibility", "inherit") } h._arrange(); if (h.pageable && h._initpager) { h._initpager() } h.tableheight = null; var j = h.that; var l = function () { if (j.content) { j.content[0].scrollTop = 0; j.content[0].scrollLeft = 0 } if (j.gridcontent) { j.gridcontent[0].scrollLeft = 0; j.gridcontent[0].scrollTop = 0 } }; h.addHandler(h.content, "mousedown", function () { l() }); h.addHandler(h.content, "scroll", function (m) { l(); return false }); if (!h.showfilterrow) { if (!h.showstatusbar && !h.showtoolbar) { h.host.addClass("jqx-disableselect") } h.content.addClass("jqx-disableselect") } if (h.enablebrowserselection) { h.content.removeClass("jqx-disableselect"); h.host.removeClass("jqx-disableselect") } h._resizeWindow(); if (h.disabled) { h.host.addClass(h.toThemeProperty("jqx-fill-state-disabled")) } h.hasTransform = b.jqx.utilities.hasTransform(h.host); if (h.scrollmode == "logical") { h.vScrollInstance.thumbStep = h.rowsheight; h.vScrollInstance.step = h.rowsheight } if (!b.jqx.isHidden(h.host)) { if (h.filterable || h.groupable || h.sortable) { h._initmenu() } } }, _resizeWindow: function () { var e = this.that; if ((this.width != null && this.width.toString().indexOf("%") != -1) || (this.height != null && this.height.toString().indexOf("%") != -1)) { this._updatesizeonwindowresize = true; b.jqx.utilities.resize(this.host, function (j) { var i = b(window).width(); var g = b(window).height(); var h = e.host.width(); var k = e.host.height(); if (e.autoheight) { e._lastHostWidth = g } if (e._lastHostWidth != h || e._lastHostHeight != k) { if (e.touchdevice && e.editcell && j !== "orientationchange") { return } e._updatesize(e._lastHostWidth != h, e._lastHostHeight != k) } e._lastWidth = i; e._lastHeight = g; e._lastHostWidth = h; e._lastHostHeight = k }); var d = e.host.width(); var f = e.host.height(); e._lastHostWidth = d; e._lastHostHeight = f } }, _builddataloadelement: function () { if (this.dataloadelement) { this.dataloadelement.remove() } this.dataloadelement = b('<div style="overflow: hidden; position: absolute;"></div>'); if (this.showdefaultloadelement) { var d = b('<div style="z-index: 99999; margin-left: -66px; left: 50%; top: 50%; margin-top: -24px; position: relative; width: 100px; height: 33px; padding: 5px; font-family: verdana; font-size: 12px; color: #767676; border-color: #898989; border-width: 1px; border-style: solid; background: #f6f6f6; border-collapse: collapse;"><div style="float: left;"><div style="float: left; overflow: hidden; width: 32px; height: 32px;" class="jqx-grid-load"/><span style="margin-top: 10px; float: left; display: block; margin-left: 5px;" >' + this.gridlocalization.loadtext + "</span></div></div>"); d.addClass(this.toTP("jqx-rc-all")); this.dataloadelement.addClass(this.toTP("jqx-rc-all")); d.addClass(this.toTP("jqx-fill-state-normal")); this.dataloadelement.append(d) } else { this.dataloadelement.addClass(this.toTP("jqx-grid-load")) } this.dataloadelement.width(this.width); this.dataloadelement.height(this.height); this.host.prepend(this.dataloadelement) }, _measureElement: function (e) { var d = b("<span style='visibility: hidden; white-space: nowrap;'>measure Text</span>"); d.addClass(this.toTP("jqx-widget")); b(document.body).append(d); if (e == "cell") { this._cellheight = d.height() } else { this._columnheight = d.height() } d.remove() }, _measureMenuElement: function () { var e = b("<span style='visibility: hidden; white-space: nowrap;'>measure Text</span>"); e.addClass(this.toTP("jqx-widget")); e.addClass(this.toTP("jqx-menu")); e.addClass(this.toTP("jqx-menu-item-top")); e.addClass(this.toTP("jqx-fill-state-normal")); b(document.body).append(e); var d = e.outerHeight(); e.remove(); return d }, _measureElementWidth: function (f) { var e = b("<span style='visibility: hidden; white-space: nowrap;'>" + f + "</span>"); e.addClass(this.toTP("jqx-widget")); e.addClass(this.toTP("jqx-grid")); e.addClass(this.toTP("jqx-grid-column-header")); e.addClass(this.toTP("jqx-widget-header")); b(document.body).append(e); var d = e.outerWidth() + 20; e.remove(); return d }, _getBodyOffset: function () { var e = 0; var d = 0; if (b("body").css("border-top-width") != "0px") { e = parseInt(b("body").css("border-top-width")); if (isNaN(e)) { e = 0 } } if (b("body").css("border-left-width") != "0px") { d = parseInt(b("body").css("border-left-width")); if (isNaN(d)) { d = 0 } } return { left: d, top: e} }, _testmodules: function () { var k = ""; var h = this.that; var d = function () { if (k.length != "") { k += "," } }; if (this.columnsmenu && !this.host.jqxMenu && (this.sortable || this.groupable || this.filterable)) { d(); k += " jqxmenu.js" } if (!this.host.jqxScrollBar) { d(); k += " jqxscrollbar.js" } if (!this.host.jqxButton) { d(); k += " jqxbuttons.js" } if (!b.jqx.dataAdapter) { d(); k += " jqxdata.js" } if (this.pageable && !this.gotopage) { d(); k += "jqxgrid.pager.js" } if (this.filterable && !this.applyfilters) { d(); k += " jqxgrid.filter.js" } if (this.groupable && !this._initgroupsheader) { d(); k += " jqxgrid.grouping.js" } if (this.columnsresize && !this.autoresizecolumns) { d(); k += " jqxgrid.columnsresize.js" } if (this.columnsreorder && !this.setcolumnindex) { d(); k += " jqxgrid.columnsreorder.js" } if (this.sortable && !this.sortby) { d(); k += " jqxgrid.sort.js" } if (this.editable && !this.begincelledit) { d(); k += " jqxgrid.edit.js" } if (this.showaggregates && !this.getcolumnaggregateddata) { d(); k += " jqxgrid.aggregates.js" } if (this.keyboardnavigation && !this.selectrow) { d(); k += " jqxgrid.selection.js" } if (k != "" || this.editable || this.filterable || this.pageable) { var f = []; var j = function (i) { switch (i) { case "checkbox": if (!h.host.jqxCheckBox && !f.checkbox) { f.checkbox = true; d(); k += " jqxcheckbox.js" } break; case "numberinput": if (!h.host.jqxNumberInput && !f.numberinput) { f.numberinput = true; d(); k += " jqxnumberinput.js" } break; case "datetimeinput": if (!h.host.jqxDateTimeInput && !f.datetimeinput) { d(); f.datetimeinput = true; k += " jqxdatetimeinput.js(requires: jqxcalendar.js)" } else { if (!h.host.jqxCalendar && !f.calendar) { d(); k += " jqxcalendar.js" } } break; case "combobox": if (!h.host.jqxComboBox && !f.combobox) { d(); f.combobox = true; k += " jqxcombobox.js(requires: jqxlistbox.js)" } else { if (!h.host.jqxListBox && !f.listbox) { d(); f.listbox = true; k += " jqxlistbox.js" } } break; case "dropdownlist": if (!h.host.jqxDropDownList && !f.dropdownlist) { d(); f.dropdownlist = true; k += " jqxdropdownlist.js(requires: jqxlistbox.js)" } else { if (!h.host.jqxListBox && !f.listbox) { d(); f.listbox = true; k += " jqxlistbox.js" } } break } }; if (this.filterable || this.pageable) { j("dropdownlist") } for (var e = 0; e < this.columns.length; e++) { if (this.columns[e] == undefined) { continue } var g = this.columns[e].columntype; j(g); if (this.filterable && this.showfilterrow) { var g = this.columns[e].filtertype; if (g == "checkedlist" || g == "bool") { j("checkbox") } if (g == "date") { j("datetimeinput") } } } if (k != "") { throw new Error("jqxGrid: Missing references to the following module(s): " + k); this.host.remove(); return true } } return false }, focus: function () { try { this.wrapper.focus(); var e = this.that; setTimeout(function () { e.wrapper.focus() }, 25); this.focused = true } catch (d) { } }, hiddenParent: function () { return b.jqx.isHidden(this.host) }, resize: function (e, d) { this.width = e; this.height = d; this._updatesize(true, true) }, _updatesize: function (i, h) { if (this._loading) { return } var f = this.that; f._newmax = null; var g = f.host.width(); var e = f.host.height(); if (!f._oldWidth) { f._oldWidth = g } if (!f._oldHeight) { f._oldHeight = e } if (f._resizeTimer) { clearTimeout(f._resizeTimer) } var d = 5; f._resizeTimer = setTimeout(function () { f.resizingGrid = true; if (b.jqx.isHidden(f.host)) { return } if (f.editcell) { f.endcelledit(f.editcell.row, f.editcell.column, true, true); f._oldselectedcell = null } if (j != f._oldHeight || h == true) { var k = f.groupable && f.groups.length > 0; var p = f.vScrollBar.css("visibility"); if (!f.autoheight) { if (f.virtualmode) { f._pageviews = new Array() } if (!k && !f.rowdetails && !f.pageable) { f._arrange(); f.virtualsizeinfo = f._calculatevirtualheight(); var j = Math.round(f.host.height()) + 2 * f.rowsheight; if (parseInt(j) >= parseInt(f._oldHeight)) { f.prerenderrequired = true } f._renderrows(f.virtualsizeinfo); if (f.rtl) { f._updatecolumnwidths(); if (f.table) { f.table.width(f.columnsheader.width()) } f._updatecellwidths() } } else { f._arrange(); f.prerenderrequired = true; var j = Math.round(f.host.height()) + 2 * f.rowsheight; realheight = f._gettableheight(); var r = Math.round(j / f.rowsheight); var m = Math.max(f.dataview.totalrows, f.dataview.totalrecords); if (f.pageable) { m = f.pagesize; if (f.pagesize > Math.max(f.dataview.totalrows, f.dataview.totalrecords) && f.autoheight) { m = Math.max(f.dataview.totalrows, f.dataview.totalrecords) } else { if (!f.autoheight) { if (f.dataview.totalrows < f.pagesize) { m = Math.max(f.dataview.totalrows, f.dataview.totalrecords) } } } } var o = m * f.rowsheight; var l = f._getpagesize(); if (!f.pageable && f.autoheight) { r = m } if (f.virtualsizeinfo) { f.virtualsizeinfo.visiblerecords = r } f.rendergridcontent(true, false); f._renderrows(f.virtualsizeinfo) } if (p != f.vScrollBar.css("visibility")) { f.vScrollInstance.setPosition(0); f._arrange(); f._updatecolumnwidths(); if (f.table) { f.table.width(f.columnsheader.width()) } f._updatecellwidths() } } } if (g != f._oldWidth || i == true) { var q = false; if (f.editcell && f.editcell.editor) { switch (f.editcell.columntype) { case "dropdownlist": q = f.editcell.editor.jqxDropDownList("isOpened") || (f.editcell.editor.jqxDropDownList("isanimating") && !f.editcell.editor.jqxDropDownList("ishiding")); if (q) { f.editcell.editor.jqxDropDownList({ openDelay: 0 }); f.editcell.editor.jqxDropDownList("open"); f.editcell.editor.jqxDropDownList({ openDelay: 250 }); return } break; case "combobox": q = f.editcell.editor.jqxComboBox("isOpened") || (f.editcell.editor.jqxComboBox("isanimating") && !f.editcell.editor.jqxComboBox("ishiding")); if (q) { f.editcell.editor.jqxComboBox({ openDelay: 0 }); f.editcell.editor.jqxComboBox("open"); f.editcell.editor.jqxComboBox({ openDelay: 250 }); return } break; case "datetimeinput": if (q) { q = f.editcell.editor.jqxDateTimeInput("isOpened") || (f.editcell.editor.jqxDateTimeInput("isanimating") && !f.editcell.editor.jqxDateTimeInput("ishiding")); f.editcell.editor.jqxDateTimeInput({ openDelay: 0 }); f.editcell.editor.jqxDateTimeInput("open"); f.editcell.editor.jqxDateTimeInput({ openDelay: 250 }); return } break } } var n = f.hScrollBar.css("visibility"); f._arrange(); f._updatecolumnwidths(); if (f.table) { f.table.width(f.columnsheader.width()) } f._updatecellwidths(); if (!(i == false && f._oldWidth > g)) { if (!h || f.dataview.rows.length == 0) { f._renderrows(f.virtualsizeinfo) } } if (n != f.hScrollBar.css("visibility")) { f.hScrollInstance.setPosition(0) } } f._oldWidth = g; f._oldHeight = j; f.resizingGrid = false }, d) }, getTouches: function (d) { return b.jqx.mobile.getTouches(d) }, _updateTouchScrolling: function () { var e = this.that; if (e.isTouchDevice()) { e.scrollmode = "logical"; e.vScrollInstance.thumbStep = e.rowsheight; var g = b.jqx.mobile.getTouchEventName("touchstart"); var f = b.jqx.mobile.getTouchEventName("touchend"); var d = b.jqx.mobile.getTouchEventName("touchmove"); e.enablehover = false; if (e.gridcontent) { e.removeHandler(e.gridcontent, g + ".touchScroll"); e.removeHandler(e.gridcontent, d + ".touchScroll"); e.removeHandler(e.gridcontent, f + ".touchScroll"); e.removeHandler(e.gridcontent, "touchcancel.touchScroll"); b.jqx.mobile.touchScroll(e.gridcontent[0], e.vScrollInstance.max, function (j, i) { if (e.vScrollBar.css("visibility") == "visible") { var h = e.vScrollInstance.value; e.vScrollInstance.setPosition(h + i) } if (e.hScrollBar.css("visibility") == "visible") { var h = e.hScrollInstance.value; e.hScrollInstance.setPosition(h + j) } e.vScrollInstance.thumbCapture = true; e._lastScroll = new Date() }, this.element.id, this.hScrollBar, this.vScrollBar); if (e._overlayElement) { e.removeHandler(e._overlayElement, g + ".touchScroll"); e.removeHandler(e._overlayElement, d + ".touchScroll"); e.removeHandler(e._overlayElement, f + ".touchScroll"); e.removeHandler(e._overlayElement, "touchcancel.touchScroll"); b.jqx.mobile.touchScroll(e._overlayElement[0], e.vScrollInstance.max, function (j, i) { if (e.vScrollBar.css("visibility") == "visible") { var h = e.vScrollInstance.value; e.vScrollInstance.setPosition(h + i) } if (e.hScrollBar.css("visibility") == "visible") { var h = e.hScrollInstance.value; e.hScrollInstance.setPosition(h + j) } e.vScrollInstance.thumbCapture = true; e._lastScroll = new Date() }, this.element.id, this.hScrollBar, this.vScrollBar); this.addHandler(this.host, g, function () { if (!e.editcell) { e._overlayElement.css("visibility", "visible") } else { e._overlayElement.css("visibility", "hidden") } }); this.addHandler(this.host, f, function () { if (!e.editcell) { e._overlayElement.css("visibility", "visible") } else { e._overlayElement.css("visibility", "hidden") } }) } } } }, isTouchDevice: function () { if (this.touchDevice != undefined) { return this.touchDevice } var d = b.jqx.mobile.isTouchDevice(); this.touchDevice = d; if (this.touchmode == true) { if (b.jqx.browser.msie && b.jqx.browser.version < 9) { this.enablehover = false; return false } d = true; b.jqx.mobile.setMobileSimulator(this.element); this.touchDevice = d } else { if (this.touchmode == false) { d = false } } if (d && this.touchModeStyle != false) { this.touchDevice = true; this.host.addClass(this.toThemeProperty("jqx-touch")); this.host.find("jqx-widget-content").addClass(this.toThemeProperty("jqx-touch")); this.host.find("jqx-widget-header").addClass(this.toThemeProperty("jqx-touch")); this.scrollbarsize = this.touchscrollbarsize } return d }, toTP: function (d) { return this.toThemeProperty(d) }, localizestrings: function (d, e) { this._cellscache = new Array(); if (b.jqx.dataFormat) { b.jqx.dataFormat.cleardatescache() } if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (d != null) { for (var f in d) { if (f.toLowerCase() !== f) { d[f.toLowerCase()] = d[f] } } if (d.pagergotopagestring) { this.gridlocalization.pagergotopagestring = d.pagergotopagestring } if (d.pagershowrowsstring) { this.gridlocalization.pagershowrowsstring = d.pagershowrowsstring } if (d.pagerrangestring) { this.gridlocalization.pagerrangestring = d.pagerrangestring } if (d.pagernextbuttonstring) { this.gridlocalization.pagernextbuttonstring = d.pagernextbuttonstring } if (d.pagerpreviousbuttonstring) { this.gridlocalization.pagerpreviousbuttonstring = d.pagerpreviousbuttonstring } if (d.pagerfirstbuttonstring) { this.gridlocalization.pagerfirstbuttonstring = d.pagerfirstbuttonstring } if (d.pagerlastbuttonstring) { this.gridlocalization.pagerlastbuttonstring = d.pagerlastbuttonstring } if (d.groupsheaderstring) { this.gridlocalization.groupsheaderstring = d.groupsheaderstring } if (d.sortascendingstring) { this.gridlocalization.sortascendingstring = d.sortascendingstring } if (d.sortdescendingstring) { this.gridlocalization.sortdescendingstring = d.sortdescendingstring } if (d.sortremovestring) { this.gridlocalization.sortremovestring = d.sortremovestring } if (d.groupbystring) { this.gridlocalization.groupbystring = d.groupbystring } if (d.groupremovestring) { this.gridlocalization.groupremovestring = d.groupremovestring } if (d.firstDay) { this.gridlocalization.firstDay = d.firstDay } if (d.days) { this.gridlocalization.days = d.days } if (d.months) { this.gridlocalization.months = d.months } if (d.AM) { this.gridlocalization.AM = d.AM } if (d.PM) { this.gridlocalization.PM = d.PM } if (d.patterns) { this.gridlocalization.patterns = d.patterns } if (d.percentsymbol) { this.gridlocalization.percentsymbol = d.percentsymbol } if (d.currencysymbol) { this.gridlocalization.currencysymbol = d.currencysymbol } if (d.currencysymbolposition) { this.gridlocalization.currencysymbolposition = d.currencysymbolposition } if (d.decimalseparator != undefined) { this.gridlocalization.decimalseparator = d.decimalseparator } if (d.thousandsseparator != undefined) { this.gridlocalization.thousandsseparator = d.thousandsseparator } if (d.filterclearstring) { this.gridlocalization.filterclearstring = d.filterclearstring } if (d.filterstring) { this.gridlocalization.filterstring = d.filterstring } if (d.filtershowrowstring) { this.gridlocalization.filtershowrowstring = d.filtershowrowstring } if (d.filtershowrowdatestring) { this.gridlocalization.filtershowrowdatestring = d.filtershowrowdatestring } if (d.filterselectallstring) { this.gridlocalization.filterselectallstring = d.filterselectallstring } if (d.filterchoosestring) { this.gridlocalization.filterchoosestring = d.filterchoosestring } if (d.filterorconditionstring) { this.gridlocalization.filterorconditionstring = d.filterorconditionstring } if (d.filterandconditionstring) { this.gridlocalization.filterandconditionstring = d.filterandconditionstring } if (d.filterstringcomparisonoperators) { this.gridlocalization.filterstringcomparisonoperators = d.filterstringcomparisonoperators } if (d.filternumericcomparisonoperators) { this.gridlocalization.filternumericcomparisonoperators = d.filternumericcomparisonoperators } if (d.filterdatecomparisonoperators) { this.gridlocalization.filterdatecomparisonoperators = d.filterdatecomparisonoperators } if (d.filterbooleancomparisonoperators) { this.gridlocalization.filterbooleancomparisonoperators = d.filterbooleancomparisonoperators } if (d.emptydatastring) { this.gridlocalization.emptydatastring = d.emptydatastring } if (d.filterselectstring) { this.gridlocalization.filterselectstring = d.filterselectstring } if (d.todaystring) { this.gridlocalization.todaystring = d.todaystring } if (d.clearstring) { this.gridlocalization.clearstring = d.clearstring } if (d.validationstring) { this.gridlocalization.validationstring = d.validationstring } if (d.loadtext) { this.gridlocalization.loadtext = d.loadtext } if (d.addrowstring) { this.gridlocalization.addrowstring = d.addrowstring } if (d.udpaterowstring) { this.gridlocalization.udpaterowstring = d.udpaterowstring } if (d.deleterowstring) { this.gridlocalization.deleterowstring = d.deleterowstring } if (d.resetrowstring) { this.gridlocalization.resetrowstring = d.resetrowstring } if (d.everpresentrowplaceholder) { this.gridlocalization.everpresentrowplaceholder = d.everpresentrowplaceholder } if (e !== false) { if (this._initpager) { this._initpager() } if (this._initgroupsheader) { this._initgroupsheader() } if (this._initmenu) { this._initmenu() } this._builddataloadelement(); b(this.dataloadelement).css("visibility", "hidden"); b(this.dataloadelement).css("display", "none"); if (this.filterable && this.showfilterrow) { if (this._updatefilterrow) { for (var f in this._filterrowcache) { b(this._filterrowcache[f]).remove() } this._filterrowcache = []; this._updatefilterrow() } } if (this.showaggregates && this.refresheaggregates) { this.refresheaggregates() } this._renderrows(this.virtualsizeinfo) } } else { this.gridlocalization = { "/": "/", ":": ":", firstDay: 0, days: { names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"] }, months: { names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""] }, AM: ["AM", "am", "AM"], PM: ["PM", "pm", "PM"], eras: [{ name: "A.D.", start: null, offset: 0}], twoDigitYearMax: 2029, patterns: { d: "M/d/yyyy", D: "dddd, MMMM dd, yyyy", t: "h:mm tt", T: "h:mm:ss tt", f: "dddd, MMMM dd, yyyy h:mm tt", F: "dddd, MMMM dd, yyyy h:mm:ss tt", M: "MMMM dd", Y: "yyyy MMMM", S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss", ISO: "yyyy-MM-dd hh:mm:ss", ISO2: "yyyy-MM-dd HH:mm:ss", d1: "dd.MM.yyyy", d2: "dd-MM-yyyy", d3: "dd-MMMM-yyyy", d4: "dd-MM-yy", d5: "H:mm", d6: "HH:mm", d7: "HH:mm tt", d8: "dd/MMMM/yyyy", d9: "MMMM-dd", d10: "MM-dd", d11: "MM-dd-yyyy" }, percentsymbol: "%", currencysymbol: "$", currencysymbolposition: "before", decimalseparator: ".", thousandsseparator: ",", pagergotopagestring: "Go to page:", pagershowrowsstring: "Show rows:", pagerrangestring: " of ", pagerpreviousbuttonstring: "previous", pagernextbuttonstring: "next", pagerfirstbuttonstring: "first", pagerlastbuttonstring: "last", groupsheaderstring: "Drag a column and drop it here to group by that column", sortascendingstring: "Sort Ascending", sortdescendingstring: "Sort Descending", sortremovestring: "Remove Sort", groupbystring: "Group By this column", groupremovestring: "Remove from groups", filterclearstring: "Clear", filterstring: "Filter", filtershowrowstring: "Show rows where:", filtershowrowdatestring: "Show rows where date:", filterorconditionstring: "Or", filterandconditionstring: "And", filterselectallstring: "(Select All)", filterchoosestring: "Please Choose:", filterstringcomparisonoperators: ["empty", "not empty", "contains", "contains(match case)", "does not contain", "does not contain(match case)", "starts with", "starts with(match case)", "ends with", "ends with(match case)", "equal", "equal(match case)", "null", "not null"], filternumericcomparisonoperators: ["equal", "not equal", "less than", "less than or equal", "greater than", "greater than or equal", "null", "not null"], filterdatecomparisonoperators: ["equal", "not equal", "less than", "less than or equal", "greater than", "greater than or equal", "null", "not null"], filterbooleancomparisonoperators: ["equal", "not equal"], validationstring: "Entered value is not valid", emptydatastring: "No data to display", filterselectstring: "Select Filter", loadtext: "Loading...", clearstring: "Clear", todaystring: "Today", addrowstring: "Add", udpaterowstring: "Update", deleterowstring: "Delete", resetrowstring: "Reset", everpresentrowplaceholder: "Enter "} } }, _getmenudefaultheight: function () { var f = this; var e = 0; if (this.sortable && this._togglesort && this.showsortmenuitems) { e = 3 } if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) { e += 2 } var d = f._measureMenuElement(); var g = e * d + 9; if (f.filterable && !f.showfilterrow && f.showfiltermenuitems) { g += 180; if (b.jqx.browser.msie && b.jqx.browser.version < 8) { g += 20 } } return g }, _initmenu: function () { var r = this.that; if (this.host.jqxMenu) { if (this.gridmenu) { if (this._hasOpenedMenu) { return } if (this.filterable) { if (this._destroyfilterpanel) { this._destroyfilterpanel() } } this.removeHandler(this.gridmenu, "keydown"); this.removeHandler(this.gridmenu, "closed"); this.removeHandler(this.gridmenu, "itemclick"); this.gridmenu.jqxMenu("destroy"); this.gridmenu.removeData(); this.gridmenu.remove() } this.menuitemsarray = new Array(); this.gridmenu = b('<div id="gridmenu' + this.element.id + '" style="z-index: 9999999999999;"></div>'); this.host.append(this.gridmenu); var w = b("<ul></ul>"); var i = '<div class="jqx-grid-sortasc-icon"></div>'; var t = b("<li>" + i + this.gridlocalization.sortascendingstring + "</li>"); var A = '<div class="jqx-grid-sortdesc-icon"></div>'; var x = b("<li>" + A + this.gridlocalization.sortdescendingstring + "</li>"); var n = '<div class="jqx-grid-sortremove-icon"></div>'; var k = b("<li>" + n + this.gridlocalization.sortremovestring + "</li>"); var j = '<div class="jqx-grid-groupby-icon"></div>'; var q = b("<li>" + j + this.gridlocalization.groupbystring + "</li>"); var f = b("<li>" + j + this.gridlocalization.groupremovestring + "</li>"); var d = b('<li type="separator"></li>'); var v = b('<li class="filter" style="height: 175px;" ignoretheme="true"><div class="filter"></div></li>'); var m = this.gridlocalization.sortascendingstring.length; var s = this.gridlocalization.sortascendingstring; if (this.gridlocalization.sortdescendingstring.length > m) { m = this.gridlocalization.sortdescendingstring.length; s = this.gridlocalization.sortdescendingstring } if (this.gridlocalization.sortremovestring.length > m) { m = this.gridlocalization.sortremovestring.length; s = this.gridlocalization.sortremovestring } if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) { if (this.gridlocalization.groupbystring.length > m) { m = this.gridlocalization.groupbystring.length; s = this.gridlocalization.groupbystring } if (this.gridlocalization.groupremovestring.length > m) { m = this.gridlocalization.groupremovestring.length; s = this.gridlocalization.groupremovestring } } var y = 200; s = b.trim(s).replace(/\&nbsp\;/ig, "").replace(/\&#160\;/ig, ""); var g = b("<span>" + s + "</span>"); g.addClass(this.toThemeProperty("jqx-menu-item")); this.host.append(g); y = g.outerWidth() + 60; g.remove(); var e = 0; if (this.sortable && this._togglesort && this.showsortmenuitems) { w.append(t); this.menuitemsarray[0] = t[0]; w.append(x); this.menuitemsarray[1] = x[0]; w.append(k); this.menuitemsarray[2] = k[0]; e = 3 } if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) { w.append(q); this.menuitemsarray[3] = q[0]; w.append(f); this.menuitemsarray[4] = f[0]; e += 2 } var u = this._measureMenuElement(); var l = e * u + 9; var p = true; if (this.filterable && !this.showfilterrow && this.showfiltermenuitems) { if (this._initfilterpanel) { this.menuitemsarray[5] = v[0]; this.menuitemsarray[6] = v[0]; w.append(d); w.append(v); l += 180; if (b.jqx.browser.msie && b.jqx.browser.version < 8) { l += 20 } var o = b(v).find("div:first"); this.excelfilterpanel = b("<div></div>"); this.filterpanel = o; this.filtermenu = b(v); y += 20; this._initfilterpanel(this, o, "", y); this._initfilterpanel(this, this.excelfilterpanel, "", y, true); p = false; this.removeHandler(b(document), "click.menu" + r.element.id, r._closemenuafterclick, r); this.addHandler(b(document), "click.menu" + r.element.id, r._closemenuafterclick, r) } else { throw new Error("jqxGrid: Missing reference to jqxgrid.filter.js.") } } this.gridmenu.append(w); if (b.jqx.browser.msie && b.jqx.browser.version < 8 && this.filterable) { b("#listBoxfilter1" + this.element.id).css("z-index", 4990); b("#listBoxfilter2" + this.element.id).css("z-index", 4990); b("#listBoxfilter3" + this.element.id).css("z-index", 4990); b("#gridmenu" + this.element.id).css("z-index", 5000); this.addHandler(b("#gridmenu" + this.element.id), "initialized", function () { b("#menuWrappergridmenu" + r.element.id).css("z-index", 4980) }) } if (this.menuitemsarray[0] == undefined) { l = 65 } this.removeHandler(b(window), "orientationchange.jqxgrid" + this.element.id); this.removeHandler(b(window), "orientationchanged.jqxgrid" + this.element.id); this.addHandler(b(window), "orientationchange.jqxgrid" + this.element.id, function () { r.gridmenu.jqxMenu("close") }); this.addHandler(b(window), "orientationchanged.jqxgrid" + this.element.id, function () { r.gridmenu.jqxMenu("close") }); this.removeHandler(this.gridmenu, "keydown"); this.addHandler(this.gridmenu, "keydown", function (F) { if (F.keyCode == 27) { r.gridmenu.jqxMenu("close") } else { if (F.keyCode == 13 && r.filterable) { if (r._buildfilter) { var E = b(b.find("#filter1" + r.element.id)).jqxDropDownList("container").css("display") == "block"; var D = b(b.find("#filter2" + r.element.id)).jqxDropDownList("container").css("display") == "block"; var B = b(b.find("#filter3" + r.element.id)).jqxDropDownList("container").css("display") == "block"; var G = b(b.find("#filterclearbutton" + r.element.id)).hasClass("jqx-fill-state-focus"); if (G) { var C = b.data(document.body, "contextmenu" + r.element.id).column; r._clearfilter(r, r.element, C); r.gridmenu.jqxMenu("close") } else { if (!E && !D && !B) { var C = b.data(document.body, "contextmenu" + r.element.id).column; r.gridmenu.jqxMenu("close"); r._buildfilter(r, v, C) } } } } } }); if (this.popupwidth != "auto") { y = this.popupwidth } this.gridmenu.jqxMenu({ popupZIndex: 999999, width: y, height: l, autoCloseOnClick: p, autoOpenPopup: false, mode: "popup", theme: this.theme, animationShowDuration: 0, animationHideDuration: 0, animationShowDelay: 0 }); if (this.filterable) { this.gridmenu.jqxMenu("_setItemProperty", v[0].id, "closeOnClick", false) } if (this.rtl) { var z = this.that; b.each(w.find("li"), function () { b(this).addClass(z.toTP("jqx-rtl")) }); var h = function (B) { var C = B.find("div"); C.css("float", "right"); C.css("margin-left", "4px"); C.css("margin-right", "-4px") }; h(k); h(x); h(t); h(q); h(f) } this._handlemenueevents() } else { this.columnsmenu = false } }, _arrangemenu: function () { if (!this.gridmenu) { this._initmenu() } var i = this.gridlocalization.sortascendingstring.length; var d = this.gridlocalization.sortascendingstring; if (this.gridlocalization.sortdescendingstring.length > i) { i = this.gridlocalization.sortdescendingstring.length; d = this.gridlocalization.sortdescendingstring } if (this.gridlocalization.sortremovestring.length > i) { i = this.gridlocalization.sortremovestring.length; d = this.gridlocalization.sortremovestring } if (this.groupable && this._initgroupsheader) { if (this.gridlocalization.groupbystring.length > i) { i = this.gridlocalization.groupbystring.length; d = this.gridlocalization.groupbystring } if (this.gridlocalization.groupremovestring.length > i) { i = this.gridlocalization.groupremovestring.length; d = this.gridlocalization.groupremovestring } } var e = 200; d = b.trim(d).replace(/\&nbsp\;/ig, "").replace(/\&#160\;/ig, ""); var f = b("<span>" + d + "</span>"); f.addClass(this.toThemeProperty("jqx-menu-item")); this.host.append(f); e = f.outerWidth() + 60; f.remove(); var g = 0; if (this.sortable && this._togglesort && this.showsortmenuitems) { g = 3 } if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) { g += 2 } var h = g * 27 + 3; if (this.filterable && this.showfiltermenuitems) { if (this._initfilterpanel) { h += 180; e += 20; if (b.jqx.browser.msie && b.jqx.browser.version < 8) { h += 20 } } } if (this.menuitemsarray[0] == undefined) { h = 65 } if (this.popupwidth != "auto") { e = this.popupwidth } if (this.popupheight != "auto") { h = this.popupheight } this.gridmenu.jqxMenu({ width: e, height: h }) }, _closemenuafterclick: function (e) { var i = e != null ? e.data : this; var g = false; if (e.target == undefined || (e.target != undefined && e.target.className.indexOf == undefined)) { i.gridmenu.jqxMenu("close"); return } if (e.target.className.indexOf("filter") != -1 && e.target.className.indexOf("jqx-grid-cell-filter") == -1) { return } if (e.target.className.indexOf("jqx-grid-cell") != -1) { i.gridmenu.jqxMenu("close"); return } if (i._hasOpenedMenu) { if (b(e.target).ischildof(i.gridmenu)) { return } } var d = i.host.coord(); var f = i.gridmenu.coord(); var k = e.pageX; var j = e.pageY; b.each(b(e.target).parents(), function () { if (this.id != null && this.id.indexOf && this.id.indexOf("filter") != -1) { g = true; return false } if (this.className.indexOf && this.className.indexOf("filter") != -1 && this.className.indexOf("jqx-grid-cell-filter") == -1) { g = true; return false } if (this.className.indexOf && this.className.indexOf("jqx-grid-cell") != -1) { i.gridmenu.jqxMenu("close"); return false } if (this.className.indexOf && this.className.indexOf("jqx-grid-column") != -1) { i.gridmenu.jqxMenu("close"); return false } }); if (g) { return } try { if (i.filtermode === "default") { var n = b(b.find("#filter1" + i.element.id)).jqxDropDownList("listBox").vScrollInstance._mouseup; var l = new Date(); if (l - n < 100) { return } var m = b(b.find("#filter3" + i.element.id)).jqxDropDownList("listBox").vScrollInstance._mouseup; if (l - m < 100) { return } if ((b(b.find("#filter3" + i.element.id)).jqxDropDownList("container")).css("display") == "block") { return } if ((b(b.find("#filter1" + i.element.id)).jqxDropDownList("container")).css("display") == "block") { return } if ((b(b.find("#filter2" + i.element.id)).jqxDropDownList("container")).css("display") == "block") { return } if (i._hasdatefilter) { if (b(".filtertext1" + i.element.id)[0].nodeName.toLowerCase() == "div") { if (b(".filtertext1" + i.element.id).jqxDateTimeInput("container").css("display") == "block") { return } if (b(".filtertext2" + i.element.id).jqxDateTimeInput("container").css("display") == "block") { return } } } } else { var n = b(b.find("#filter1" + i.element.id)).data().jqxListBox.instance.vScrollInstance._mouseup; var l = new Date(); if (l - n < 100) { return } var m = b(b.find("#filter1" + i.element.id)).data().jqxListBox.instance.hScrollInstance._mouseup; if (l - m < 100) { return } } } catch (h) { } if (k >= f.left && k <= f.left + i.gridmenu.width()) { if (j >= f.top && j <= f.top + i.gridmenu.height()) { return } } i.gridmenu.jqxMenu("close") }, _handlemenueevents: function () { var d = this.that; this.removeHandler(this.gridmenu, "closed"); this.addHandler(this.gridmenu, "closed", function (e) { d._closemenu() }); this.removeHandler(this.gridmenu, "itemclick"); this.addHandler(this.gridmenu, "itemclick", function (h) { var g = h.args; for (var e = 0; e < d.menuitemsarray.length; e++) { var j = d.menuitemsarray[e]; if (g == j) { if (b(g).attr("ignoretheme") != undefined) { return } var k = b.data(document.body, "contextmenu" + d.element.id); var f = k.column; if (d.filterable) { d.gridmenu.jqxMenu("close") } var m = f.displayfield; if (m == null) { m = f.datafield } if (k != null) { switch (e) { case 0: d.sortby(m, "ascending", null); break; case 1: d.sortby(m, "descending", null); break; case 2: d.sortby(m, null, null); break; case 3: d.addgroup(m); break; case 4: d.removegroup(m); break; case 5: var l = b(d.menuitemsarray[6]); b(l).css("display", "block"); break; case 7: break } } break } } }) }, getdatainformation: function () { var d = this.dataview.totalrecords; if (this.summaryrows) { d += this.summaryrows.length } return { rowscount: d, sortinformation: this.getsortinformation(), paginginformation: this.getpaginginformation()} }, getsortinformation: function () { return { sortcolumn: this.sortcolumn, sortdirection: this.sortdirection} }, getpaginginformation: function () { return { pagenum: this.dataview.pagenum, pagesize: this.pagesize, pagescount: Math.ceil(this.dataview.totalrecords / this.pagesize)} }, _updaterowsproperties: function () { this._updatehiddenrows(); this._updaterowheights(); this._updaterowdetails() }, _updatehiddenrows: function () { var e = this.that; this.hiddens = new Array(); var d = this.hiddenboundrows; b.each(d, function (g) { if (this.index != undefined) { var f = this.index; var h = e.getrowvisibleindex(g); e.hiddens[h] = this.hidden } }) }, _updaterowheights: function () { var e = this.that; this.heights = new Array(); var d = this.heightboundrows; b.each(d, function (g) { if (this.index != undefined) { var f = this.index; var h = e.getrowvisibleindex(g); e.heights[h] = this.height } }) }, _updaterowdetails: function () { var d = this.that; this.details = new Array(); var e = this.detailboundrows; b.each(e, function (g) { if (this.index != undefined) { var f = this.index; var h = d.getrowvisibleindex(g); d.details[h] = this.details } }) }, _getmenuitembyindex: function (d) { if (d == undefined) { return null } return this.menuitemsarray[d] }, openmenu: function (e) { if (this._openingmenu) { return } this._openingmenu = true; this.closemenu(); var h = this.getcolumn(e); if (!h.menu) { return false } if (!this.gridmenu) { this._initmenu() } var d = h.columnsmenu; b(h.element).trigger("mouseenter"); this.menuOwner = h; var g = this; for (var f = 0; f < g.columns.records.length; f++) { if (g.columns.records[f].datafield != e) { b(g.columns.records[f].element).trigger("mouseleave") } } setTimeout(function () { if (b(d)[0].style.display == "block") { b(d).trigger("click") } g._openingmenu = false }, 200) }, closemenu: function () { this._closemenu() }, _closemenu: function () { if (this._hasOpenedMenu) { var f = false; if (this.columnmenuclosing) { var i = b.data(document.body, "contextmenu" + this.element.id); if (!i) { i = { column: { displayfield: null}} } f = this.columnmenuclosing(this.gridmenu, i.column.displayfield, b(this.gridmenu).height()); if (f === false) { return } } if (this.gridmenu != null) { this.gridmenu.jqxMenu("close") } var i = b.data(document.body, "contextmenu" + this.element.id); var e = 16; if (i != null && this.autoshowcolumnsmenubutton) { if (this.enableanimations) { b(i.columnsmenu).animate({ "margin-left": 0 }, "fast", function () { b(i.columnsmenu).css("display", "none") }); var h = !this.rtl ? -32 : 0; i.column.iconscontainer.animate({ "margin-left": h }, "fast") } else { b(i.columnsmenu).css("display", "none"); var h = !this.rtl ? -32 : 0; i.column.iconscontainer.css("margin-left", h) } b.data(document.body, "contextmenu" + this.element.id, null) } this._hasOpenedMenu = false; this.menuOwner = null; var k = this._getmenuitembyindex(5); if (k) { var j = b(k).find("#filter1" + this.element.id); var d = b(k).find("#filter2" + this.element.id); var g = b(k).find("#filter3" + this.element.id); if (j.length > 0 && this.filtermode === "default") { j.jqxDropDownList("hideListBox"); if (d.length > 0) { d.jqxDropDownList("hideListBox") } if (g.length > 0) { g.jqxDropDownList("hideListBox") } } } } }, scrolloffset: function (e, d) { if (e == null || d == null || e == undefined || d == undefined) { return } this.vScrollBar.jqxScrollBar("setPosition", e); this.hScrollBar.jqxScrollBar("setPosition", d) }, scrollleft: function (d) { if (d == null || d == undefined) { return } if (this.hScrollBar.css("visibility") != "hidden") { this.hScrollBar.jqxScrollBar("setPosition", d) } }, scrolltop: function (d) { if (d == null || d == undefined) { return } if (this.vScrollBar.css("visibility") != "hidden") { this.vScrollBar.jqxScrollBar("setPosition", d) } }, beginupdate: function (e, d) { this._updating = true; this._datachanged = false; if (e === true) { this._batchupdate = true } if (d === true) { this._stopbindings = true } }, endupdate: function () { this.resumeupdate() }, resumeupdate: function () { this._updating = false; if (this._batchupdate) { this._batchupdate = false; this._datachanged = false; if (!this._stopbindings) { this.render() } else { this.updatebounddata() } return } if (this._stopbindings) { this.updatebounddata("data"); return } if (this._datachanged == true) { var d = this.vScrollInstance.value; this.render(true, true, false); this._datachanged = false; if (d != 0 && d < this.vScrollInstance.max) { this.scrolltop(d) } } else { this.rendergridcontent(true); this._renderrows(this.virtualsizeinfo) } if (this.showaggregates && this.renderaggregates) { this.renderaggregates() } this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo) }, updating: function () { return this._updating }, showloadelement: function () { if (this.renderloadelement) { this.dataloadelement.html(this.renderloadelement()) } this.dataloadelement.width(this.host.width()); this.dataloadelement.height(this.host.height()); b(this.dataloadelement).css("visibility", "visible"); b(this.dataloadelement).css("display", "block") }, hideloadelement: function () { b(this.dataloadelement).css("visibility", "hidden"); b(this.dataloadelement).css("display", "none") }, _updatefocusedfilter: function () { var d = this.that; if (d.focusedfilter) { d.focusedfilter.focus(); setTimeout(function () { d.focusedfilter.focus(); if (d.focusedfilter[0].nodeName.toLowerCase() == "input") { var g = d.focusedfilter.val().length; try { if ("selectionStart" in d.focusedfilter[0]) { d.focusedfilter[0].setSelectionRange(g, g) } else { var e = d.focusedfilter[0].createTextRange(); e.collapse(true); e.moveEnd("character", g); e.moveStart("character", g); e.select() } } catch (f) { } } }, 50) } }, databind: function (g, i) { if (this.loadingstate === true) { return } if (this._stopbindings === true) { return } if (this.host.css("display") == "block") { if (this.autoshowloadelement) { b(this.dataloadelement).css("visibility", "visible"); b(this.dataloadelement).css("display", "block"); this.dataloadelement.width(this.host.width()); this.dataloadelement.height(this.host.height()); this._hideemptyrow() } else { b(this.dataloadelement).css("visibility", "hidden"); b(this.dataloadelement).css("display", "none") } } if (!this._initgroupsheader && this.groups.length > 0) { this.groups = new Array() } var f = this.that; if (g == null) { g = {} } if (!g.recordstartindex) { g.recordstartindex = 0 } if (!g.recordendindex) { g.recordendindex = 0 } if (g.loadallrecords == undefined || g.loadallrecords == null) { g.loadallrecords = true } if (g.sortcomparer == undefined || g.sortcomparer == null) { g.sortcomparer = null } if (g.filter == undefined || g.filter == null) { g.filter = null } if (g.sort == undefined || g.sort == null) { g.sort = null } if (g.data == undefined || g.data == null) { g.data = null } var d = null; if (g != null) { d = g._source != undefined ? g._source.url : g.url } this.dataview = this.dataview || new b.jqx.dataview(); if (b.jqx.dataview.sort) { b.extend(this.dataview, new b.jqx.dataview.sort()) } if (b.jqx.dataview.grouping) { b.extend(this.dataview, new b.jqx.dataview.grouping()) } this.dataview.suspendupdate(); this.dataview.pageable = this.pageable; this.dataview.groupable = this.groupable; this.dataview.groups = this.groups; this.dataview.virtualmode = this.virtualmode; this.dataview.grid = this; this.dataview._clearcaches(); if (!this.pageable && this.virtualmode) { this.loadondemand = true } if (!f.initializedcall) { if (g._source) { if (this.sortable) { if (g._source.sortcolumn != undefined) { this.sortcolumn = g._source.sortcolumn; this.source.sortcolumn = this.sortcolumn; this.dataview.sortfield = g._source.sortcolumn; g._source.sortcolumn = null } if (g._source.sortdirection != undefined) { this.dataview.sortfielddirection = g._source.sortdirection; var h = g._source.sortdirection; if (h == "a" || h == "asc" || h == "ascending" || h == true) { var e = true } else { var e = false } if (h != null) { this.sortdirection = { ascending: e, descending: !e} } else { this.sortdirection = { ascending: false, descending: false} } } } } if (this.pageable) { if (g._source) { if (g._source.pagenum != undefined) { this.dataview.pagenum = g._source.pagenum } if (g._source.pagesize != undefined) { this.pagesize = g._source.pagesize; this.dataview.pagesize = g._source.pagesize } else { this.dataview.pagesize = g._source.pagesize; if (this.dataview.pagesize == undefined) { this.dataview.pagesize = this.pagesize } } } } if (this.sortable) { if (g.sortcolumn) { this.dataview.sortfield = g.sortcolumn } if (g.sortdirection) { this.dataview.sortfielddirection = g.sortdirection } } if (this.filterable) { if (this.columns) { b.each(this.columns, function () { if (this.filter) { f.dataview.addfilter(this.datafield, this.filter) } }) } } } this._loading = true; this.dataview.update = function (l) { if (!f.pageable && f.virtualmode) { f.loadondemand = true } f._loading = false; if (f.dataview.isupdating()) { f.dataview.resumeupdate(false) } if (f.pageable && f.pagerrenderer) { if (f._initpager) { f._initpager() } else { throw new Error("jqxGrid: Missing reference to jqxgrid.pager.js.") } } if ((f.source && f.source.sortcolumn) && f.sortby && !f.virtualmode) { f.render(); if (!f.source._source.sort) { f.sortby(f.source.sortcolumn, f.source.sortdirection, f.source.sortcomparer) } f.source.sortcolumn = null; f._postrender("data") } else { var k = f.vScrollInstance.value; var n = f.hScrollInstance.value; var o = f.source ? f.source.datatype : "array"; if (o != "local" || o != "array") { var q = f.virtualsizeinfo == null || (f.virtualsizeinfo != null && f.virtualsizeinfo.virtualheight == 0); if (i == "cells") { var m = false; if (f.filterable && f._initfilterpanel && f.dataview.filters.length) { m = true } if (false == l) { if (!f.vScrollInstance.isScrolling() && !f.hScrollInstance.isScrolling()) { f._cellscache = new Array(); f._pagescache = new Array(); f._renderrows(f.virtualsizeinfo); if (f.showfilterrow && f.filterable && f.filterrow) { f._updatelistfilters(true) } if (f.showaggregates && f._updateaggregates) { f._updateaggregates() } } if (f.sortcolumn) { f.sortby(f.sortcolumn, f.dataview.sortfielddirection, f.source.sortcomparer) } if (f.autoshowloadelement) { b(f.dataloadelement).css("visibility", "hidden"); b(f.dataloadelement).css("display", "none") } if (f.virtualmode && !f._loading) { f.loadondemand = true; f._renderrows(f.virtualsizeinfo) } f._postrender("data"); return } else { if (m) { i = "filter" } else { if (f.sortcolumn != undefined) { i = "sort" } } } } if (!f.virtualmode || q || (f.virtualmode && f.pageable)) { if (f.initializedcall == true && i == "pagechanged") { k = 0; if (f.groupable && f.groups.length > 0) { f._render(true, true, false, false, false); f._updatecolumnwidths(); f._updatecellwidths(); f._renderrows(f.virtualsizeinfo); f._postrender("data") } else { f.rendergridcontent(true); if (f.pageable && f.updatepagerdetails) { f.updatepagerdetails(); if (f.autoheight) { f._updatepageviews(); if (f.autorowheight) { f._renderrows(this.virtualsizeinfo) } } else { if (f.autorowheight) { f._updatepageviews(); f._renderrows(this.virtualsizeinfo) } } } } if (f.showaggregates && f._updateaggregates) { f._updateaggregates() } f._postrender("data") } else { if (i == "filter") { if (f.virtualmode) { f._render(true, true, false, false, false); f._updatecolumnwidths(); f._updatecellwidths(); f._renderrows(f.virtualsizeinfo); f._updatefocusedfilter(); f._postrender("data") } else { f._render(true, true, false, false, false); f._updatecolumnwidths(); f._updatecellwidths(); f._renderrows(f.virtualsizeinfo); f._updatefocusedfilter(); f._postrender("data") } } else { if (i == "sort") { if (f.virtualmode) { f.rendergridcontent(true); if (f.showaggregates && f._updateaggregates) { f._updateaggregates() } f._postrender("data") } else { f._render(true, true, false, false, false); if (f.sortcolumn && !f.source.sort) { f.sortby(f.sortcolumn, f.dataview.sortfielddirection, f.source.sortcomparer) } f._postrender("data") } if (f.source.sort) { f._updatefocusedfilter() } } else { if (i == "data") { f._render(true, true, false, false, false); f._postrender("data") } else { if (i == "state") { f._render(true, true, false, f.menuitemsarray && f.menuitemsarray.length > 0 && !f.virtualmode); f._postrender("data") } else { f._render(true, true, true, f.menuitemsarray && f.menuitemsarray.length > 0 && !f.virtualmode); f._postrender("data") } } } } } } else { if (f.virtualmode && l == true && !f.pageable) { f._render(true, true, false, false, false); f._updatefocusedfilter(); f._updatecolumnwidths(); f._updatecellwidths(); f._renderrows(f.virtualsizeinfo); f._postrender("data") } else { if (f.virtualmode && !f.pageable && l == false && i != undefined) { f.rendergridcontent(true); if (f.showaggregates && f._updateaggregates) { f._updateaggregates() } f._postrender("data") } else { if (f.virtualmode && f.dataview.totalrecords == 0 && f.dataview.filters.length > 0) { f._render(true, true, true, f.menuitemsarray && !f.virtualmode); f._postrender("data") } else { f._pagescache = new Array(); f._renderrows(f.virtualsizeinfo); f._postrender("data") } } } } if (f.vScrollInstance.value != k && k <= f.vScrollInstance.max) { f.vScrollInstance.setPosition(k) } if (f.hScrollInstance.value != n && n <= f.hScrollInstance.max) { f.hScrollInstance.setPosition(n) } } } if (f.autoshowloadelement) { b(f.dataloadelement).css("visibility", "hidden"); b(f.dataloadelement).css("display", "none") } if (f.pageable) { if (f.pagerrightbutton) { f.pagerrightbutton.jqxButton({ disabled: false }); f.pagerleftbutton.jqxButton({ disabled: false }); f.pagershowrowscombo.jqxDropDownList({ disabled: false }) } if (f.pagerfirstbutton) { f.pagerfirstbutton.jqxButton({ disabled: false }); f.pagerlastbutton.jqxButton({ disabled: false }) } } f._raiseEvent(11); if (!f.initializedcall) { var p = function () { f._raiseEvent(0); f.initializedcall = true; f.isInitialized = true; if (f.ready) { f.ready() } if (f.renderstatusbar) { f.renderstatusbar(f.statusbar) } if (f.rendertoolbar) { f.rendertoolbar(f.toolbar) } if (f.autoloadstate) { if (f.loadstate) { f.loadstate(null, true) } } }; if (!b.jqx.isHidden(f.host)) { p() } else { if (f.readyInterval) { clearInterval(f.readyInterval) } f.readyInterval = setInterval(function () { if (!b.jqx.isHidden(f.host)) { if (f.__isRendered) { clearInterval(f.readyInterval); f.readyInterval = null; p(); f._initmenu() } } }, 200) } if ((f.width != null && f.width.toString().indexOf("%") != -1) || (f.height != null && f.height.toString().indexOf("%") != -1)) { } if (f.host.css("visibility") == "hidden") { var j = b.jqx.browser.msie && b.jqx.browser.version < 8; if (f.vScrollBar.css("visibility") == "visible") { f.vScrollBar.css("visibility", "inherit") } if (!f.autowidth) { if (f.hScrollBar.css("visibility") == "visible") { f.hScrollBar.css("visibility", "inherit") } } f._intervalTimer = setInterval(function () { if (f.host.css("visibility") == "visible") { f._updatesize(true); clearInterval(f._intervalTimer) } }, 100) } } else { f._updateTouchScrolling() } }; this.dataview.databind(g); if (this.dataview.isupdating()) { if (d != undefined) { this.dataview.suspend = false } else { this.dataview.resumeupdate(false) } } this._initializeRows() }, scrollto: function (e, d) { if (undefined != e) { this.hScrollInstance.setPosition(e) } if (undefined != d) { this.vScrollInstance.setPosition(d) } }, scrollposition: function () { return { top: this.vScrollInstance.value, left: this.hScrollInstance.value} }, ensurerowvisible: function (h) { if (this.autoheight && !this.pageable) { return true } var e = this._getpagesize(); var g = Math.floor(h / e); if (!this._pageviews[g] && !this.pageable) { this._updatepageviews() } var n = false; if (this.pageable && this.gotopage && !this.virtualmode) { var g = Math.floor(h / e); if (this.dataview.pagenum != g) { if (this.groupable && this.groups.length > 0) { return true } this.gotopage(g); n = true } } var l = this.vScrollInstance.value; var m = this._gettableheight() - this.rowsheight; var d = e * (h / e - g); d = Math.round(d); if (this._pageviews[g]) { var k = this._pageviews[g].top; var j = k + d * this.rowsheight; if (this.rowdetails) { for (var f = e * g; f < h; f++) { if (this.details[f]) { if (this.details[f].rowdetailshidden == false) { j += this.details[f].rowdetailsheight } } } } if (this.scrollmode == "deferred") { if (this.vScrollInstance.max <= j + this.rowsheight) { j = this.vScrollInstance.max } } if (j < l) { this.scrolltop(j); n = true } else { if (j > l + m + 2) { this.scrolltop(j - m); n = true } else { } } } else { if (this.pageable) { var j = d * this.rowsheight; if (this.rowdetails) { for (var f = e * g; f < e * g + d; f++) { if (this.details[f] && this.details[f].rowdetailshidden == false) { j += this.details[f].rowdetailsheight } } } if (j < l || j > l + m) { this.scrollto(0, j); n = true } } } return n }, ensurecellvisible: function (h, d) { var n = this.that; var i = this.hScrollBar.jqxScrollBar("value"); var j = n.hScrollInstance.max; if (n.rtl) { if (this.hScrollBar.css("visibility") != "visible") { j = 0 } } var o = this.ensurerowvisible(h); var e = 0; if (this.columns.records) { var m = i; if (this.hScrollBar.css("visibility") == "hidden") { return } var l = this.host.width(); var k = 0; var f = this.vScrollBar.css("visibility") == "visible" ? 20 : 0; var g = false; b.each(this.columns.records, function () { if (this.hidden) { return true } if (this.datafield == d) { var q = 0; var p = !n.rtl ? m : j - i; if (e + this.width > p + l - f) { q = e + this.width - l + f; if (n.rtl) { q = j - q } n.scrollleft(q); g = true } else { if (e <= p) { q = e - this.width; if (n.rtl) { q = j - q } n.scrollleft(q); g = true } } if (k == 0) { if (n.rtl) { n.scrollleft(j) } else { n.scrollleft(0) } g = true } else { if (k == n.columns.records.length - 1) { if (n.hScrollBar.css("visibility") == "visible") { if (!n.rtl) { n.scrollleft(n.hScrollBar.jqxScrollBar("max")) } else { n.scrollleft(n.hScrollBar.jqxScrollBar("min")) } g = true } } } return false } k++; e += this.width }); if (!g) { n.scrollleft(m) } } return o }, setrowheight: function (e, d) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (e == null || d == null) { return false } this.heightboundrows[e] = { index: e, height: d }; e = this.getrowvisibleindex(e); if (e < 0) { return false } if (this.rows.records[e]) { this.rows.records[e].height = d } else { row = new a(this, null); row.height = d; this.rows.replace(e, row) } this.heights[e] = d; this.rendergridcontent(true); return true }, getrowheight: function (d) { if (d == null) { return null } d = this.getrowvisibleindex(d); if (d < 0) { return false } if (this.rows.records[d]) { return this.rows.records[d].height } }, setrowdetails: function (f, h, d, j) { if (f == undefined || f == null || f < 0) { return } var e = f + "_"; if (this._rowdetailscache[e]) { var g = this._rowdetailscache[e].element; b(g).remove(); this._rowdetailscache[e] = null } var i = this.dataview.generatekey(); this.detailboundrows[f] = { index: f, details: { rowdetails: h, rowdetailsheight: d, rowdetailshidden: j, key: i} }; f = this.getrowvisibleindex(f); if (f < 0) { return false } return this._setrowdetails(f, h, d, j, i) }, getcolumn: function (d) { var e = null; if (this.columns.records) { b.each(this.columns.records, function () { if (this.datafield == d || this.displayfield == d) { e = this; return false } }) } return e }, _getcolumnindex: function (e) { var d = -1; if (this.columns.records) { b.each(this.columns.records, function () { d++; if (this.datafield == e) { return false } }) } return d }, _getcolumnat: function (d) { var e = this.columns.records[d]; return e }, _getprevvisiblecolumn: function (e) { var d = this.that; while (e > 0) { e--; var f = d.getcolumnat(e); if (!f) { return null } if (!f.hidden) { return f } } return null }, _getnextvisiblecolumn: function (e) { var d = this.that; while (e < this.columns.records.length) { e++; var f = d.getcolumnat(e); if (!f) { return null } if (!f.hidden) { return f } } return null }, getcolumnat: function (d) { if (!isNaN(d)) { var e = this.columns.records[d]; return e } return null }, _getcolumn: function (d) { var e = null; b.each(this._columns, function () { if (this.datafield == d || this.displayfield == d) { e = this; return false } }); return e }, _setcolumnproperty: function (e, g, h) { if (e == null || g == null || h == null) { return null } g = g.toLowerCase(); var f = this.getcolumn(e); if (f == null) { return } var i = f[g]; f[g] = h; var d = this._getcolumn(e); if (d != null) { d[g] = h } this._cellscache = new Array(); switch (g) { case "filteritems": if (this.filterable && this.showfilterrow) { this._updatelistfilters(true, true) } break; case "text": this.prerenderrequired = true; this._rendercolumnheaders(); this._updatecellwidths(); if (this._groupsheader()) { if (this._initgroupsheader) { this._initgroupsheader() } } this._renderrows(this.virtualsizeinfo); if (this.filterable && this.showfilterrow) { this.refreshfilterrow() } break; case "editable": case "resizable": case "draggable": if (g == "editable") { if (h != i) { if (this.editcell != null && this.endcelledit) { this.endcelledit(this.editcell.row, this.editcell.column, true, true) } if (f.columntype == "checkbox") { this.prerenderrequired = true; this.rendergridcontent(true, false); if (this.updating()) { return false } } if (this.updating()) { return false } this._renderrows(this.virtualsizeinfo) } } break; case "hidden": case "hideable": case "renderer": case "cellsrenderer": case "align": case "aggregates": case "cellsalign": case "cellsformat": case "pinned": case "contenttype": case "filterable": case "groupable": case "cellclass": case "cellclassname": case "classname": case "class": this.prerenderrequired = true; if (g == "pinned") { this._initializeColumns(); this._preparecolumngroups() } this.rendergridcontent(true); if (this.updating()) { return false } if (g == "hidden") { this._updatecolumnwidths(); this._updatecellwidths() } this._renderrows(this.virtualsizeinfo); if (this.showaggregates && this._updateaggregates) { this._updateaggregates() } break; case "width": case "minwidth": case "maxwidth": if (this.updating()) { return false } f._width = null; f._percentagewidth = null; this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo); break } }, _getcolumnproperty: function (d, f) { if (d == null || f == null) { return null } f = f.toLowerCase(); var e = this.getcolumn(d); return e[f] }, setcolumnproperty: function (d, e, f) { this._setcolumnproperty(d, e, f) }, getcolumnproperty: function (d, e) { return this._getcolumnproperty(d, e) }, hidecolumn: function (d) { this._setcolumnproperty(d, "hidden", true) }, showcolumn: function (d) { this._setcolumnproperty(d, "hidden", false) }, iscolumnvisible: function (d) { return !this._getcolumnproperty(d, "hidden") }, pincolumn: function (d) { this._setcolumnproperty(d, "pinned", true) }, unpincolumn: function (d) { this._setcolumnproperty(d, "pinned", false) }, iscolumnpinned: function (d) { return this._getcolumnproperty(d, "pinned") }, _setrowdetails: function (j, d, n, h, e) { if (n == 0) { n = 100 } if (j == null || n == null) { return false } if (e != null) { this.details[j] = { rowdetails: d, rowdetailsheight: n, rowdetailshidden: h, detailskey: e} } else { var m = this.details[j] != null ? this.details[j].detailskey : null; var l = { rowdetails: d, rowdetailsheight: n, rowdetailshidden: h, detailskey: m }; var k = this.that; for (var g = 0; g < this.detailboundrows.length; g++) { if (this.detailboundrows[g] != undefined) { var f = this.detailboundrows[g]; if (f.details.detailskey == m) { f.details.rowdetailsheight = l.rowdetailsheight; f.details.rowdetailshidden = l.rowdetailshidden; f.details.rowdetails = l.rowdetails; break } } } this.details[j] = l } if (this._detailsUpdate) { return } this.rendergridcontent(true); this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo); return true }, getrowdetails: function (d) { if (d == null) { return false } d = this.getrowvisibleindex(d); return this._getrowdetails(d) }, _getrowdetails: function (d) { if (d == null) { return false } if (d < 0) { return false } if (this.details[d]) { return this.details[d] } if (this.rowdetailstemplate) { return this.rowdetailstemplate } }, getrecordscount: function () { return this.dataview.totalrecords }, showrowdetails: function (d) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (d == null) { return false } if (!this.detailsVisibility) { this.detailsVisibility = new Array() } this.detailsVisibility[d] = false; d = this.getrowvisibleindex(d); if (d < 0) { return false } var e = this._getrowdetails(d); return this._setrowdetailsvisibility(d, e, false) }, hiderowdetails: function (d) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (!this.detailsVisibility) { this.detailsVisibility = new Array() } this.detailsVisibility[d] = true; d = this.getrowvisibleindex(d); if (d < 0) { return false } var e = this._getrowdetails(d); return this._setrowdetailsvisibility(d, e, true) }, _togglerowdetails: function (j) { if (!this.detailsVisibility) { this.detailsVisibility = new Array() } var f = j.visibleindex; var g = this._getrowdetails(f); if (g != null) { var e = this.vScrollInstance.value; var i = !g.rowdetailshidden; var h = this.getboundindex(j); if (h != undefined) { this.detailsVisibility[h] = i } var d = this._setrowdetailsvisibility(f, g, i); if (e !== 0 && this.vScrollBar.css("visibility") !== "hidden") { if (e <= this.vScrollInstance.max) { this.vScrollInstance.setPosition(e) } else { this.vScrollInstance.setPosition(this.vScrollInstance.max) } } return d } return false }, _setrowdetailsvisibility: function (e, f, h) { if (this.rowdetailstemplate) { if (!this.details) { this.details = new Array() } if (!this.details[e]) { this.details[e] = { rowdetailshidden: this.rowdetailstemplate.rowdetailshidden, rowdetailsheight: this.rowdetailstemplate.rowdetailsheight, rowdetails: this.rowdetailstemplate.rowdetails }; var g = this.dataview.generatekey(); this.details[e].detailskey = g; this.detailboundrows[e] = { index: e, details: this.details[e]} } } if (f != null) { this.details[e].rowdetailshidden = h } else { return false } var d = this.details[e]; if (h) { this._raiseEvent(21, { rowindex: e, details: d.rowdetails, height: d.rowdetailsheight }) } else { this._raiseEvent(20, { rowindex: e, details: d.rowdetails, height: d.rowdetailsheight }) } return this._setrowdetails(e, d.rowdetails, d.rowdetailsheight, d.rowdetailshidden) }, getrowvisibleindex: function (d) { if (d == undefined || d == null || d < 0) { return false } if (this.virtualmode) { var e = this.dataview.loadedrecords[d]; if (e == undefined) { return -1 } return e.visibleindex } return this.getrowdisplayindex(d) }, hiderow: function (d) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (d == undefined || d == null || d < 0) { return false } if (d == null) { return false } this.hiddenboundrows[d] = { index: d, hidden: true }; d = this.getrowvisibleindex(d); return this._setrowvisibility(d, true) }, showrow: function (d) { if (this._loading) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (d == undefined || d == null || d < 0) { return false } if (d == null) { return false } this.hiddenboundrows[d] = { index: d, hidden: false }; d = this.getrowvisibleindex(d); return this._setrowvisibility(d, false) }, isrowhiddenat: function (d) { if (d == null) { return null } d = this.getrowvisibleindex(d); if (this.rows.records[d]) { return this.rows.records[d].hidden } }, _setrowvisibility: function (d, f, e) { if (d == null) { return false } this.hiddens[d] = f; if (e == undefined || e) { this.rendergridcontent(true); return true } return false }, _loadrows: function () { if (!this._pageviews[this.dataview.pagenum] && !this.pageable) { return } var p = !this.pageable ? this._pageviews[this.dataview.pagenum].top : 0; if (!this.pageable && this._pagescache[this.dataview.pagenum] != undefined) { return null } if (!this.virtualsizeinfo) { return } var t = this.that; var l = new Array(); var q = new Array(); var e = t.groupable && t.groups.length > 0; var j = this.dataview.totalrecords; var o = this.virtualsizeinfo.virtualheight; var s = 0; this.rows.beginupdate(); var f = this.dataview.pagesize; if (this.pageable && e) { f = this.dataview.rows.length } for (var g = 0; g < f; g++) { if (g >= this.dataview.rows.length) { break } var k = this.dataview.rows[g]; var u = null; if (!t.rows.records[k.visibleindex]) { u = new a(t, k) } else { u = t.rows.records[k.visibleindex]; u.setdata(k) } u.hidden = this.hiddens[u.visibleindex]; if (this.rowdetailstemplate) { u.rowdetails = this.rowdetailstemplate.rowdetails; u.rowdetailsheight = this.rowdetailstemplate.rowdetailsheight; u.rowdetailshidden = this.rowdetailstemplate.rowdetailshidden } var d = this.details[u.visibleindex]; if (d) { u.rowdetails = d.rowdetails; u.rowdetailsheight = d.rowdetailsheight; u.rowdetailshidden = d.rowdetailshidden } else { if (!this.rowdetailstemplate) { u.rowdetails = null } } if (e && this.pageable && u.parentbounddata != null) { var r = l[u.parentbounddata.uniqueid]; if (r != null) { var n = this._findgroupstate(r.uniqueid); if (this._setsubgroupsvisibility) { this._setsubgroupsvisibility(this, u.parentbounddata, !n, false) } u.hidden = this.hiddens[u.visibleindex] } if (r != null && r != undefined) { u.parentrow = r; r.subrows[r.subrows.length++] = u } } if (u.hidden) { continue } var h = k.visibleindex; if (!this.heights[h]) { this.heights[h] = this.rowsheight } u.height = this.heights[h]; if (this.rowdetails) { if (u.rowdetails && !u.rowdetailshidden) { u.height += u.rowdetailsheight } } l[u.uniqueid] = u; q[s++] = u; u.top = p; p += u.height; var m = h; t.rows.replace(m, u) } if ((this.autoheight || this.pageable) && this.autorowheight) { if (this._pageviews && this._pageviews.length > 0) { this._pageviews[0].height = p } } this.rows.resumeupdate(); if (q.length > 0) { this._pagescache[this.dataview.pagenum] = q } }, _updateaddnewrowui: function (g) { var m = this; var k = m.everpresentrowposition != "bottom" ? m.addnewrowtop : m.addnewrowbottom; var o = m.columns.records.length; var f = 0; for (var l = 0; l < o; l++) { var h = m.columns.records[l]; if (h.addnewrowwidget) { h.addnewrowwidget.detach() } } for (var l = 0; l < o; l++) { var h = m.columns.records[l]; var e = h.width; if (e < h.minwidth) { e = h.minwidth } if (e > h.maxwidth) { e = h.maxwidth } var n = b(k[0].cells[l]); n.css("left", f); var i = true; if (n.width() == e) { i = false } if (g) { i = true } n.width(e); n[0].left = f; if (h.addnewrowwidget) { n.html(""); n.append(h.addnewrowwidget) } if (!(h.hidden && h.hideable)) { f += e } else { n.css("display", "none") } if (!i) { continue } } var p = m.everpresentrowactions.split(" "); m.addnewrowbutton.show(); m.addnewrowupdatebutton.show(); m.addnewrowresetbutton.show(); m.addnewrowdeletebutton.show(); if (p.indexOf("add") == -1 && p.indexOf("addBottom") == -1) { m.addnewrowbutton.hide() } if (p.indexOf("update") == -1) { m.addnewrowupdatebutton.hide() } if (p.indexOf("reset") == -1) { m.addnewrowresetbutton.hide() } if (p.indexOf("delete") == -1) { m.addnewrowdeletebutton.hide() } var d = b(k.children()[0]); d.width(parseInt(f) + 2); d.height(m.everpresentrowheight); d.css("max-height", m.everpresentrowheight + "px") }, _removeaddnewrow: function () { var g = this; var d = g.columns.records.length; for (var f = 0; f < d; f++) { var e = g.columns.records[f]; if (e.addnewrowwidget) { if (e.destroyeverpresentrowwidget) { e.destroyeverpresentrowwidget(e.addnewrowwidget) } else { e.addnewrowwidget.remove() } e.addnewrowwidget = null } } if (g.addnewrowbutton) { g.addnewrowbutton.remove() } if (g.addnewrowupdatebutton) { g.addnewrowupdatebutton.remove() } if (g.addnewrowdeletebutton) { g.addnewrowdeletebutton.remove() } if (g.addnewrowresetbutton) { g.addnewrowresetbutton.remove() } if (g.addnewrowpopup) { g.addnewrowpopup.remove(); g.addnewrowpopup = null } if (g.addnewrowtop) { g.addnewrowtop.remove(); g.addnewrowtop = null } if (g.addnewrowbottom) { g.addnewrowbottom.remove(); g.addnewrowbottom = null } }, _updateaddnewrow: function () { var o = this; var f = o.everpresentrowposition != "bottom" ? o.addnewrowtop : o.addnewrowbottom; var t = b('<div style="position: relative;" id="row000' + o.element.id + '"></div>'); var i = 0; var z = o.columns.records.length; var n = o.toThemeProperty("jqx-grid-cell"); n += " " + o.toThemeProperty("jqx-grid-cell-add-new-row"); n += " " + o.toThemeProperty("jqx-grid-cell-filter-row"); var m = z + 10; var h = new Array(); var D = o.that; f[0].cells = h; t.height(o.everpresentrowheight); if (!o.showfilterrow && o.everpresentrowposition != "bottom") { f.css("max-height", (o.everpresentrowheight - 1) + "px") } else { if (o.showfilterrow && o.everpresentrowposition != "bottom") { f.css("max-height", (o.everpresentrowheight - 3) + "px") } } t.css("max-height", o.everpresentrowheight + "px"); f.append(t); var C = b("<div style='border-width: 1px; border-style: solid; padding: 5px; z-index: 99999; display: none; position: absolute;'><div>").appendTo(b(document.body)); var d = b("<button style='position: relative; float: left; margin: 2px; border-radius: 0px; padding: 4px 8px;'>" + o.gridlocalization.addrowstring + "</button>"); var q = b("<button style='position: relative; float: left; margin: 2px; border-radius: 0px; padding: 4px 8px;'>" + o.gridlocalization.udpaterowstring + "</button>"); var k = b("<button style='position: relative; float: left; margin: 2px; border-radius: 0px; padding: 4px 8px;'>" + o.gridlocalization.deleterowstring + "</button>"); var p = b("<button style='position: relative; float: left; margin: 2px; border-radius: 0px; padding: 4px 8px;'>" + o.gridlocalization.resetrowstring + "</button>"); C.addClass(o.toThemeProperty("jqx-popup")); C.addClass(o.toThemeProperty("jqx-rc-all")); C.addClass(o.toThemeProperty("jqx-fill-state-normal")); C.addClass(o.toThemeProperty("jqx-shadow")); C.append(d); C.append(q); C.append(k); C.append(p); var g = o.everpresentrowactions.split(" "); if (g.indexOf("add") == -1 && g.indexOf("addBottom") == -1) { d.hide() } if (g.indexOf("update") == -1) { q.hide() } if (g.indexOf("reset") == -1) { p.hide() } if (g.indexOf("delete") == -1) { k.hide() } o.addnewrowpopup = C; o.addnewrowbutton = d; o.addnewrowupdatebutton = q; o.addnewrowdeletebutton = k; o.addnewrowresetbutton = p; d.jqxButton({ template: "success", theme: o.theme }); k.jqxButton({ template: "danger", theme: o.theme }); q.jqxButton({ template: "primary", theme: o.theme }); p.jqxButton({ template: "warning", theme: o.theme }); q.mousedown(function (E) { var P = {}; var I = {}; for (var G = 0; G < z; G++) { var F = o.columns.records[G]; if (!F.geteverpresentrowwidgetvalue) { continue } var L = F.geteverpresentrowwidgetvalue(F.displayfield, F.addnewrowwidget); I[F.datafield] = L; if (F.datafield != F.displayfield) { I[F.datafield] = L.value; I[F.displayfield] = L.label } } var K = false; for (var G = 0; G < z; G++) { var F = o.columns.records[G]; if (!F.geteverpresentrowwidgetvalue) { continue } var L = F.geteverpresentrowwidgetvalue(F.displayfield, F.addnewrowwidget); if (F.createeverpresentrowwidget && F.validateeverpresentrowwidgetvalue) { var J = F.validateeverpresentrowwidgetvalue(F.displayfield, L, I); var O = J; var H = o.gridlocalization.validationstring; if (O.message != undefined) { H = O.message } var N = typeof O == "boolean" ? O : O.result; if (!N) { L = "invalid editor state"; F.addnewrowwidget.attr("title", H); F.addnewrowwidget.addClass(o.toThemeProperty("jqx-input-invalid")) } else { F.addnewrowwidget.attr("title", ""); F.addnewrowwidget.removeClass(o.toThemeProperty("jqx-input-invalid")) } } if (L === "invalid editor state") { E.preventDefault(); E.stopPropagation(); K = true; continue } if (K) { continue } } if (K) { C.hide(); o.focus(); return } for (var G = 0; G < z; G++) { var F = o.columns.records[G]; if (!F.geteverpresentrowwidgetvalue) { continue } var L = F.geteverpresentrowwidgetvalue(F.displayfield, F.addnewrowwidget); P[F.datafield] = L; if (F.datafield != F.displayfield) { P[F.datafield] = L.value; P[F.displayfield] = L.label } if (F.reseteverpresentrowwidgetvalue) { F.reseteverpresentrowwidgetvalue(F.displayfield, F.addnewrowwidget) } } if (o.selectedcells.length > 0 || o.selectedrowindexes.length > 0) { if (o.selectionmode.indexOf("cell") >= 0) { var M = o.getselectedcells()[0].rowindex } else { var M = o.selectedrowindexes[0] } rowData = o.getrowdata(M); if (rowData) { o.updaterow(rowData.uid, P) } } C.hide(); o.focus() }); k.mousedown(function (G) { if (o.selectedcells.length > 0 || o.selectedrowindexes.length > 0) { if (o.selectionmode.indexOf("cell") >= 0) { var H = o.getselectedcells()[0].rowindex } else { var H = o.selectedrowindexes[0] } rowData = o.getrowdata(H); if (rowData) { o.deleterow(rowData.uid) } } for (var F = 0; F < z; F++) { var E = o.columns.records[F]; if (E.reseteverpresentrowwidgetvalue) { E.reseteverpresentrowwidgetvalue(E.displayfield, E.addnewrowwidget) } } C.hide(); o.focus(); o.updateeverpresentrow() }); d.mousedown(function (F) { var P = {}; var J = {}; for (var H = 0; H < z; H++) { var G = o.columns.records[H]; if (!G.geteverpresentrowwidgetvalue) { continue } var M = G.geteverpresentrowwidgetvalue(G.displayfield, G.addnewrowwidget); J[G.datafield] = M; if (G.datafield != G.displayfield) { J[G.datafield] = M.value; J[G.displayfield] = M.label } if (G.datafield != G.displayfield) { J[G.datafield] = M.label; J[G.displayfield] = M.value } } var L = false; for (var H = 0; H < z; H++) { var G = o.columns.records[H]; if (!G.geteverpresentrowwidgetvalue) { continue } var M = G.geteverpresentrowwidgetvalue(G.displayfield, G.addnewrowwidget); if (G.createeverpresentrowwidget && G.validateeverpresentrowwidgetvalue) { var K = G.validateeverpresentrowwidgetvalue(G.displayfield, M, J); var O = K; var I = o.gridlocalization.validationstring; if (O.message != undefined) { I = O.message } var N = typeof O == "boolean" ? O : O.result; if (!N) { M = "invalid editor state"; G.addnewrowwidget.attr("title", I); G.addnewrowwidget.addClass(o.toThemeProperty("jqx-input-invalid")) } else { G.addnewrowwidget.attr("title", ""); G.addnewrowwidget.removeClass(o.toThemeProperty("jqx-input-invalid")) } } if (M === "invalid editor state") { F.preventDefault(); F.stopPropagation(); L = true; continue } if (L) { continue } } if (L) { C.hide(); o.focus(); return } for (var H = 0; H < z; H++) { var G = o.columns.records[H]; if (!G.geteverpresentrowwidgetvalue) { continue } var M = G.geteverpresentrowwidgetvalue(G.displayfield, G.addnewrowwidget); P[G.datafield] = M; if (G.datafield != G.displayfield) { J[G.datafield] = M.label; J[G.displayfield] = M.value } if (G.reseteverpresentrowwidgetvalue) { G.reseteverpresentrowwidgetvalue(G.displayfield, G.addnewrowwidget) } } var E = o.everpresentrowactions.indexOf("addBottom") >= 0 ? "last" : "first"; o.addrow(null, P, E); C.hide(); o.focus() }); p.mousedown(function (G) { var H = {}; for (var F = 0; F < z; F++) { var E = o.columns.records[F]; if (E.reseteverpresentrowwidgetvalue) { E.reseteverpresentrowwidgetvalue(E.displayfield, E.addnewrowwidget) } if (E.addnewrowwidget) { E.addnewrowwidget.attr("title", ""); E.addnewrowwidget.removeClass(o.toThemeProperty("jqx-input-invalid")) } } C.hide(); o.focus() }); for (var w = 0; w < z; w++) { var x = o.columns.records[w]; var u = x.width; if (u < x.minwidth) { u = x.minwidth } if (u > x.maxwidth) { u = x.maxwidth } var e = b('<div style="overflow: hidden; position: absolute; height: 100%;" class="' + n + '"></div>'); t.append(e); e.css("left", i); if (o.rtl) { e.css("z-index", m++); e.css("border-left-width", "1px") } else { e.css("z-index", m--) } if (u == "auto") { u = 0 } e[0].style.width = parseFloat(u) + "px"; e[0].left = i; if (!(x.hidden && x.hideable)) { i += u } else { e.css("display", "none") } h[h.length] = e[0]; if (x.checkboxcolumn) { var B = o.toThemeProperty("jqx-grid-cell"); B += " " + o.toThemeProperty("jqx-grid-cell-filter-row"); B += " " + o.toThemeProperty("jqx-grid-cell-pinned"); e.removeClass().addClass(B); continue } var s = true; if (!o.rtl) { if (o.groupable) { var y = (o.showrowdetailscolumn && o.rowdetails) ? 1 : 0; if (o.groups.length + y > w) { s = false } } if (o.showrowdetailscolumn && o.rowdetails && w == 0) { s = false } } else { if (o.groupable) { var y = (o.showrowdetailscolumn && o.rowdetails) ? 1 : 0; if (o.groups.length + y + w > z - 1) { s = false } } if (o.showrowdetailscolumn && o.rowdetails && w == z - 1) { s = false } } o.updateeverpresentrow = function () { var G = null; if (o.selectedcells.length > 0 || o.selectedrowindexes.length > 0) { if (o.selectionmode.indexOf("cell") >= 0) { var H = o.getselectedcells()[0].rowindex } else { var H = o.selectedrowindexes[0] } G = o.getrowdata(H) } if (!G) { return } for (var F = 0; F < o.columns.records.length; F++) { var j = o.columns.records[F]; if (j.seteverpresentrowwidgetvalue) { var E = o.getcelltext(H, j.displayfield); j.seteverpresentrowwidgetvalue(j.addnewrowwidget, E) } } }; if (s) { if (x.createeverpresentrowwidget) { var v = function () { d.trigger("mousedown") }; x.addnewrowwidget = x.createeverpresentrowwidget(x.datafield, e, C, v); if (x.initeverpresentrowwidget) { x.initeverpresentrowwidget(x.datafield, e, C) } } else { o._measureElement("column"); var r = (o.everpresentrowheight / 2 - o._columnheight / 2); if (r < 0) { r = 4 } r += "px"; if (x.datafield === "addButtonColumn") { var l = b('<div style="padding-bottom: 2px; text-align: center; margin-top: ' + r + ';"><a href="#">' + o.gridlocalization.addrowstring + "</a></div>"); e.append(l); l.mousedown(function () { d.trigger("mousedown") }); continue } else { if (x.datafield === "resetButtonColumn") { var l = b('<div style="padding-bottom: 2px; text-align: center; margin-top: ' + r + ';"><a href="#">' + o.gridlocalization.resetrowstring + "</a></div>"); e.append(l); l.mousedown(function () { p.trigger("mousedown") }); continue } } var A = function (F, H, j) { var E = b('<input style="box-sizing: border-box; padding-right: 4px; padding-left: 4px; border:none;" autocomplete="off" type="textarea"/>'); E[0].id = b.jqx.utilities.createId(); E.addClass(F.toThemeProperty("jqx-widget")); E.addClass(F.toThemeProperty("jqx-input")); E.addClass(F.toThemeProperty("jqx-widget-content")); E.addClass(F.toThemeProperty("jqx-enableselect")); E.addClass(F.toThemeProperty("jqx-grid-cell-add-new-row")); E.css("text-align", j.cellsalign); if (F.rtl) { E.css("direction", "rtl") } if (F.disabled) { E.attr("disabled", true) } E.attr("disabled", false); E.attr("placeholder", F.gridlocalization.everpresentrowplaceholder + j.text); E.appendTo(H); E.css("width", "100%"); E.css("height", F.everpresentrowheight + "px"); E.css("line-height", F.everpresentrowheight + "px"); E.css("max-height", F.everpresentrowheight + "px"); E.css("margin", "0px"); E.focus(function () { if (o.selectedcells.length > 0 || o.selectedrowindexes.length > 0) { if (o.selectionmode.indexOf("cell") >= 0) { var K = o.getselectedcells()[0].rowindex } else { var K = o.selectedrowindexes[0] } } E.addClass(F.toThemeProperty("jqx-fill-state-focus")); var I = F.columns.records.indexOf(j); if (F.everpresentrowactionsmode !== "columns") { C.css({ display: "block", top: E.coord().top + F.everpresentrowheight - 1, left: I > 0 ? E.coord().left : E.coord().left - 1 }) } var J = C.children().width(); if (j.cellsalign === "right") { var J = d.width() + p.width(); C.children().css("left", J - J + "px") } else { C.children().css("left", "0px") } F.content[0].scrollLeft = 0; F.content[0].scrollTop = 0; setTimeout(function () { F.content[0].scrollLeft = 0; F.content[0].scrollTop = 0 }, 50); return false }); j.addnewrowwidget = E; if (!j.reseteverpresentrowwidgetvalue) { j.reseteverpresentrowwidgetvalue = function (J, I) { I.val(""); I.focus(); I.blur(); I.removeClass(o.toThemeProperty("jqx-input-invalid")); I.attr("title", "") } } if (!j.seteverpresentrowwidgetvalue) { j.seteverpresentrowwidgetvalue = function (J, I) { J.val(I) } } if (!j.geteverpresentrowwidgetvalue) { var G = j; j.geteverpresentrowwidgetvalue = function (I, P, R) { var U = P.val(); if (R !== false && G.validateeverpresentrowwidgetvalue) { var Y = {}; var O = {}; for (var M = 0; M < z; M++) { var K = o.columns.records[M]; if (!K.geteverpresentrowwidgetvalue) { continue } var Q = K.geteverpresentrowwidgetvalue(K.displayfield, K.addnewrowwidget, false); O[K.datafield] = Q; if (K.datafield != K.displayfield) { O[K.datafield] = Q.value; O[K.displayfield] = Q.label } } var T = G.validateeverpresentrowwidgetvalue(G.displayfield, U, O); var X = T; var N = o.gridlocalization.validationstring; if (X.message != undefined) { N = X.message } var W = typeof X == "boolean" ? X : X.result; if (!W) { E.addClass(o.toThemeProperty("jqx-input-invalid")); E.attr("title", N); return "invalid editor state" } else { E.removeClass(o.toThemeProperty("jqx-input-invalid")); E.attr("title", "") } } var S = "string"; var J = o.source.datafields || ((o.source._source) ? o.source._source.datafields : null); if (J) { var V = ""; b.each(J, function () { if (this.name == G.displayfield) { if (this.type) { V = this.type } return false } }); if (V) { S = V } } if (S === "number") { var L = parseFloat(U); if (isNaN(L)) { return null } } if (S === "date") { return b.jqx.dataFormat.tryparsedate(U, o.gridlocalization) } if (S === "bool" || S === "boolean") { if (U === "true") { return true } if (U == "1") { return true } if (U === "false") { return false } if (U == "0") { return false } if (U === true) { return U } if (U === false) { return U } return false } return U } } E.keydown(function (I) { if (I.keyCode === 13) { if (o.everpresentrowactions.indexOf("add") >= 0) { d.trigger("mousedown") } else { if (o.everpresentrowactions.indexOf("update") >= 0) { q.trigger("mousedown") } else { if (o.everpresentrowactions.indexOf("delete") >= 0) { k.trigger("mousedown") } } } } }); E.blur(function () { E.removeClass(F.toThemeProperty("jqx-fill-state-focus")); C.css("display", "none") }); if (j.initeverpresentrowwidget) { j.initeverpresentrowwidget(j.datafield, H, C) } }; A(this, e, x) } } } if (b.jqx.browser.msie && b.jqx.browser.version < 8) { t.css("z-index", m--) } t.width(parseFloat(i) + 2); f.addClass(n); f.css("border-bottom-width", "0px"); if (o.showfilterrow) { f.css("border-top-width", "0px") } else { f.css("border-top-width", "1px") } f.css("box-sizing", "border-box"); f.css("border-right-width", "0px") }, _gettableheight: function () { if (this.tableheight != undefined) { return this.tableheight } var e = this.host.height(); if (this.columnsheader) { var d = this.columnsheader.outerHeight(); if (!this.showheader) { d = 0 } } e -= d; if (this.hScrollBar[0].style.visibility == "visible") { e -= this.hScrollBar.outerHeight() } if (this.pageable) { e -= this.pager.outerHeight() } if (this._groupsheader()) { e -= this.groupsheader.outerHeight() } if (this.showtoolbar) { e -= this.toolbarheight } if (this.showstatusbar) { e -= this.statusbarheight } if (this.showeverpresentrow && this.everpresentrowposition === "bottom") { e -= this.everpresentrowheight } if (e > 0) { this.tableheight = e; return e } return this.host.height() }, _getpagesize: function () { if (this.pageable) { return this.pagesize } if (this.virtualmode) { var e = Math.round(this.host.height()) + 2 * this.rowsheight; var d = Math.round(e / this.rowsheight); return d } if (this.autoheight || this.autorowheight) { if (this.dataview.totalrows == 0) { return 1 } return this.dataview.totalrows } if (this.dataview.totalrows < 100 && this.dataview.totalrecords < 100 && this.dataview.totalrows > 0) { return this.dataview.totalrows } return 100 }, _calculatevirtualheight: function () { var n = this.that; var e = Math.round(this.host.height()) + 2 * this.rowsheight; realheight = this._gettableheight(); var p = Math.round(e / this.rowsheight); this.heights = new Array(); this.hiddens = new Array(); this.details = new Array(); this.expandedgroups = new Array(); this.hiddenboundrows = new Array(); this.heightboundrows = new Array(); this.detailboundrows = new Array(); var h = Math.max(this.dataview.totalrows, this.dataview.totalrecords); if (this.pageable) { h = this.pagesize; if (this.pagesize > Math.max(this.dataview.totalrows, this.dataview.totalrecords) && this.autoheight) { h = Math.max(this.dataview.totalrows, this.dataview.totalrecords) } else { if (!this.autoheight) { if (this.dataview.totalrows < this.pagesize) { h = Math.max(this.dataview.totalrows, this.dataview.totalrecords) } } } } var l = h * this.rowsheight; var m = 0; var j = 0; var k = 0; var f = this._getpagesize(); var d = f * this.rowsheight; var g = 0; if (!this.pageable && this.autoheight) { p = h } if (h + f > 0) { while (g <= h + f) { m += d; if (g - f < h && g >= h) { var o = g - h; if (o > 0) { k -= d; this._pageviews[j - 1] = { top: k, height: d - o * this.rowsheight} } break } else { this._pageviews[j++] = { top: k, height: d} } k = m; g += f } } if (this.resizingGrid != true) { this.vScrollBar.jqxScrollBar({ value: 0 }) } if (l > realheight && !this.autoheight) { this.vScrollBar.css("visibility", "visible"); if (this.scrollmode == "deferred") { this.vScrollBar.jqxScrollBar({ max: l }) } else { this.vScrollBar.jqxScrollBar({ max: l - realheight }) } } else { this.vScrollBar.css("visibility", "hidden") } this.dataview.pagesize = f; this.dataview.updateview(); return { visiblerecords: p, virtualheight: l} }, _updatepageviews: function () { if (this.updating()) { return } this._pagescache = new Array(); this._pageviews = new Array(); this.tableheight = null; var u = this.that; var d = Math.round(this.host.height()) + 2 * this.rowsheight; var v = Math.round(d / this.rowsheight); var n = Math.max(this.dataview.totalrows, this.dataview.totalrecords); var q = n * this.rowsheight; var t = 0; var f = 0; var o = 0; var p = 0; var j = 0; var h = this._getpagesize(); if (!this.pageable) { for (var m = 0; m < n; m++) { var s = { index: m, height: this.heights[m], hidden: this.hiddens[m], details: this.details[m] }; if (this.heights[m] == undefined) { this.heights[m] = this.rowsheight; s.height = this.rowsheight } if (this.hiddens[m] == undefined) { this.hiddens[m] = false; s.hidden = false } if (this.details[m] == undefined) { this.details[m] = null } if (s.height != u.rowsheight) { q -= u.rowsheight; q += s.height } if (s.hidden) { q -= s.height } else { f += s.height; var l = 0; if (this.rowdetails) { if (this.rowdetailstemplate) { if (!s.details) { s.details = this.rowdetailstemplate } } if (s.details && s.details.rowdetails && !s.details.rowdetailshidden) { l = s.details.rowdetailsheight; f += l; q += l } } t += s.height + l } j++; if (j >= h || m == n - 1) { this._pageviews[o++] = { top: p, height: f }; f = 0; p = t; j = 0 } } } else { if (this._updatepagedview) { q = this._updatepagedview(n, q, 0) } if (this.autoheight) { this._arrange() } } var e = this._gettableheight(); if (q > e) { if (this.pageable && this.gotopage) { q = this._pageviews[0].height; if (q < 0) { q = this._pageviews[0].height } } if (this.vScrollBar.css("visibility") != "visible") { this.vScrollBar.css("visibility", "visible") } if (q <= e || this.autoheight) { this.vScrollBar.css("visibility", "hidden") } if (q - e > 0) { if (this.scrollmode != "deferred") { var r = q - e; var g = this.vScrollInstance.max; this.vScrollBar.jqxScrollBar({ max: r }); if (r != g) { this.vScrollBar.jqxScrollBar({ value: 0 }) } } else { this.vScrollBar.jqxScrollBar({ value: 0, max: q }) } } else { this.vScrollBar.jqxScrollBar({ value: 0, max: q }) } } else { if (!this._loading) { this.vScrollBar.css("visibility", "hidden") } this.vScrollBar.jqxScrollBar({ value: 0 }) } this._arrange(); if (this.autoheight) { v = Math.round(this.host.height() / this.rowsheight) } this.virtualsizeinfo = { visiblerecords: v, virtualheight: q} }, updatebounddata: function (d) { if (d != "data" && d != "sort" && d != "filter" && d != "cells" && d != "pagechanged" && d != "pagesizechanged" && !this.virtualmode) { this.virtualsizeinfo = null; if (this.showfilterrow && this.filterable && this.filterrow) { if (this.clearfilters) { this.clearfilters(false) } this.filterrow.remove(); this._filterrowcache = new Array(); if (this.filterable && this._destroyedfilters && this.showfilterrow) { this._destroyedfilters() } this.filterrow = null } else { if (this.filterable) { if (this.clearfilters) { this.clearfilters(false) } } } this.detailsVisibility = new Array(); this.groupsVisibility = new Array(); if (this.groupable) { this.dataview.groups = []; this.groups = [] } if (this.pageable) { this.pagenum = 0; this.dataview.pagenum = 0 } if (this.sortable) { this.sortcolumn = null; this.sortdirection = ""; this.dataview.sortfielddirection = ""; this.dataview.clearsortdata() } } this.databind(this.source, d) }, refreshdata: function () { this._refreshdataview(); this.render() }, _updatevscrollbarmax: function () { if (this._pageviews && this._pageviews.length > 0) { var f = this._pageviews[0].height; if (this.virtualmode || !this.pageable) { f = this.virtualsizeinfo.virtualheight } var e = this._gettableheight(); if (f > e) { if (this.pageable && this.gotopage) { f = this._pageviews[0].height; if (f < 0) { f = this._pageviews[0].height } } if (this.vScrollBar.css("visibility") != "visible") { this.vScrollBar.css("visibility", "visible") } if (f <= e || this.autoheight) { this.vScrollBar.css("visibility", "hidden") } if (f - e > 0) { var d = f - e; this.vScrollBar.jqxScrollBar({ max: d }) } else { this.vScrollBar.jqxScrollBar({ value: 0, max: f }) } } else { this.vScrollBar.css("visibility", "hidden"); this.vScrollBar.jqxScrollBar({ value: 0 }) } } }, _refreshdataview: function () { this.dataview.refresh() }, refresh: function (d) { if (d != true) { if (b.jqx.isHidden(this.host)) { return } if (this.virtualsizeinfo != null) { this._cellscache = new Array(); this._renderrows(this.virtualsizeinfo); this._updatesize() } } }, render: function () { this._render(true, true, true, true) }, invalidate: function () { if (this.virtualsizeinfo) { this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo) } }, clear: function () { this.databind(null); this.render() }, _preparecolumngroups: function () { var o = this.columnsheight; if (this.columngroups) { this.columnshierarchy = new Array(); if (this.columngroups.length) { var n = this; for (var h = 0; h < this.columngroups.length; h++) { this.columngroups[h].parent = null; this.columngroups[h].groups = null } for (var h = 0; h < this.columns.records.length; h++) { this.columns.records[h].parent = null; this.columns.records[h].groups = null } var p = function (j) { for (var u = 0; u < n.columngroups.length; u++) { var v = n.columngroups[u]; if (v.name === j) { return v } } return null }; for (var h = 0; h < this.columngroups.length; h++) { var q = this.columngroups[h]; if (!q.groups) { q.groups = null } if (q.parentgroup) { var s = p(q.parentgroup); if (s) { q.parent = s; if (!s.groups) { s.groups = new Array() } if (s.groups.indexOf(q) === -1) { s.groups.push(q) } } } } for (var h = 0; h < this.columns.records.length; h++) { var q = this.columns.records[h]; if (q.columngroup) { var s = p(q.columngroup); if (s) { if (!s.groups) { s.groups = new Array() } q.parent = s; if (s.groups.indexOf(q) === -1) { s.groups.push(q) } } } } var r = 0; for (var h = 0; h < this.columns.records.length; h++) { var q = this.columns.records[h]; var e = q; q.level = 0; while (e.parent) { e = e.parent; q.level++ } var e = q; var d = q.level; r = Math.max(r, q.level); while (e.parent) { e = e.parent; if (e) { e.level = --d } } } var m = function (y) { var x = new Array(); if (y.columngroup) { x.push(y) } if (y.groups) { for (var w = 0; w < y.groups.length; w++) { if (y.groups[w].columngroup) { x.push(y.groups[w]) } else { if (y.groups[w].groups) { var v = m(y.groups[w]); for (var u = 0; u < v.length; u++) { x.push(v[u]) } } } } } return x }; for (var h = 0; h < this.columngroups.length; h++) { var q = this.columngroups[h]; var f = m(q); q.columns = f; var k = new Array(); var t = 0; for (var g = 0; g < f.length; g++) { k.push(this.columns.records.indexOf(f[g])); if (f[g].pinned) { t++ } } if (t != 0) { throw new Error("jqxGrid: Column Groups initialization Error. Please, check the initialization of the jqxGrid's columns array. The columns in a column group cannot be pinned.") } k.sort(function (j, i) { j = parseInt(j); i = parseInt(i); if (j < i) { return -1 } if (j > i) { return 1 } return 0 }); for (var l = 1; l < k.length; l++) { if (k[l] != k[l - 1] + 1) { throw new Error("jqxGrid: Column Groups initialization Error. Please, check the initialization of the jqxGrid's columns array. The columns in a column group are expected to be siblings in the columns array."); this.host.remove() } } } } this.columngroupslevel = 1 + r; o = this.columngroupslevel * this.columnsheight } return o }, _render: function (k, j, l, e, f) { if (this.dataview == null) { return } if (this._loading) { return } if (this._batchupdate) { return } if (b.jqx.isHidden(this.host)) { var g = this; if (g.___hiddenTimer) { clearInterval(g.___hiddenTimer); g.___hiddenTimer = null } this.___hiddenTimer = setInterval(function () { if (!b.jqx.isHidden(g.host)) { clearInterval(g.___hiddenTimer); g.render() } }, 300); return } if (this.editcell != null && this.endcelledit) { this.endcelledit(this.editcell.row, this.editcell.column, true, false) } this.validationpopup = null; this._removeHandlers(); this._addHandlers(); this._initializeRows(); this._requiresupdate = j != undefined ? j : true; this._newmax = null; if (l) { if (!this._requiresupdate) { if (e != false) { this._initmenu() } } if (this.columns == null) { this.columns = new b.jqx.collection(this.element) } else { var i = this; if (this.columns && this.columns.name === "observableArray") { this.columns.notifier = function (p) { var n = function () { i.columns = i._columns; i.render() }; switch (p.type) { case "add": n(); break; case "update": if (p.name === "index") { i.beginupdate(); for (var o in p.newValue) { i.setcolumnproperty(p.newValue.datafield, o, p.newValue[o]) } i.endupdate() } else { var m = p.path.split("."); i.setcolumnproperty(i.columns[m[0]].datafield, p.name, p.newValue) } break; case "delete": n(); break } } } if (this.columngroups && this.columngroups.name === "observableArray") { this.columngroups.notifier = function (m) { i.render() } } this._initializeColumns() } } this.tableheight = null; this._pagescache = new Array(); this._pageviews = new Array(); this.visiblerows = new Array(); this.hittestinfo = new Array(); if (this._requiresupdate) { this._clearcaches(); if (e == true) { this._initmenu() } } this.virtualsizeinfo = null; this.prerenderrequired = true; if ((this.groupable && this.groups.length > 0 && this.rowdetails) || (this.rowdetails)) { if (this.gridcontent) { this._rowdetailscache = new Array(); this._rowdetailselementscache = new Array(); this.detailboundrows = new Array(); this.details = new Array(); b.jqx.utilities.html(this.gridcontent, ""); this.gridcontent = null } } if (this.gridcontent) { if (this.editable && this._destroyeditors) { this._destroyeditors() } } if (l) { if (this.filterrow) { this.filterrow.detach() } b.jqx.utilities.html(this.content, ""); this.columnsheader = this.columnsheader || b('<div style="overflow: hidden;"></div>'); this.columnsheader.remove(); this.columnsheader.addClass(this.toTP("jqx-widget-header")); this.columnsheader.addClass(this.toTP("jqx-grid-header")) } else { if (this.gridcontent) { b.jqx.utilities.html(this.gridcontent, "") } } if (!this.showheader) { this.columnsheader.css("display", "none") } else { if (this.columnsheader) { this.columnsheader.css("display", "block") } } this.gridcontent = this.gridcontent || b('<div style="width: 100%; overflow: hidden; position: absolute;"></div>'); this.gridcontent.remove(); var h = this.columnsheight; h = this._preparecolumngroups(); if (this.showfilterrow && this.filterable) { this.columnsheader.height(h + this.filterrowheight); if (this.showeverpresentrow && this.everpresentrowposition !== "bottom") { this.columnsheader.height(h + this.filterrowheight + this.everpresentrowheight) } } else { if (this.showeverpresentrow && this.everpresentrowposition !== "bottom") { this.columnsheader.height(h + this.everpresentrowheight) } else { this.columnsheader.height(h) } } this.content.append(this.columnsheader); this.content.append(this.gridcontent); this._arrange(); if (this._initgroupsheader) { this._initgroupsheader() } this.selectionarea = this.selectionarea || b("<div style='z-index: 99999; visibility: hidden; position: absolute;'></div>"); this.selectionarea.addClass(this.toThemeProperty("jqx-grid-selectionarea")); this.selectionarea.addClass(this.toThemeProperty("jqx-fill-state-pressed")); this.content.append(this.selectionarea); this.tableheight = null; this.rendergridcontent(false, l); if (this.groups.length > 0 && this.groupable) { var d = this.vScrollBar[0].style.visibility; this.suspendgroupevents = true; if (this.collapseallgroups) { if (!this.groupsexpandedbydefault) { this.collapseallgroups(false); this._updatescrollbarsafterrowsprerender() } else { this.expandallgroups(false) } } if (this.vScrollBar[0].style.visibility != d) { this._updatecolumnwidths(); this._updatecellwidths() } this.suspendgroupevents = false } if (this.pageable && this.updatepagerdetails) { this.updatepagerdetails(); if (this.autoheight) { this._updatepageviews() } if (this.autorowheight) { if (!this.autoheight) { this._updatepageviews() } this._renderrows(this.virtualsizeinfo) } } if (this.showaggregates && this._updateaggregates) { this._updateaggregates() } this._addoverlayelement(); if (this.scrollmode == "deferred") { this._addscrollelement() } if (this.showfilterrow && this.filterable && this.filterrow && (f == undefined || f == true)) { this._updatelistfilters(!l) } if (this.rendered) { this.rendered("full") } this.__isRendered = true }, _addoverlayelement: function () { if (this.autoheight) { if (this._overlayElement) { this._overlayElement.remove() } this._updateTouchScrolling(); return } var d = b.jqx.utilities.getBrowser(); if ((d.browser == "msie" && parseInt(d.version) < 9) || this.isTouchDevice()) { if (this._overlayElement) { this._overlayElement.remove() } this._overlayElement = b("<div style='visibility: hidden; position: absolute; width: 100%; height: 100%;'></div>"); this._overlayElement.css("background", "white"); this._overlayElement.css("z-index", 18000); this._overlayElement.css("opacity", 0.001); if (this.isTouchDevice()) { if (this.vScrollBar.css("visibility") !== "hidden" || this.hScrollBar.css("visibility") !== "hidden") { var e = 0; if (this.selectionmode == "checkbox") { e += 30 } if (this.groupable || this.rowdetails) { this._overlayElement.css("left", 30 * (this.groups.length + (this.rowdetails ? 1 : 0))) } var f = this._overlayElement.css("left"); this._overlayElement.css("left", f + e) } else { if (this._overlayElement) { this._overlayElement.remove() } } } else { this.content.prepend(this._overlayElement) } } this._updateTouchScrolling() }, _addscrollelement: function () { if (this._scrollelement) { this._scrollelement.remove() } if (this._scrollelementoverlay) { this._scrollelementoverlay.remove() } this._scrollelementoverlay = b("<div style='visibility: hidden; position: absolute; width: 100%; height: 100%;'></div>"); this._scrollelementoverlay.css("background", "black"); this._scrollelementoverlay.css("z-index", 18000); this._scrollelementoverlay.css("opacity", 0.1); this._scrollelement = b("<span style='visibility: hidden; top: 50%; right: 10px; position: absolute;'></span>"); this._scrollelement.css("z-index", 18005); this._scrollelement.addClass(this.toThemeProperty("jqx-button")); this._scrollelement.addClass(this.toThemeProperty("jqx-fill-state-normal")); this._scrollelement.addClass(this.toThemeProperty("jqx-rc-all")); this._scrollelement.addClass(this.toThemeProperty("jqx-shadow")); this.content.prepend(this._scrollelement); this.content.prepend(this._scrollelementoverlay) }, _postrender: function (f) { if (f == "filter" || f == "sort" || f == "group") { if (this.rowdetails && this.detailsVisibility && this.detailsVisibility.length > 0) { this._detailsUpdate = true; for (var e = 0; e < this.detailsVisibility.length; e++) { if (false === this.detailsVisibility[e]) { this.showrowdetails(e) } else { if (true === this.detailsVisibility[e]) { this.hiderowdetails(e) } } } this._detailsUpdate = false; this.rendergridcontent(true); this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo) } } if (this.groupable && this.groups.length > 0) { if (f == "filter" || f == "sort") { for (var e = 0; e < this.dataview.loadedgroups.length; e++) { var h = this.dataview.loadedgroups[e]; var d = 0; for (var g in this.groupsVisibility) { if (g == h.group && this.groupsVisibility[g]) { suspendgroupevents = true; this._setgroupstate(h, true, false); d++ } } if (d > 0) { suspendgroupevents = false; var j = this.vScrollBar[0].style.visibility; this.rendergridcontent(true, false); if (j != this.vScrollBar[0].style.visibility || this._hiddencolumns) { this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo) } } } } else { if (f == "group") { this.groupsVisibility = new Array() } } } }, rendergridcontent: function (d, f) { if (this.updating()) { return false } if (d == undefined || d == null) { d = false } this._requiresupdate = d; var h = this.prerenderrequired; if (this.prerenderrequired) { this._arrange() } var g = this.that; var f = f; if (f == null || f == undefined) { f = true } this.tableheight = null; g.virtualsizeinfo = g.virtualsizeinfo || g._calculatevirtualheight(); if (g.pageable && !g.autoheight) { if (g.dataview.totalrows < g.pagesize) { g._requiresupdate = true } } if (f) { g._rendercolumnheaders() } else { if (this._rendersortcolumn) { this._rendersortcolumn() } if (this._renderfiltercolumn) { this._renderfiltercolumn() } } g._renderrows(g.virtualsizeinfo); if (this.gridcontent) { if (this.gridcontent[0].scrollTop != 0) { this.gridcontent[0].scrollTop = 0 } if (this.gridcontent[0].scrollLeft != 0) { this.gridcontent[0].scrollLeft = 0 } } if (h) { var e = this.tableheight; this._arrange(); if (e != this.tableheight && this.autoheight) { g._renderrows(g.virtualsizeinfo) } } if (this.rtl) { this._renderhorizontalscroll() } if (this.autosavestate) { if (this.initializedcall != null) { if (this.savestate) { this.savestate() } } } return true }, _updatecolumnwidths: function () { var l = this.host.width(); var e = l; var j = ""; if (this.columns == undefined || this.columns.records == undefined) { return } var n = this.that; var g = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth; b.each(this.columns.records, function (p, q) { if (!(this.hidden && this.hideable)) { if (this.width.toString().indexOf("%") != -1 || this._percentagewidth != undefined) { var q = 0; var r = n.vScrollBar[0].style.visibility == "hidden" ? 0 : n.scrollbarsize + 5; if (n.scrollbarautoshow) { r = 0 } var o = e; q = parseFloat(this.width) * o / 100; r += g; if (this._percentagewidth != undefined) { q = parseFloat(this._percentagewidth) * (o - r) / 100 } if (q < this.minwidth && this.minwidth != "auto") { q = this.minwidth } if (q > this.maxwidth && this.maxwidth != "auto") { q = this.maxwidth } l -= q } else { if (this.width != "auto" && !this._width) { l -= this.width } else { j += this.text } } } }); var f = this._gettableheight(); if (!this.autoheight) { if (this.virtualsizeinfo && this.virtualsizeinfo.virtualheight > f) { if (this.groupable && this.groups.length > 0) { if (this.dataview && this.dataview.loadedrootgroups && !this.groupsexpandedbydefault) { var m = this.dataview.loadedrootgroups.length * this.rowsheight; if (this.pageable) { for (var d = 0; d < this.dataview.rows.length; d++) { if (this.dataview.rows[d].group && this.dataview.rows[d].level === 0) { m += this.rowsheight } } } if (m > f) { l -= this.scrollbarsize + 5; e -= this.scrollbarsize + 5 } else { if (this.vScrollBar.css("visibility") == "visible") { l -= this.scrollbarsize + 5; e -= this.scrollbarsize + 5 } } } else { l -= this.scrollbarsize + 5; e -= this.scrollbarsize + 5 } } else { if (this.vScrollBar.css("visibility") != "hidden") { l -= this.scrollbarsize + 5; e -= this.scrollbarsize + 5 } } } } var g = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth; e -= g; if (!this.columnsheader) { return } var i = this.columnsheader.find("#columntable" + this.element.id); if (i.length == 0) { return } var h = 0; var k = this; b.each(this.columns.records, function (p, t) { var r = b(this.element); if (!this.hidden && this.element.style.display === "none") { this.element.style.display = "block" } var o = false; var s = this.width; if (this.width.toString().indexOf("%") != -1 || this._percentagewidth != undefined) { if (this._percentagewidth != undefined) { s = parseFloat(this._percentagewidth) * e / 100 } else { s = parseFloat(this.width) * e / 100 } o = true } if (this.width != "auto" && !this._width && !o) { if (parseInt(r[0].style.width) != this.width) { r.width(this.width) } } else { if (o) { if (s < this.minwidth && this.minwidth != "auto") { s = this.minwidth; this.width = s } if (s > this.maxwidth && this.maxwidth != "auto") { s = this.maxwidth; this.width = s } if (parseInt(r[0].style.width) != s) { r.width(s); this.width = s } } else { var q = Math.floor(l * (this.text.length / j.length)); if (isNaN(q)) { q = this.minwidth } if (q == Infinity) { q = 0 } if (q < 0) { $element = b("<span>" + this.text + "</span>"); b(document.body).append($element); q = 10 + $element.width(); $element.remove() } if (q < this.minwidth) { q = this.minwidth } if (q > this.maxwidth) { q = this.maxwidth } this._width = "auto"; this.width = q; r.width(this.width) } } if (parseInt(r[0].style.left) != h) { r.css("left", h) } if (!(this.hidden && this.hideable)) { h += this.width } this._requirewidthupdate = true }); this.columnsheader.width(2 + h); i.width(this.columnsheader.width()); if (h == 0) { this.columnsheader[0].style.visibility = "hidden" } else { this.columnsheader[0].style.visibility = "inherit" } this._resizecolumngroups(); if (this.showfilterrow && this.filterrow) { this.filterrow.width(this.columnsheader.width()); this._updatefilterrowui() } if (this.showeverpresentrow) { if (this.everpresentrowposition !== "bottom") { this.addnewrowtop.width(this.columnsheader.width()) } else { this.addnewrowbottom.width(this.columnsheader.width()) } this._updateaddnewrowui() } if (this.autowidth) { this._arrange() } }, _rendercolumnheaders: function () { var x = this.that; if (!this.prerenderrequired) { if (this._rendersortcolumn) { this._rendersortcolumn() } if (this._renderfiltercolumn) { this._renderfiltercolumn() } if (this.showfilterrow && this.filterrow) { this.filterrow.width(this.columnsheader.width()); this._updatefilterrowui() } if (this.showeverpresentrow) { if (this.everpresentrowposition !== "bottom") { this.addnewrowtop.width(this.columnsheader.width()) } else { this.addnewrowbottom.width(this.columnsheader.width()) } this._updateaddnewrowui() } return } this._columnsbydatafield = new Array(); this.columnsheader.find("#columntable" + this.element.id).remove(); var o = b('<div id="columntable' + this.element.id + '" style="height: 100%; position: relative;"></div>'); o[0].cells = new Array(); var B = 0; var h = 0; var u = ""; var G = this.host.width(); var s = G; var g = new Array(); var A = new Array(); var t = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth; b.each(this.columns.records, function (j, k) { if (!(this.hidden && this.hideable)) { if (this.width != "auto" && !this._width) { if (this.width < this.minwidth && this.minwidth != "auto") { G -= this.minwidth } else { if (this.width > this.maxwidth && this.maxwidth != "auto") { G -= this.maxwidth } else { if (this.width.toString().indexOf("%") != -1) { var k = 0; var p = x.vScrollBar[0].style.visibility == "hidden" ? 0 : x.scrollbarsize + 5; p += t; k = parseFloat(this.width) * (s - p) / 100; if (k < this.minwidth && this.minwidth != "auto") { k = this.minwidth } if (k > this.maxwidth && this.maxwidth != "auto") { k = this.maxwidth } G -= k } else { if (typeof this.width == "string") { this.width = parseInt(this.width) } G -= this.width } } } } else { u += this.text } } if (this.pinned || this.grouped || this.checkboxcolumn) { if (x._haspinned) { this.pinned = true } g[g.length] = this } else { A[A.length] = this } }); if (!this.rtl) { for (var D = 0; D < g.length; D++) { this.columns.replace(D, g[D]) } for (var C = 0; C < A.length; C++) { this.columns.replace(g.length + C, A[C]) } } else { var y = 0; g.reverse(); for (var D = this.columns.records.length - 1; D >= this.columns.records.length - g.length; D--) { this.columns.replace(D, g[y++]) } for (var C = 0; C < A.length; C++) { this.columns.replace(C, A[C]) } } var n = this.headerZIndex; var r = x.groupable ? x.groups.length : 0; if (this.rowdetails && this.showrowdetailscolumn) { r++ } var l = x.columnsheader.height(); if (this.showfilterrow) { if (!this.columngroups) { l = this.columnsheight } else { l -= this.filterrowheight } } if (this.showeverpresentrow && this.everpresentrowposition !== "bottom") { l -= this.everpresentrowheight } var v = this._gettableheight(); if (this.virtualsizeinfo && this.virtualsizeinfo.virtualheight > v && !this.scrollbarautoshow) { if (this.groupable && this.groups.length > 0) { if (this.dataview && this.dataview.loadedrootgroups && !this.groupsexpandedbydefault) { var E = 0; if (!this.pageable) { var E = this.dataview.loadedrootgroups.length * this.rowsheight } else { if (this.pageable) { for (var w = 0; w < this.dataview.rows.length; w++) { if (this.dataview.rows[w].group && this.dataview.rows[w].level === 0) { E += this.rowsheight } } } } if (E > v) { G -= this.scrollbarsize + 5; s -= this.scrollbarsize + 5 } } else { G -= this.scrollbarsize + 5; s -= this.scrollbarsize + 5 } } else { if (!this.autoheight) { G -= this.scrollbarsize + 5; s -= this.scrollbarsize + 5 } } } s -= t; var d = function (j, k) { var i = x.columngroupslevel * x.columnsheight; i = i - (k.level * x.columnsheight); return i }; var f = document.createDocumentFragment(); var z = 0; b.each(this.columns.records, function (W, U) { this.height = x.columnsheight; if (x.columngroups) { if (x.columngroups.length) { this.height = d(this.datafield, this); l = this.height } } var aa = x.toTP("jqx-grid-column-header") + " " + x.toTP("jqx-widget-header"); if (x.rtl) { aa += " " + x.toTP("jqx-grid-column-header-rtl") } var Y = !x.rtl ? 150 + n - 1 : 150 + n + 1; var S = !x.rtl ? n-- : n++; var H = b('<div role="columnheader" style="z-index: ' + S + ';position: absolute; height: 100%;" class="' + aa + '"><div style="height: 100%; width: 100%;"></div></div>'); if (x.columngroups) { H[0].style.height = l + "px"; H[0].style.bottom = "0px"; if (this.pinned) { H[0].style.zIndex = Y } } this.uielement = H; if (this.classname != "" && this.classname) { H.addClass(this.classname) } var P = this.width; var Q = false; if (this.width === null) { this.width = "auto" } if (this.width.toString().indexOf("%") != -1 || this._percentagewidth != undefined) { if (this._percentagewidth != undefined) { P = parseFloat(this._percentagewidth) * s / 100 } else { P = parseFloat(this.width) * s / 100 } Q = true } if (this.width != "auto" && !this._width && !Q) { if (P < this.minwidth && this.minwidth != "auto") { P = this.minwidth; this.width = P } if (P > this.maxwidth && this.maxwidth != "auto") { P = this.maxwidth; this.width = P } H[0].style.width = parseInt(P) + "px" } else { if (Q) { if (P < this.minwidth && this.minwidth != "auto") { P = this.minwidth } if (P > this.maxwidth && this.maxwidth != "auto") { P = this.maxwidth } if (this._percentagewidth == undefined || this.width.toString().indexOf("%") != -1) { this._percentagewidth = this.width } H.width(P); this.width = P } else { if (!this.hidden) { var T = Math.floor(G * (this.text.length / u.length)); z += T; if (G - z < 3 && G != z) { T += 2 } if (isNaN(T)) { T = this.minwidth } if (T < 0) { $element = b("<span>" + this.text + "</span>"); b(document.body).append($element); T = 10 + $element.width(); $element.remove() } if (T < this.minwidth) { T = this.minwidth } if (T > this.maxwidth) { T = this.maxwidth } this._width = "auto"; this.width = T; P = this.width; H.width(this.width) } } } if (this.hidden && this.hideable) { H.css("display", "none") } var p = b(H.children()[0]); var X = x.rtl ? x.toTP("jqx-grid-column-menubutton") + " " + x.toTP("jqx-grid-column-menubutton-rtl") : x.toTP("jqx-grid-column-menubutton"); X += " " + x.toTP("jqx-icon-arrow-down"); var K = b('<div style="height: ' + l + 'px; display: none; left: 100%; top: 0%; position: absolute;"><div class="' + X + '" style="width: 100%; height:100%;"></div></div>'); if (!x.enableanimations) { K.css("margin-left", -16) } if (x.rtl) { K.css("left", "0px") } this.columnsmenu = K[0]; o[0].cells[W] = H[0]; K[0].style.width = parseInt(x.columnsmenuwidth) + "px"; var J = x.columnsmenu; var q = false; var V = false; var R = (x.groupable && r > 0 && B < r) || (x.rowdetails && B < r); if (x.rtl) { R = (x.groupable && r > 0 && B < r) || (x.rowdetails && B < r); R &= W > x.columns.records.length - 1 - r } if (R) { B++; J &= false; this.sortable = false; this.editable = false; V = true } else { var M = this.renderer != null ? this.renderer(this.text, this.align, l) : x._rendercolumnheader(this.text, this.align, l, x); if (M == null) { M = x._rendercolumnheader(this.text, this.align, l, x) } if (this.renderer != null) { M = b(M) } J &= true; q = true } if (x.WinJS) { MSApp.execUnsafeLocalFunction(function () { p.append(b(M)) }) } else { if (this.renderer) { p.append(b(M)) } else { if (M) { p[0].innerHTML = M } } } if (M != null) { var O = b('<div class="iconscontainer" style="height: ' + l + 'px; margin-left: -32px; display: block; position: absolute; left: 100%; top: 0%; width: 32px;"><div class="filtericon ' + x.toTP("jqx-widget-header") + '" style="height: ' + l + 'px; float: right; display: none; width: 16px;"><div class="' + x.toTP("jqx-grid-column-filterbutton") + '" style="width: 100%; height:100%;"></div></div><div class="sortasc ' + x.toTP("jqx-widget-header") + '" style="height: ' + l + 'px; float: right; display: none; width: 16px;"><div class="' + x.toTP("jqx-grid-column-sortascbutton") + " " + x.toTP("jqx-icon-arrow-up") + '" style="width: 100%; height:100%;"></div></div><div class="sortdesc ' + x.toTP("jqx-widget-header") + '" style="height: ' + l + 'px; float: right; display: none; width: 16px;"><div class="' + x.toTP("jqx-grid-column-sortdescbutton") + " " + x.toTP("jqx-icon-arrow-down") + '" style="width: 100%; height:100%;"></div></div></div>'); K.addClass(x.toTP("jqx-widget-header")); p.append(O); var ab = O.children(); this.sortasc = ab[1]; this.sortdesc = ab[2]; this.filtericon = ab[0]; this.iconscontainer = O; if (x.rtl) { O.css("margin-left", "0px"); O.css("left", "0px"); b(this.sortasc).css("float", "left"); b(this.filtericon).css("float", "left"); b(this.sortdesc).css("float", "left") } if (!x.autoshowfiltericon && this.filterable) { b(this.filtericon).css("display", "block") } } this.element = H[0]; if (J) { x._handlecolumnsmenu(x, p, H, K, this); if (!this.menu) { K.hide() } } f.appendChild(H[0]); if (x.groupable && q) { H[0].id = x.dataview.generatekey(); if (x._handlecolumnstogroupsdragdrop) { x._handlecolumnstogroupsdragdrop(this, H) } else { throw new Error("jqxGrid: Missing reference to jqxgrid.grouping.js.") } } if (x.columnsreorder && this.draggable && x._handlecolumnsdragreorder) { x._handlecolumnsdragreorder(this, H) } var Z = this; x.addHandler(H, "click", function (i) { if (Z.checkboxcolumn) { return true } if (x.sorttogglestates > 0 && x._togglesort) { if (!x._loading) { if (x.suspendClick) { return true } x._togglesort(Z) } } i.preventDefault(); x._raiseEvent(7, { column: Z.getcolumnproperties(), datafield: Z.datafield, originalEvent: i }) }); if (Z.resizable && x.columnsresize && !V) { var I = false; var j = "mousemove"; if (x.isTouchDevice() && x.touchmode !== true) { I = true; j = b.jqx.mobile.getTouchEventName("touchstart") } x.addHandler(H, j, function (ac) { var i = parseInt(ac.pageX); var ae = 5; var ah = parseInt(H.coord().left); if (x.hasTransform) { ah = b.jqx.utilities.getOffset(H).left } if (x.resizing) { return true } if (x._handlecolumnsresize) { if (I) { var ad = x.getTouches(ac); var ag = ad[0]; i = ag.pageX; ae = 40; if (i >= ah + Z.width - ae) { x.resizablecolumn = { columnelement: H, column: Z }; H.css("cursor", "col-resize") } else { H.css("cursor", ""); x.resizablecolumn = null } return true } var af = Z.width; if (x.rtl) { af = 0 } if (i >= ah + af - ae) { if (i <= ah + af + ae) { x.resizablecolumn = { columnelement: H, column: Z }; H.css("cursor", "col-resize"); return false } else { H.css("cursor", ""); x.resizablecolumn = null } } else { H.css("cursor", ""); if (i < ah + af - ae) { if (!Z._animating && !Z._menuvisible) { H.mouseenter() } } x.resizablecolumn = null } } }) } H.css("left", h); if (!(this.hidden && this.hideable)) { h += P } if (Z.rendered) { var N = Z.rendered(b(p[0].firstChild), Z.align, l); if (N && O != null) { O.hide() } } if (Z.checkboxcolumn) { if (O) { O.hide() } if (!x.host.jqxCheckBox) { throw new Error("jqxGrid: Missing reference to jqxcheckbox.js") } p.html('<div style="cursor: pointer; margin-left: 5px; top: 50%; margin-top: -8px; position: relative;"></div>'); var k = p.find("div:first"); k.jqxCheckBox({ _canFocus: false, disabled: x.disabled, disabledContainer: true, theme: x.theme, enableContainerClick: false, width: 16, height: 16, animationShowDelay: 0, animationHideDelay: 0 }); Z.checkboxelement = k; var L = k.data().jqxCheckBox.instance; x._checkboxcolumn = Z; L.updated = function (ac, i, ad) { x._checkboxcolumnupdating = true; if (x.disabled) { k.jqxCheckBox({ disabled: x.disabled }); i = ad } if (i) { x.selectallrows() } else { x.unselectallrows() } x._checkboxcolumnupdating = false } } }); if (h > 0) { this.columnsheader.width(2 + h) } else { this.columnsheader.width(h) } o[0].appendChild(f); this.columnsrow = o; x.columnsheader.append(o); if (this.showfilterrow && this._updatefilterrow) { if (!this.columngroups) { o.height(this.columnsheight) } else { o.height(this.columngroupslevel * this.columnsheight) } if (!this.filterrow) { var F = b("<div style='position: relative !important; '></div>"); F[0].id = "filterrow." + this.element.id; F.height(this.filterrowheight); this.filterrow = F } this.filterrow.width(2 + h); this.columnsheader.append(this.filterrow); this._updatefilterrow() } if (this.showeverpresentrow && this.everpresentrowposition !== "bottom") { if (!this.columngroups) { o.height(this.columnsheight) } else { o.height(this.columngroupslevel * this.columnsheight) } if (!this.addnewrowtop) { var m = b("<div style='position: relative !important; z-index:" + this.headerZIndex + ";'></div>"); m[0].id = "addnewrowtop." + this.element.id; m.height(this.everpresentrowheight); this.addnewrowtop = m } this.addnewrowtop.width(2 + h); if (this.everpresentrowposition == "topAboveFilterRow") { if (this.filterrow) { this.addnewrowtop.insertBefore(this.filterrow) } else { this.columnsheader.append(this.addnewrowtop) } } else { this.columnsheader.append(this.addnewrowtop) } this._updateaddnewrow() } else { if (this.showeverpresentrow && this.everpresentrowposition === "bottom") { if (!this.addnewrowbottom) { var e = b("<div style='position: relative !important; z-index:" + this.headerZIndex + ";'></div>"); e[0].id = "addnewrowbottom." + this.element.id; e.height(this.everpresentrowheight); this.addnewrowbottom = e } this.addnewrowbottom.width(2 + h); this.addnewrow.append(this.addnewrowbottom); this._updateaddnewrow() } } if (h == 0) { o[0].style.visibility = "hidden" } else { o[0].style.visibility = "inherit" } o.width(h); if (this._handlecolumnsdragdrop) { this._handlecolumnsdragdrop() } if (this._handlecolumnsreorder) { this._handlecolumnsreorder() } if (this._rendersortcolumn) { this._rendersortcolumn() } if (this._renderfiltercolumn) { this._renderfiltercolumn() } if (this._handlecolumnsresize) { this._handlecolumnsresize() } if (this.columngroups) { this._rendercolumngroups() } if (this._updatecheckboxselection) { this._updatecheckboxselection() } }, _rendercolumngroups: function () { if (!this.columngroups) { return } var p = 0; for (var m = 0; m < this.columns.records.length; m++) { if (this.columns.records[m].pinned) { p++ } } var u = this.headerZIndex - p + this.columns.records.length; var v = this.that; var h = v.toTP("jqx-grid-column-header") + " " + v.toTP("jqx-grid-columngroup-header") + " " + v.toTP("jqx-widget-header"); if (v.rtl) { h += " " + v.toTP("jqx-grid-columngroup-header-rtl") } var f = this.columnsheader.find("#columntable" + this.element.id); f.find("jqx-grid-columngroup-header").remove(); for (var k = 0; k < this.columngroupslevel - 1; k++) { for (var m = 0; m < this.columngroups.length; m++) { var r = this.columngroups[m]; var d = r.level; if (d !== k) { continue } var q = d * this.columnsheight; var e = 99999; if (r.groups) { var t = function (y) { var x = 0; for (var w = 0; w < y.groups.length; w++) { var i = y.groups[w]; if (!i.groups) { if (!i.hidden) { x += i.width; e = Math.min(parseFloat(i.element.style.left), e) } } else { x += t(i) } } return x }; r.width = t(r); r.left = e; var s = this.columnsheight; var n = u--; var g = b('<div role="columnheader" style="z-index: ' + n + ';position: absolute;" class="' + h + '"></div>'); var l = b(this._rendercolumnheader(r.text, r.align, this.columnsheight, this)); if (r.renderer) { var l = b("<div style='height: 100%; width: 100%;'></div>"); var o = r.renderer(r.text, r.align, s); l.html(o) } g.append(l); g[0].style.left = e + "px"; if (e === 0) { g[0].style.borderLeftColor = "transparent" } g[0].style.top = q + "px"; g[0].style.height = s + "px"; g[0].style.width = -1 + r.width + "px"; f.append(g); r.element = g; if (r.rendered) { r.rendered(l, r.align, s) } } } } }, _resizecolumngroups: function () { if (!this.columngroups) { return } for (var e = 0; e < this.columngroups.length; e++) { var k = this.columngroups[e]; var l = k.level; var j = l * this.columnsheight; var h = 99999; if (k.groups) { var g = function (o) { var n = 0; for (var m = 0; m < o.groups.length; m++) { var i = o.groups[m]; if (!i.groups) { if (!i.hidden) { n += i.width; h = Math.min(parseFloat(i.element.style.left), h) } } else { n += g(i) } } return n }; k.width = g(k); k.left = h; var d = this.columnsheight; var f = k.element; f[0].style.left = h + "px"; f[0].style.top = j + "px"; f[0].style.height = d + "px"; f[0].style.width = -1 + k.width + "px" } } }, _handlecolumnsmenu: function (p, g, h, k, m) { p.dragmousedown = null; k[0].id = p.dataview.generatekey(); g.append(k); h[0].columnsmenu = k[0]; m.element = h[0]; var l = this.columnsmenuwidth + 1; var o = function () { if (!m.menu) { return false } if (!p.resizing) { if (m._menuvisible && p._hasOpenedMenu) { return false } m._animating = true; if (p.menuitemsarray && p.menuitemsarray.length > 0) { if (!p.enableanimations) { k.css("display", "block"); var q = !p.rtl ? -48 : 16; m.iconscontainer.css("margin-left", q + "px"); m._animating = false; m._menuvisible = true } else { k.css("display", "block"); k.stop(); m.iconscontainer.stop(); if (!p.rtl) { k.css("margin-left", "0px"); k.animate({ "margin-left": -l }, "fast", function () { k.css("display", "block"); m._animating = false; m._menuvisible = true }) } else { k.css("margin-left", -l); k.animate({ "margin-left": "0px" }, "fast", function () { k.css("display", "block"); m._animating = false; m._menuvisible = true }) } var q = !p.rtl ? -(32 + l) : l; m.iconscontainer.animate({ "margin-left": q }, "fast") } } } }; var f = "mouseenter"; if (p.isTouchDevice()) { f = "touchstart" } p.addHandler(h, f, function (r) { var q = parseInt(r.pageX); var t = p.columnsresize && m.resizable ? 3 : 0; var v = parseInt(h.coord().left); if (p.hasTransform) { v = b.jqx.utilities.getOffset(h).left } var u = m.width; if (p.rtl) { u = 0 } if (t != 0) { if (q >= v + u - t) { if (q <= v + u + t) { return false } } } var s = p.vScrollInstance.isScrolling(); if (m.menu && p.autoshowcolumnsmenubutton && !s && !p.disabled) { o() } }); if (!p.autoshowcolumnsmenubutton) { k.css("display", "block"); var e = !p.rtl ? -48 : 16; m.iconscontainer.css("margin-left", e + "px"); if (!p.rtl) { k.css({ "margin-left": -l }) } else { k.css({ "margin-left": "0px" }) } } p.addHandler(h, "mouseleave", function (q) { if (p.menuitemsarray && p.menuitemsarray.length > 0 && m.menu) { var s = b.data(document.body, "contextmenu" + p.element.id); if (s != undefined && k[0].id == s.columnsmenu.id) { return } if (p.autoshowcolumnsmenubutton) { if (!p.enableanimations) { k.css("display", "none"); var r = !p.rtl ? -32 : 0; m.iconscontainer.css("margin-left", r + "px"); m._menuvisible = false } else { if (!p.rtl) { k.css("margin-left", -l) } else { k.css("margin-left", "0px") } k.stop(); m.iconscontainer.stop(); if (!p.rtl) { k.animate({ "margin-left": 0 }, "fast", function () { k.css("display", "none"); m._menuvisible = false }) } else { k.animate({ "margin-left": -l }, "fast", function () { k.css("display", "none"); m._menuvisible = false }) } var r = !p.rtl ? -32 : 0; m.iconscontainer.animate({ "margin-left": r }, "fast") } } } }); var j = true; var d = ""; var i = b(m.filtericon); p.addHandler(k, "mousedown", function (q) { if (!p.gridmenu) { p._initmenu() } j = !b.data(p.gridmenu[0], "contextMenuOpened" + p.gridmenu[0].id); d = b.data(document.body, "contextmenu" + p.element.id); if (d != null) { d = d.column.datafield } }); p.addHandler(i, "mousedown", function (q) { if (!p.gridmenu) { p._initmenu() } j = !b.data(p.gridmenu[0], "contextMenuOpened" + p.gridmenu[0].id); d = b.data(document.body, "contextmenu" + p.element.id); if (d != null) { d = d.column.datafield } }); var n = function () { if (!m.menu) { return false } if (!p.gridmenu) { p._initmenu() } if (p.disabled) { return false } for (var v = 0; v < p.columns.records.length; v++) { if (p.columns.records[v].datafield != m.datafield) { p.columns.records[v]._menuvisible = false } } var t = k.coord(true); var A = k.height(); if (!j) { j = true; if (d == m.datafield) { p._closemenu(); return false } } var x = p.host.coord(true); if (p.hasTransform) { x = b.jqx.utilities.getOffset(p.host); t = b.jqx.utilities.getOffset(k) } if (x.left + p.host.width() > parseInt(t.left) + p.gridmenu.width()) { p.gridmenu.jqxMenu("open", t.left, t.top + A) } else { p.gridmenu.jqxMenu("open", k.width() + t.left - p.gridmenu.width(), t.top + A) } if (p.gridmenu.width() < 100) { p._arrangemenu() } p._hasOpenedMenu = true; var y = p._getmenuitembyindex(0); var r = p._getmenuitembyindex(1); var C = p._getmenuitembyindex(2); var z = p._getmenuitembyindex(3); var q = p._getmenuitembyindex(4); var D = p._getmenuitembyindex(5); if (y != null && r != null && C != null) { var u = m.sortable && p.sortable; p.gridmenu.jqxMenu("disable", y.id, !u); p.gridmenu.jqxMenu("disable", r.id, !u); p.gridmenu.jqxMenu("disable", C.id, !u); if (m.displayfield != undefined) { if (p.sortcolumn == m.displayfield) { var w = p.getsortinformation(); if (u) { if (w.sortdirection.ascending) { p.gridmenu.jqxMenu("disable", y.id, true) } else { p.gridmenu.jqxMenu("disable", r.id, true) } } } else { p.gridmenu.jqxMenu("disable", C.id, true) } } } if (z != null && q != null) { if (!p.groupable || !m.groupable) { p.gridmenu.jqxMenu("disable", q.id, true); p.gridmenu.jqxMenu("disable", z.id, true) } else { if (p.groups && p.groups.indexOf(m.datafield) != -1) { p.gridmenu.jqxMenu("disable", z.id, true); p.gridmenu.jqxMenu("disable", q.id, false) } else { p.gridmenu.jqxMenu("disable", z.id, false); p.gridmenu.jqxMenu("disable", q.id, true) } } } if (D != null) { p.menuOwner = m; p._updatefilterpanel(p, D, m); var s = 0; if (p.sortable && p._togglesort && p.showsortmenuitems) { s += 3 } if (p.groupable && p.addgroup && p.showgroupmenuitems) { s += 2 } var B = s * 27 + 3; if (b.jqx.browser.msie && b.jqx.browser.version < 8) { B += 20; b(D).height(190) } if (p.filterable && p.showfiltermenuitems) { if (!m.filterable) { p.gridmenu.height(B); b(D).css("display", "none") } else { p.gridmenu.height(B + 180); b(D).css("display", "block") } } } if (p.columnmenuopening) { var E = p.columnmenuopening(p.gridmenu, m.displayfield, p.gridmenu.height()); if (false === E) { p._closemenu() } } b.data(document.body, "contextmenu" + p.element.id, { column: m, columnsmenu: k[0] }) }; p.addHandler(i, "click", function (q) { if (!m.menu) { return false } if (!p.showfilterrow) { if (k[0].style.display != "block") { h.trigger("mouseenter") } setTimeout(function () { if (k[0].style.display != "block") { h.trigger("mouseenter") } n() }, 200) } return false }); p.addHandler(k, "click", function (q) { if (!m.menu) { return false } n(); return false }); if (p.isTouchDevice()) { p.addHandler(k, b.jqx.mobile.getTouchEventName("touchstart"), function (q) { if (!m.menu) { return false } if (!p._hasOpenedMenu) { n() } else { p._closemenu() } return false }) } }, _removecolumnhandlers: function (h) { var e = this.that; var f = b(h.element); if (f.length > 0) { e.removeHandler(f, "mouseenter"); e.removeHandler(f, "mouseleave"); var g = b(h.filtericon); e.removeHandler(g, "mousedown"); e.removeHandler(g, "click"); e.removeHandler(f, "click"); e.removeHandler(f, "mousemove"); if (e.columnsreorder) { e.removeHandler(f, "mousedown.drag"); e.removeHandler(f, "mousemove.drag") } e.removeHandler(f, "dragstart"); if (f[0].columnsmenu) { var d = b(f[0].columnsmenu); e.removeHandler(d, "click"); e.removeHandler(d, "mousedown"); e.removeHandler(d, b.jqx.mobile.getTouchEventName("touchstart")) } } }, _rendercolumnheader: function (h, i, e, d) { var g = "4px"; if (d.columngroups) { g = (e / 2 - this._columnheight / 2); if (g < 0) { g = 4 } g += "px" } else { if (this.columnsheight != 25) { g = (this.columnsheight / 2 - this._columnheight / 2); if (g < 0) { g = 4 } g += "px" } } if (this.enableellipsis) { return '<div style="padding-bottom: 2px; overflow: hidden; text-overflow: ellipsis; text-align: ' + i + "; margin-left: 4px; margin-right: 2px; margin-bottom: " + g + "; margin-top: " + g + ';"><span style="text-overflow: ellipsis; cursor: default;">' + h + "</span></div>" } if (i == "center" || i == "middle") { return '<div style="padding-bottom: 2px; text-align: center; margin-top: ' + g + ';"><a href="#">' + h + "</a></div>" } var f = '<a style="margin-top: ' + g + "; float: " + i + ';" href="#">' + h + "</a>"; return f }, _renderrows: function (f, h, l) { var r = this.that; if ((this.pageable || this.groupable) && (this.autoheight || this.autorowheight)) { if (this.table != null && this.table[0].rows != null && this.table[0].rows.length < this.dataview.rows.length) { r.prerenderrequired = true } } if (!this.pageable && (this.autoheight || this.autorowheight) && (this.virtualmode || this.unboundmode)) { var p = this.source.totalrecords; if (!isNaN(p)) { if (this.table != null && this.table[0].rows != null && this.table[0].rows.length != p) { r.prerenderrequired = true } } } if ((this.autoheight || this.autorowheight) && !r.prerenderrequired) { if (this.table && this.table[0].rows) { if (this.table[0].rows.length < this.dataview.records.length) { if (this.pageable && this.table[0].rows.length < this.dataview.pagesize) { r.prerenderrequired = true } else { if (!this.pageable) { r.prerenderrequired = true } } } if (this.table[0].rows.length < this.dataview.cachedrecords.length) { if (this.pageable && this.table[0].rows.length < this.dataview.pagesize) { r.prerenderrequired = true } else { if (!this.pageable) { r.prerenderrequired = true } } } } } r._prerenderrows(f); if (r._requiresupdate) { r._requiresupdate = false; r._updatepageviews() } var q = function () { if (r._loading) { return } if (r.WinJS) { MSApp.execUnsafeLocalFunction(function () { r._rendervisualrows() }) } else { r._rendervisualrows() } if (r.virtualmode && r.showaggregates && r._updateaggregates) { r.refreshaggregates() } }; var t = b.jqx.browser.msie && b.jqx.browser.version < 10; if (this.virtualmode) { var i = function () { if (r.rendergridrows) { var w = r._startboundindex; if (w == undefined) { w = 0 } var u = w + 1 + r.dataview.pagesize; if (w != null && u != null) { var v = r.source._source ? true : false; var x = !v ? r.source.recordstartindex : r.source._source.recordstartindex; if (x != w || h == true) { if (!v) { r.source.recordstartindex = w; r.source.recordendindex = u } else { if (u >= r.source._source.totalrecords) { u = r.source._source.totalrecords; w = u - r.dataview.pagesize - 1; if (w < 0) { w = 0 } if (r.source._source.recordendindex == u && r.source._source.recordstartindex == w) { return } } r.source._source.recordstartindex = w; r.source._source.recordendindex = u } r.updatebounddata("cells") } } } }; if (this.loadondemand) { q(); i(); this.loadondemand = false } var j = this._browser == undefined ? this._isIE10() : this._browser; if (this.editable && this.editcell && !this.vScrollInstance.isScrolling() && !this.hScrollInstance.isScrolling()) { q() } else { if (this.autoheight) { q() } else { if (j || t || (navigator && navigator.userAgent.indexOf("Safari") != -1)) { if (this._scrolltimer != null) { clearTimeout(this._scrolltimer) } this._scrolltimer = setTimeout(function () { q() }, 5) } else { q() } } } } else { if (this.scrollmode == "deferred" && (this.hScrollInstance.isScrolling() || this.vScrollInstance.isScrolling())) { if (this._scrolltimer != null) { clearInterval(this._scrolltimer) } var s = this._getfirstvisualrow(); if (s != null) { var m = function (z) { if (s == null) { return "" } var y = "<table>"; var w = r.deferreddatafields; if (w == null) { if (r.columns.records.length > 0) { w = new Array(); w.push(r.columns.records[0].displayfield) } } for (var v = 0; v < w.length; v++) { var A = w[v]; var x = r._getcolumnbydatafield(A); if (x) { var u = r._getcellvalue(x, s); if (x.cellsformat != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(u)) { u = b.jqx.dataFormat.formatdate(u, x.cellsformat, r.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(u)) { u = b.jqx.dataFormat.formatnumber(u, x.cellsformat, r.gridlocalization) } } } } y += "<tr><td>" + u + "</td></tr>" } } y += "</table>"; return y }; var k = this.scrollfeedback ? this.scrollfeedback(s.bounddata) : m(s.bounddata); if (k != this._scrollelementcontent) { this._scrollelement[0].innerHTML = k; this._scrollelementcontent = k } } this._scrollelement.css("visibility", "visible"); this._scrollelementoverlay.css("visibility", "visible"); this._scrollelement.css("margin-top", -this._scrollelement.height() / 2); this._scrolltimer = setInterval(function () { if (!r.hScrollInstance.isScrolling() && !r.vScrollInstance.isScrolling()) { q(); r._scrollelement.css("visibility", "hidden"); r._scrollelementoverlay.css("visibility", "hidden"); clearInterval(r._scrolltimer); if (s) { r.ensurerowvisible(s.visibleindex) } } }, 100); return } if (navigator && navigator.userAgent.indexOf("Chrome") == -1 && navigator.userAgent.indexOf("Safari") != -1) { this._updatedelay = 1 } if (this.touchDevice != undefined && this.touchDevice == true) { this._updatedelay = 5 } var j = this._browser == undefined ? this._isIE10() : this._browser; if (j || t) { this._updatedelay = 5 } if ((j) && this.hScrollInstance.isScrolling()) { q(); return } if (b.jqx.browser.mozilla && this._updatedelay == 0 && (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling())) { this._updatedelay = 0 } if (this.updatedelay != null) { this._updatedelay = this.updatedelay } if (this._updatedelay == 0) { q() } else { var d = this._jqxgridrendertimer; if (d != null) { clearTimeout(d) } if (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling()) { if (this._updatedelay) { d = setTimeout(function () { q() }, this._updatedelay) } else { d = null; q() } this._jqxgridrendertimer = d } else { this._jqxgridrendertimer = d; q() } } } if (r.autorowheight && !r.autoheight) { if (this._pageviews.length > 0) { var e = this._gettableheight(); var n = this._pageviews[0].height; if (n > e) { if (this.pageable && this.gotopage) { n = this._pageviews[0].height; if (n < 0) { n = this._pageviews[0].height } } if (this.vScrollBar.css("visibility") != "visible") { this.vScrollBar.css("visibility", "visible") } if (n <= e || this.autoheight) { this.vScrollBar.css("visibility", "hidden") } if (n - e > 0) { if (this.scrollmode != "deferred") { var o = n - e; var g = this.vScrollInstance.max; this.vScrollBar.jqxScrollBar({ max: o }); if (Math.round(o) != Math.round(g)) { this.vScrollBar.jqxScrollBar({ value: 0 }) } } } else { this.vScrollBar.jqxScrollBar({ value: 0, max: n }) } } else { if (!this._loading) { this.vScrollBar.css("visibility", "hidden") } this.vScrollBar.jqxScrollBar({ value: 0 }) } this._arrange(); if (this.virtualsizeinfo) { this.virtualsizeinfo.virtualheight = n } } } }, scrolling: function () { var e = this.vScrollInstance.isScrolling(); var d = this.hScrollInstance.isScrolling(); return { vertical: e, horizontal: d} }, _renderhorizontalscroll: function () { var t = this.hScrollInstance; var u = t.value; if (this.hScrollBar.css("visibility") === "hidden") { t.value = 0; u = 0 } var k = parseInt(u); if (this.table == null) { return } var q = this.table[0].rows.length; var p = this.columnsrow; var r = this.groupable && this.groups.length > 0 ? this.groups.length : 0; var l = this.columns.records.length - r; var f = this.columns.records; var n = this.dataview.rows.length == 0; if (this.rtl) { if (this.hScrollBar.css("visibility") != "hidden") { k = t.max - k } } if (n && !this._haspinned) { for (var w = 0; w < q; w++) { var s = this.table[0].rows[w]; for (var v = 0; v < r + l; v++) { var d = s.cells[v]; if (d != undefined) { var g = f[v]; if (g.pinned) { d.style.marginLeft = k + "px"; if (w == 0) { var e = p[0].cells[v]; e.style.marginLeft = k + "px" } } } } } this.table[0].style.marginLeft = -k + "px"; p[0].style.marginLeft = -k + "px" } else { if (this._haspinned || this._haspinned == undefined) { for (var w = 0; w < q; w++) { var s = this.table[0].rows[w]; for (var v = 0; v < r + l; v++) { var d = s.cells[v]; if (d != undefined) { var g = f[v]; if (g.pinned) { if (k == 0 && d.style.marginLeft == "") { continue } var h = null; var x = null; var o = null; if (this.showeverpresentrow && this.addnewrowtop) { if (this.addnewrowtop[0].cells) { o = this.addnewrowtop[0].cells[v] } } if (this.showfilterrow && this.filterrow) { if (this.filterrow[0].cells) { x = this.filterrow[0].cells[v] } } if (this.showaggregates) { if (this.statusbar[0].cells) { h = this.statusbar[0].cells[v] } } if (!this.rtl) { d.style.marginLeft = k + "px"; if (w == 0) { var e = p[0].cells[v]; e.style.marginLeft = k + "px"; if (h) { h.style.marginLeft = k + "px" } if (x) { x.style.marginLeft = k + "px" } if (o) { o.style.marginLeft = k + "px" } } } else { d.style.marginLeft = -parseInt(u) + "px"; if (w == 0) { var e = p[0].cells[v]; e.style.marginLeft = -parseInt(u) + "px"; if (h) { h.style.marginLeft = -parseInt(u) + "px" } if (x) { x.style.marginLeft = -parseInt(u) + "px" } if (o) { o.style.marginLeft = -parseInt(u) + "px" } } } } } } } this.table[0].style.marginLeft = -k + "px"; p[0].style.marginLeft = -k + "px" } else { if (this._haspinned == false) { this.table[0].style.marginLeft = -k + "px"; p[0].style.marginLeft = -k + "px" } } } if (this.showaggregates) { if (this.statusbar[0].cells) { var m = 0; if (this.rtl) { if (this.vScrollBar.css("visibility") != "hidden") { if (this.hScrollBar.css("visibility") != "hidden") { m = 2 + parseInt(this.hScrollBar.css("left")) } } } this.statusbar[0].style.marginLeft = -k + m + "px" } } if (this.showfilterrow && this.filterrow) { if (this.filterrow[0].cells) { this.filterrow[0].style.marginLeft = -k + "px" } } if (this.showeverpresentrow && this.addnewrowtop) { if (this.addnewrowtop[0].cells) { this.addnewrowtop[0].style.marginLeft = -k + "px" } } }, _updaterowdetailsvisibility: function () { if (this.rowdetails) { for (var d = 0; d < this._rowdetailselementscache.length; d++) { b(this._rowdetailselementscache[d]).css("display", "none") } } }, _getvisualcolumnsindexes: function (e, n, i, m, d, l) { if (this.rowdetails || this.rtl || this.editcell || (this.width && this.width.toString().indexOf("%") >= 0) || this.exporting) { return { start: 0, end: i + m} } var f = 0; var k = -1; var g = i + m; var o = false; if (this.autorowheight) { return { start: 0, end: i + m} } if (!d) { for (var h = 0; h < i + m; h++) { var p = h; if (!o) { if (this.columns.records[h].pinned && l) { o = true } } if (!this.columns.records[h].hidden) { f += this.columns.records[h].width } if (f >= e && k == -1) { k = h } if (f > n + e) { g = h; break } } } g++; if (g > i + m) { g = i + m } if (k == -1 || o) { k = 0 } return { start: k, end: g} }, _getvirtualcolumnsindexes: function (e, m, i, l, d) { if (this.rtl || this.editcell || this.exporting) { return { start: 0, end: i + l} } var f = 0; var k = -1; var g = i + l; if (this.autorowheight) { return { start: 0, end: i + l} } if (!d) { for (var h = 0; h < i + l; h++) { var n = h; if (!this.columns.records[h].hidden) { f += this.columns.records[h].width } if (f >= e && k == -1) { k = h } if (f > m + e) { g = h; break } } } g++; if (g > i + l) { g = i + l } if (k == -1) { k = 0 } return { start: k, end: g} }, _getfirstvisualrow: function () { var e = this.vScrollInstance; var g = e.value; var f = parseInt(g); if (this._pagescache.length == 0) { this.dataview.updateview(); this._loadrows() } if (this.vScrollBar[0].style.visibility != "visible") { f = 0 } if (!this.pageable) { var d = this._findvisiblerow(f, this._pageviews); if (d == -1) { return null } if (d != this.dataview.pagenum) { this.dataview.pagenum = d; this.dataview.updateview(); this._loadrows() } else { if (!this._pagescache[this.dataview.pagenum]) { this._loadrows() } } } var h = this._findvisiblerow(f, this._pagescache[this.dataview.pagenum]); var i = this._pagescache[this.dataview.pagenum]; if (i && i[0]) { return i[h] } }, _rendervisualrows: function () { if (!this.virtualsizeinfo) { return } var Y = this.vScrollInstance; var p = this.hScrollInstance; var j = Y.value; var C = p.value; var o = parseInt(j); var l = parseInt(C); var x = this._gettableheight(); var J = this._hostwidth != undefined ? this._hostwidth : this.host.width(); if (this.hScrollBar[0].style.visibility == "visible") { x += 29 } if (this.scrollmode == "deferred" && this._newmax != 0) { if (o > this._newmax && this._newmax != null) { o = this._newmax } } var ak = Y.isScrolling() || p.isScrolling() || this._keydown; var D = this.groupable && this.groups.length > 0; this.visiblerows = new Array(); this.hittestinfo = new Array(); if (this.editcell && this.editrow == undefined) { this._hidecelleditor(false) } if (this.editrow != undefined) { this._hideeditors() } if (this.virtualmode && !this.pageable) { this._pagescache = new Array() } if (this._pagescache.length == 0) { this.dataview.updateview(); this._loadrows() } if (this.vScrollBar[0].style.visibility == "hidden") { o = 0 } if (!this.pageable) { var L = this._findvisiblerow(o, this._pageviews); if (L == -1) { this._clearvisualrows(); this._renderemptyrow(); this._updaterowdetailsvisibility(); return } if (L != this.dataview.pagenum) { this.dataview.pagenum = L; this.dataview.updateview(); this._loadrows() } else { if (!this._pagescache[this.dataview.pagenum]) { this._loadrows() } } } var am = this.groupable && this.groups.length > 0 ? this.groups.length : 0; if (!this.columns.records) { return } var r = this.columns.records.length - am; var ac = this._findvisiblerow(o, this._pagescache[this.dataview.pagenum]); var M = this._pagescache[this.dataview.pagenum]; var S = ac; if (S < 0) { S = 0 } var af = 0; var ab = 0; var Q = 0; var e = 0; var U = this.virtualsizeinfo.visiblerecords; var P = this.groupable ? this.groups.length : 0; var B = this.toTP("jqx-grid-cell") + " " + this.toTP("jqx-item"); if (this.rtl) { B += " " + this.toTP("jqx-grid-cell-rtl") } if ((this.autoheight || this.autorowheight) && this.pageable) { if (!this.groupable || (this.groupable && this.groups.length === 0)) { U = this.dataview.pagesize } } if (D) { B = " " + this.toTP("jqx-grid-group-cell") } if (this.isTouchDevice()) { B += " " + this.toTP("jqx-touch") } if (this.autorowheight) { B += " jqx-grid-cell-wrap" } var O = this.rowsheight; var G = S; var al = this._rendercell; var u = true; var q = this._getvisualcolumnsindexes(l, J, am, r, D, true); var d = q.start; var aa = q.end; var t = this._getvirtualcolumnsindexes(l, J, am, r, D); var I = t.start; var h = t.end; var ae = b.jqx.browser.msie && b.jqx.browser.version < 9; if ((this.autoheight || this.pageable) && this.autorowheight) { if (this._pageviews[0]) { this._oldpageviewheight = this._pageviews[0].height } } if (this.autorowheight) { S = 0 } if (S >= 0) { this._updaterowdetailsvisibility(); this._startboundindex = M != null ? M[S].bounddata.boundindex : 0; this._startvisibleindex = M != null ? M[S].bounddata.visibleindex : 0; var A = this.table[0].rows; if (this.columns.records.length > 10 && this.enablecolumnsvirtualization) { var H = function (i) { if (i.parentNode && i.parentNode.nodeName != "#document-fragment") { return true } return false }; for (var ag = 0; ag < A.length; ag++) { var k = A[ag]; for (var V = 0; V < I; V++) { var ai = V; if (this.columns.records[ai].pinned) { continue } if (this.columns.records[ai].datafield == null) { continue } var ah = k.cells[ai]; if (H(ah)) { ah.parentNode.removeChild(ah) } var R = this.columns.records[ai].element; if (H(R)) { this.columnsrow[0].removeChild(R) } if (this.filterrow) { if (H(this.filterrow[0].cells[ai]) && this.columns.records[ai].filterable) { this.filterrow[0].cells[ai].parentNode.removeChild(this.filterrow[0].cells[ai]) } } } for (var V = h; V < this.columns.records.length; V++) { var ai = V; if (this.columns.records[ai].pinned) { continue } if (this.columns.records[ai].datafield == null) { continue } var ah = k.cells[ai]; if (H(ah)) { ah.parentNode.removeChild(ah) } var R = this.columns.records[ai].element; if (H(R)) { this.columnsrow[0].removeChild(R) } if (this.filterrow) { if (H(this.filterrow[0].cells[ai]) && this.columns.records[ai].filterable) { this.filterrow[0].cells[ai].parentNode.removeChild(this.filterrow[0].cells[ai]) } } } for (var V = I; V < h; V++) { var ai = V; var ah = k.cells[ai]; if (!H(ah)) { k.appendChild(ah) } var R = this.columns.records[ai].element; if (!H(R)) { this.columnsrow[0].appendChild(R) } if (this.filterrow && !H(this.filterrow[0].cells[ai]) && this.columns.records[ai].filterable) { this.filterrow[0].firstChild.appendChild(this.filterrow[0].cells[ai]) } } } } for (var n = 0; n < U && ab < U; n++) { var ad = M != undefined ? M[S + n] : null; if (ad == null) { S = -n; if (this._pagescache[this.dataview.pagenum + 1]) { M = this._pagescache[this.dataview.pagenum + 1]; this.dataview.pagenum++ } else { var s = this._pageviews.length; do { if (this.dataview.pagenum < this._pageviews.length - 1) { this.dataview.pagenum++; M = undefined; if (this._pageviews[this.dataview.pagenum].height > 0) { this.dataview.updateview(); this._loadrows(); M = this._pagescache[this.dataview.pagenum] } } else { M = undefined; break } } while (M == undefined && this.dataview.pagenum < s) } if (M != undefined) { ad = M[S + n] } } if (ad != null) { if (ad.hidden) { continue } this._endboundindex = this._startboundindex + n; this._endvisibleindex = this._startvisibleindex + n; if (n == 0) { var m = Math.abs(o - ad.top); this.table[0].style.top = -m + "px"; e = -m } var k = this.table[0].rows[ab]; if (!k) { continue } if (parseInt(k.style.height) != ad.height) { k.style.height = parseInt(ad.height) + "px" } Q += ad.height; var X = this.rowdetails && ad.rowdetails; var w = !ad.rowdetailshidden; if (X && w) { k.style.height = parseInt(ad.height - ad.rowdetailsheight) + "px"; U++ } var K = this._isrowselected(u, ad); for (var V = d; V < aa; V++) { var ai = V; this._rendervisualcell(al, B, K, X, w, D, P, k, ad, ai, ab, ak) } if (ad.group != undefined && this._rendergroup) { this._rendergroup(P, k, ad, am, r, ab, J) } if (this.autorowheight && (this.autoheight || this.pageable)) { var O = this.rowsheight; for (var V = d; V < aa; V++) { if (this.editable && this.editcell && this.editcell.column == this.columns.records[V].datafield && this.editcell.row == this.getboundindex(ad)) { if (this.editcell.editor) { O = Math.max(O, this.editcell.editor.height()); continue } } if (k.cells[V].firstChild) { O = Math.max(O, 8 + parseInt(k.cells[V].firstChild.offsetHeight)) } } k.style.height = parseInt(O) + "px"; this.heights[this._startboundindex + n] = O; if (X && w) { O += ad.rowdetailsheight } ad.height = O } this.visiblerows[this.visiblerows.length] = ad; this.hittestinfo[this.hittestinfo.length] = { row: ad, visualrow: k, details: false }; if (X && w) { ab++; var k = this.table[0].rows[ab]; this._renderrowdetails(B, k, ad, am, r, ab); this.visiblerows[this.visiblerows.length] = ad; this.hittestinfo[this.hittestinfo.length] = { row: ad, visualrow: k, details: true} } if (!this.autorowheight) { if (Q + e >= x) { break } } } else { cansetheight = true; this._clearvisualrow(l, D, ab, am, r); if (Q + af + e <= x) { af += O } } ab++ } this._horizontalvalue = l; if (af > 0) { if (this.vScrollBar[0].style.visibility == "visible") { var aj = parseInt(this.table.css("top")); var F = this._pageviews[this._pageviews.length - 1]; var v = Y.max; var E = F.top + F.height - x; if (this.hScrollBar.css("visibility") == "visible") { E += this.scrollbarsize + 20 } if (v != E && !this.autorowheight) { if (E >= 0) { if (this.scrollmode != "deferred") { Y.max = E; Y.setPosition(Y.max) } else { if (this._newmax != E) { this._newmax = E; this._rendervisualrows() } } } } } } } if ((this.autoheight || this.pageable) && this.autorowheight) { this._pagescache = new Array(); var W = 0; var g = 0; for (var ag = 0; ag < this.visiblerows.length; ag++) { var z = this.visiblerows[ag]; z.top = W; W += z.height; g += z.height; var X = this.rowdetails && z.rowdetails; var w = !z.rowdetailshidden; var k = this.table[0].rows[ag]; if (X && w) { ag++ } for (var V = d; V < aa; V++) { var Z = this.columns.records[V]; if (!Z.hidden) { if (!Z.cellsrenderer) { var N = k.cells[V]; var f = 0; if (N.firstChild) { var f = (z.height - parseInt(N.firstChild.offsetHeight) - 8) / 2; if (X && w) { var f = (z.height - z.rowdetailsheight - b(N.firstChild).height() - 8) / 2 } } else { var f = (z.height - parseInt(b(N).height()) - 8) / 2 } if (f >= 0) { f = parseInt(f) + 4; if (N.firstChild) { if (N.firstChild.className.indexOf("jqx-grid-groups-row") == -1) { if (Z.columntype != "checkbox" && Z.columntype != "button") { if (this.editable && this.editcell && this.editcell.column == Z.datafield && this.editcell.row == this.getboundindex(z)) { continue } N.firstChild.style.marginTop = f + "px" } } } } } } } } if (this._pageviews[0]) { this._pageviews[0].height = g } this._arrange() } this._renderemptyrow(); if (this.toCompile && this.toCompile.length > 0) { var T = this; b.each(T.toCompile, function (y, an) { if (this.compiled) { return true } var i = this.cell; if (!i) { return true } if (b.jqx.angularCompile) { b.jqx.angularCompile(i, "<div>" + this.value + "</div>") } this.compiled = true }) } }, _hideemptyrow: function () { if (!this.showemptyrow) { return } if (!this.table) { return } if (!this.table[0].rows) { return } var f = this.table[0].rows[0]; if (!f) { return } var g = false; for (var e = 0; e < f.cells.length; e++) { var d = b(f.cells[e]); if (d.css("display") != "none" && !g) { if (d.width() == this.host.width() || d.text() == this.gridlocalization.emptydatastring) { d[0].checkbox = null; d[0].button = null; g = true; d[0].innerHTML = "" } } } }, _renderemptyrow: function () { if (this._loading) { return } if (this.dataview.records.length == 0 && this.showemptyrow) { var l = false; var e = this.toTP("jqx-grid-cell"); if (this.table && this.table.length > 0 && this.table[0].rows && this.table[0].rows.length > 0) { var k = this.table[0].rows[0]; this.table[0].style.top = "0px"; for (var f = 0; f < k.cells.length; f++) { var d = b(k.cells[f]); if (d.css("display") != "none" && !l) { d[0].checkbox = null; d[0].button = null; d[0].className = e; l = true; d[0].innerHTML = ""; var g = b("<span style='white-space: nowrap; float: left; margin-left: 50%; position: relative;'></span>"); g.text(this.gridlocalization.emptydatastring); d.append(g); var j = 0; if (!this.oldhscroll) { j = parseInt(this.table[0].style.marginLeft); if (this.rtl) { d.css("z-index", 999); d.css("overflow", "visible") } } g.css("left", -j - (g.width() / 2)); g.css("top", this._gettableheight() / 2 - g.height() / 2); if (b.jqx.browser.msie && b.jqx.browser.version < 8) { g.css("margin-left", "0px"); g.css("left", this.host.width() / 2 - g.width() / 2) } var h = Math.abs(parseInt(this.table[0].style.top)); if (isNaN(h)) { h = 0 } b(k).height(this._gettableheight() + h); d.css("margin-left", "0px"); d.width(this.host.width()); if (this.table.width() < this.host.width()) { this.table.width(this.host.width()) } } d.addClass(this.toThemeProperty("jqx-grid-empty-cell")) } } } }, _clearvisualrows: function () { var e = this.virtualsizeinfo.visiblerecords; var f = this.hScrollInstance; var d = f.value; var g = parseInt(d); var i = this.groupable && this.groups.length > 0; if (!this.columns.records) { return } for (var h = 0; h < e; h++) { this._clearvisualrow(g, i, h, 0, this.columns.records.length) } }, _iscellselected: function (j, i, g) { var f = false; var e = 0; if (this.virtualmode && this.pageable && this.groupable) { if (this.groups.length > 0) { e = this.dataview.pagesize * this.dataview.pagenum } } if (this.groups.length > 0 && this.pageable && this.groupable) { var d = this.getrowboundindexbyid(i.bounddata.uid); for (var h in this.selectedcells) { if (h == d + "_" + g) { f = true } } return f } if (j && i.bounddata != null) { if (this.selectionmode != "singlerow") { if (this.dataview.filters.length > 0) { if (!this.virtualmode && i.bounddata.dataindex != undefined) { for (var h in this.selectedcells) { if (h == e + i.bounddata.dataindex + "_" + g) { f = true } } } else { for (var h in this.selectedcells) { if (h == e + i.bounddata.boundindex + "_" + g) { f = true } } } } else { for (var h in this.selectedcells) { if (h == e + i.bounddata.boundindex + "_" + g) { f = true; break } } } } else { if (this.dataview.filters.length > 0) { if (!this.virtualmode && i.bounddata.dataindex != undefined) { for (var h in this.selectedcells) { if (h == e + i.bounddata.dataindex + "_" + g) { f = true; break } } } else { for (var h in this.selectedcells) { if (h == e + i.bounddata.boundindex + "_" + g) { f = true; break } } } } else { for (var h in this.selectedcells) { if (h == e + i.bounddata.boundindex == this.selectedrowindex) { f = true; break } } } } } return f }, _isrowselected: function (h, g) { var f = false; var e = 0; if (this.virtualmode && this.pageable && this.groupable) { if (this.groups.length > 0) { e = this.dataview.pagesize * this.dataview.pagenum } } if (this.groupable && this.groups.length > 0 && this.pageable) { var d = this.getrowboundindexbyid(g.bounddata.uid); if (d == undefined || d == -1) { return false } if (this.selectedrowindexes.indexOf(d) != -1) { f = true } if (!f) { f = d == this.selectedrowindex && this.selectedrowindex != -1 } return f } if (h && g.bounddata != null) { if (this.selectionmode != "singlerow") { if (this.dataview.filters.length > 0) { if (!this.virtualmode && g.bounddata.dataindex != undefined) { if (this.selectedrowindexes.indexOf(e + g.bounddata.dataindex) != -1) { f = true } } else { if (this.selectedrowindexes.indexOf(e + g.bounddata.boundindex) != -1) { f = true } } } else { if (this.selectedrowindexes.indexOf(e + g.bounddata.boundindex) != -1) { f = true } } } else { if (this.dataview.filters.length > 0) { if (!this.virtualmode && g.bounddata.dataindex != undefined) { if (this.selectedrowindexes.indexOf(e + g.bounddata.dataindex) != -1) { f = true } } else { if (this.selectedrowindexes.indexOf(e + g.bounddata.boundindex) != -1) { f = true } } } else { if (e + g.bounddata.boundindex == this.selectedrowindex) { f = true } } } } return f }, _rendervisualcell: function (z, i, p, k, t, x, j, q, d, h, s, n) { var f = null; var g = this.columns.records[h]; if (g.hidden) { var e = q.cells[h]; e.innerHTML = ""; return } cellvalue = this._getcellvalue(g, d); var e = q.cells[h]; var w = i; if (this.selectionmode.indexOf("cell") != -1) { if (this.dataview.filters.length > 0) { if (this.selectedcells[d.bounddata.dataindex + "_" + g.datafield]) { p = true } else { p = false } } else { if (this.selectedcells[d.boundindex + "_" + g.datafield]) { p = true } else { p = false } } if (this.editcell) { if (this.editcell.row === d.boundindex && this.editcell.column === g.datafield) { if (g.columntype !== "checkbox") { p = false } } } if (this.virtualmode || (this.groupable && this.groups.length > 0 && this.pageable)) { p = this._iscellselected(true, d, g.datafield) } } if (g.cellclassname != "" && g.cellclassname) { if (typeof g.cellclassname == "string") { w += " " + g.cellclassname } else { var m = g.cellclassname(this.getboundindex(d), g.datafield, cellvalue, d.bounddata); if (m) { w += " " + m } } } var o = this.showsortcolumnbackground && this.sortcolumn && g.displayfield == this.sortcolumn; if (o) { w += " " + this.toTP("jqx-grid-cell-sort") } if (g.filter && this.showfiltercolumnbackground) { w += " " + this.toTP("jqx-grid-cell-filter") } if ((g.pinned && this.showpinnedcolumnbackground) || g.grouped) { if (x) { w += " " + this.toTP("jqx-grid-cell-pinned") } else { w += " " + this.toTP("jqx-grid-cell-pinned") } } if (this.altrows && d.group == undefined) { var y = d.visibleindex; if (y >= this.altstart) { if ((this.altstart + y) % (1 + this.altstep) == 0) { if (!o) { w += " " + this.toTP("jqx-grid-cell-alt") } else { w += " " + this.toTP("jqx-grid-cell-sort-alt") } if (g.filter && this.showfiltercolumnbackground) { w += " " + this.toTP("jqx-grid-cell-filter-alt") } if (g.pinned && this.showpinnedcolumnbackground) { w += " " + this.toTP("jqx-grid-cell-pinned-alt") } } } } if (h <= j) { if (x || this.rowdetails) { var u = b(e); var l = this.columns.records[h].width; if (e.style.width != parseInt(l) + "px") { u.width(l) } } } else { if (x || this.rowdetails) { if (this._hiddencolumns) { var u = b(e); var l = this.columns.records[h].width; if (parseInt(e.style.width) != l) { u.width(l) } } } } var v = true; if (this.rowdetails && k) { if (t && !x) { w += " " + this.toTP("jqx-grid-details-cell") } else { if (x) { w += " " + this.toTP("jqx-grid-group-details-cell") } } if (this.showrowdetailscolumn) { if (!this.rtl) { if (d.group == undefined && h == j) { var r = this.toThemeProperty("jqx-icon-arrow-down"); if (t) { w += " " + this.toTP("jqx-grid-group-expand"); w += " " + r } else { w += " " + this.toTP("jqx-grid-group-collapse"); var r = this.toThemeProperty("jqx-icon-arrow-right"); w += " " + r } v = false; e.title = ""; e.innerHTML = ""; if (e.className != w) { e.className = w } return } } else { if (d.group == undefined && h == q.cells.length - j - 1) { var r = this.toThemeProperty("jqx-icon-arrow-down"); if (t) { w += " " + this.toTP("jqx-grid-group-expand-rtl"); w += " " + r } else { w += " " + this.toTP("jqx-grid-group-collapse-rtl"); var r = this.toThemeProperty("jqx-icon-arrow-left"); w += " " + r } v = false; e.title = ""; e.innerHTML = ""; if (e.className != w) { e.className = w } return } } } } if (p && v && h >= j) { w += " " + this.toTP("jqx-grid-cell-selected"); w += " " + this.toTP("jqx-fill-state-pressed") } if (e.className != w) { e.className = w } if (d.group != undefined) { cellvalue = ""; e.title = ""; e.innerHTML = ""; return } z(this, g, d, cellvalue, e, n) }, _rendercell: function (u, f, j, s, d, q) { var g = s + "_" + f.visibleindex; if (f.columntype == "number" || f.cellsrenderer != null) { var g = j.uniqueid + "_" + f.visibleindex } if (f.columntype == "number") { s = j.visibleindex } if (u.editcell && u.editrow == undefined) { if (u.editmode == "selectedrow" && f.editable && u.editable) { if (u.editcell.row == u.getboundindex(j)) { if (u._showcelleditor) { if (!u.hScrollInstance.isScrolling() && !u.vScrollInstance.isScrolling()) { u._showcelleditor(u.editcell.row, f, d, u.editcell.init) } else { u._showcelleditor(u.editcell.row, f, d, false, false) } return } } } else { if (u.editcell.row == u.getboundindex(j) && u.editcell.column == f.datafield) { u.editcell.element = d; if (u.editcell.editing) { if (u._showcelleditor) { if (!u.hScrollInstance.isScrolling() && !u.vScrollInstance.isScrolling()) { u._showcelleditor(u.editcell.row, f, u.editcell.element, u.editcell.init) } else { u._showcelleditor(u.editcell.row, f, u.editcell.element, u.editcell.init, false) } return } } } } } var r = u._defaultcellsrenderer(s, f); var n = u._cellscache[g]; if (n) { if (f.columntype == "checkbox") { if (u.host.jqxCheckBox) { if (s === "") { s = null } var m = d.innerHTML.toString().length == 0; if (d.checkbox && !u.groupable && !m) { d.checkboxrow = u.getboundindex(j); if (s == "") { s = false } if (s == "1") { s = true } if (s == "0") { s = false } if (s == 1) { s = true } if (s == 0) { s = false } if (s == "true") { s = true } if (s == "false") { s = false } if (s == null && !f.threestatecheckbox) { s = false } if (f.checkboxcolumn) { s = false; if (u.dataview.filters.length > 0 && !u.virtualmode && j.bounddata.dataindex != undefined) { if (u.selectedrowindexes.indexOf(j.bounddata.dataindex) != -1) { s = true } } else { if (u.selectedrowindexes.indexOf(j.bounddata.boundindex) != -1) { s = true } } } if (!u.disabled) { if (d.checkboxinstance) { d.checkboxinstance._setState(s) } else { d.checkbox.jqxCheckBox("_setState", s) } } } else { u._rendercheckboxcell(u, d, f, j, s) } if (f.cellsrenderer != null) { var h = f.cellsrenderer(u.getboundindex(j), f.datafield, s, r, f.getcolumnproperties(), j.bounddata); if (h != undefined) { d.innerHTML = h } } return } } else { if (f.columntype == "button") { if (u.host.jqxButton) { if (s == "") { s = false } if (f.cellsrenderer != null) { s = f.cellsrenderer(u.getboundindex(j), f.datafield, s, r, f.getcolumnproperties(), j.bounddata) } if (d.innerHTML == "") { d.buttonrow = u.getboundindex(j); d.button = null; u._renderbuttoncell(u, d, f, j, s) } if (d.button && !u.groupable) { d.buttonrow = u.getboundindex(j); d.button.val(s) } else { u._renderbuttoncell(u, d, f, j, s) } return } } } if (f.createwidget) { if (d.innerHTML == "") { d.widgetrow = u.getboundindex(j); d.widget = null; u._renderwidgetcell(u, d, f, j, s) } if (d.widget && !u.groupable) { d.widgetrow = u.getboundindex(j); if (f.initwidget) { f.initwidget(u.getboundindex(j), f.datafield, s, d.firstChild) } else { throw new Error("jqxGrid: 'initwidget' column function is not implemented. Please, implement 'initwidget'") } } else { u._renderwidgetcell(u, d, f, j, s) } return } var t = n.element; if (f.cellsrenderer != null || (d.childNodes && d.childNodes.length == 0) || u.groupable || u.rowdetails) { if (d.innerHTML != t) { d.innerHTML = t } } else { if (d.innerHTML.indexOf("editor") >= 0) { d.innerHTML = t } else { if (q) { var o = t.indexOf(">"); var l = t.indexOf("</"); var p = t.substring(o + 1, l); var i = d.childNodes[0]; if (p.indexOf(">") >= 0) { d.innerHTML = t } else { if (i.childNodes[0]) { if (p != i.childNodes[0].nodeValue) { if (p.indexOf("&") >= 0) { d.innerHTML = t } else { i.childNodes[0].nodeValue = p } } } else { var e = document.createTextNode(p); i.appendChild(e) } } } else { if (d.innerHTML != t) { d.innerHTML = t } } } } if (u.enabletooltips && f.enabletooltips) { d.title = n.title } return } if (f.columntype == "checkbox") { u._rendercheckboxcell(u, d, f, j, s); u._cellscache[g] = { element: "", title: s }; if (u.enabletooltips && f.enabletooltips) { d.title = s } return } else { if (f.columntype == "button") { if (f.cellsrenderer != null) { s = f.cellsrenderer(u.getboundindex(j), f.datafield, s, r, f.getcolumnproperties(), j.bounddata) } u._renderbuttoncell(u, d, f, j, s); u._cellscache[g] = { element: "", title: s }; if (u.enabletooltips && f.enabletooltips) { d.title = s } return } else { if (f.columntype == "number") { s = j.visibleindex } } } if (f.createwidget) { if (f.cellsrenderer != null) { s = f.cellsrenderer(u.getboundindex(j), f.datafield, s, r, f.getcolumnproperties(), j.bounddata) } u._renderwidgetcell(u, d, f, j, s); u._cellscache[g] = { element: "", title: s }; if (u.enabletooltips && f.enabletooltips) { d.title = s } return } var t = null; if (f.cellsrenderer != null) { t = f.cellsrenderer(u.getboundindex(j), f.datafield, s, r, f.getcolumnproperties(), j.bounddata); if (t && (t.indexOf("<jqx-") >= 0 || t.indexOf(" ng-") >= 0)) { if (u.toCompile) { u.toCompile.push({ cell: d, value: t, row: u.getboundindex(j) }) } return } } else { t = r } if (t == null) { t = r } var k = s; if (u.enabletooltips && f.enabletooltips) { if (f.cellsformat != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(s)) { k = b.jqx.dataFormat.formatdate(k, f.cellsformat, u.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(s)) { k = b.jqx.dataFormat.formatnumber(k, f.cellsformat, u.gridlocalization) } } } } d.title = k } if (u.WinJS) { b(d).html(t) } else { if (d.innerHTML != t) { d.innerHTML = t } } u._cellscache[g] = { element: d.innerHTML, title: k }; return true }, _isIE10: function () { if (this._browser == undefined) { var e = b.jqx.utilities.getBrowser(); if (e.browser == "msie" && parseInt(e.version) > 9) { this._browser = true } else { this._browser = false; if (e.browser == "msie") { var d = "Browser CodeName: " + navigator.appCodeName + ""; d += "Browser Name: " + navigator.appName + ""; d += "Browser Version: " + navigator.appVersion + ""; d += "Platform: " + navigator.platform + ""; d += "User-agent header: " + navigator.userAgent + ""; if (d.indexOf("Zune 4.7") != -1) { this._browser = true } } } } return this._browser }, _renderinlinecell: function (f, d, e, i, g) { var h = b(d); d.innerHTML = '<div style="position: absolute;"></div>' }, _rendercheckboxcell: function (g, e, f, k, h) { if (g.host.jqxCheckBox) { var j = b(e); if (h === "") { if (f.threestatecheckbox) { h = null } else { h = false } } if (h === null && !f.threestatecheckbox) { h = false } if (h == "1") { h = true } if (h == "0") { h = false } if (h == 1) { h = true } if (h == 0) { h = false } if (h == "true") { h = true } if (h == "false") { h = false } if (f.checkboxcolumn) { h = false; var d = this.getboundindex(k); if (this.selectedrowindexes.indexOf(d) != -1) { h = true } } if (j.find(".jqx-checkbox").length == 0) { e.innerHTML = '<div style="position: absolute; top: 50%; left: 50%; margin-top: -7px; margin-left: -10px;"></div>'; b(e.firstChild).jqxCheckBox({ disabled: g.disabled, _canFocus: false, hasInput: false, hasThreeStates: f.threestatecheckbox, enableContainerClick: false, animationShowDelay: 0, animationHideDelay: 0, locked: true, theme: g.theme, checked: h }); if (this.editable && f.editable) { b(e.firstChild).jqxCheckBox({ locked: false }) } if (f.checkboxcolumn) { b(e.firstChild).jqxCheckBox({ locked: false }) } e.checkbox = b(e.firstChild); e.checkboxinstance = e.checkbox.data().jqxCheckBox.instance; e.checkboxrow = this.getboundindex(k); var i = b.data(e.firstChild, "jqxCheckBox").instance; i.updated = function (l, s, m) { if (g.disabled) { s = m; var p = g.table[0].rows.length; var r = g._getcolumnindex(f.datafield); for (var o = 0; o < p; o++) { var n = g.table[0].rows[o].cells[r].firstChild; if (n) { b(n).jqxCheckBox({ disabled: g.disabled }) } } } if (f.editable && !g.disabled) { var p = g.table[0].rows.length; var r = g._getcolumnindex(f.datafield); if (g.editrow == undefined) { if (f.cellbeginedit) { var u = f.cellbeginedit(e.checkboxrow, f.datafield, f.columntype, !s); if (u == false) { g.setcellvalue(e.checkboxrow, f.datafield, !s, true); return } } if (f.cellvaluechanging) { var t = f.cellvaluechanging(e.checkboxrow, f.datafield, f.columntype, m, s); if (t != undefined) { s = t } } if (g.editmode !== "selectedrow") { for (var o = 0; o < p; o++) { var n = g.table[0].rows[o].cells[r].firstChild; if (n) { b(n).jqxCheckBox("destroy") } } } if (g.editcell && g.editcell.validated == false) { g.setcellvalue(e.checkboxrow, f.datafield, !s, true) } else { if (g.editmode !== "selectedrow" || g.editcell == null) { var q = g.getrowdata(e.checkboxrow); g._raiseEvent(17, { rowindex: e.checkboxrow, row: q, datafield: f.datafield, value: m, columntype: f.columntype }); g.setcellvalue(e.checkboxrow, f.datafield, s, true); g._raiseEvent(18, { rowindex: e.checkboxrow, row: q, datafield: f.datafield, oldvalue: m, value: s, columntype: f.columntype }) } else { g.setcellvalue(e.checkboxrow, f.datafield, s, false, false) } } if (f.cellendedit) { f.cellendedit(e.checkboxrow, f.datafield, f.columntype, s) } } } else { if (f.checkboxcolumn) { if (g.editcell) { g.endcelledit(g.editcell.row, g.editcell.column, false, true) } if (!g.disabled) { if (s) { g.selectrow(e.checkboxrow) } else { g.unselectrow(e.checkboxrow) } if (g.autosavestate) { if (g.savestate) { g.savestate() } } } } } } } else { e.checkboxrow = this.getboundindex(k); b(e.firstChild).jqxCheckBox("_setState", h, !(this.editable && f.editable) && !f.checkboxcolumn) } } }, _renderwidgetcell: function (f, d, e, i, g) { var h = b(d); if (h.find(".jqx-grid-widget").length == 0) { var j = '<div class="jqx-grid-widget" style="opacity: 0.99; position: absolute; width: 100%; height:100%; top: 0%; left: 0%; padding: 0px;"></div>'; d.innerHTML = j; e.createwidget(i, e, g, d.firstChild); b(d.firstChild).attr("hideFocus", "true"); b(d.firstChild).children().addClass("jqx-grid-widget"); d.widget = b(d.firstChild); d.widgetrow = f.getboundindex(i) } else { e.initwidget(i, e, g, d.firstChild); d.widgetrow = f.getboundindex(i); b(d.firstChild).val(g) } }, _renderbuttoncell: function (h, e, g, k, i) { if (h.host.jqxButton) { var j = b(e); if (i == "") { i = false } if (j.find(".jqx-button").length == 0) { e.innerHTML = '<input type="button" style="opacity: 0.99; position: absolute; top: 0%; left: 0%; padding: 0px; margin-top: 2px; margin-left: 2px;"/>'; b(e.firstChild).val(i); b(e.firstChild).attr("hideFocus", "true"); b(e.firstChild).jqxButton({ disabled: h.disabled, theme: h.theme, height: h.rowsheight - 4, width: g.width - 4 }); e.button = b(e.firstChild); e.buttonrow = h.getboundindex(k); var d = this.isTouchDevice(); if (d) { var f = b.jqx.mobile.getTouchEventName("touchend"); h.addHandler(b(e.firstChild), f, function (l) { if (g.buttonclick) { g.buttonclick(e.buttonrow, l) } }) } else { h.addHandler(b(e.firstChild), "click", function (l) { if (g.buttonclick) { g.buttonclick(e.buttonrow, l) } }) } } else { e.buttonrow = h.getboundindex(k); b(e.firstChild).val(i) } } }, _clearvisualrow: function (g, f, o, i, n) { var m = this.toTP("jqx-grid-cell"); if (f) { m = " " + this.toTP("jqx-grid-group-cell") } m += " " + this.toTP("jqx-grid-cleared-cell"); var p = this.table[0].rows; for (var k = 0; k < i + n; k++) { if (p[o]) { var e = p[o].cells[k]; if (e.className != m) { e.className = m } var d = this.columns.records[k]; if (this._horizontalvalue != g && !d.pinned) { if (this.oldhscroll == true) { var h = -g; e.style.marginLeft = -g + "px" } } var l = d.width; if (l < d.minwidth) { l = d.minwidth } if (l > d.maxwidth) { l = d.maxwidth } if (parseInt(e.style.width) != l) { if (l != "auto") { b(e)[0].style.width = l + "px" } else { b(e)[0].style.width = l } } if (e.title != "") { e.title = "" } if (e.innerHTML != "") { e.innerHTML = "" } } } if (p[o]) { if (parseInt(p[o].style.height) != this.rowsheight) { p[o].style.height = parseInt(this.rowsheight) + "px" } } }, _findgroupstate: function (e) { var d = this._findgroup(e); if (d == null) { return false } return d.expanded }, _findgroup: function (e) { var d = null; if (this.expandedgroups[e]) { return this.expandedgroups[e] } return d }, _clearcaches: function () { this._columnsbydatafield = new Array(); this._pagescache = new Array(); this._pageviews = new Array(); this._cellscache = new Array(); this.heights = new Array(); this.hiddens = new Array(); this.hiddenboundrows = new Array(); this.heightboundrows = new Array(); this.detailboundrows = new Array(); this.details = new Array(); this.expandedgroups = new Array(); this._rowdetailscache = new Array(); this._rowdetailselementscache = new Array(); if (b.jqx.dataFormat) { b.jqx.dataFormat.cleardatescache() } this.tableheight = null }, _getColumnText: function (d) { if (this._columnsbydatafield == undefined) { this._columnsbydatafield = new Array() } if (this._columnsbydatafield[d]) { return this._columnsbydatafield[d] } var f = d; var e = null; b.each(this.columns.records, function () { if (this.datafield == d || this.displayfield == d) { f = this.text; e = this; return false } }); this._columnsbydatafield[d] = { label: f, column: e }; return this._columnsbydatafield[d] }, _getcolumnbydatafield: function (d) { if (this.__columnsbydatafield == undefined) { this.__columnsbydatafield = new Array() } if (this.__columnsbydatafield[d]) { return this.__columnsbydatafield[d] } var f = d; var e = null; b.each(this.columns.records, function () { if (this.datafield == d || this.displayfield == d) { f = this.text; e = this; return false } }); this.__columnsbydatafield[d] = e; return this.__columnsbydatafield[d] }, isscrollingvertically: function () { var d = (this.vScrollBar.jqxScrollBar("isScrolling")); return d }, _renderrowdetails: function (q, y, d, x, n, A) { if (y == undefined) { return } var E = b(y); var g = 0; var t = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth; if (this.groupable && this.groups.length > 0) { for (var r = 0; r <= n; r++) { var e = b(y.cells[r]); e[0].innerHTML = ""; e[0].className = "jqx-grid-details-cell" } } var e = b(y.cells[g]); if (e[0].style.display == "none") { var o = y.cells[g]; var B = 2; var l = g; while (o != undefined && o.style.display == "none" && B < 10) { o = y.cells[l + B - 1]; B++ } e = b(o) } if (this.rtl) { for (var v = x; v < n; v++) { y.cells[v].innerHTML = ""; y.cells[v].className = "jqx-grid-details-cell" } } e.css("width", "100%"); E.height(d.rowdetailsheight); e[0].className = q; var p = this.getboundindex(d); var j = p + "_"; if (this._rowdetailscache[j]) { var u = this._rowdetailscache[j]; var C = u.html; if (this.initrowdetails) { if (this._rowdetailscache[j].element) { var f = this._rowdetailscache[j].element; var i = e.coord(); var z = this.gridcontent.coord(); var w = parseInt(i.top) - parseInt(z.top); var k = parseInt(i.left) - parseInt(z.left); if (this.rtl) { k = 0 } b(f).css("top", w); b(f).css("left", k); b(f).css("display", "block"); b(f).width(this.host.width() - t); if (this.layoutrowdetails) { this.layoutrowdetails(p, f, this.element, this.getrowdata(p)) } } } else { e[0].innerHTML = C } return } e[0].innerHTML = ""; if (!this.enablerowdetailsindent) { t = 0 } var h = '<div class="jqx-enableselect" role="rowgroup" style="border: none; overflow: hidden; width: 100%; height: 100%; margin-left: ' + t + 'px;">' + d.rowdetails + "</div>"; if (this.rtl) { var h = '<div class="jqx-enableselect" role="rowgroup" style="border: none; overflow: hidden; width: 100%; height: 100%; margin-left: ' + 0 + "px; margin-right: " + t + 'px;">' + d.rowdetails + "</div>" } this._rowdetailscache[j] = { id: y.id, html: h }; if (this.initrowdetails) { var f = b(h)[0]; b(this.gridcontent).prepend(b(f)); b(f).css("position", "absolute"); b(f).width(this.host.width() - t); b(f).height(e.height()); var i = e.coord(); b(f).css("z-index", 9999); if (this.isTouchDevice()) { b(f).css("z-index", 99999) } b(f).addClass(this.toThemeProperty("jqx-widget-content")); var i = e.coord(); var z = this.gridcontent.coord(); var w = parseInt(i.top) - parseInt(z.top); var k = parseInt(i.left) - parseInt(z.left); b(f).css("top", w); b(f).css("left", k); this.content[0].scrollTop = 0; this.content[0].scrollLeft = 0; var D = b(b(f).children()[0]); if (D[0].id != "") { D[0].id = D[0].id + p } this.initrowdetails(p, f, this.element, this.getrowdata(p)); this._rowdetailscache[j].element = f; this._rowdetailselementscache[p] = f } else { e[0].innerHTML = h } }, _defaultcellsrenderer: function (f, d) { if (d.cellsformat != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(f)) { f = b.jqx.dataFormat.formatdate(f, d.cellsformat, this.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(f)) { f = b.jqx.dataFormat.formatnumber(f, d.cellsformat, this.gridlocalization) } } } } var e = "4px"; if (this.rowsheight != 25) { e = (this.rowsheight / 2 - this._cellheight / 2); if (e < 0) { e = 4 } e += "px" } if (this.enableellipsis) { if (d.cellsalign == "center" || d.cellsalign == "middle") { return '<div class="jqx-grid-cell-middle-align" style="margin-top: ' + e + ';">' + f + "</div>" } if (d.cellsalign == "left") { return '<div class="jqx-grid-cell-left-align" style="margin-top: ' + e + ';">' + f + "</div>" } if (d.cellsalign == "right") { return '<div class="jqx-grid-cell-right-align" style="margin-top: ' + e + ';">' + f + "</div>" } } if (d.cellsalign == "center" || d.cellsalign == "middle") { return '<div style="text-align: center; margin-top: ' + e + ';">' + f + "</div>" } return '<span style="margin-left: 4px; margin-right: 2px; margin-top: ' + e + "; float: " + d.cellsalign + ';">' + f + "</span>" }, getcelltext: function (g, e) { if (g == null || e == null) { return null } var d = this.getcellvalue(g, e); var f = this.getcolumn(e); if (f && f.cellsformat != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(d)) { d = b.jqx.dataFormat.formatdate(d, f.cellsformat, this.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(d)) { d = b.jqx.dataFormat.formatnumber(d, f.cellsformat, this.gridlocalization) } } } } return d }, getcelltextbyid: function (g, e) { if (g == null || e == null) { return null } var d = this.getcellvaluebyid(g, e); var f = this.getcolumn(e); if (f && f.cellsformat != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(d)) { d = b.jqx.dataFormat.formatdate(d, f.cellsformat, this.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(d)) { d = b.jqx.dataFormat.formatnumber(d, f.cellsformat, this.gridlocalization) } } } } return d }, _getcellvalue: function (d, f) { var e = null; e = f.bounddata[d.datafield]; if (d.displayfield != null) { e = f.bounddata[d.displayfield] } if (e == null) { e = "" } return e }, getcell: function (h, d) { if (h == null || d == null) { return null } var e = parseInt(h); var g = h; var f = ""; if (!isNaN(e)) { g = this.getrowdata(e) } if (g != null) { f = g[d] } return this._getcellresult(f, h, d) }, getrenderedcell: function (h, d) { if (h == null || d == null) { return null } var e = parseInt(h); var g = h; var f = ""; if (!isNaN(e)) { g = this.getrenderedrowdata(e) } if (g != null) { f = g[d] } return this._getcellresult(f, h, d) }, _getcellresult: function (k, n, e) { var f = this.getcolumn(e); if (f == null || f == undefined) { return null } var i = f.getcolumnproperties(); var g = i.hidden; var d = i.width; var m = i.pinned; var h = i.cellsalign; var j = i.cellsformat; var l = this.getrowheight(n); if (l == false) { return null } return { value: k, row: n, column: e, datafield: e, width: d, height: l, hidden: g, pinned: m, align: h, format: j} }, setcellvaluebyid: function (i, d, h, f, g) { var e = this.getrowboundindexbyid(i); return this.setcellvalue(e, d, h, f, g) }, getcellvaluebyid: function (f, d) { var e = this.getrowboundindexbyid(f); return this.getcellvalue(e, d) }, setcellvalue: function (m, D, F, N, i) { if (m == null || D == null) { return false } var h = parseInt(m); var r = h; var A = m; if (!isNaN(h)) { A = this.getrowdata(h) } var L = false; if (this.filterable && this._initfilterpanel && this.dataview.filters.length) { L = true } if (this.virtualmode) { this._pagescache = new Array() } if (this.sortcache) { this.sortcache = {} } var n = ""; var d = ""; if (A != null && A[D] !== F) { if (A[D] === null && F === "") { return } var G = this._getcolumnbydatafield(D); var O = "string"; var t = this.source.datafields || ((this.source._source) ? this.source._source.datafields : null); if (t) { var B = ""; b.each(t, function () { if (this.name == G.displayfield) { if (this.type) { B = this.type } return false } }); if (B) { O = B } d = A[G.displayfield] } n = A[D]; if (!G.nullable || (F != null && F !== "" && G.nullable && F.label === undefined)) { if (b.jqx.dataFormat.isNumber(n) || O == "number" || O == "float" || O == "int" || O == "decimal" && O != "date") { if (this.gridlocalization && this.gridlocalization.decimalseparator == ",") { if (F && F.indexOf && F.indexOf(",") >= 0) { F = F.replace(",", ".") } } F = new Number(F); F = parseFloat(F); if (isNaN(F)) { F = 0 } } else { if (b.jqx.dataFormat.isDate(n) || O == "date") { if (F != "") { var J = F; J = new Date(J); if (J != "Invalid Date" && J != null) { F = J } else { if (J == "Invalid Date") { J = new Date(); F = J } } } } } if (A[D] === F) { if (!this._updating && N != false) { this._renderrows(this.virtualsizeinfo) } return } } var y = this.source && this.source._source.localdata && this.source._source.localdata.name === "observableArray"; A[D] = F; if (y) { var M = this.source._source.localdata; if (!M._updating) { M._updating = true; M[m][D] = F; M._updating = false } } var k = this.getrenderedrowdata(h, true); if (!k) { return } k[D] = F; if (F != null && F.label != null) { var G = this._getcolumnbydatafield(D); A[G.displayfield] = F.label; k[G.displayfield] = F.label; A[D] = F.value; k[D] = F.value; if (y && !M._updating) { M._updating = true; M[m][D] = F.value; M[m][G.displayfield] = F.label; M._updating = false } } if (L) { if (A.dataindex != undefined) { r = A.dataindex; this.dataview.cachedrecords[A.dataindex][D] = F; if (F != null && F.label != undefined) { this.dataview.cachedrecords[A.dataindex][D] = F.value; this.dataview.cachedrecords[A.dataindex][G.displayfield] = F.label } } } } else { if (!this._updating && N != false) { this._renderrows(this.virtualsizeinfo) } return false } if (this.source && this.source._knockoutdatasource && !this._updateFromAdapter && this.autokoupdates) { if (this.source._source._localdata) { var C = h; if (L) { if (A.dataindex != undefined) { C = A.dataindex } } var g = this.source._source._localdata()[C]; this.source.suspendKO = true; var E = g; if (E[D] && E[D].subscribe) { if (F != null && F.label != null) { E[G.displayfield](F.label); E[D](F.value) } else { E[D](F) } } else { var t = this.source._source.datafields; var z = null; var v = null; if (t) { b.each(t, function () { if (this.name == D) { v = this.map; return false } }) } if (v == null) { if (F != null && F.label != null) { E[D] = F.value; E[G.displayfield] = F.label } else { E[D] = F } } else { var f = v.split(this.source.mapChar); if (f.length > 0) { var l = E; for (var K = 0; K < f.length - 1; K++) { l = l[f[K]] } l[f[f.length - 1]] = F } } this.source._source._localdata.replace(g, b.extend({}, E)) } this.source.suspendKO = false } } if (this.sortcolumn && this.dataview.sortby && !this._updating) { var x = this.getsortinformation(); if (this.sortcolumn == D) { this.dataview.clearsortdata(); this.dataview.sortby(x.sortcolumn, x.sortdirection.ascending) } } else { if (!this._updating) { if (this.dataview.sortby) { if (this.dataview.sortcache[D]) { this.dataview.sortcache[D] = null } } } } this._cellscache = new Array(); this._pagescache = new Array(); if (this.source.updaterow && (i == undefined || i == true)) { var H = false; var o = this.that; var q = function (p) { if (false == p) { o.setcellvalue(m, D, n, true, false); if (n != d) { o.setcellvalue(m, o.getcolumn(D).displayfield, d, true, false) } } }; try { var j = this.getrowid(h); H = this.source.updaterow(j, A, q); if (H == undefined) { H = true } } catch (u) { H = false; o.setcellvalue(m, D, n, true, false); if (n != d) { o.setcellvalue(m, o.getcolumn(D).displayfield, d, true, false) } return } } var I = this.vScrollInstance.value; if (this._updating && N != true) { N = false } if (N == true || N == undefined) { var o = this.that; var e = function () { if (o.pageable && o.updatepagerdetails) { o.updatepagerdetails(); if (o.autoheight || o.autorowheight) { o._updatepageviews() } } }; var s = this.groupable && this.groups.length > 0; if (L && !s) { if (this.autoheight || this.autorowheight) { this.prerenderrequired = true } this.dataview.refresh(); this.rendergridcontent(true, false); e(); this._renderrows(this.virtualsizeinfo) } else { if (this.sortcolumn && !s) { if (this.autoheight || this.autorowheight) { this.prerenderrequired = true } this.dataview.reloaddata(); this.rendergridcontent(true, false); e(); this._renderrows(this.virtualsizeinfo) } else { if (this.groupable && this.groups.length > 0) { if (this.autoheight || this.autorowheight) { this.prerenderrequired = true } if (this.pageable) { if (this.groups.indexOf(D) != -1) { this._pagescache = new Array(); this._cellscache = new Array(); this.dataview.refresh(); this._render(true, true, false, false) } else { this._pagescache = new Array(); this._cellscache = new Array(); this.dataview.updateview(); this._renderrows(this.virtualsizeinfo) } } else { this._pagescache = new Array(); this._cellscache = new Array(); this.dataview.updateview(); this._renderrows(this.virtualsizeinfo) } } else { this.dataview.updateview(); this._renderrows(this.virtualsizeinfo) } } } } this.vScrollInstance.setPosition(I); if (this.showaggregates && this._updatecolumnsaggregates) { this._updatecolumnsaggregates() } if (this.showfilterrow && this.filterable && this.filterrow) { var w = this.getcolumn(D).filtertype; if (w == "list" || w == "checkedlist") { this._updatelistfilters(true) } } this._raiseEvent(19, { rowindex: m, datafield: D, newvalue: F, value: F, oldvalue: n }); return true }, getcellvalue: function (h, d) { if (h == null || d == null) { return null } var e = parseInt(h); var g = h; if (!isNaN(e)) { g = this.getrowdata(e) } if (g != null) { var f = g[d]; return f } return null }, getrows: function () { var h = this.dataview.records.length; if (this.virtualmode) { var j = new Array(); for (var e = 0; e < this.dataview.records.length; e++) { var d = this.dataview.records[e]; if (d) { j.push(d) } } if (this.dataview.records.length === undefined) { b.each(this.dataview.records, function () { var i = this; if (i) { j.push(i) } }) } var g = 0; if (this.pageable) { g = this.dataview.pagenum * this.dataview.pagesize } if (j.length > this.source._source.totalrecords - g) { return j.slice(0, this.source._source.totalrecords - g) } return j } if (this.dataview.sortdata) { var j = new Array(); for (var e = 0; e < h; e++) { var f = {}; f = b.extend({}, this.dataview.sortdata[e].value); j[e] = f } return j } else { return this.dataview.records } }, getrowboundindexbyid: function (g) { var f = this.dataview.recordsbyid["id" + g]; if (f) { if (f.boundindex) { return this.getboundindex(f) } } var e = this.getboundrows(); for (var d = 0; d < e.length; d++) { if (e[d]) { if (e[d].uid == g) { return d } } } return -1 }, getrowdatabyid: function (f) { var e = this.dataview.recordsbyid["id" + f]; if (e) { return e } else { var d = this.getrowboundindexbyid(f); return this.getboundrows()[d] } return null }, getrowdata: function (d) { if (d == undefined) { d = 0 } if (this.virtualmode) { var e = this.dataview.records[d]; return e } else { var e = this.getboundrows()[d]; return e } return null }, getrenderedrowdata: function (d, f) { if (d == undefined) { d = 0 } if (this.virtualmode) { var g = this.getrowvisibleindex(d); var e = this.dataview.loadedrecords[g]; return e } var g = this.getrowvisibleindex(d); if (g >= 0) { if (this.groupable && this.groups.length > 0) { var e = this.dataview.loadedrecords[g] } else { var e = this.dataview.loadedrecords[g]; if (this.pageable && (f == undefined || f == false)) { var e = this.dataview.loadedrecords[this.dataview.pagesize * this.dataview.pagenum + d] } } return e } return null }, getboundrows: function () { return this.dataview.cachedrecords }, getrowdisplayindex: function (d) { var f = this.getdisplayrows(); for (var e = 0; e < f.length; e++) { if (!f[e]) { continue } if (f[e].dataindex !== undefined) { if (f[e].dataindex == d) { return f[e].visibleindex } } else { if (f[e].boundindex == d) { return f[e].visibleindex } } } return -1 }, getboundindex: function (e) { var d = e.boundindex; if (this.groupable && this.groups.length > 0 && this.pageable) { if (e.bounddata) { d = this.getrowboundindexbyid(e.bounddata.uid) } } if (this.dataview.filters.length > 0) { if (e.bounddata) { if (e.bounddata.dataindex !== undefined) { d = e.bounddata.dataindex } } else { if (e.dataindex !== undefined) { d = e.dataindex } } } return d }, getrowboundindex: function (d) { var e = this.getdisplayrows()[d]; if (e) { if (e.dataindex !== undefined) { return e.dataindex } return e.boundindex } return -1 }, getdisplayrows: function () { return this.dataview.loadedrecords }, getloadedrows: function () { return this.getdisplayrows() }, getvisiblerowdata: function (e) { var d = this.getvisiblerows(); if (d) { return d[e] } return null }, getloadedrowdata: function (e) { var d = this.getloadedrows(); if (d) { return d[e] } return null }, getvisiblerows: function () { if (this.virtualmode) { return this.dataview.loadedrecords } if (this.pageable) { var f = []; for (var e = 0; e < this.dataview.pagesize; e++) { var d = this.dataview.loadedrecords[e + (this.dataview.pagesize * this.dataview.pagenum)]; if (d == undefined) { break } f.push(d) } return f } else { if (this._startboundindex != undefined && this._endboundindex != undefined) { var f = []; for (var e = this._startvisibleindex; e <= this._endvisibleindex; e++) { var d = this.dataview.loadedrecords[e]; if (d == undefined) { break } f.push(d) } return f } } return this.dataview.loadedrecords }, getrowid: function (d) { if (d == undefined) { d = 0 } if (this.virtualmode) { var g = this.getrowvisibleindex(d); var f = this.dataview.loadedrecords[g]; if (f) { return f.uid } } else { var f = null; var e = this.dataview.filters.length > 0; if (d >= 0 && d < this.dataview.bounditems.length && !e) { if (this.groupable && this.groups.length > 0) { var g = this.getrowvisibleindex(d); var f = this.dataview.loadedrecords[g] } else { var g = this.getrowvisibleindex(d); var f = this.dataview.loadedrecords[g] } if (f) { return f.uid } } if (this.dataview.filters.length > 0) { var f = this.getboundrows()[d]; if (f) { if (f.uid != null) { return f.uid } } return null } } return null }, _updateGridData: function (e) { var d = false; if (this.filterable && this._initfilterpanel && this.dataview.filters.length) { d = true } if (d) { this.dataview.refresh(); if (e == "updaterow") { this._render(true, true, false, false, false); this.invalidate() } else { this.render() } } else { if (this.sortcolumn || (this.groupable && this.groups.length > 0)) { this.dataview.reloaddata(); this.render() } else { this._cellscache = new Array(); this._pagescache = new Array(); this._renderrows(this.virtualsizeinfo) } } if (this.showfilterrow && this.filterable && this.filterrow) { this._updatelistfilters(true) } }, updaterow: function (i, k, g) { if (i != undefined && k != undefined) { var h = this.that; var j = false; h._datachanged = true; var e = function (q, l, u) { if (q._loading) { throw new Error("jqxGrid: " + q.loadingerrormessage); return false } var s = false; if (!b.isArray(l)) { s = q.dataview.updaterow(l, u) } else { b.each(l, function (v, w) { s = q.dataview.updaterow(this, u[v], false) }); q._cellscache = new Array(); q._pagescache = new Array(); q.dataview.refresh() } var m = q.vScrollInstance.value; if (g == undefined || g == true) { if (q._updating == undefined || q._updating == false) { q._updateGridData("updaterow") } } if (q.showaggregates && q._updatecolumnsaggregates) { q._updatecolumnsaggregates() } if (q.source && q.source._knockoutdatasource && !q._updateFromAdapter && q.autokoupdates) { if (q.source._source._localdata) { var n = q.dataview.recordsbyid["id" + l]; var o = q.dataview.records.indexOf(n); var p = q.source._source._localdata()[o]; q.source.suspendKO = true; q.source._source._localdata.replace(p, b.extend({}, n)); q.source.suspendKO = false } } var r = q.source && q.source._source.localdata && q.source._source.localdata.name === "observableArray"; if (r) { if (!q.source._source.localdata._updating) { q.source._source.localdata._updating = true; var t = q.getrowboundindexbyid(l); q.source._source.localdata.set(t, u); q.source._source.localdata._updating = false } } q.vScrollInstance.setPosition(m); return s }; if (this.source.updaterow) { var d = function (l) { if (l == true || l == undefined) { e(h, i, k) } else { j = false } }; try { j = this.source.updaterow(i, k, d); if (j == undefined) { j = true } } catch (f) { j = false } } else { j = e(h, i, k) } return j } return false }, deleterow: function (d, k) { if (d != undefined) { this._datachanged = true; var o = false; var m = this.that; var p = this.getrowboundindexbyid(d); var e = new Array(); var j = new Array(); if (p != undefined) { if (this.selectedrowindexes.indexOf(p) >= 0) { this.selectedrowindexes.splice(this.selectedrowindexes.indexOf(p), 1) } if (this.selectedrowindex == p) { this.selectedrowindex = -1 } if (!this.virtualmode) { if (m.selectionmode.indexOf("row") >= 0) { b.each(this.selectedrowindexes, function () { var q = m.getrowid(this); e.push(q) }); this.selectedrowindexes = new Array(); this.selectedrowindex = -1 } else { if (m.selectionmode.indexOf("cell") >= 0) { for (var i in m.selectedcells) { var n = m.selectedcells[i]; var h = m.getrowid(n.rowindex); n.rowid = h } } } } } var f = function (w, r) { if (w._loading) { throw new Error("jqxGrid: " + w.loadingerrormessage); return false } var z = false; var t = w.vScrollInstance.value; if (!b.isArray(r)) { var z = w.dataview.deleterow(r) } else { b.each(r, function () { z = w.dataview.deleterow(this, false) }); w._cellscache = new Array(); w._pagescache = new Array(); w.dataview.refresh() } if (!w.virtualmode) { if (w.selectionmode.indexOf("row") >= 0) { b.each(e, function () { var B = w.getrowboundindexbyid(this); if (B != -1) { w.selectrow(B, false) } }) } else { var A = new Array(); for (var v in w.selectedcells) { var y = w.selectedcells[v]; var u = y.rowid; var s = w.getrowboundindexbyid(u); if (s != -1) { y.rowindex = s; A[s + "_" + y.datafield] = y } } w.selectedcells = A } } if (w._updating == undefined || w._updating == false) { if (k == undefined || k == true) { w._render(true, true, false, false); if (w.vScrollBar.css("visibility") != "visible") { w._arrange(); w._updatecolumnwidths(); w._updatecellwidths(); w._renderrows(w.virtualsizeinfo) } } } if (w.source && w.source._knockoutdatasource && !w._updateFromAdapter && w.autokoupdates) { if (w.source._source._localdata) { w.source.suspendKO = true; w.source._source._localdata.pop(rowdata); w.source.suspendKO = false } } var x = w.source && w.source._source.localdata && w.source._source.localdata.name === "observableArray"; if (x) { if (!w.source._source.localdata._updating) { w.source._source.localdata._updating = true; w.source._source.localdata.splice(p, 1); w.source._source.localdata._updating = false } } if (w.dataview.sortby) { var q = w.getsortinformation(); w.dataview.clearsortdata(); w.dataview.sortby(q.sortcolumn, q.sortdirection ? q.sortdirection.ascending : null) } w.vScrollInstance.setPosition(t); return z }; if (this.source.deleterow) { var g = function (q) { if (q == true || q == undefined) { f(m, d) } }; try { this.source.deleterow(d, g); if (o == undefined) { o = true } } catch (l) { o = false } } else { o = f(m, d) } return o } return false }, addrow: function (f, o, j) { if (o != undefined) { this._datachanged = true; if (j == undefined) { j = "last" } var n = false; var m = this.that; if (f == null) { var g = this.dataview.filters && this.dataview.filters.length > 0; var l = !g ? this.dataview.totalrecords : this.dataview.cachedrecords.length; if (!b.isArray(o)) { f = this.dataview.getid(this.dataview.source.id, o, l); while (null != this.dataview.recordsbyid["id" + f]) { f++ } } else { var d = new Array(); b.each(o, function (e, p) { var q = m.dataview.getid(m.dataview.source.id, o[e], l + e); d.push(q) }); f = d } } var h = function (s, r, v, e) { if (s._loading) { throw new Error("jqxGrid: " + s.loadingerrormessage); return false } var u = s.vScrollInstance.value; var t = false; if (!b.isArray(v)) { if (v != undefined && v.dataindex != undefined) { delete v.dataindex } t = s.dataview.addrow(r, v, e) } else { b.each(v, function (w, x) { if (this.dataindex != undefined) { delete this.dataindex } var y = null; if (r != null && r[w] != null) { y = r[w] } t = s.dataview.addrow(y, this, e, false) }); s._cellscache = new Array(); s._pagescache = new Array(); s.dataview.refresh() } if (s._updating == undefined || s._updating == false) { s._render(true, true, false, false); s.invalidate() } if (s.source && s.source._knockoutdatasource && !s._updateFromAdapter && s.autokoupdates) { if (s.source._source._localdata) { s.source.suspendKO = true; s.source._source._localdata.push(v); s.source.suspendKO = false } } var p = s.source && s.source._source.localdata && s.source._source.localdata.name === "observableArray"; if (p) { if (!s.source._source.localdata._updating) { s.source._source.localdata._updating = true; var q = s.getrowboundindexbyid(r); s.source._source.localdata.set(q, v); s.source._source.localdata._updating = false } } if (s.scrollmode != "deferred") { s.vScrollInstance.setPosition(u) } else { s.vScrollInstance.setPosition(0) } return t }; if (this.source.addrow) { var i = function (e, p) { if (e == true || e == undefined) { if (p != undefined) { f = p } h(m, f, o, j) } }; try { n = this.source.addrow(f, o, j, i); if (n == undefined) { n = true } } catch (k) { n = false } if (n == false) { return false } } else { h(this, f, o, j) } return n } return false }, _findvisiblerow: function (g, h) { if (g == undefined) { g = parseInt(this.vScrollInstance.value) } var e = 0; if (h == undefined || h == null) { h = this.rows.records } var d = h.length; while (e <= d) { mid = parseInt((e + d) / 2); var f = h[mid]; if (f == undefined) { break } if (f.top > g && f.top + f.height > g) { d = mid - 1 } else { if (f.top < g && f.top + f.height < g) { e = mid + 1 } else { return mid; break } } } return -1 }, _updatecellwidths: function () { var f = this.virtualsizeinfo; if (!f) { return } var p = this.that; if (p.gridcontent == undefined) { return } if (p.table == undefined) { p.table = p.gridcontent.find("#contenttable" + p.element.id) } var k = p.groupable && p.groups.length > 0; var q = 0; var l = f.visiblerecords; if (p.pageable && (p.autoheight || p.autorowheight)) { l = p.dataview.pagesize; if (p.groupable) { p.dataview.updateview(); l = p.dataview.rows.length } } if (!p.groupable && !p.pageable && (p.autoheight || p.autorowheight)) { l = p.dataview.totalrecords } if (p.rowdetails) { l += p.dataview.pagesize } if (!p.columns.records) { return } var r = p.columns.records.length; var t = p.table[0].rows; for (var n = 0; n < l; n++) { var d = t[n]; if (!d) { break } var s = d.cells; var h = 0; for (var m = 0; m < r; m++) { var g = p.columns.records[m]; var e = g.width; var o = s[m]; if (parseInt(o.style.left) != h) { o.style.left = h + "px" } if (parseInt(o.style.width) != e) { o.style.width = e + "px" } if (!(g.hidden && g.hideable)) { h += parseFloat(e) } else { o.style.display = "none" } } if (q == 0) { p.table.width(parseFloat(h) + 2); q = h } } if (p.showaggregates && p._updateaggregates) { p._updateaggregates() } if (p.showfilterrow && p.filterable && p._updatefilterrowui) { p._updatefilterrowui() } if (p.showeverpresentrow) { p._updateaddnewrowui() } p._updatescrollbarsafterrowsprerender(); if (k) { p._renderrows(p.virtualsizeinfo) } }, _updatescrollbarsafterrowsprerender: function () { var g = this.that; var f = g.hScrollBar[0].style.visibility; var i = 0; var d = g.vScrollBar[0].style.visibility; if (d == "visible") { i = g.scrollbarsize + 3 } if (g.scrollbarautoshow) { i = 0 } var e = g.element.style.width; if (e.toString().indexOf("%") >= 0) { e = g.host.width() } else { e = parseInt(e) } if (parseInt(g.table[0].style.width) - 2 > e - i) { if (f != "visible") { if (!g.autowidth) { g.hScrollBar[0].style.visibility = "visible" } g._arrange() } if (d == "visible") { if (g.scrollmode != "deferred" && !g.virtualmode) { if (g.virtualsizeinfo) { var h = g.virtualsizeinfo.virtualheight - g._gettableheight(); if (!isNaN(h) && h > 0) { if (f != "hidden") { g.vScrollBar.jqxScrollBar("max", h + g.scrollbarsize + 4) } else { g.vScrollBar.jqxScrollBar("max", h) } } } } else { g._updatevscrollbarmax() } } else { i = -2 } g.hScrollBar.jqxScrollBar("max", i + g.table.width() - g.host.width()) } else { if (f != "hidden") { g.hScrollBar.css("visibility", "hidden"); g._arrange() } } g._renderhorizontalscroll() }, _prerenderrows: function (o) { var B = this.that; if (B.prerenderrequired == true) { B.prerenderrequired = false; if (B.editable && B._destroyeditors) { B._destroyeditors() } if (B.gridcontent == undefined) { return } B.gridcontent.find("#contenttable" + B.element.id).remove(); if (B.table != null) { B.table.remove(); B.table = null } B.table = b('<div id="contenttable' + B.element.id + '" style="overflow: hidden; position: relative;"></div>'); B.gridcontent.addClass(B.toTP("jqx-grid-content")); B.gridcontent.addClass(B.toTP("jqx-widget-content")); B.gridcontent.append(B.table); var A = B.groupable && B.groups.length > 0; var p = 0; B.table[0].rows = new Array(); var l = B.toTP("jqx-grid-cell"); if (A) { l = " " + B.toTP("jqx-grid-group-cell") } var u = o.visiblerecords; if (B.pageable && (B.autoheight || B.autorowheight)) { u = B.dataview.pagesize; if (B.groupable) { B.dataview.updateview(); u = B.dataview.rows.length; if (u < B.dataview.pagesize) { u = B.dataview.pagesize } } } if (!B.pageable && (B.autoheight || B.autorowheight)) { u = B.dataview.totalrecords } if (B.groupable && B.groups.length > 0 && (B.autoheight || B.autorowheight) && !B.pageable) { u = B.dataview.rows.length } if (B.rowdetails) { if (B.autoheight || B.autorowheight) { u += B.dataview.pagesize } else { u += u } } if (!B.columns.records) { return } var z = B.columns.records.length; if (b.jqx.browser.msie && b.jqx.browser.version > 8) { B.table.css("opacity", "0.99") } if (b.jqx.browser.mozilla) { } if (navigator.userAgent.indexOf("Safari") != -1) { B.table.css("opacity", "0.99") } var r = b.jqx.browser.msie && b.jqx.browser.version < 8; if (r) { B.host.attr("hideFocus", "true") } var k = B.tableZIndex; if (u * z > k) { k = u * z } var g = B.dataview.records.length == 0; var n = B.isTouchDevice(); var v = ""; B._hiddencolumns = false; for (var y = 0; y < u; y++) { var s = '<div role="row" style="position: relative; height:' + B.rowsheight + 'px;" id="row' + y + B.element.id + '">'; if (r) { var s = '<div role="row" style="position: relative; z-index: ' + k + "; height:" + B.rowsheight + 'px;" id="row' + y + B.element.id + '">'; k-- } var f = 0; for (var w = 0; w < z; w++) { var x = B.columns.records[w]; var t = x.width; if (t < x.minwidth) { t = x.minwidth } if (t > x.maxwidth) { t = x.maxwidth } if (B.rtl) { var q = k - z + 2 * w; var d = '<div role="gridcell" style="left: ' + f + "px; z-index: " + q + "; width:" + t + "px;"; k-- } else { var d = '<div role="gridcell" style="left: ' + f + "px; z-index: " + k-- + "; width:" + t + "px;" } if (!(x.hidden && x.hideable)) { f += t } else { d += "display: none;"; B._hiddencolumns = true; k++ } d += '" class="' + l + '"></div>'; s += d } if (p == 0) { B.table.width(parseInt(f) + 2); p = f } s += "</div>"; v += s } if (B.WinJS) { MSApp.execUnsafeLocalFunction(function () { B.table.html(v) }) } else { B.table[0].innerHTML = v } B.table[0].rows = new Array(); var m = B.table.children(); for (var y = 0; y < u; y++) { var h = m[y]; B.table[0].rows.push(h); h.cells = new Array(); var e = b(h).children(); for (var w = 0; w < z; w++) { h.cells.push(e[w]) } } if (u == 0) { var f = 0; if (B.showemptyrow) { var s = b('<div style="position: relative;" id="row0' + B.element.id + '"></div>'); B.table.append(s); s.height(B.rowsheight); B.table[0].rows[0] = s[0]; B.table[0].rows[0].cells = new Array() } for (var w = 0; w < z; w++) { var x = B.columns.records[w]; var t = x.width; if (B.showemptyrow) { var d = b('<div style="position: absolute; height: 100%; left: ' + f + "px; z-index: " + k-- + "; width:" + t + 'px;" class="' + l + '"></div>'); d.height(B.rowsheight); s.append(d); B.table[0].rows[0].cells[w] = d[0] } if (t < x.minwidth) { t = x.minwidth } if (t > x.maxwidth) { t = x.maxwidth } if (!(x.hidden && x.hideable)) { f += t } } B.table.width(parseInt(f) + 2); p = f } B._updatescrollbarsafterrowsprerender(); if (B.rendered) { B.rendered("rows") } B.toCompile = new Array(); B._addoverlayelement() } }, _groupsheader: function () { return this.groupable && this.showgroupsheader }, _arrange: function () { var A = null; var x = null; this.tableheight = null; var F = this.that; var n = false; var m = false; if (F.width != null && F.width.toString().indexOf("px") != -1) { A = F.width } else { if (F.width != undefined && !isNaN(F.width)) { A = F.width } } if (F.width != null && F.width.toString().indexOf("%") != -1) { A = F.width; n = true } if (F.scrollbarautoshow) { F.vScrollBar[0].style.display = "none"; F.hScrollBar[0].style.display = "none"; F.vScrollBar[0].style.zIndex = F.tableZIndex + F.headerZIndex; F.hScrollBar[0].style.zIndex = F.tableZIndex + F.headerZIndex } if (F.autowidth) { var p = 0; for (var B = 0; B < F.columns.records.length; B++) { var e = F.columns.records[B].width; if (e == "auto") { e = F._measureElementWidth(F.columns.records[B].text); p += e } else { p += e } } if (F.vScrollBar.css("visibility") != "hidden") { p += F.scrollbarsize + 4 } A = p; F.width = A } if (F.height != null && F.height.toString().indexOf("px") != -1) { x = F.height } else { if (F.height != undefined && !isNaN(F.height)) { x = F.height } } if (F.height != null && F.height.toString().indexOf("%") != -1) { x = F.height; m = true } var k = function () { var i = 0; var w = F.showheader ? F.columnsheader != null ? F.columnsheader.height() + 2 : 0 : 0; i += w; if (F.pageable) { i += F.pagerheight } if (F._groupsheader()) { i += F.groupsheaderheight } if (F.showtoolbar) { i += F.toolbarheight } if (F.showstatusbar) { i += F.statusbarheight } if (F.showeverpresentrow && F.everpresentrowposition === "bottom") { i += F.everpresentrowheight } if (F.hScrollBar[0].style.visibility == "visible") { i += 20 } return i }; if (F.autoheight && F.virtualsizeinfo) { if (F.pageable && F.gotopage) { var C = 0; x = C + (F._pageviews[0] ? F._pageviews[0].height : 0); x += k(); if (F.showemptyrow && F.dataview.totalrecords == 0) { x += F.rowsheight } } else { var C = F.host.height() - F._gettableheight(); if (F._pageviews.length > 0) { x = C + F._pageviews[F._pageviews.length - 1].height + F._pageviews[F._pageviews.length - 1].top; F.vScrollBar[0].style.visibility = "hidden" } else { x = k(); if (F.showemptyrow) { x += F.rowsheight } } } } else { if (F.autoheight) { x = F.dataview.totalrecords * F.rowsheight; if (F.pageable && F.gotopage) { x = F.pagesize * F.rowsheight } if (F._loading) { x = 250; F.dataloadelement.height(x) } x += k(); if (x > 10000) { x = 10000 } } } if (A != null) { A = parseInt(A); if (!n) { if (F.element.style.width != parseInt(F.width) + "px") { F.element.style.width = parseInt(F.width) + "px" } } else { F.element.style.width = F.width } if (n) { A = F.host.width(); if (A <= 2) { A = 600; F.host.width(A) } if (!F._oldWidth) { F._oldWidth = A } } } else { F.host.width(250) } if (x != null) { if (!m) { x = parseInt(x) } if (!m) { if (F.element.style.height != parseInt(x) + "px") { F.element.style.height = parseInt(x) + "px" } } else { F.element.style.height = F.height } if (m && !F.autoheight) { x = F.host.height(); if (x == 0) { x = 400; F.host.height(x) } if (!F._oldHeight) { F._oldHeight = x } } } else { F.host.height(250) } if (F.autoheight) { F.tableheight = null; F._gettableheight() } var v = 0; if (F.showtoolbar) { F.toolbar.width(A); F.toolbar.height(F.toolbarheight - 1); F.toolbar.css("top", 0); v += F.toolbarheight; x -= parseInt(F.toolbarheight) } else { F.toolbar[0].style.height = "0px" } if (F.showstatusbar) { if (F.showaggregates) { F.statusbar.width(!F.table ? A : Math.max(A, F.table.width())) } else { F.statusbar.width(A) } F.statusbar.height(F.statusbarheight) } else { F.statusbar[0].style.height = "0px" } if (F.showeverpresentrow && F.everpresentrowposition === "bottom") { F.addnewrow.width(A); F.addnewrow.height(F.everpresentrowheight) } else { F.addnewrow[0].style.height = "0px" } if (F._groupsheader()) { F.groupsheader.width(A); F.groupsheader.height(F.groupsheaderheight); F.groupsheader.css("top", v); var y = F.groupsheader.height() + 1; v += y; if (x > y) { x -= parseInt(y) } } else { if (F.groupsheader[0].style.width != A + "px") { F.groupsheader[0].style.width = parseInt(A) + "px" } F.groupsheader[0].style.height = "0px"; if (F.groupsheader[0].style.top != v + "px") { F.groupsheader.css("top", v) } var y = F.showgroupsheader && F.groupable ? F.groupsheaderheight : 0; var f = v + y + "px"; if (F.content[0].style.top != f) { F.content.css("top", v + F.groupsheaderheight) } } var d = F.scrollbarsize; if (isNaN(d)) { d = parseInt(d); if (isNaN(d)) { d = "17px" } else { d = d + "px" } } d = parseInt(d); var s = 4; var h = 2; var j = 0; if (F.vScrollBar[0].style.visibility == "visible") { j = d + s } if (F.hScrollBar[0].style.visibility == "visible") { h = d + s + 2 } var r = 0; if (F.pageable) { r = F.pagerheight; h += F.pagerheight } if (F.showstatusbar) { h += F.statusbarheight; r += F.statusbarheight } if (F.showeverpresentrow && F.everpresentrowposition === "bottom") { h += F.everpresentrowheight; r += F.everpresentrowheight } if (F.hScrollBar[0].style.height != d + "px") { F.hScrollBar[0].style.height = parseInt(d) + "px" } if (F.hScrollBar[0].style.top != v + x - s - d - r + "px" || F.hScrollBar[0].style.left != "0px") { F.hScrollBar.css({ top: v + x - s - d - r + "px", left: "0px" }) } var q = F.hScrollBar[0].style.width; var l = false; var D = false; if (j == 0) { if (q != (A - 2) + "px") { F.hScrollBar.width(A - 2); l = true } } else { if (q != (A - d - s) + "px") { F.hScrollBar.width(A - d - s + "px"); l = true } } if (!F.autoheight) { if (F.vScrollBar[0].style.width != d + "px") { F.vScrollBar.width(d); D = true } if (F.vScrollBar[0].style.height != parseInt(x) - h + "px") { F.vScrollBar.height(parseInt(x) - h + "px"); D = true } if (F.vScrollBar[0].style.left != parseInt(A) - parseInt(d) - s + "px" || F.vScrollBar[0].style.top != v + "px") { F.vScrollBar.css({ left: parseInt(A) - parseInt(d) - s + "px", top: v }) } } if (F.rtl) { F.vScrollBar.css({ left: "0px", top: v }); if (F.vScrollBar.css("visibility") != "hidden") { F.hScrollBar.css({ left: d + 2 }) } } var o = F.vScrollInstance; o.disabled = F.disabled; if (!F.autoheight) { if (D) { o.refresh() } } var z = F.hScrollInstance; z.disabled = F.disabled; if (l) { z.refresh() } if (F.autowidth) { F.hScrollBar[0].style.visibility = "hidden" } F.statusbarheight = parseInt(F.statusbarheight); F.toolbarheight = parseInt(F.toolbarheight); var t = function (w) { if ((w.vScrollBar[0].style.visibility == "visible") && (w.hScrollBar[0].style.visibility == "visible")) { w.bottomRight[0].style.visibility = "visible"; w.bottomRight.css({ left: 1 + parseInt(w.vScrollBar.css("left")), top: parseInt(w.hScrollBar.css("top")) }); if (w.rtl) { w.bottomRight.css("left", "0px") } w.bottomRight.width(parseInt(d) + 3); w.bottomRight.height(parseInt(d) + 4); var G = w.showeverpresentrow && w.everpresentrowposition == "bottom"; var i = G ? w.everpresentrowheight : 0; if (i > 0 && !w.showaggregates) { w.bottomRight.css("z-index", 99); w.bottomRight.height(parseInt(d) + 4 + i); w.bottomRight.css({ top: parseInt(w.hScrollBar.css("top")) - i }) } if (w.showaggregates) { w.bottomRight.css("z-index", 99); w.bottomRight.height(parseInt(d) + 4 + w.statusbarheight + i); w.bottomRight.css({ top: parseInt(w.hScrollBar.css("top")) - w.statusbarheight - i }) } } else { w.bottomRight[0].style.visibility = "hidden" } }; t(this); if (F.content[0].style.width != A - j + "px") { F.content.width(A - j) } if (F.content[0].style.height != x - h + 3 + "px") { F.content.height(x - h + 3) } if (F.scrollbarautoshow) { if (F.content[0].style.width != A + "px") { F.content.width(A) } if (F.content[0].style.height != x + "px") { F.content.height(x) } } if (F.content[0].style.top != v + "px") { F.content.css("top", v) } if (F.rtl) { F.content.css("left", j); if (F.scrollbarautoshow) { F.content.css("left", "0px") } if (F.table) { var u = F.table.width(); if (u < A - j) { F.content.css("left", A - u) } } } if (F.showstatusbar) { F.statusbar.css("top", v + x - F.statusbarheight - (F.pageable ? F.pagerheight : 0)); if (F.showaggregates) { if (F.hScrollBar.css("visibility") == "visible") { F.hScrollBar.css({ top: v + x - s - d - r + F.statusbarheight + "px" }); F.statusbar.css("top", 1 + v + x - d - 5 - F.statusbarheight - (F.pageable ? F.pagerheight : 0)) } t(this) } if (F.rtl) { if (F.hScrollBar.css("visibility") != "visible") { F.statusbar.css("left", F.content.css("left")) } else { F.statusbar.css("left", "0px") } } } if (F.showeverpresentrow && F.everpresentrowposition === "bottom") { F.addnewrow.css("top", v + x - (F.showstatusbar ? F.statusbarheight : 0) - (F.pageable ? F.pagerheight : 0) - F.everpresentrowheight); if (F.rtl) { if (F.hScrollBar.css("visibility") != "visible") { F.addnewrow.css("left", F.content.css("left")) } else { F.addnewrow.css("left", "0px") } } } if (F.pageable) { F.pager.width(A); F.pager.height(F.pagerheight); F.pager.css("top", v + x - F.pagerheight - 1) } else { F.pager[0].style.height = "0px" } if (F.table != null) { var g = -2; if (F.vScrollBar[0].style.visibility == "visible") { g = F.scrollbarsize + 3 } if (F.hScrollBar[0].style.visibility == "visible") { var E = g + F.table.width() - F.host.width(); if (E >= 0) { F.hScrollBar.jqxScrollBar("max", E) } if (F.hScrollBar[0].style.visibility == "visible" && E == 0) { F.hScrollBar[0].style.visibility = "hidden"; F._arrange() } } } if (A != parseInt(F.dataloadelement[0].style.width)) { F.dataloadelement[0].style.width = F.element.style.width } if (x != parseInt(F.dataloadelement[0].style.height)) { F.dataloadelement[0].style.height = F.element.style.height } F._hostwidth = A }, destroy: function () { delete b.jqx.dataFormat.datescache; delete this.gridlocalization; b.jqx.utilities.resize(this.host, null, true); if (document.referrer != "" || window.frameElement) { if (window.top != null && window.top != window.self) { this.removeHandler(b(window.top.document), "mouseup.grid" + this.element.id) } } if (this.table && this.table[0]) { var m = this.table[0].rows.length; for (var k = 0; k < m; k++) { var q = this.table[0].rows[k]; var p = q.cells; var f = p.length; for (var h = 0; h < f; h++) { b(q.cells[h]).remove(); q.cells[h] = null; delete q.cells[h] } q.cells = null; if (q.cells) { delete q.cells } b(this.table[0].rows[k]).remove(); this.table[0].rows[k] = null } try { delete this.table[0].rows } catch (n) { } this.table.remove(); delete this.table } if (this.columns && this.columns.records) { for (var k = 0; k < this.columns.records.length; k++) { var e = this.columns.records[k]; if (e.addnewrowwidget) { if (e.destroyeverpresentrowwidget) { e.destroyeverpresentrowwidget(e.addnewrowwidget) } } this._removecolumnhandlers(this.columns.records[k]); if (e.element) { b(e.element).remove(); b(e.sortasc).remove(); b(e.sortdesc).remove(); b(e.filtericon).remove(); b(e.menu).remove(); e.element = null; e.uielement = null; e.sortasc = null; e.sortdesc = null; e.filtericon = null; e.menu = null; delete e.element; delete e.uielement; delete e.sortasc; delete e.sortdesc; delete e.filtericon; delete e.menu; delete this.columnsrow[0].cells[k] } } try { delete this.columnsrow[0].cells } catch (n) { } delete this.columnsrow } b.removeData(document.body, "contextmenu" + this.element.id); if (this.host.jqxDropDownList) { if (this._destroyfilterpanel) { this._destroyfilterpanel() } } if (this.editable && this._destroyeditors) { this._destroyeditors() } if (this.filterable && this._destroyedfilters && this.showfilterrow) { this._destroyedfilters() } if (this.host.jqxMenu) { if (this.gridmenu) { this.removeHandler(b(document), "click.menu" + this.element.id); this.removeHandler(this.gridmenu, "keydown"); this.removeHandler(this.gridmenu, "closed"); this.removeHandler(this.gridmenu, "itemclick"); this.gridmenu.jqxMenu("destroy"); this.gridmenu = null } } if (this.pagershowrowscombo) { this.pagershowrowscombo.jqxDropDownList("destroy"); this.pagershowrowscombo = null } if (this.pagerrightbutton) { this.removeHandler(this.pagerrightbutton, "mousedown"); this.removeHandler(this.pagerrightbutton, "mouseup"); this.removeHandler(this.pagerrightbutton, "click"); this.pagerrightbutton.jqxButton("destroy"); this.pagerrightbutton = null } if (this.pagerleftbutton) { this.removeHandler(this.pagerleftbutton, "mousedown"); this.removeHandler(this.pagerleftbutton, "mouseup"); this.removeHandler(this.pagerleftbutton, "click"); this.pagerleftbutton.jqxButton("destroy"); this.removeHandler(b(document), "mouseup.pagerbuttons" + this.element.id); this.pagerleftbutton = null } this.removeHandler(b(document), "selectstart." + this.element.id); this.removeHandler(b(document), "mousedown.resize" + this.element.id); this.removeHandler(b(document), "mouseup.resize" + this.element.id); this.removeHandler(b(document), "mousemove.resize" + this.element.id); if (this.isTouchDevice()) { var l = b.jqx.mobile.getTouchEventName("touchmove") + ".resize" + this.element.id; var d = b.jqx.mobile.getTouchEventName("touchstart") + ".resize" + this.element.id; var g = b.jqx.mobile.getTouchEventName("touchend") + ".resize" + this.element.id; this.removeHandler(b(document), l); this.removeHandler(b(document), d); this.removeHandler(b(document), g) } this.removeHandler(b(document), "mousedown.reorder" + this.element.id); this.removeHandler(b(document), "mouseup.reorder" + this.element.id); this.removeHandler(b(document), "mousemove.reorder" + this.element.id); if (this.isTouchDevice()) { var l = b.jqx.mobile.getTouchEventName("touchmove") + ".reorder" + this.element.id; var d = b.jqx.mobile.getTouchEventName("touchstart") + ".reorder" + this.element.id; var g = b.jqx.mobile.getTouchEventName("touchend") + ".reorder" + this.element.id; this.removeHandler(b(document), l); this.removeHandler(b(document), d); this.removeHandler(b(document), g) } this.removeHandler(b(window), "resize." + this.element.id); if (this.resizeline) { this.resizeline.remove() } if (this.resizestartline) { this.resizestartline.remove() } if (this.groupable) { var l = "mousemove.grouping" + this.element.id; var d = "mousedown.grouping" + this.element.id; var g = "mouseup.grouping" + this.element.id; this.removeHandler(b(document), l); this.removeHandler(b(document), d); this.removeHandler(b(document), g) } if (this.columnsreorder) { var l = "mousemove.reorder" + this.element.id; var d = "mousedown.reorder" + this.element.id; var g = "mouseup.reorder" + this.element.id; this.removeHandler(b(document), l); this.removeHandler(b(document), d); this.removeHandler(b(document), g); delete this.columnsbounds } if (this.content) { this.removeHandler(this.content, "mousedown"); this.removeHandler(this.content, "scroll") } this._removeHandlers(); this.hScrollInstance.destroy(); this.vScrollInstance.destroy(); this.hScrollBar.remove(); this.vScrollBar.remove(); this._clearcaches(); delete this.hScrollInstance; delete this.vScrollInstance; delete this.visiblerows; delete this.hittestinfo; delete this.rows; delete this.columns; delete this.columnsbydatafield; delete this.pagescache; delete this.pageviews; delete this.cellscache; delete this.heights; delete this.hiddens; delete this.hiddenboundrows; delete this.heightboundrows; delete this.detailboundrows; delete this.details; delete this.expandedgroups; delete this._rowdetailscache; delete this._rowdetailselementscache; delete this.columnsmenu; if (this.columnsheader) { this.columnsheader.remove(); delete this.columnsheader } if (this.selectionarea) { this.selectionarea.remove(); delete this.selectionarea } if (this.menuitemsarray && this.menuitemsarray.length) { var o = this.menuitemsarray.length; for (var k = 0; k < o; k++) { b(this.menuitemsarray[k]).remove() } } delete this.menuitemsarray; this.dataview._clearcaches(); this.content.removeClass(); this.content.remove(); this.content = null; delete this.content; this.vScrollBar = null; this.hScrollBar = null; delete this.hScrollBar; delete this.hScrollBar; if (this.gridcontent) { this.gridcontent.remove(); delete this.gridcontent } if (this.gridmenu) { this.gridmenu = null; delete this.gridmenu } delete this._mousemovefunc; delete this._mousewheelfunc; this.dataview.destroy(); delete this.dataview; this.bottomRight.remove(); delete this.bottomRight; this.wrapper.remove(); delete this.wrapper; if (this.pagerdiv) { this.pagerdiv.remove(); delete this.pagerdiv } if (this.pagerpageinput) { this.pagerpageinput.remove(); delete this.pagerpageinput } if (this.pagergoto) { this.pagergoto.remove(); delete this.pagergoto } if (this.pagershowrows) { this.pagershowrows.remove(); delete this.pagershowrows } if (this.pagerfirstbutton) { this.pagerfirstbutton.remove(); delete this.pagerfirstbutton } if (this.pagerlastbutton) { this.pagerlastbutton.remove(); delete this.pagerlastbutton } if (this.pagerbuttons) { this.pagerbuttons.remove(); delete this.pagerbuttons } if (this.pagerdetails) { this.pagerdetails.remove(); delete this.pagerdetails } if (this.pagergotoinput) { this.pagergotoinput.remove(); delete this.pagergotoinput } this.pager.remove(); delete this.pager; this.groupsheader.remove(); delete this.groupsheader; this.dataloadelement.remove(); delete this.dataloadelement; this.toolbar.remove(); delete this.toolbar; this.statusbar.remove(); delete this.statusbar; this.host.removeData(); this.host.removeClass(); this.host.remove(); this.host = null; delete this.host; delete this.element; delete this.set; delete this.get; delete this.that; delete this.call }, _initializeColumns: function () { var f = this.source ? this.source.datafields : null; if (f == null && this.source && this.source._source) { f = this.source._source.datafields } var j = f ? f.length > 0 : false; if (this.autogeneratecolumns) { var l = new Array(); if (f) { b.each(f, function () { var i = { datafield: this.name, text: this.text || this.name, cellsformat: this.format || "" }; l.push(i) }) } else { if (this.source.records.length > 0) { var n = this.source.records[0]; for (obj in n) { if (obj != "uid") { var g = { width: 100, datafield: obj, text: obj }; l.push(g) } } } } this.columns = l } if (this.columns && this.columns.records) { for (var h = 0; h < this.columns.records.length; h++) { this._removecolumnhandlers(this.columns.records[h]) } } var k = this.that; var e = new b.jqx.collection(this.element); var d = 0; this._haspinned = false; if (!this._columns) { this._columns = this.columns } else { this.columns = this._columns } if (this.groupable) { b.each(this.groups, function (i) { var o = new c(k, this); o.visibleindex = d++; o.width = k.groupindentwidth; e.add(o); o.grouped = true; o.filterable = false; o.sortable = false; o.editable = false; o.resizable = false; o.draggable = false }) } if (this.rowdetails && this.showrowdetailscolumn) { var g = new c(k, this); g.visibleindex = d++; g.width = k.groupindentwidth; g.pinned = true; g.editable = false; g.filterable = false; g.draggable = false; g.groupable = false; g.resizable = false; e.add(g); k._haspinned = true } if (this.selectionmode == "checkbox") { var g = new c(k, null); g.visibleindex = d++; g.width = k.groupindentwidth; g.checkboxcolumn = true; g.editable = false; g.columntype = "checkbox"; g.groupable = false; g.draggable = false; g.filterable = false; g.resizable = false; g.datafield = "_checkboxcolumn"; e.add(g) } var m = new Array(); b.each(this.columns, function (i) { if (k.columns[i] != undefined) { var o = new c(k, this); o.visibleindex = d++; if (this.dataField != undefined) { this.datafield = this.dataField } if (this.pinned) { k._haspinned = true } if (k.showeverpresentrow) { if (this.datafield === "addButtonColumn" || this.datafield === "resetButtonColumn" || this.datafield === "updateButtonColumn" || this.datafield === "deleteButtonColumn") { o.editable = false; o.groupable = false; o.draggable = false; o.filterable = false; o.resizable = false; o.menu = false } } if (this.datafield == null) { if (k.source && k.source._source && (k.source._source.datatype == "array")) { if (!j) { if (!k.source._source.datafields) { k.source._source.datafields = new Array(); k.source._source.datafields.push({ name: i.toString() }) } else { k.source._source.datafields.push({ name: i.toString() }) } } this.datafield = i.toString(); this.displayfield = i.toString(); o.datafield = this.datafield; o.displayfield = this.displayfield } } else { if (m[this.datafield]) { throw new Error("jqxGrid: Invalid column 'datafield' setting. jqxGrid's columns should be initialized with unique data fields."); k.host.remove(); return false } else { m[this.datafield] = true } } e.add(o) } }); if (this.rtl) { e.records.reverse() } this.columns = e }, _initializeRows: function () { var d = new b.jqx.collection(this.element); if (this.rows) { this.rows.clear() } this.rows = d }, _raiseEvent: function (i, e) { if (e == undefined) { e = { owner: null} } if (this._trigger === false) { return } var f = this.events[i]; if (!this._camelCase) { f = f.toLowerCase() } if (i == 2 || i == 15) { if (this.showeverpresentrow && (this.everpresentrowactions.indexOf("delete") >= 0 || this.everpresentrowactions.indexOf("update") >= 0)) { if (this.updateeverpresentrow) { var h = this } setTimeout(function () { h.updateeverpresentrow() }, 50) } } args = e; args.owner = this; var g = new b.Event(f); g.owner = this; g.args = args; var d = this.host.trigger(g); e = g.args; return d }, wheel: function (f, e) { if (e.autoheight && e.hScrollBar.css("visibility") != "visible") { f.returnValue = true; return true } var g = 0; if (!f) { f = window.event } if (f.originalEvent && f.originalEvent.wheelDelta) { f.wheelDelta = f.originalEvent.wheelDelta } if (f.wheelDelta) { g = f.wheelDelta / 120 } else { if (f.detail) { g = -f.detail / 3 } } if (g) { var d = e._handleDelta(g); if (d) { if (f.preventDefault) { f.preventDefault() } if (f.originalEvent != null) { f.originalEvent.mouseHandled = true } if (f.stopPropagation != undefined) { f.stopPropagation() } } if (d) { d = false; f.returnValue = d; return d } else { return false } } if (f.preventDefault) { f.preventDefault() } f.returnValue = false }, _handleDelta: function (f) { if (this.vScrollBar.css("visibility") != "hidden") { var e = this.vScrollInstance.value; if (f < 0) { this.scrollDown() } else { this.scrollUp() } var d = this.vScrollInstance.value; if (e != d) { return true } } else { if (this.hScrollBar.css("visibility") != "hidden") { var e = this.hScrollInstance.value; if (f > 0) { if (this.hScrollInstance.value > 2 * this.horizontalscrollbarstep) { this.hScrollInstance.setPosition(this.hScrollInstance.value - 2 * this.horizontalscrollbarstep) } else { this.hScrollInstance.setPosition(0) } } else { if (this.hScrollInstance.value < this.hScrollInstance.max) { this.hScrollInstance.setPosition(this.hScrollInstance.value + 2 * this.horizontalscrollbarstep) } else { this.hScrollInstance.setPosition(this.hScrollInstance.max) } } var d = this.hScrollInstance.value; if (e != d) { return true } } } return false }, scrollDown: function () { if (this.vScrollBar.css("visibility") == "hidden") { return } var d = this.vScrollInstance; if (d.value + this.rowsheight <= d.max) { d.setPosition(parseInt(d.value) + this.rowsheight) } else { d.setPosition(d.max) } }, scrollUp: function () { if (this.vScrollBar.css("visibility") == "hidden") { return } var d = this.vScrollInstance; if (d.value - this.rowsheight >= d.min) { d.setPosition(parseInt(d.value) - this.rowsheight) } else { d.setPosition(d.min) } }, _removeHandlers: function () { var d = this.that; d.removeHandler(b(window), "orientationchange.jqxgrid" + d.element.id); d.removeHandler(b(window), "orientationchanged.jqxgrid" + d.element.id); d.removeHandler(d.vScrollBar, "valueChanged"); d.removeHandler(d.hScrollBar, "valueChanged"); d.vScrollInstance.valueChanged = null; d.hScrollInstance.valueChanged = null; var e = "mousedown.jqxgrid"; if (d.isTouchDevice()) { e = b.jqx.mobile.getTouchEventName("touchend") } d.removeHandler(d.host, "dblclick.jqxgrid"); d.removeHandler(d.host, e); d.removeHandler(d.content, "mousemove", d._mousemovefunc); d.removeHandler(d.host, "mouseleave.jqxgrid"); d.removeHandler(d.content, "mouseenter"); d.removeHandler(d.content, "mouseleave"); d.removeHandler(d.content, "mousedown"); d.removeHandler(d.content, "scroll"); d.removeHandler(d.content, "selectstart." + d.element.id); d.removeHandler(d.host, "dragstart." + d.element.id); d.removeHandler(d.host, "keydown.edit" + d.element.id); d.removeHandler(b(document), "keydown.edit" + d.element.id); d.removeHandler(b(document), "keyup.edit" + d.element.id); if (d._mousemovedocumentfunc) { d.removeHandler(b(document), "mousemove.selection" + d.element.id, d._mousemovedocumentfunc) } d.removeHandler(b(document), "mouseup.selection" + d.element.id); if (d._mousewheelfunc) { d.removeHandler(d.host, "mousewheel", d._mousewheelfunc) } if (d.editable) { d.removeHandler(b(document), "mousedown.gridedit" + d.element.id) } if (d.host.off) { d.content.off("mousemove"); d.host.off("mousewheel") } }, _addHandlers: function () { var e = this.that; var d = e.isTouchDevice(); if (!d) { e.addHandler(e.host, "dragstart." + e.element.id, function (j) { return false }) } if (e.scrollbarautoshow) { e.addHandler(e.host, "mouseenter.gridscroll" + e.element.id, function (j) { e.vScrollBar.fadeIn("fast"); e.hScrollBar.fadeIn("fast") }); e.addHandler(e.host, "mouseleave.gridscroll" + e.element.id, function (j) { if (!e.vScrollInstance.isScrolling() && !e.hScrollInstance.isScrolling()) { e.vScrollBar.fadeOut("fast"); e.hScrollBar.fadeOut("fast") } }) } if (e.editable) { e.addHandler(b(document), "mousedown.gridedit" + e.element.id, function (m) { if (e.editable && e.begincelledit) { if (e.editcell) { if (!e.vScrollInstance.isScrolling() && !e.vScrollInstance.isScrolling()) { var r = e.host.coord(); var q = e.host.width(); var n = e.host.height(); var v = false; var k = false; var t = false; if (m.pageY < r.top || m.pageY > r.top + n) { v = true; k = true } if (m.pageX < r.left || m.pageX > r.left + q) { v = true; t = true } if (v) { var u = false; if (e.editcell && e.editcell.editor) { switch (e.editcell.columntype) { case "datetimeinput": if (e.editcell.editor.jqxDateTimeInput && e.editcell.editor.jqxDateTimeInput("container") && e.editcell.editor.jqxDateTimeInput("container")[0].style.display == "block") { var s = e.editcell.editor.jqxDateTimeInput("container").coord().top; var j = e.editcell.editor.jqxDateTimeInput("container").coord().top + e.editcell.editor.jqxDateTimeInput("container").height(); if (k && (m.pageY < s || m.pageY > j)) { v = true; e.editcell.editor.jqxDateTimeInput("close") } else { return } } break; case "combobox": if (e.editcell.editor.jqxComboBox && e.editcell.editor.jqxComboBox("container") && e.editcell.editor.jqxComboBox("container")[0].style.display == "block") { var s = e.editcell.editor.jqxComboBox("container").coord().top; var j = e.editcell.editor.jqxComboBox("container").coord().top + e.editcell.editor.jqxComboBox("container").height(); if (k && (m.pageY < s || m.pageY > j)) { v = true; e.editcell.editor.jqxComboBox("close") } else { return } } break; case "dropdownlist": if (e.editcell.editor.jqxDropDownList && e.editcell.editor.jqxDropDownList("container") && e.editcell.editor.jqxDropDownList("container")[0].style.display == "block") { var s = e.editcell.editor.jqxDropDownList("container").coord().top; var j = e.editcell.editor.jqxDropDownList("container").coord().top + e.editcell.editor.jqxDropDownList("container").height(); if (k && (m.pageY < s || m.pageY > j)) { v = true; e.editcell.editor.jqxDropDownList("close") } else { return } } break; case "template": case "custom": var l = ["jqxDropDownList", "jqxComboBox", "jqxDropDownButton", "jqxDateTimeInput"]; var p = function (A) { var z = e.editcell.editor.data(); if (z[A] && z[A].instance.container && z[A].instance.container[0].style.display == "block") { var x = z[A].instance; var B = x.container.coord().top; var y = x.container.coord().top + x.container.height(); if (k && (m.pageY < B || m.pageY > y)) { v = true; x.close(); return true } else { return false } } }; for (var o = 0; o < l.length; o++) { var w = p(l[o]); if (w == false) { return } } break } } e.endcelledit(e.editcell.row, e.editcell.column, false, true); e._oldselectedcell = null } } } } }) } e.vScrollInstance.valueChanged = function (j) { if (e.virtualsizeinfo) { e._closemenu(); if (e.scrollmode != "physical") { e._renderrows(e.virtualsizeinfo); e.currentScrollValue = j.currentValue } else { if (e.currentScrollValue != undefined && Math.abs(e.currentScrollValue - j.currentValue) >= 5) { e._renderrows(e.virtualsizeinfo); e.currentScrollValue = j.currentValue } else { e._renderrows(e.virtualsizeinfo); e.currentScrollValue = j.currentValue } } if (!e.pageable && !e.groupable && e.dataview.virtualmode) { if (e.loadondemandupdate) { clearTimeout(e.loadondemandupdate) } e.loadondemandupdate = setTimeout(function () { e.loadondemand = true; e._renderrows(e.virtualsizeinfo) }, 100) } if (d) { e._lastScroll = new Date() } } }; e.hScrollInstance.valueChanged = function (l) { if (e.virtualsizeinfo) { e._closemenu(); var k = function () { e._renderhorizontalscroll(); e._renderrows(e.virtualsizeinfo); if (e.editcell && !e.editrow) { if (e._showcelleditor && e.editcell.editing) { if (!e.hScrollInstance.isScrolling()) { e._showcelleditor(e.editcell.row, e.getcolumn(e.editcell.column), e.editcell.element, e.editcell.init) } } } }; var j = e._browser == undefined ? e._isIE10() : e._browser; if (navigator && navigator.userAgent.indexOf("Safari") != -1 && navigator.userAgent.indexOf("Chrome") == -1) { if (e._hScrollTimer) { clearTimeout(e._hScrollTimer) } e._hScrollTimer = setTimeout(function () { k() }, 1) } else { if (b.jqx.browser.msie) { if (e._hScrollTimer) { clearTimeout(e._hScrollTimer) } e._hScrollTimer = setTimeout(function () { k() }, 0.01) } else { k() } } if (d) { e._lastScroll = new Date() } } }; e._mousewheelfunc = e._mousewheelfunc || function (j) { if (!e.editcell && e.enablemousewheel) { e.wheel(j, e); return false } }; e.removeHandler(e.host, "mousewheel", e._mousewheelfunc); e.addHandler(e.host, "mousewheel", e._mousewheelfunc); var h = "mousedown.jqxgrid"; if (d) { h = b.jqx.mobile.getTouchEventName("touchend") } e.addHandler(e.host, h, function (k) { if (e.isTouchDevice()) { e._newScroll = new Date(); if (e._newScroll - e._lastScroll < 500) { return false } if (b(k.target).ischildof(e.vScrollBar)) { return false } if (b(k.target).ischildof(e.hScrollBar)) { return false } } e._mousedown = new Date(); var j = e._handlemousedown(k, e); if (e.isNestedGrid) { if (!e.resizablecolumn && !e.columnsreorder) { k.stopPropagation() } } e._lastmousedown = new Date(); return j }); if (!d) { e.addHandler(e.host, "dblclick.jqxgrid", function (k) { if (e.editable && e.begincelledit && e.editmode == "dblclick") { e._handledblclick(k, e) } else { if (b.jqx.browser.msie && b.jqx.browser.version < 9) { var j = e._handlemousedown(k, e) } } e.mousecaptured = false; e._lastmousedown = new Date(); return true }); e._mousemovefunc = function (j) { if (e._handlemousemove) { return e._handlemousemove(j, e) } }; e.addHandler(e.content, "mousemove", e._mousemovefunc); if (e._handlemousemoveselection) { e._mousemovedocumentfunc = function (j) { if (e._handlemousemoveselection) { return e._handlemousemoveselection(j, e) } }; e.addHandler(b(document), "mousemove.selection" + e.element.id, e._mousemovedocumentfunc) } e.addHandler(b(document), "mouseup.selection" + e.element.id, function (j) { if (e._handlemouseupselection) { e._handlemouseupselection(j, e) } }) } try { if (document.referrer != "" || window.frameElement) { if (window.top != null && window.top != window.self) { var i = null; if (window.parent && document.referrer) { i = document.referrer } if (i && i.indexOf(document.location.host) != -1) { var g = function (k) { if (e._handlemouseupselection) { try { e._handlemouseupselection(k, e) } catch (j) { } } }; e.addHandler(b(window.top.document), "mouseup.grid" + e.element.id, g) } } } } catch (f) { } e.focused = false; if (!d) { e.addHandler(e.content, "mouseenter", function (j) { e.focused = true; if (e.wrapper) { e.wrapper.attr("tabindex", 1); e.content.attr("tabindex", 2) } if (e._overlayElement) { if (e.vScrollInstance.isScrolling() || e.hScrollInstance.isScrolling()) { e._overlayElement[0].style.visibility = "visible" } else { e._overlayElement[0].style.visibility = "hidden" } } }); e.addHandler(e.content, "mouseleave", function (j) { if (e._handlemousemove) { if (e.enablehover) { e._clearhoverstyle() } } if (e._overlayElement) { e._overlayElement[0].style.visibility = "hidden" } e.focused = false }); if (e.groupable || e.columnsreorder) { e.addHandler(b(document), "selectstart." + e.element.id, function (j) { if (e.__drag === true) { return false } }) } e.addHandler(e.content, "selectstart." + e.element.id, function (j) { if (e.enablebrowserselection) { return true } if (e.showfilterrow) { if (b(j.target).ischildof(e.filterrow)) { return true } } if (e.showeverpresentrow) { if (b(j.target).ischildof(e.addnewrow)) { return true } if (e.addnewrowtop) { if (b(j.target).ischildof(e.addnewrowtop)) { return true } } } if (j.target.className && j.target.className.indexOf("jqx-grid-widget") >= 0) { return true } if (!e.editcell) { return false } if (j.stopPropagation) { j.stopPropagation() } }); e.addHandler(b(document), "keyup.edit" + e.element.id, function (j) { e._keydown = false }); e.addHandler(b(document), "keydown.edit" + e.element.id, function (l) { e._keydown = true && !e.editcell; var k = l.charCode ? l.charCode : l.keyCode ? l.keyCode : 0; if (e.handlekeyboardnavigation) { var m = e.handlekeyboardnavigation(l); if (m == true) { return false } } if (e.editable && e.editcell) { if (k == 13 || k == 27) { if (e._handleeditkeydown) { j = e._handleeditkeydown(l, e) } } } if (k == 27) { e.mousecaptured = false; if (e.selectionarea.css("visibility") == "visible") { e.selectionarea.css("visibility", "hidden") } } if (b.jqx.browser.msie && b.jqx.browser.version < 12 && e.focused && !e.isNestedGrid) { if (k == 13 && j == false) { return j } var j = true; var k = l.charCode ? l.charCode : l.keyCode ? l.keyCode : 0; if (!e.editcell && e.editable && e.editmode != "programmatic") { if (e._handleeditkeydown) { j = e._handleeditkeydown(l, e) } } if (j && e.keyboardnavigation && e._handlekeydown) { j = e._handlekeydown(l, e); if (!j) { if (l.preventDefault) { l.preventDefault() } if (l.stopPropagation != undefined) { l.stopPropagation() } } return j } } return true }); e.addHandler(e.host, "keydown.edit" + e.element.id, function (k) { var j = true; if (e.handlekeyboardnavigation) { var l = e.handlekeyboardnavigation(k); if (l == true) { return false } } if (e.editable && e.editmode != "programmatic") { if (e._handleeditkeydown) { j = e._handleeditkeydown(k, e); if (e.isNestedGrid) { k.stopPropagation() } } } if (!(b.jqx.browser.msie && b.jqx.browser.version < 8)) { if (j && e.keyboardnavigation && e._handlekeydown) { j = e._handlekeydown(k, e); if (e.isNestedGrid) { k.stopPropagation() } } } else { if (e.isNestedGrid) { if (j && e.keyboardnavigation && e._handlekeydown) { j = e._handlekeydown(k, e); k.stopPropagation() } } } if (!j) { if (k.preventDefault) { k.preventDefault() } if (k.stopPropagation != undefined) { k.stopPropagation() } } return j }) } }, _hittestrow: function (s, q) { if (this.vScrollInstance == null || this.hScrollInstance == null) { return } if (s == undefined) { s = 0 } if (q == undefined) { q == 0 } var l = this.vScrollInstance; var k = this.hScrollInstance; var f = l.value; if (this.vScrollBar.css("visibility") != "visible") { f = 0 } var m = k.value; if (this.hScrollBar.css("visibility") != "visible") { m = 0 } if (this.scrollmode == "deferred" && this._newmax != null) { if (f > this._newmax) { f = this._newmax } } var r = parseInt(f) + q; var j = parseInt(m) + s; if (this.visiblerows == null) { return } if (this.visiblerows.length == 0) { return } var e = false; var i = this._findvisiblerow(r, this.visiblerows); if (i >= 0) { var o = this.visiblerows[i]; var d = this.rowdetails && o.rowdetails; var n = !o.rowdetailshidden; if (d) { var g = this.visiblerows[i - 1]; if (g == o) { o = g; i-- } if (n) { var h = b(this.hittestinfo[i].visualrow).position().top + parseInt(this.table.css("top")); var p = b(this.hittestinfo[i].visualrow).height(); if (!(q >= h && q <= h + p)) { i++; o = this.visiblerows[i]; e = true } } } } return { index: i, row: o, details: e} }, getcellatposition: function (j, q) { var r = this.that; var z = this.showheader ? this.columnsheader.height() + 2 : 0; var s = this._groupsheader() ? this.groupsheader.height() : 0; var B = this.showtoolbar ? this.toolbarheight : 0; s += B; var g = this.host.coord(); if (this.hasTransform) { g = b.jqx.utilities.getOffset(this.host) } var p = j - g.left; var n = q - z - g.top - s; var d = this._hittestrow(p, n); var k = d.row; var l = d.index; var t = this.table[0].rows[l]; if (this.dataview && this.dataview.records.length == 0) { var o = this.table[0].rows; var C = 0; for (var w = 0; w < o.length; w++) { if (n >= C && n < C + this.rowsheight) { t = o[w]; break } C += this.rowsheight } k = { boundindex: w} } if (t == null) { return true } var u = this.hScrollInstance; var v = u.value; var f = 0; var m = this.groupable ? this.groups.length : 0; for (var w = 0; w < t.cells.length; w++) { var h = parseInt(b(this.columnsrow[0].cells[w]).css("left")); var j = h - v; if (r.columns.records[w].pinned) { j = h } if (r.columns.records[w].hidden) { continue } var A = j + b(this.columnsrow[0].cells[w]).width(); if (A >= p && p >= j) { f = w; break } } if (k != null) { var e = this._getcolumnat(f); return { row: this.getboundindex(k), column: e.datafield, value: this.getcellvalue(this.getboundindex(k), e.datafield)} } return null }, _handlemousedown: function (P, l) { if (P.target == null) { return true } if (l.disabled) { return true } if (b(P.target).ischildof(this.columnsheader) || b(P.target).ischildof(this.hScrollBar) || b(P.target).ischildof(this.vScrollBar)) { return true } var m; if (P.which) { m = (P.which == 3) } else { if (P.button) { m = (P.button == 2) } } var I; if (P.which) { I = (P.which == 2) } else { if (P.button) { I = (P.button == 1) } } if (I) { return true } if (this.showstatusbar) { if (b(P.target).ischildof(this.statusbar)) { return true } if (P.target == this.statusbar[0]) { return true } } if (this.showtoolbar) { if (b(P.target).ischildof(this.toolbar)) { return true } if (P.target == this.toolbar[0]) { return true } } if (this.pageable) { if (b(P.target).ischildof(this.pager)) { return true } if (P.target == this.pager[0]) { return true } } if (!this.columnsheader) { return true } if (!this.editcell) { if (this.pageable) { if (b(P.target).ischildof(this.pager)) { return true } } } var N = this.showheader ? this.columnsheader.height() + 2 : 0; var u = this._groupsheader() ? this.groupsheader.height() : 0; var z = this.showtoolbar ? this.toolbarheight : 0; u += z; var L = this.host.coord(); if (this.hasTransform) { L = b.jqx.utilities.getOffset(this.host); var R = this._getBodyOffset(); L.left -= R.left; L.top -= R.top } var h = parseInt(P.pageX); var j = parseInt(P.pageY); if (this.isTouchDevice()) { var Q = l.getTouches(P); var H = Q[0]; h = parseInt(H.pageX); j = parseInt(H.pageY); if (l.touchmode == true) { if (H._pageX != undefined) { h = parseInt(H._pageX); j = parseInt(H._pageY) } } } var C = h - L.left; var B = j - N - L.top - u; if (this.pageable && !this.autoheight && this.gotopage) { var d = this.pager.coord().top - L.top - u - N; if (B > d) { return } } var M = this._hittestrow(C, B); if (!M) { return } if (M.details) { return } var p = M.row; var w = M.index; var q = P.target.className; var g = this.table[0].rows[w]; if (g == null) { if (l.editable && l.begincelledit) { if (l.editcell) { l.endcelledit(l.editcell.row, l.editcell.column, false, true) } } return true } l.mousecaptured = true; l.mousecaptureposition = { left: P.pageX, top: P.pageY - u, clickedrow: g }; var k = this.hScrollInstance; var s = k.value; if (this.rtl) { if (this.hScrollBar.css("visibility") != "hidden") { s = k.max - k.value } } var A = -1; var v = this.groupable ? this.groups.length : 0; if (this.rtl) { if (this.vScrollBar[0].style.visibility != "hidden") { s -= this.scrollbarsize + 4 } if (this.hScrollBar[0].style.visibility == "hidden") { s = -parseInt(this.content.css("left")) } } for (var J = 0; J < g.cells.length; J++) { var K = parseInt(b(this.columnsrow[0].cells[J]).css("left")); var h = K - s; if (l.columns.records[J].pinned && !l.rtl) { h = K } var D = this._getcolumnat(J); if (D != null && D.hidden) { continue } var E = h + b(this.columnsrow[0].cells[J]).width(); if (E >= C && C >= h) { A = J; l.mousecaptureposition.clickedcell = J; break } } if (this.rtl && this._haspinned) { for (var J = g.cells.length - 1; J >= 0; J--) { if (!l.columns.records[J].pinned) { break } var K = b(this.columnsrow[0].cells[J]).coord().left - this.host.coord().left; var h = K; var D = this._getcolumnat(J); if (D != null && D.hidden) { continue } var E = h + b(this.columnsrow[0].cells[J]).width(); if (E >= C && C >= h) { A = J; l.mousecaptureposition.clickedcell = J; break } } } if (p != null && A >= 0) { this._raiseEvent(1, { rowindex: this.getboundindex(p), visibleindex: p.visibleindex, row: p, group: p.group, rightclick: m, originalEvent: P }); var D = this._getcolumnat(A); var F = this.getcellvalue(this.getboundindex(p), D.datafield); if (this.editable && this.editcell) { if (D.datafield == this.editcell.column) { if (this.getboundindex(p) == this.editcell.row) { this.mousecaptured = false } } } this._raiseEvent(8, { rowindex: this.getboundindex(p), column: D ? D.getcolumnproperties() : null, row: p, visibleindex: p.visibleindex, datafield: D ? D.datafield : null, columnindex: A, value: F, rightclick: m, originalEvent: P }); if (D.createwidget) { return true } if (this.isTouchDevice()) { if (D.columntype == "checkbox" && this.editable && this._overlayElement) { if (!this.editcell) { this._overlayElement.css("visibility", "hidden"); this.editcell = this.getcell(w, D.datafield); return true } } else { if (D.columntype == "button" && this._overlayElement) { if (D.buttonclick) { D.buttonclick(g.cells[A].buttonrow, P) } return true } } } var f = false; if (this._lastmousedown != null) { if (this._mousedown - this._lastmousedown < 300) { if (this._clickedrowindex == this.getboundindex(p)) { this._raiseEvent(22, { rowindex: this.getboundindex(p), row: p, visibleindex: p.visibleindex, group: p.group, rightclick: m, originalEvent: P }); if (this._clickedcolumn == D.datafield) { this._raiseEvent(23, { rowindex: this.getboundindex(p), row: p, visibleindex: p.visibleindex, column: D ? D.getcolumnproperties() : null, datafield: D ? D.datafield : null, columnindex: A, value: F, rightclick: m, originalEvent: P }) } f = true; this._clickedrowindex = -1; this._clickedcolumn = null; if (P.isPropagationStopped && P.isPropagationStopped()) { return false } } } } if (m) { return true } if (!f) { this._clickedrowindex = this.getboundindex(p); this._clickedcolumn = D.datafield } var e = b.jqx.utilities.getBrowser(); if (e.browser == "msie" && parseInt(e.version) <= 7) { if (A == 0 && this.rowdetails) { q = "jqx-grid-group-collapse" } if (v > 0) { if (A <= v) { q = "jqx-grid-group-collapse" } } } if (q.indexOf("jqx-grid-group-expand") != -1 || q.indexOf("jqx-grid-group-collapse") != -1) { if (!this.rtl) { if (v > 0 && A < v && this._togglegroupstate) { this._togglegroupstate(p.bounddata, true) } else { if (A == v && this.rowdetails && this.showrowdetailscolumn) { this._togglerowdetails(p.bounddata, true); this.gridcontent[0].scrollTop = 0; this.gridcontent[0].scrollLeft = 0 } } } else { if (v > 0 && A > g.cells.length - v - 1 && this._togglegroupstate) { this._togglegroupstate(p.bounddata, true) } else { if (A == g.cells.length - 1 - v && this.rowdetails && this.showrowdetailscolumn) { this._togglerowdetails(p.bounddata, true); this.gridcontent[0].scrollTop = 0; this.gridcontent[0].scrollLeft = 0 } } } } else { if (p.boundindex != -1) { var n = this.selectedrowindexes.slice(0); var O = false; if (l.selectionmode != "none" && l.selectionmode != "checkbox" && this._selectrowwithmouse) { if (l.selectionmode == "multiplecellsadvanced" || l.selectionmode == "multiplecellsextended" || l.selectionmode == "multiplerowsextended" || l.selectionmode == "multiplerowsadvanced") { if (!P.ctrlKey && !P.shiftKey && !P.metaKey) { l.selectedrowindexes = new Array(); l.selectedcells = new Array() } } var t = false; var o = this.getboundindex(p); if (l._oldselectedrow === o || l.selectionmode === "none") { t = true } if (l.selectionmode.indexOf("cell") == -1) { if ((l.selectionmode != "singlerow") || (l.selectedrowindex != o && l.selectionmode == "singlerow")) { this._applyrowselection(o, true, false, null, D.datafield); this._selectrowwithmouse(l, M, n, D.datafield, P.ctrlKey || P.metaKey, P.shiftKey) } } else { if (D.datafield != null) { this._selectrowwithmouse(l, M, n, D.datafield, P.ctrlKey || P.metaKey, P.shiftKey); if (!P.shiftKey) { this._applycellselection(o, D.datafield, true, false) } } } if (l._oldselectedcell) { if (l._oldselectedcell.datafield == l.selectedcell.datafield && l._oldselectedcell.rowindex == l.selectedcell.rowindex) { O = true } } l._oldselectedcell = l.selectedcell; l._oldselectedrow = o } if (l.autosavestate) { if (l.savestate) { l.savestate() } } if (l.editable && l.begincelledit && l.editmode != "programmatic") { if (P.isPropagationStopped && P.isPropagationStopped()) { return false } if (l.editmode == "selectedrow") { if (t && !l.editcell) { if (D.columntype !== "checkbox") { var r = l.beginrowedit(this.getboundindex(p)) } } else { if (l.editcell && !t && l.selectionmode != "none") { var r = l.endrowedit(l.editcell.row) } } } else { var G = l.editmode == "click" || (O && l.editmode == "selectedcell"); if (l.selectionmode.indexOf("cell") == -1) { if (l.editmode != "dblclick") { G = true } } if (G) { if (p.boundindex != undefined && D.editable) { var r = l.begincelledit(this.getboundindex(p), D.datafield, D.defaulteditorvalue); if (l.selectionmode.indexOf("cell") != -1) { l._applycellselection(o, D.datafield, false, false) } } } if (l.selectionmode.indexOf("cell") != -1) { if (l.editmode == "selectedcell" && !O && l.editcell) { l.endcelledit(l.editcell.row, l.editcell.column, false, true) } } } return true } } } } return true }, _columnPropertyChanged: function (e, d, g, f) { }, _rowPropertyChanged: function (g, d, f, e) { }, _serializeObject: function (d) { if (d == null) { return "" } var e = ""; b.each(d, function (g) { var h = this; if (g > 0) { e += ", " } e += "["; var f = 0; for (obj in h) { if (f > 0) { e += ", " } e += "{" + obj + ":" + h[obj] + "}"; f++ } e += "]" }); return e }, isbindingcompleted: function () { return !this._loading }, propertyChangedHandler: function (e, f, i, h) { if (this.isInitialized == undefined || this.isInitialized == false) { return } f = f.toLowerCase(); switch (f) { case "editable": e.refresh(); break; case "everpresentrowactionsmode": if (i != h) { e._removeaddnewrow(); e.render() } break; case "everpresentrowactions": e._updateaddnewrowui(); break; case "showeverpresentrow": case "everpresentrowposition": case "everpresentrowheight": if (i != h) { e._removeaddnewrow(); e.render() } break; case "rtl": e.content.css("left", ""); e.columns = e._columns; e._filterrowcache = []; e.vScrollBar.jqxScrollBar({ rtl: h }); e.hScrollBar.jqxScrollBar({ rtl: h }); if (e._initpager) { e._initpager() } if (e._initgroupsheader) { e._initgroupsheader() } e.render(); break; case "enablebrowserselection": if (!e.showfilterrow) { if (!e.showstatusbar && !e.showtoolbar) { e.host.addClass("jqx-disableselect") } e.content.addClass("jqx-disableselect") } if (e.enablebrowserselection) { e.content.removeClass("jqx-disableselect"); e.host.removeClass("jqx-disableselect") } break; case "columnsheight": if (e.columnsheight != 25 || e.columngroups) { e._measureElement("column") } e._render(true, true, true, false, false); break; case "rowsheight": if (h != i) { if (e.rowsheight != 25) { e._measureElement("cell") } e.virtualsizeinfo = null; e.rendergridcontent(true, false); e.refresh() } break; case "scrollMode": e.vScrollInstance.thumbStep = e.rowsheight; break; case "showdefaultloadelement": e._builddataloadelement(); break; case "showfiltermenuitems": case "showsortmenuitems": case "showgroupmenuitems": case "filtermode": e._initmenu(); break; case "touchmode": if (i != h) { e._removeHandlers(); e.touchDevice = null; e.vScrollBar.jqxScrollBar({ touchMode: h }); e.hScrollBar.jqxScrollBar({ touchMode: h }); e._updateTouchScrolling(); e._arrange(); e._updatecolumnwidths(); e._updatecellwidths(); e._addHandlers() } break; case "autoshowcolumnsmenubutton": if (i != h) { e._rendercolumnheaders() } break; case "rendergridrows": if (i != h) { e.updatebounddata() } break; case "editmode": if (i != h) { e._removeHandlers(); e._addHandlers() } break; case "source": e.updatebounddata(); if (e.virtualmode && !e._loading) { e.loadondemand = true; e._renderrows(e.virtualsizeinfo) } break; case "horizontalscrollbarstep": case "verticalscrollbarstep": case "horizontalscrollbarlargestep": case "verticalscrollbarlargestep": this.vScrollBar.jqxScrollBar({ step: this.verticalscrollbarstep, largestep: this.verticalscrollbarlargestep }); this.hScrollBar.jqxScrollBar({ step: this.horizontalscrollbarstep, largestep: this.horizontalscrollbarlargestep }); break; case "closeablegroups": if (e._initgroupsheader) { e._initgroupsheader() } break; case "showgroupsheader": if (i != h) { e._arrange(); if (e._initgroupsheader) { e._initgroupsheader() } e._renderrows(e.virtualsizeinfo) } break; case "theme": if (h != i) { b.jqx.utilities.setTheme(i, h, e.host); if (e.gridmenu) { e.gridmenu.jqxMenu({ theme: h }) } if (e.pageable) { e._updatepagertheme() } if (e.filterable) { e._updatefilterrowui(true) } if (e.showeverpresentrow) { e._updateaddnewrowui(true) } } break; case "showtoolbar": case "toolbarheight": if (i != h) { e._arrange(); e.refresh() } break; case "showstatusbar": if (i != h) { if (e.statusbar) { if (h) { e.statusbar.show() } else { e.statusbar.hide() } } e._arrange(); e.refresh() } break; case "statusbarheight": if (i != h) { e._arrange(); e.refresh() } break; case "filterable": case "showfilterrow": if (i != h) { e.render() } break; case "autoshowfiltericon": case "showfiltercolumnbackground": case "showpinnedcolumnbackground": case "showsortcolumnbackground": if (i != h) { e.rendergridcontent() } break; case "showrowdetailscolumn": if (i != h) { e.render() } break; case "scrollbarsize": if (i != h) { e._arrange() } break; case "width": case "height": if (i != h) { e._updatesize(true, true); e._resizeWindow(); if (e.virtualmode && !e._loading) { e.vScrollInstance.setPosition(0) } else { setTimeout(function () { e._renderrows(e.virtualsizeinfo) }, 100) } } break; case "altrows": case "altstart": case "altstep": if (i != h) { e._renderrows(e.virtualsizeinfo) } break; case "groupsheaderheight": if (i != h) { e._arrange(); if (e._initgroupsheader) { e._initgroupsheader() } } break; case "pagerheight": if (i != h) { e._initpager() } break; case "selectedrowindex": e.selectrow(h); break; case "selectionmode": if (i != h) { if (h == "none") { e.selectedrowindexes = new Array(); e.selectedcells = new Array(); e.selectedrowindex = -1 } e._renderrows(e.virtualsizeinfo); if (h == "checkbox") { e._render(false, false, true, false, false) } } break; case "showheader": if (h) { e.columnsheader.css("display", "block") } else { e.columnsheader.css("display", "none") } break; case "virtualmode": if (i != h) { e.dataview.virtualmode = e.virtualmode; e.dataview.refresh(false); e._render(false, false, false) } break; case "columnsmenu": if (i != h) { e.render() } break; case "columngroups": e._render(true, true, true, false, false); break; case "columns": if (e._serializeObject(e._cachedcolumns) !== e._serializeObject(h)) { var d = false; if (e.filterable) { if (i && i.records) { b.each(i.records, function () { if (this.filter) { d = true } e.dataview.removefilter(this.displayfield, this.filter) }) } } e._columns = null; e._filterrowcache = []; e.render(); if (d) { e.applyfilters() } e._cachedcolumns = e.columns; if (e.removesort) { e.removesort() } } else { e[f] = i } break; case "autoheight": if (i != h) { e._render(false, false, true) } break; case "pagermode": case "pagerbuttonscount": if (i != h) { if (e._initpager) { if (e.pagershowrowscombo) { e.pagershowrowscombo.jqxDropDownList("destroy"); e.pagershowrowscombo = null } if (e.pagerrightbutton) { e.removeHandler(e.pagerrightbutton, "mousedown"); e.removeHandler(e.pagerrightbutton, "mouseup"); e.removeHandler(e.pagerrightbutton, "click"); e.pagerrightbutton.jqxButton("destroy"); e.pagerrightbutton = null } if (e.pagerleftbutton) { e.removeHandler(e.pagerleftbutton, "mousedown"); e.removeHandler(e.pagerleftbutton, "mouseup"); e.removeHandler(e.pagerleftbutton, "click"); e.pagerleftbutton.jqxButton("destroy"); e.removeHandler(b(document), "mouseup.pagerbuttons" + e.element.id); e.pagerleftbutton = null } e.pagerdiv.remove(); e._initpager() } } break; case "pagesizeoptions": case "pageable": case "pagesize": if (i != h) { if (e._loading) { throw new Error("jqxGrid: " + e.loadingerrormessage); return } if (!e.host.jqxDropDownList || !e.host.jqxListBox) { e._testmodules(); return } if (e._initpager) { if (f != "pageable" && f != "pagermode") { if (typeof (h) == "string") { var g = "The expected value type is: Int."; if (f != "pagesize") { var g = "The expected value type is: Array of Int values." } throw new Error("Invalid Value for: " + f + ". " + g) } } e.dataview.pageable = e.pageable; e.dataview.pagenum = 0; e.dataview.pagesize = e._getpagesize(); if (e.virtualmode) { e.updatebounddata() } e.dataview.refresh(true); e._initpager(); if (f == "pagesizeoptions") { if (h != null && h.length > 0) { e.pagesize = parseInt(h[0]); e.dataview.pagesize = parseInt(h[0]); e.prerenderrequired = true; e._requiresupdate = true; e.dataview.pagenum = -1; e.gotopage(0) } } } e._render(false, false, false) } break; case "groups": if (e._serializeObject(i) !== e._serializeObject(h)) { e.dataview.groups = h; e._refreshdataview(); e._render(true, true, true, false) } break; case "groupable": if (i != h) { e.dataview.groupable = e.groupable; e.dataview.pagenum = 0; e.dataview.refresh(false); e._render(false, false, true) } break; case "renderstatusbar": if (h != null) { e.renderstatusbar(e.statusbar) } break; case "rendertoolbar": if (h != null) { e.rendertoolbar(e.toolbar) } break; case "disabled": if (h) { e.host.addClass(e.toThemeProperty("jqx-fill-state-disabled")) } else { e.host.removeClass(e.toThemeProperty("jqx-fill-state-disabled")) } b.jqx.aria(e, "aria-disabled", e.disabled); if (e.pageable) { if (e.pagerrightbutton) { e.pagerrightbutton.jqxButton({ disabled: h }); e.pagerleftbutton.jqxButton({ disabled: h }); e.pagershowrowscombo.jqxDropDownList({ disabled: h }); e.pagergotoinput.attr("disabled", h) } if (e.pagerfirstbutton) { e.pagerfirstbutton.jqxButton({ disabled: h }); e.pagerlastbutton.jqxButton({ disabled: h }) } } e.vScrollBar.jqxScrollBar({ disabled: h }); e.hScrollBar.jqxScrollBar({ disabled: h }); if (e.filterable && e.showfilterrow) { e._updatefilterrowui(true) } if (e.showeverpresentrow) { e._updateaddnewrowui(true) } break } } }); function c(d, e) { this.owner = d; this.datafield = null; this.displayfield = null; this.text = ""; this.createfilterpanel = null; this.sortable = true; this.hideable = true; this.editable = true; this.hidden = false; this.groupable = true; this.renderer = null; this.cellsrenderer = null; this.checkchange = null, this.threestatecheckbox = false; this.buttonclick = null, this.columntype = null; this.cellsformat = ""; this.align = "left"; this.cellsalign = "left"; this.width = "auto"; this.minwidth = 25; this.maxwidth = "auto"; this.pinned = false; this.visibleindex = -1; this.filterable = true; this.filter = null; this.filteritems = []; this.resizable = true; this.initeditor = null; this.createeditor = null; this.createwidget = null; this.initwidget = null; this.destroywidget = null; this.destroyeditor = null; this.geteditorvalue = null; this.validation = null; this.classname = ""; this.cellclassname = ""; this.cellendedit = null; this.cellbeginedit = null; this.cellvaluechanging = null; this.aggregates = null; this.aggregatesrenderer = null; this.menu = true; this.createfilterwidget = null; this.filtertype = "default"; this.filtercondition = null; this.rendered = null; this.exportable = true; this.exporting = false; this.draggable = true; this.nullable = true; this.clipboard = true; this.enabletooltips = true; this.columngroup = null; this.filterdelay = 800; this.reseteverpresentrowwidgetvalue = null; this.geteverpresentrowwidgetvalue = null; this.createeverpresentrowwidget = null; this.initeverpresentrowwidget = null; this.validateeverpresentrowwidgetvalue = null; this.destroyeverpresentrowwidget = null; this.getcolumnproperties = function () { return { nullable: this.nullable, sortable: this.sortable, hideable: this.hideable, hidden: this.hidden, groupable: this.groupable, width: this.width, align: this.align, editable: this.editable, minwidth: this.minwidth, maxwidth: this.maxwidth, resizable: this.resizable, datafield: this.datafield, text: this.text, exportable: this.exportable, cellsalign: this.cellsalign, pinned: this.pinned, cellsformat: this.cellsformat, columntype: this.columntype, classname: this.classname, cellclassname: this.cellclassname, menu: this.menu} }, this.setproperty = function (f, g) { if (this[f]) { var h = this[f]; this[f] = g; this.owner._columnPropertyChanged(this, f, g, h) } else { if (this[f.toLowerCase()]) { var h = this[f.toLowerCase()]; this[f.toLowerCase()] = g; this.owner._columnPropertyChanged(this, f.toLowerCase(), g, h) } } }; this._initfields = function (g) { if (g != null) { var f = this.that; if (b.jqx.hasProperty(g, "dataField")) { this.datafield = b.jqx.get(g, "dataField") } if (b.jqx.hasProperty(g, "displayField")) { this.displayfield = b.jqx.get(g, "displayField") } else { this.displayfield = this.datafield } if (b.jqx.hasProperty(g, "enableTooltips")) { this.enabletooltips = b.jqx.get(g, "enableTooltips") } if (b.jqx.hasProperty(g, "text")) { this.text = b.jqx.get(g, "text") } else { this.text = this.displayfield } if (b.jqx.hasProperty(g, "createfilterpanel")) { this.createfilterpanel = b.jqx.get(g, "createfilterpanel") } if (b.jqx.hasProperty(g, "sortable")) { this.sortable = b.jqx.get(g, "sortable") } if (b.jqx.hasProperty(g, "hideable")) { this.hideable = b.jqx.get(g, "hideable") } if (b.jqx.hasProperty(g, "hidden")) { this.hidden = b.jqx.get(g, "hidden") } if (b.jqx.hasProperty(g, "groupable")) { this.groupable = b.jqx.get(g, "groupable") } if (b.jqx.hasProperty(g, "renderer")) { this.renderer = b.jqx.get(g, "renderer") } if (b.jqx.hasProperty(g, "align")) { this.align = b.jqx.get(g, "align") } if (b.jqx.hasProperty(g, "cellsAlign")) { this.cellsalign = b.jqx.get(g, "cellsAlign") } if (b.jqx.hasProperty(g, "clipboard")) { this.cellsalign = b.jqx.get(g, "clipboard") } if (b.jqx.hasProperty(g, "cellsFormat")) { this.cellsformat = b.jqx.get(g, "cellsFormat") } if (b.jqx.hasProperty(g, "width")) { this.width = b.jqx.get(g, "width") } if (b.jqx.hasProperty(g, "minWidth")) { this.minwidth = parseInt(b.jqx.get(g, "minWidth")); if (isNaN(this.minwidth)) { this.minwidth = 25 } } if (b.jqx.hasProperty(g, "maxWidth")) { this.maxwidth = parseInt(b.jqx.get(g, "maxWidth")); if (isNaN(this.maxwidth)) { this.maxwidth = "auto" } } if (b.jqx.hasProperty(g, "cellsRenderer")) { this.cellsrenderer = b.jqx.get(g, "cellsRenderer") } else { if (g.cellsRenderer) { this.cellsrenderer = g.cellsRenderer } } if (b.jqx.hasProperty(g, "columnType")) { this.columntype = b.jqx.get(g, "columnType") } if (b.jqx.hasProperty(g, "checkChange")) { this.checkchange = b.jqx.get(g, "checkChange") } if (b.jqx.hasProperty(g, "buttonClick")) { this.buttonclick = b.jqx.get(g, "buttonClick") } else { if (g.buttonClick) { this.buttonclick = g.buttonClick } } if (b.jqx.hasProperty(g, "pinned")) { this.pinned = b.jqx.get(g, "pinned") } if (b.jqx.hasProperty(g, "visibleIndex")) { this.visibleindex = b.jqx.get(g, "visibleIndex") } if (b.jqx.hasProperty(g, "filterable")) { this.filterable = b.jqx.get(g, "filterable") } if (b.jqx.hasProperty(g, "filter")) { this.filter = b.jqx.get(g, "filter") } if (b.jqx.hasProperty(g, "resizable")) { this.resizable = b.jqx.get(g, "resizable") } if (b.jqx.hasProperty(g, "editable")) { this.editable = b.jqx.get(g, "editable") } if (b.jqx.hasProperty(g, "initEditor")) { this.initeditor = b.jqx.get(g, "initEditor") } else { if (g.initEditor) { this.initeditor = g.initEditor } } if (b.jqx.hasProperty(g, "createEditor")) { this.createeditor = b.jqx.get(g, "createEditor") } else { if (g.createEditor) { this.createeditor = g.createEditor } } if (b.jqx.hasProperty(g, "initWidget")) { this.initwidget = b.jqx.get(g, "initWidget") } else { if (g.initWidget) { this.initwidget = g.initWidget } } if (b.jqx.hasProperty(g, "createWidget")) { this.createwidget = b.jqx.get(g, "createWidget") } else { if (g.createWidget) { this.createwidget = g.createWidget } } if (b.jqx.hasProperty(g, "destroyWidget")) { this.destroywidget = b.jqx.get(g, "destroyWidget") } else { if (g.destroyWidget) { this.destroywidget = g.destroyWidget } } if (b.jqx.hasProperty(g, "reseteverpresentrowwidgetvalue") || b.jqx.hasFunction(g, "reseteverpresentrowwidgetvalue")) { this.reseteverpresentrowwidgetvalue = b.jqx.get(g, "reseteverpresentrowwidgetvalue") } else { if (g.resetEverPresentRowWidgetValue) { this.reseteverpresentrowwidgetvalue = g.resetEverPresentRowWidgetValue } } if (b.jqx.hasProperty(g, "geteverpresentrowwidgetvalue") || b.jqx.hasFunction(g, "geteverpresentrowwidgetvalue")) { this.geteverpresentrowwidgetvalue = b.jqx.get(g, "geteverpresentrowwidgetvalue") } else { if (g.getEverPresentRowWidgetValue) { this.geteverpresentrowwidgetvalue = g.getEverPresentRowWidgetValue } } if (b.jqx.hasProperty(g, "createeverpresentrowwidget") || b.jqx.hasFunction(g, "createeverpresentrowwidget")) { this.createeverpresentrowwidget = b.jqx.get(g, "createeverpresentrowwidget") } else { if (g.createEverPresentRowWidget) { this.createeverpresentrowwidget = g.createEverPresentRowWidget } } if (b.jqx.hasProperty(g, "initeverpresentrowwidget") || b.jqx.hasFunction(g, "initeverpresentrowwidget")) { this.initeverpresentrowwidget = b.jqx.get(g, "initeverpresentrowwidget") } else { if (g.initEverPresentRowWidget) { this.initeverpresentrowwidget = g.initEverPresentRowWidget } } if (b.jqx.hasProperty(g, "validateeverpresentrowwidgetvalue")) { this.validateeverpresentrowwidgetvalue = b.jqx.get(g, "validateeverpresentrowwidgetvalue") } else { if (g.validateEverPresentRowWidgetValue) { this.validateeverpresentrowwidgetvalue = g.validateEverPresentRowWidgetValue } } if (b.jqx.hasProperty(g, "destroyeverpresentrowwidget") || b.jqx.hasFunction(g, "destroyeverpresentrowwidget")) { this.destroyeverpresentrowwidget = b.jqx.get(g, "destroyeverpresentrowwidget") } else { if (g.destroyEverPresentRowWidget) { this.destroyEverPresentRowWidget = g.destroyEverPresentRowWidget } } if (b.jqx.hasProperty(g, "destroyEditor")) { this.destroyeditor = b.jqx.get(g, "destroyEditor") } else { if (g.destroyEditor) { this.destroyeditor = g.destroyEditor } } if (b.jqx.hasProperty(g, "getEditorValue")) { this.geteditorvalue = b.jqx.get(g, "getEditorValue") } else { if (g.getEditorValue) { this.geteditorvalue = g.getEditorValue } } if (b.jqx.hasProperty(g, "validation")) { this.validation = b.jqx.get(g, "validation") } else { if (g.validation) { this.validation = g.validation } } if (b.jqx.hasProperty(g, "cellBeginEdit")) { this.cellbeginedit = b.jqx.get(g, "cellBeginEdit") } else { if (g.cellBeginEdit) { this.cellbeginedit = g.cellBeginEdit } } if (b.jqx.hasProperty(g, "cellEndEdit")) { this.cellendedit = b.jqx.get(g, "cellEndEdit") } else { if (g.cellEndEdit) { this.cellendedit = g.cellEndEdit } } if (b.jqx.hasProperty(g, "className")) { this.classname = b.jqx.get(g, "className") } if (b.jqx.hasProperty(g, "cellClassName")) { this.cellclassname = b.jqx.get(g, "cellClassName") } else { if (g.cellClassName) { this.cellclassname = g.cellClassName } } if (b.jqx.hasProperty(g, "menu")) { this.menu = b.jqx.get(g, "menu") } if (b.jqx.hasProperty(g, "aggregates")) { this.aggregates = b.jqx.get(g, "aggregates") } if (b.jqx.hasProperty(g, "aggregatesRenderer")) { this.aggregatesrenderer = b.jqx.get(g, "aggregatesRenderer") } if (b.jqx.hasProperty(g, "createFilterWidget")) { this.createfilterwidget = b.jqx.get(g, "createFilterWidget") } if (b.jqx.hasProperty(g, "filterType")) { this.filtertype = b.jqx.get(g, "filterType") } if (b.jqx.hasProperty(g, "filterDelay")) { this.filterdelay = b.jqx.get(g, "filterDelay") } if (b.jqx.hasProperty(g, "rendered")) { this.rendered = b.jqx.get(g, "rendered") } if (b.jqx.hasProperty(g, "exportable")) { this.exportable = b.jqx.get(g, "exportable") } if (b.jqx.hasProperty(g, "filterItems")) { this.filteritems = b.jqx.get(g, "filterItems") } if (b.jqx.hasProperty(g, "cellValueChanging")) { this.cellvaluechanging = b.jqx.get(g, "cellValueChanging") } if (b.jqx.hasProperty(g, "draggable")) { this.draggable = b.jqx.get(g, "draggable") } if (b.jqx.hasProperty(g, "filterCondition")) { this.filtercondition = b.jqx.get(g, "filterCondition") } if (b.jqx.hasProperty(g, "threeStateCheckbox")) { this.threestatecheckbox = b.jqx.get(g, "threeStateCheckbox") } if (b.jqx.hasProperty(g, "nullable")) { this.nullable = b.jqx.get(g, "nullable") } if (b.jqx.hasProperty(g, "columnGroup")) { this.columngroup = b.jqx.get(g, "columnGroup") } if (!g instanceof String && !(typeof g == "string")) { for (var h in g) { if (!f.hasOwnProperty(h)) { if (!f.hasOwnProperty(h.toLowerCase())) { d.host.remove(); throw new Error("jqxGrid: Invalid property name - " + h + ".") } } } } } }; this._initfields(e); return this } function a(d, e) { this.setdata = function (f) { if (f != null) { this.bounddata = f; this.boundindex = f.boundindex; this.visibleindex = f.visibleindex; this.group = f.group; this.parentbounddata = f.parentItem; this.uniqueid = f.uniqueid; this.level = f.level } }; this.setdata(e); this.parentrow = null; this.subrows = new Array(); this.owner = d; this.height = 25; this.hidden = false; this.rowdetails = null; this.rowdetailsheight = 100; this.rowdetailshidden = true; this.top = -1; this.setrowinfo = function (f) { this.hidden = f.hidden; this.rowdetails = f.rowdetails; this.rowdetailsheight = f.rowdetailsheight; this.rowdetailshidden = !f.showdetails; this.height = f.height }; return this } b.jqx.collection = function (d) { this.records = new Array(); this.owner = d; this.updating = false; this.beginupdate = function () { this.updating = true }; this.resumeupdate = function () { this.updating = false }; this._raiseEvent = function (e) { }; this.clear = function () { this.records = new Array() }; this.replace = function (f, e) { this.records[f] = e; if (!this.updating) { this._raiseEvent({ type: "replace", element: e }) } }; this.isempty = function (e) { if (this.records[e] == undefined) { return true } return false }; this.initialize = function (e) { if (e < 1) { e = 1 } this.records[e - 1] = -1 }; this.length = function () { return this.records.length }; this.indexOf = function (e) { return this.records.indexOf(e) }; this.add = function (e) { if (e == null) { return false } this.records[this.records.length] = e; if (!this.updating) { this._raiseEvent({ type: "add", element: e }) } return true }; this.insertAt = function (f, e) { if (f == null || f == undefined) { return false } if (e == null) { return false } if (f >= 0) { if (f < this.records.length) { this.records.splice(f, 0, e); if (!this.updating) { this._raiseEvent({ type: "insert", index: f, element: e }) } return true } else { return this.add(e) } } return false }; this.remove = function (f) { if (f == null || f == undefined) { return false } var e = this.records.indexOf(f); if (e != -1) { this.records.splice(e, 1); if (!this.updating) { this._raiseEvent({ type: "remove", element: f }) } return true } return false }; this.removeAt = function (f) { if (f == null || f == undefined) { return false } if (f < 0) { return false } if (f < this.records.length) { var e = this.records[f]; this.records.splice(f, 1); if (!this.updating) { this._raiseEvent({ type: "removeAt", index: f, element: e }) } return true } return false }; return this }; b.jqx.dataview = function () { this.self = this; this.grid = null; this.uniqueId = "id"; this.records = []; this.rows = []; this.columns = []; this.groups = []; this.filters = new Array(); this.updated = null; this.update = null; this.suspend = false; this.pagesize = 0; this.pagenum = 0; this.totalrows = 0; this.totalrecords = 0; this.groupable = true; this.loadedrecords = []; this.loadedrootgroups = []; this.loadedgroups = []; this.loadedgroupsByKey = []; this.virtualmode = true; this._cachegrouppages = new Array(); this.source = null; this.changedrecords = new Array(); this.rowschangecallback = null; this.that = this; this.destroy = function () { delete this.self; delete this.grid; delete this.uniqueId; delete this.records; delete this.rows; delete this.columns; delete this.groups; delete this.filters; delete this.updated; delete this.update; delete this.suspend; delete this.pagesize; delete this.pagenum; delete this.totalrows; delete this.totalrecords; delete this.groupable; delete this.loadedrecords; delete this.loadedrootgroups; delete this.loadedgroups; delete this.loadedgroupsByKey; delete this.virtualmode; delete this._cachegrouppages; delete this.source; delete this.changedrecords; delete this.rowschangecallback; delete this.that }, this.suspendupdate = function () { this.suspend = true }, this.isupdating = function () { return this.suspend }, this.resumeupdate = function (d) { this.suspend = false; if (d == undefined) { d = true } this.refresh(d) }, this.getrecords = function () { return this.records }, this.clearrecords = function () { this.recordids = new Array() }; this.databind = function (q, l) { var p = q._source ? true : false; var g = null; if (p) { g = q; q = q._source } else { g = new b.jqx.dataAdapter(q, { autoBind: false }) } var e = function (m) { g.recordids = []; g.records = new Array(); g.cachedrecords = new Array(); g.originaldata = new Array(); g._options.virtualmode = m.virtualmode; g._options.totalrecords = m.totalrecords; g._options.originaldata = m.originaldata; g._options.recordids = m.recordids; g._options.cachedrecords = new Array(); g._options.pagenum = m.pagenum; g._options.pageable = m.pageable; if (q.type != undefined) { g._options.type = q.type } if (q.formatdata != undefined) { g._options.formatData = q.formatdata } if (q.contenttype != undefined) { g._options.contentType = q.contenttype } if (q.async != undefined) { g._options.async = q.async } if (q.updaterow != undefined) { g._options.updaterow = q.updaterow } if (q.addrow != undefined) { g._options.addrow = q.addrow } if (q.deleterow != undefined) { g._options.deleterow = q.deleterow } if (m.pagesize == 0) { m.pagesize = 10 } g._options.pagesize = m.pagesize }; var t = function (C) { C.totalrecords = g.totalrecords; if (!C.virtualmode) { C.originaldata = g.originaldata; C.records = g.records; C.recordids = g.recordids; C.cachedrecords = g.cachedrecords } else { var x = { startindex: C.pagenum * C.pagesize, endindex: (C.pagenum * C.pagesize + C.pagesize) }; if (q.recordstartindex != undefined) { x.startindex = parseInt(q.recordstartindex) } if (q.recordendindex != undefined) { x.endindex = parseInt(q.recordendindex) } else { if (!C.grid.pageable) { x.endindex = x.startindex + 100; if (C.grid.autoheight) { x.endindex = x.startindex + C.totalrecords } } } if (!q.recordendindex) { if (!C.grid.pageable) { x.endindex = x.startindex + 100; if (C.grid.autoheight) { x.endindex = x.startindex + C.totalrecords } } else { x = { startindex: C.pagenum * C.pagesize, endindex: (C.pagenum * C.pagesize + C.pagesize)} } } x.data = g.records; if (C.grid.rendergridrows && C.totalrecords > 0) { var E = 0; q.records = C.grid.rendergridrows(x); if (q.records.length) { E = q.records.length } if (q.records && !q.records[x.startindex]) { var m = new Array(); var D = x.startindex; b.each(q.records, function () { m[D] = this; D++; E++ }); q.records = m } if (E == 0) { if (q.records) { b.each(q.records, function () { E++ }) } } if (E > 0 && E < x.endindex - x.startindex && !C.grid.groupable) { var A = q.records[0]; for (var z = 0; z < x.endindex - x.startindex - E; z++) { var B = {}; for (obj in A) { B[obj] = "" } if (q.records.push) { q.records.push(B) } } } } if (!q.records || C.totalrecords == 0) { q.records = new Array() } C.originaldata = q.records; C.records = q.records; C.cachedrecords = q.records } }; e(this); this.source = q; if (l !== undefined) { uniqueId = l } var y = this.that; switch (q.datatype) { case "local": case "array": default: if (q.localdata == null) { q.localdata = [] } if (q.localdata != null) { g.unbindBindingUpdate(y.grid.element.id); if ((!y.grid.autobind && y.grid.isInitialized) || y.grid.autobind) { g.dataBind() } var k = function (x) { if (x != undefined && x != "") { var z = g._changedrecords[0]; if (z) { var A = new Array(); b.each(g._changedrecords, function (E) { var B = this.index; var C = this.record; y.grid._updateFromAdapter = true; switch (x) { case "update": var D = y.grid.getrowid(B); if (E == g._changedrecords.length - 1) { y.grid.updaterow(D, C) } else { y.grid.updaterow(D, C, false) } y.grid._updateFromAdapter = false; return; case "add": y.grid.addrow(null, C); y.grid._updateFromAdapter = false; return; case "remove": var D = y.grid.getrowid(B); A.push(D); return } }); if (A.length > 0) { y.grid.deleterow(A, false); y.grid._updateFromAdapter = false } } if (x == "update") { return } } var m = y.totalrecords; t(y, x); if (q.localdata.notifier === null && q.localdata.name == "observableArray") { q.localdata.notifier = function (F) { if (this._updating) { return } this._updating = true; var E = y.grid.getrowid(F.index); switch (F.type) { case "add": var B = b.extend({}, F.object[F.index]); var D = g.getid(q.id, B, F.index); if (F.index === 0) { y.grid.addrow(D, B, "first") } else { y.grid.addrow(D, B) } break; case "delete": y.grid.deleterow(E); break; case "update": if (F.path && F.path.split(".").length > 1) { var C = F.path.split("."); y.grid.setcellvalue(F.index, C[C.length - 1], F.newValue) } else { var B = b.extend({}, F.object[F.index]); y.grid.updaterow(E, B) } break } this._updating = false } } if (x == "updateData") { y.refresh(); y.grid._updateGridData() } else { if (q.recordstartindex && this.virtualmode) { y.updateview(q.recordstartindex, q.recordstartindex + y.pagesize) } else { y.refresh() } y.update(m != y.totalrecords) } }; k(); g.bindBindingUpdate(y.grid.element.id, k) } break; case "json": case "jsonp": case "xml": case "xhtml": case "script": case "text": case "csv": case "tab": if (q.localdata != null) { g.unbindBindingUpdate(y.grid.element.id); if ((!y.grid.autobind && y.grid.isInitialized) || y.grid.autobind) { g.dataBind() } var k = function (x) { var m = y.totalrecords; t(y); if (x == "updateData") { y.refresh(); y.grid._updateGridData() } else { if (q.recordstartindex && y.virtualmode) { y.updateview(q.recordstartindex, q.recordstartindex + y.pagesize) } else { y.refresh() } y.update(m != y.totalrecords) } }; k(); g.bindBindingUpdate(y.grid.element.id, k); return } var u = {}; var o = 0; var v = {}; for (var i = 0; i < this.filters.length; i++) { var f = this.filters[i].datafield; var j = this.filters[i].filter; if (!j.getfilters) { continue } var h = j.getfilters(); v[f + "operator"] = j.operator; for (var s = 0; s < h.length; s++) { h[s].datafield = f; var n = h[s].value; if (h[s].type == "datefilter") { if (h[s].value && h[s].value.toLocaleString) { var d = this.grid.getcolumn(h[s].datafield); if (d && d.cellsformat) { var r = this.grid.source.formatDate(h[s].value, d.cellsformat, this.grid.gridlocalization); if (r) { v["filtervalue" + o] = r } else { v["filtervalue" + o] = h[s].value.toLocaleString() } } else { v["filtervalue" + o] = n.toString() } } else { v["filtervalue" + o] = n.toString() } } else { v["filtervalue" + o] = n.toString(); if (h[s].data) { v["filterid" + o] = h[s].data.toString() } if (h[s].id) { v["filterid" + o] = h[s].id.toString() } } v["filtercondition" + o] = h[s].condition; v["filteroperator" + o] = h[s].operator; v["filterdatafield" + o] = f; o++ } } v.filterscount = o; v.groupscount = y.groups.length; for (var i = 0; i < y.groups.length; i++) { v["group" + i] = y.groups[i] } if (q.recordstartindex == undefined) { q.recordstartindex = 0 } if (q.recordendindex == undefined || q.recordendindex == 0) { if (y.grid.height && y.grid.height.toString().indexOf("%") == -1) { q.recordendindex = parseInt(y.grid.height) / y.grid.rowsheight; q.recordendindex += 2; q.recordendindex = parseInt(q.recordendindex) } else { q.recordendindex = b(window).height() / y.grid.rowsheight; q.recordendindex = parseInt(q.recordendindex) } if (this.pageable) { q.recordendindex = this.pagesize } } if (this.pageable) { q.recordstartindex = (this.pagenum) * this.pagesize; q.recordendindex = (this.pagenum + 1) * this.pagesize } b.extend(v, { sortdatafield: y.sortfield, sortorder: y.sortfielddirection, pagenum: y.pagenum, pagesize: y.grid.pagesize, recordstartindex: q.recordstartindex, recordendindex: q.recordendindex }); var w = g._options.data; if (g._options.data) { b.extend(g._options.data, v) } else { if (q.data) { b.extend(v, q.data) } g._options.data = v } var k = function () { var x = b.jqx.browser.msie && b.jqx.browser.version < 9; var z = function () { var A = y.totalrecords; t(y); if (q.recordstartindex && y.virtualmode) { y.updateview(q.recordstartindex, q.recordstartindex + y.pagesize) } else { y.refresh() } y.update(A != y.totalrecords) }; if (x) { try { z() } catch (m) { } } else { z() } }; g.unbindDownloadComplete(y.grid.element.id); g.bindDownloadComplete(y.grid.element.id, k); if ((!y.grid.autobind && y.grid.isInitialized) || y.grid.autobind) { g.dataBind() } else { if (!y.grid.isInitialized && !y.grid.autobind) { k() } } g._options.data = w } }; this.getid = function (g, e, f) { if (b(g, e).length > 0) { return b(g, e).text() } if (g) { if (g.toString().length > 0) { var d = b(e).attr(g); if (d != null && d.toString().length > 0) { return d } } } return f }; this.getvaluebytype = function (g, d) { var e = g; if (d.type == "date") { var f = new Date(g); if (f.toString() == "NaN" || f.toString() == "Invalid Date") { if (b.jqx.dataFormat) { g = b.jqx.dataFormat.tryparsedate(g) } else { g = f } } else { g = f } if (g == null) { g = e } } else { if (d.type == "float") { var g = parseFloat(g); if (isNaN(g)) { g = e } } else { if (d.type == "int") { var g = parseInt(g); if (isNaN(g)) { g = e } } else { if (d.type == "bool") { if (g != null) { if (g.toLowerCase() == "false") { g = false } else { if (g.toLowerCase() == "true") { g = true } } } if (g == 1) { g = true } else { if (g == 0) { g = false } else { g = "" } } } } } } return g }; this.setpaging = function (d) { if (d.pageSize != undefined) { this.pagesize = d.pageSize } if (d.pageNum != undefined) { this.pagenum = Math.min(d.pageNum, Math.ceil(this.totalrows / this.pagesize)) } this.refresh() }; this.getpagingdetails = function () { return { pageSize: this.pagesize, pageNum: this.pagenum, totalrows: this.totalrows} }; this._clearcaches = function () { this.sortcache = {}; this.sortdata = null; this.changedrecords = new Array(); this.records = new Array(); this.rows = new Array(); this.cacheddata = new Array(); this.originaldata = new Array(); this.bounditems = new Array(); this.loadedrecords = new Array(); this.loadedrootgroups = new Array(); this.loadedgroups = new Array(); this.loadedgroupsByKey = new Array(); this._cachegrouppages = new Array(); this.recordsbyid = new Array(); this.cachedrecords = new Array(); this.recordids = new Array() }; this.addfilter = function (g, f) { var e = -1; for (var d = 0; d < this.filters.length; d++) { if (this.filters[d].datafield == g) { e = d; break } } if (e == -1) { this.filters[this.filters.length] = { filter: f, datafield: g} } else { this.filters[e] = { filter: f, datafield: g} } }; this.removefilter = function (e) { for (var d = 0; d < this.filters.length; d++) { if (this.filters[d].datafield == e) { this.filters.splice(d, 1); break } } }; this.getItemFromIndex = function (d) { return this.records[d] }; this.updaterow = function (d, n, l) { var e = this.filters && this.filters.length > 0 && !this.virtualmode; if (!e && n != undefined && d != undefined) { n.uid = d; if (!(n[this.source.id])) { n[this.source.id] = n.uid } var j = this.recordsbyid["id" + d]; var k = this.records.indexOf(j); if (k == -1) { return false } this.records[k] = n; if (this.cachedrecords) { this.cachedrecords[k] = n } if (l == true || l == undefined) { this.refresh() } this.changedrecords[n.uid] = { Type: "Update", OldData: j, Data: n }; return true } else { if (this.filters && this.filters.length > 0) { var f = this.cachedrecords; var j = null; var k = -1; for (var h = 0; h < f.length; h++) { if (f[h].uid == d) { j = f[h]; k = h; break } } if (j) { var m = this.that; for (var g in n) { m.cachedrecords[k][g] = n[g] } if (l == true || l == undefined) { this.refresh() } return true } } } return false }; this.addrow = function (h, i, d, g) { if (i != undefined) { if (b.isEmptyObject(i)) { if (this.source && this.source.datafields) { b.each(this.source.datafields, function () { var j = ""; if (this.type == "number") { j = null } if (this.type == "date") { j = null } if (this.type == "bool" || this.type == "boolean") { j = false } i[this.name] = j }) } } if (!h || this.recordsbyid["id" + h]) { i.uid = this.getid(this.source.id, i, this.totalrecords); var e = this.recordsbyid["id" + i.uid]; while (e != null) { var f = Math.floor(Math.random() * 10000).toString(); i.uid = f; e = this.recordsbyid["id" + f] } } else { i.uid = h } if (!(i[this.source.id])) { if (this.source.id != undefined) { i[this.source.id] = i.uid } } if (d == "last") { this.records.push(i) } else { if (typeof d === "number" && isFinite(d)) { this.records.splice(d, 0, i) } else { this.records.splice(0, 0, i) } } if (this.filters && this.filters.length > 0) { if (d == "last") { this.cachedrecords.push(i) } else { if (typeof d === "number" && isFinite(d)) { this.cachedrecords.splice(d, 0, i) } else { this.cachedrecords.splice(0, 0, i) } } } this.totalrecords++; if (this.virtualmode) { this.source.totalrecords = this.totalrecords } if (g == true || g == undefined) { this.refresh() } this.changedrecords[i.uid] = { Type: "New", Data: i }; return true } return false }; this.deleterow = function (j, h) { if (j != undefined) { var d = this.filters && this.filters.length > 0; if (this.recordsbyid["id" + j] && !d) { var e = this.recordsbyid["id" + j]; var k = this.records.indexOf(e); this.changedrecords[j] = { Type: "Delete", Data: this.records[k] }; this.records.splice(k, 1); this.totalrecords--; if (this.virtualmode) { this.source.totalrecords = this.totalrecords } if (h == true || h == undefined) { this.refresh() } return true } else { if (this.filters && this.filters.length > 0) { var f = this.cachedrecords; var e = null; var k = -1; for (var g = 0; g < f.length; g++) { if (f[g].uid == j) { e = f[g]; k = g; break } } if (e) { this.cachedrecords.splice(k, 1); if (h == true || h == undefined) { this.totalrecords = 0; this.records = this.cachedrecords; this.refresh() } return true } } } return false } return false }; this.reload = function (f, d, r, g, h, u, t) { var m = this.that; var l = new Array(); var o = f; var i = d; var j = r; var p = g; var k = i.length; var w = 0; var e = 0; var s, n; this.columns = []; this.bounditems = new Array(); this.loadedrecords = new Array(); this.loadedrootgroups = new Array(); this.loadedgroups = new Array(); this.loadedgroupsByKey = new Array(); this._cachegrouppages = new Array(); this.recordsbyid = {}; if (this.totalrecords == 0) { Object.size = function (z) { var y = 0, x; for (x in z) { if (z.hasOwnProperty(x)) { y++ } } return y }; var v = Object.size(o); this.totalrecords = v; b.each(this.records, function (y) { var z = this; var x = 0; b.each(z, function (A, B) { m.columns[x++] = A }); return false }) } if (this.virtualmode) { if (this.pageable) { this.updateview(); return } var u = 0; if (!this.groupable) { this.updateview(); return } else { var t = this.totalrecords } } else { var u = 0; var t = this.totalrecords } if (this.groupable && this.groups.length > 0 && this.loadgrouprecords) { var q = u; q = this.loadgrouprecords(0, u, t, j, e, p, i, k, l) } else { w = this.loadflatrecords(u, t, j, e, p, i, k, l) } if (k > e) { i.splice(e, k - e) } if (this.groups.length > 0 && this.groupable) { this.totalrows = q } else { this.totalrows = w } return l }; this.loadflatrecords = function (d, o, e, p, l, u, n, q) { var t = this.that; var k = d; var m = d; o = Math.min(o, this.totalrecords); var g = this.sortdata != null; var f = this.source.id && (this.source.datatype == "local" || this.source.datatype == "array" || this.source.datatype == ""); var j = g ? this.sortdata : this.records; for (var h = d; h < o; h++) { var s = {}; if (!g) { s = b.extend({}, j[h]); id = s[t.uniqueId]; s.boundindex = k; t.loadedrecords[k] = s; if (s.uid == undefined) { s.uid = t.getid(t.source.id, s, k) } t.recordsbyid["id" + s.uid] = j[h]; s.uniqueid = t.generatekey(); t.bounditems[this.bounditems.length] = s } else { s = b.extend({}, j[h].value); id = s[t.uniqueId]; s.boundindex = j[h].index; if (s.uid == undefined) { s.uid = t.getid(t.source.id, s, s.boundindex) } t.recordsbyid["id" + s.uid] = j[h].value; t.loadedrecords[k] = s; s.uniqueid = t.generatekey(); t.bounditems[s.boundindex] = s } if (p >= n || id != u[p][t.uniqueId] || (l && l[id])) { q[q.length] = p } u[p] = s; p++; s.visibleindex = m; m++; k++ } if (t.grid.summaryrows) { var r = k; b.each(t.grid.summaryrows, function () { var i = b.extend({}, this); i.boundindex = o++; t.loadedrecords[r] = i; i.uniqueid = t.generatekey(); t.bounditems[t.bounditems.length] = i; u[p] = i; p++; i.visibleindex = m; m++; r++ }) } return m }, this.updateview = function (o, p) { var r = this.that; var k = this.pagesize * this.pagenum; var n = 0; var s = new Array(); var e = this.filters; var j = this.updated; var l = s.length; if (this.pageable) { if (this.virtualmode) { if (!this.groupable || this.groups.length == 0) { this.loadflatrecords(this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum), e, n, j, s, l, []); this.totalrows = s.length } else { if (this.groupable && this.groups.length > 0 && this.loadgrouprecords) { if (this._cachegrouppages[this.pagenum + "_" + this.pagesize] != undefined) { this.rows = this._cachegrouppages[this.pagenum + "_" + this.pagesize]; this.totalrows = this.rows.length; return } var m = this.pagesize * (1 + this.pagenum); if (m > this.totalrecords) { m = this.totalrecords } this.loadgrouprecords(0, this.pagesize * this.pagenum, m, e, n, j, s, l, []); this._cachegrouppages[this.pagenum + "_" + this.pagesize] = this.rows; this.totalrows = this.rows.length; return } } } } else { if (this.virtualmode && (!this.groupable || this.groups.length == 0)) { var g = this.pagesize; if (g == 0) { g = Math.min(100, this.totalrecords) } var d = g * this.pagenum; if (this.loadedrecords.length == 0) { d = 0 } if (o != null && p != null) { this.loadflatrecords(o, p, e, n, j, s, l, []) } else { this.loadflatrecords(this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum), e, n, j, s, l, []) } this.totalrows = this.loadedrecords.length; this.rows = s; if (s.length >= g) { return } } } if (this.groupable && this.pageable && this.groups.length > 0 && this._updategroupsinpage) { s = this._updategroupsinpage(r, e, k, n, l, this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum)) } else { for (var h = this.pagesize * this.pagenum; h < this.pagesize * (1 + this.pagenum); h++) { var q = h < this.loadedrecords.length ? this.loadedrecords[h] : null; if (q == null) { continue } if (!this.pagesize || (k >= this.pagesize * this.pagenum && k <= this.pagesize * (this.pagenum + 1))) { s[n] = q; n++ } k++ } } if ((s.length == 0 || s.length < this.pagesize) && !this.pageable && this.virtualmode) { n = s.length; var f = s.length; for (var h = this.pagesize * this.pagenum; h < this.pagesize * (1 + this.pagenum) - f; h++) { var q = {}; q.boundindex = h + f; q.visibleindex = h + f; q.uniqueid = r.generatekey(); q.empty = true; r.bounditems[h + f] = q; s[n] = q; n++ } } this.rows = s }; this.generatekey = function () { var d = function () { return (((1 + Math.random()) * 16) | 0) }; return ("" + d() + d() + "-" + d() + "-" + d() + "-" + d() + "-" + d() + d() + d()) }; this.reloaddata = function () { this.reload(this.records, this.rows, this.filter, this.updated, true) }; this.refresh = function (h) { if (this.suspend) { return } if (h == undefined) { h = true } var l = this.rows.length; var k = this.totalrows; if (this.filters.length > 0 && !this.virtualmode) { var e = ""; var g = this.cachedrecords.length; var s = new Array(); this.totalrecords = 0; var n = this.cachedrecords; this._dataIndexToBoundIndex = new Array(); var f = this.filters.length; if (this.source != null && this.source.filter != undefined && this.source.localdata != undefined) { s = this.source.filter(this.filters, n, g); if (s == undefined) { s = new Array() } this.records = s } else { if (this.source.filter == null || this.source.filter == undefined) { for (var u = 0; u < g; u++) { var o = n[u]; var d = undefined; for (var m = 0; m < f; m++) { var e = this.filters[m].filter; var r = o[this.filters[m].datafield]; var t = e.evaluate(r); if (d == undefined) { d = t } else { if (e.operator == "or") { d = d || t } else { d = d && t } } } if (d) { s[s.length] = b.extend({ dataindex: u }, o); this._dataIndexToBoundIndex[u] = { boundindex: s.length - 1} } else { this._dataIndexToBoundIndex[u] = null } } this.records = s } } if (this.sortdata) { var i = this.sortfield; if (this.sortcache[i]) { this.sortdata = null; var p = this.sortcache[i].direction; this.sortcache[i] = null; this.sortby(this.sortfield, p); return } } } else { if (this.filters.length == 0 && !this.virtualmode) { if (this.cachedrecords) { this.totalrecords = 0; var n = this.cachedrecords; this.records = n; if (this.sortdata) { var i = this.sortfield; if (this.sortcache[i]) { this.sortdata = null; var p = this.sortcache[i].direction; this.sortcache[i] = null; this.sortby(this.sortfield, p); return } } } } } var q = this.reload(this.records, this.rows, this.filter, this.updated, h); this.updated = null; if (this.rowschangecallback != null) { if (k != totalrows) { this.rowschangecallback({ type: "PagingChanged", data: getpagingdetails() }) } if (l != rows.length) { this.rowschangecallback({ type: "RowsCountChanged", data: { previous: l, current: rows.length} }) } if (q.length > 0 || l != rows.length) { this.rowschangecallback({ type: "RowsChanged", data: { previous: l, current: rows.length, diff: q} }) } } }; return this } })(jqxBaseFramework);

/*
jqxgrid.sort
*/

(function (a) { a.jqx.dataview.sort = function () { this.sortby = function (d, f, p) { var m = Object.prototype.toString; if (f == null) { this.sortdata = null; this.sortcache = {}; this.grid._pagescache = new Array(); this.grid._cellscache = new Array(); this.refresh(); return } if (f == undefined) { f = true } if (f == "a" || f == "asc" || f == "ascending" || f == true) { f = true } else { f = false } var g = d; this.sortfield = d; this.sortfielddirection = f ? "asc" : "desc"; if (this.sortcache == undefined) { this.sortcache = {} } this.sortdata = []; var b = []; var c = false; if (g == "constructor") { g = "" } if (!this.virtualmode && this.sortcache[g] != null) { var o = this.sortcache[g]; b = o._sortdata; if (o.direction == f) { b.reverse() } else { if (!o.direction && f) { b.reverse() } c = true } if (b.length < this.totalrecords) { this.sortcache = {}; c = false; b = [] } } Object.prototype.toString = (typeof d == "function") ? d : function () { return this[d] }; var r = this.records; var t = this.that; var n = ""; if (this.source.datafields) { a.each(this.source.datafields, function () { if (this.name == d) { if (this.type) { n = this.type } return false } }) } if (b.length == 0) { if (r.length) { var h = r.length; for (var q = 0; q < h; q++) { var e = r[q]; if (e != null) { var j = e; var s = j.toString(); b.push({ sortkey: s, value: j, index: q }) } } } else { var l = false; for (obj in r) { var e = r[obj]; if (e == undefined) { l = true; break } var j = e; b.push({ sortkey: j.toString(), value: j, index: obj }) } if (l) { a.each(r, function (u, v) { b.push({ sortkey: v.toString(), value: v, index: u }) }) } } } if (!c) { if (p == null) { this._sortcolumntype = n; var k = this; b.sort(function (u, i) { return k._compare(u, i, n) }) } else { b.sort(p) } } if (!f) { b.reverse() } Object.prototype.toString = m; this.sortdata = b; this.sortcache[g] = { _sortdata: b, direction: f }; this.reload(this.records, this.rows, this.filters, this.updated, true) }, this.clearsortdata = function () { this.sortcache = {}; this.sortdata = null }; this._compare = function (c, b, e) { var c = c.sortkey; var b = b.sortkey; if (c === undefined) { c = null } if (b === undefined) { b = null } if (c === null && b === null) { return 0 } if (c === null && b !== null) { return -1 } if (c !== null && b === null) { return 1 } if (a.jqx.dataFormat) { if (e && e != "") { switch (e) { case "number": case "int": case "float": if (c < b) { return -1 } if (c > b) { return 1 } return 0; case "date": case "time": if (c < b) { return -1 } if (c > b) { return 1 } return 0; case "string": case "text": c = String(c).toLowerCase(); b = String(b).toLowerCase(); break } } else { if (a.jqx.dataFormat.isNumber(c) && a.jqx.dataFormat.isNumber(b)) { if (c < b) { return -1 } if (c > b) { return 1 } return 0 } else { if (a.jqx.dataFormat.isDate(c) && a.jqx.dataFormat.isDate(b)) { if (c < b) { return -1 } if (c > b) { return 1 } return 0 } else { if (!a.jqx.dataFormat.isNumber(c) && !a.jqx.dataFormat.isNumber(b)) { c = String(c).toLowerCase(); b = String(b).toLowerCase() } } } } } try { if (c < b) { return -1 } if (c > b) { return 1 } } catch (d) { var f = d } return 0 }; this._equals = function (c, b) { return (this._compare(c, b) === 0) } }; a.extend(a.jqx._jqxGrid.prototype, { _rendersortcolumn: function () { var b = this.that; var d = this.getsortcolumn(); if (this.sortdirection) { var c = function (f, g) { var e = b.getcolumn(f); if (e) { if (g.ascending) { a.jqx.aria(e.element, "aria-sort", "ascending") } else { if (g.descending) { a.jqx.aria(e.element, "aria-sort", "descending") } else { a.jqx.aria(e.element, "aria-sort", "none") } } } }; if (this._oldsortinfo) { if (this._oldsortinfo.column) { c(this._oldsortinfo.column, { ascending: false, descending: false }) } } c(d, this.sortdirection) } this._oldsortinfo = { column: d, direction: this.sortdirection }; if (this.sortdirection) { a.each(this.columns.records, function (f, g) { var e = a.data(document.body, "groupsortelements" + this.displayfield); if (d == null || this.displayfield != d) { a(this.sortasc).hide(); a(this.sortdesc).hide(); if (e != null) { e.sortasc.hide(); e.sortdesc.hide() } } else { if (b.sortdirection.ascending) { a(this.sortasc).show(); a(this.sortdesc).hide(); if (e != null) { e.sortasc.show(); e.sortdesc.hide() } } else { a(this.sortasc).hide(); a(this.sortdesc).show(); if (e != null) { e.sortasc.hide(); e.sortdesc.show() } } } }) } }, getsortcolumn: function () { if (this.sortcolumn != undefined) { return this.sortcolumn } return null }, removesort: function () { this.sortby(null) }, sortby: function (d, g, f, e, b) { if (this._loading && b !== false) { throw new Error("jqxGrid: " + this.loadingerrormessage); return false } if (d == null) { g = null; d = this.sortcolumn } if (d != undefined) { var c = this.that; if (f == undefined && c.source.sortcomparer != null) { f = c.source.sortcomparer } if (g == "a" || g == "asc" || g == "ascending" || g == true) { ascending = true } else { ascending = false } if (g != null) { c.sortdirection = { ascending: ascending, descending: !ascending} } else { c.sortdirection = { ascending: false, descending: false} } if (g != null) { c.sortcolumn = d } else { c.sortcolumn = null } if (c.source.sort || c.virtualmode) { c.dataview.sortfield = d; if (g == null) { c.dataview.sortfielddirection = "" } else { c.dataview.sortfielddirection = ascending ? "asc" : "desc" } if (c.source.sort && !this._loading) { c.source.sort(d, g); c._raiseEvent(6, { sortinformation: c.getsortinformation() }); return } } else { c.dataview.sortby(d, g, f) } if (e === false) { return } if (c.groupable && c.groups.length > 0) { c._render(true, false, false); if (c._updategroupheadersbounds && c.showgroupsheader) { c._updategroupheadersbounds() } c._postrender("sort") } else { if (c.pageable) { c.dataview.updateview() } c._updaterowsproperties(); c.rendergridcontent(true); c._postrender("sort") } c._raiseEvent(6, { sortinformation: c.getsortinformation() }) } }, _togglesort: function (d) { var b = this.that; if (this.disabled) { return } if (d.sortable && b.sortable) { var c = b.getsortinformation(); var e = null; if (c.sortcolumn != null && c.sortcolumn == d.displayfield) { e = c.sortdirection.ascending; if (b.sorttogglestates > 1) { if (e == true) { e = false } else { e = null } } else { e = !e } } else { e = true } b.sortby(d.displayfield, e, null) } } }) })(jqxBaseFramework);

/*
jqxgrid.selection
*/

(function (a) { a.extend(a.jqx._jqxGrid.prototype, { selectallrows: function () { this._trigger = false; var d = this.virtualmode ? this.dataview.totalrecords : this.dataview.loadedrecords.length; this.selectedrowindexes = new Array(); var e = this.dataview.loadedrecords; for (var c = 0; c < d; c++) { var f = e[c]; if (!f) { this.selectedrowindexes[c] = c; continue } var b = this.getboundindex(f); if (b != undefined) { this.selectedrowindexes[c] = b } } if (this.selectionmode == "checkbox" && !this._checkboxcolumnupdating) { if (this._checkboxcolumn) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: true }) } } this._renderrows(this.virtualsizeinfo); this._trigger = true; if (this.selectionmode == "checkbox") { this._raiseEvent(2, { rowindex: this.selectedrowindexes }) } }, unselectallrows: function () { this._trigger = false; var c = this.virtualmode ? this.dataview.totalrecords : this.dataview.loadedrecords.length; this.selectedrowindexes = new Array(); var d = this.dataview.loadedrecords; for (var b = 0; b < c; b++) { var e = d[b]; if (!e) { this.selectedrowindexes[b] = b; continue } delete this.selectedrowindexes[b] } if (this.selectionmode == "checkbox" && !this._checkboxcolumnupdating) { if (this._checkboxcolumn) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: false }) } } this._renderrows(this.virtualsizeinfo); this._trigger = true; if (this.selectionmode == "checkbox") { this._raiseEvent(2, { rowindex: this.selectedrowindexes }) } }, selectrow: function (b, c) { this._applyrowselection(b, true, c); if (c !== false) { this._updatecheckboxselection() } }, _updatecheckboxselection: function () { if (this.selectionmode == "checkbox") { var d = this.getrows(); if (d && this._checkboxcolumn) { if (d.length === 0) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: false }); return } var c = d.length; if (this.groupable) { c = this.dataview.loadedrecords.length } if (this.virtualmode) { c = this.source._source.totalrecords } var b = this.selectedrowindexes.length; if (b === c) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: true }) } else { if (b === 0) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: false }) } else { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: null }) } } } } }, unselectrow: function (b, c) { this._applyrowselection(b, false, c); if (c !== false) { this._updatecheckboxselection() } }, selectcell: function (c, b) { this._applycellselection(c, b, true) }, unselectcell: function (c, b) { this._applycellselection(c, b, false) }, clearselection: function (c, d) { this._trigger = false; this.selectedrowindex = -1; this._oldselectedcell = null; if (d !== false) { for (var b = 0; b < this.selectedrowindexes.length; b++) { this._raiseEvent(3, { rowindex: this.selectedrowindexes[b] }) } } this.selectedrowindexes = new Array(); this.selectedcells = new Array(); this.selectedcell = null; if (this.selectionmode == "checkbox" && !this._checkboxcolumnupdating) { this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: false }) } if (false === c) { this._trigger = true; return } this._renderrows(this.virtualsizeinfo); this._trigger = true; if (this.selectionmode == "checkbox") { this._raiseEvent(3, { rowindex: this.selectedrowindexes }) } }, getselectedrowindex: function () { if (this.selectedrowindex == -1 || this.selectedrowindex == undefined) { for (var b = 0; b < this.selectedrowindexes.length; b++) { return this.selectedrowindexes[b] } } return this.selectedrowindex }, getselectedrowindexes: function () { return this.selectedrowindexes }, getselectedcell: function () { if (!this.selectedcell) { return null } var b = this.selectedcell; b.row = this.selectedcell.rowindex; b.column = this.selectedcell.datafield; b.value = this.getcellvalue(b.row, b.column); return b }, getselectedcells: function () { var b = new Array(); for (obj in this.selectedcells) { b[b.length] = this.selectedcells[obj] } return b }, _getcellsforcopypaste: function () { var e = new Array(); if (this.selectionmode.indexOf("cell") == -1) { var h = this.selectedrowindexes; for (var d = 0; d < h.length; d++) { var c = h[d]; for (var f = 0; f < this.columns.records.length; f++) { if (this.columns.records[f].datafield === "_checkboxcolumn") { continue } var g = c + "_" + this.columns.records[f].datafield; var b = { rowindex: c, datafield: this.columns.records[f].datafield }; e.push(b) } } } return e }, deleteselection: function () { var d = this; var f = d.getselectedcells(); if (this.selectionmode.indexOf("cell") == -1) { f = this._getcellsforcopypaste() } if (f != null && f.length > 0) { for (var e = 0; e < f.length; e++) { var b = f[e]; var g = d.getcolumn(b.datafield); var h = d.getcellvalue(b.rowindex, b.datafield); if (!g) { continue } if (h !== "") { var c = null; if (g.columntype == "checkbox") { if (!g.threestatecheckbox) { c = false } } d._raiseEvent(17, { rowindex: b.rowindex, datafield: b.datafield, value: h }); if (e == f.length - 1) { d.setcellvalue(b.rowindex, b.datafield, c, true); if (g.displayfield != g.datafield) { d.setcellvalue(b.rowindex, g.displayfield, c, true) } } else { d.setcellvalue(b.rowindex, b.datafield, c, false); if (g.displayfield != g.datafield) { d.setcellvalue(b.rowindex, g.displayfield, c, true) } } d._raiseEvent(18, { rowindex: b.rowindex, datafield: b.datafield, oldvalue: h, value: c }) } } this.dataview.updateview(); this._renderrows(this.virtualsizeinfo) } }, copyselection: function () { var n = ""; var s = this; this.clipboardselection = {}; this.logicalclipboardselection = {}; this._clipboardselection = []; var r = s.getselectedcells(); if (this.selectionmode.indexOf("cell") == -1) { r = this._getcellsforcopypaste() } var b = 0; var e = new Array(); if (r != null && r.length > 0) { var t = 999999999999999; var q = -1; for (var j = 0; j < r.length; j++) { var l = r[j]; var d = s.getcolumn(l.datafield); if (d != null && d.clipboard && (!d.hidden || this.copytoclipboardhiddencolumns)) { if (e.indexOf(d.text) == -1) { e.push(d.text) } var p = s.getcelltext(l.rowindex, d.displayfield); var h = this.getrowdisplayindex(l.rowindex); if (!this.clipboardselection[h]) { this.clipboardselection[h] = {} } this.clipboardselection[h][d.displayfield] = p; if (!this.logicalclipboardselection[h]) { this.logicalclipboardselection[h] = {} } this.logicalclipboardselection[h][d.displayfield] = p; if (d.displayfield != d.datafield) { this.logicalclipboardselection[h][d.datafield] = s.getcellvalue(l.rowindex, d.datafield) } t = Math.min(t, h); q = Math.max(q, h) } } var g = new Array(); for (var f = t; f <= q; f++) { if (!this.logicalclipboardselection[f]) { continue } var o = a.extend({}, this.logicalclipboardselection[f]); g.push(o) } this.logicalclipboardselection = g; if (this.copytoclipboardwithheaders) { for (var c = 0; c < e.length; c++) { if (c > 0) { n += "\t" } n += e[c] } n += "\r\n" } for (var f = t; f <= q; f++) { var k = 0; this._clipboardselection[this._clipboardselection.length] = new Array(); if (this.clipboardselection[f] != undefined) { a.each(this.clipboardselection[f], function (i, m) { if (k > 0) { n += "\t" } var u = m; if (m == null) { u = "" } s._clipboardselection[s._clipboardselection.length - 1][k] = u; k++; n += u }) } else { continue } if (f < q) { n += "\r\n" } } } this.clipboardselectedtext = n; return n }, pasteselection: function () { var g = this.getselectedcells(); this._oldselectedcell = null; if (this.selectionmode.indexOf("cell") == -1) { g = this._getcellsforcopypaste() } if (g != null && g.length > 0) { var h = g[0].rowindex; var w = this.getrowdisplayindex(h); var q = g[0].datafield; var u = this._getcolumnindex(q); var o = 0; this.selectedrowindexes = new Array(); this.selectedcells = new Array(); var k = g.length; var B = 0; var d = new Array(); if (this.copytoclipboardwithheaders) { this._clipboardselection.splice(0, 1) } for (var z = 0; z < this._clipboardselection.length; z++) { B += this._clipboardselection[z].length; d[z] = new Array(); for (var y = 0; y < this._clipboardselection[z].length; y++) { var r = this._clipboardselection[z][y]; d[z].push(r) } } if (B < g.length) { var n = new Array(); for (var z = 0; z < g.length; z++) { var e = g[z]; if (!n[e.rowindex]) { n[e.rowindex] = new Array() } n[e.rowindex].push(e) } var A = 0; var D = 0; for (var z = 0; z < n.length; z++) { if (!n[z]) { continue } for (var y = 0; y < n[z].length; y++) { var e = n[z][y]; var m = e.rowindex; var f = this.getcolumn(e.datafield); if (f.datafield === "_checkboxcolumn") { continue } if (f.hidden) { continue } var r = ""; if (!d[A][D]) { D = 0 } r = d[A][D]; D++; if (f.cellsformat) { if (f.cellsformat.indexOf("p") != -1 || f.cellsformat.indexOf("c") != -1 || f.cellsformat.indexOf("n") != -1 || f.cellsformat.indexOf("f") != -1) { if (r.indexOf(this.gridlocalization.currencysymbol) > -1) { r = r.replace(this.gridlocalization.currencysymbol, "") } var b = function (x, j, t) { var c = x; if (j == t) { return x } var i = c.indexOf(j); while (i != -1) { c = c.replace(j, t); i = c.indexOf(j) } return c }; r = b(r, this.gridlocalization.thousandsseparator, ""); r = r.replace(this.gridlocalization.decimalseparator, "."); if (r.indexOf(this.gridlocalization.percentsymbol) > -1) { r = r.replace(this.gridlocalization.percentsymbol, "") } var E = ""; for (var s = 0; s < r.length; s++) { var p = r.substring(s, s + 1); if (p === "-") { E += "-" } if (p === ".") { E += "." } if (p.match(/^[0-9]+$/) != null) { E += p } } r = E; r = r.replace(/ /g, ""); r = new Number(r); if (isNaN(r)) { r = "" } } } this._raiseEvent(17, { rowindex: m, datafield: e.datafield, value: r }); this.setcellvalue(m, f.displayfield, r, false); if (f.displayfield != f.datafield && this.logicalclipboardselection) { if (this.logicalclipboardselection[m]) { var v = this.logicalclipboardselection[m][f.datafield]; if (v != undefined) { this.setcellvalue(m, f.datafield, v, false) } } } this._raiseEvent(18, { rowindex: m, datafield: e.datafield, oldvalue: this.getcellvalue(e.rowindex, e.datafield), value: r }); this._applycellselection(m, e.datafield, true, false) } A++; if (!d[A]) { A = 0 } } } else { if (!this._clipboardselection) { return } for (var l = 0; l < this._clipboardselection.length; l++) { for (var C = 0; C < this._clipboardselection[l].length; C++) { var f = this.getcolumnat(u + C); if (!f) { continue } if (f.datafield === "_checkboxcolumn") { continue } if (f.hidden) { continue } var m = this.getrowboundindex(w + l); var e = this.getcell(m, f.datafield); var r = null; r = this._clipboardselection[l][C]; if (r != null) { if (f.cellsformat) { if (f.cellsformat.indexOf("p") != -1 || f.cellsformat.indexOf("c") != -1 || f.cellsformat.indexOf("n") != -1 || f.cellsformat.indexOf("f") != -1) { if (r.indexOf(this.gridlocalization.currencysymbol) > -1) { r = r.replace(this.gridlocalization.currencysymbol, "") } var b = function (x, j, t) { var c = x; if (j == t) { return x } var i = c.indexOf(j); while (i != -1) { c = c.replace(j, t); i = c.indexOf(j) } return c }; r = b(r, this.gridlocalization.thousandsseparator, ""); r = r.replace(this.gridlocalization.decimalseparator, "."); if (r.indexOf(this.gridlocalization.percentsymbol) > -1) { r = r.replace(this.gridlocalization.percentsymbol, "") } var E = ""; for (var s = 0; s < r.length; s++) { var p = r.substring(s, s + 1); if (p === "-") { E += "-" } if (p === ".") { E += "." } if (p.match(/^[0-9]+$/) != null) { E += p } } r = E; r = r.replace(/ /g, ""); r = new Number(r); if (isNaN(r)) { r = "" } } } this._raiseEvent(17, { rowindex: m, datafield: e.datafield, value: r }); this.setcellvalue(m, f.displayfield, r, false); if (f.displayfield != f.datafield && this.logicalclipboardselection) { var v = this.logicalclipboardselection[l][f.datafield]; if (v != undefined) { this.setcellvalue(m, f.datafield, v, false) } } this._raiseEvent(18, { rowindex: m, datafield: e.datafield, oldvalue: this.getcellvalue(e.rowindex, e.datafield), value: r }); this._applycellselection(m, e.datafield, true, false) } } } } if (this.selectionmode == "checkbox") { this._updatecheckboxselection() } this.dataview.updateview(); this._renderrows(this.virtualsizeinfo) } if (this.clipboardend) { this.clipboardend("paste") } }, _applyrowselection: function (e, i, f, h, b) { if (e == null) { return false } var j = this.selectedrowindex; if (this.selectionmode == "singlerow") { if (i) { this._raiseEvent(2, { rowindex: e, row: this.getrowdata(e) }) } else { this._raiseEvent(3, { rowindex: e, row: this.getrowdata(e) }) } this._raiseEvent(3, { rowindex: j }); this.selectedrowindexes = new Array(); this.selectedcells = new Array() } if (h == true) { this.selectedrowindexes = new Array() } if (this.dataview.filters.length > 0) { var c = this.getrowdata(e); if (c && c.dataindex !== undefined) { e = c.dataindex } else { if (c && c.dataindex === undefined) { if (c.uid != undefined) { e = this.getrowboundindexbyid(c.uid) } } } } var d = this.selectedrowindexes.indexOf(e); if (i) { this.selectedrowindex = e; if (d == -1) { this.selectedrowindexes.push(e); if (this.selectionmode != "singlerow") { this._raiseEvent(2, { rowindex: e, row: this.getrowdata(e) }) } } else { if (this.selectionmode == "multiplerows") { this.selectedrowindexes.splice(d, 1); this._raiseEvent(3, { rowindex: this.selectedrowindex, row: this.getrowdata(e) }); this.selectedrowindex = this.selectedrowindexes.length > 0 ? this.selectedrowindexes[this.selectedrowindexes.length - 1] : -1 } } } else { if (d >= 0 || this.selectionmode == "singlerow" || this.selectionmode == "multiplerowsextended" || this.selectionmode == "multiplerowsadvanced") { var g = this.selectedrowindexes[d]; this.selectedrowindexes.splice(d, 1); this._raiseEvent(3, { rowindex: g, row: this.getrowdata(e) }); this.selectedrowindex = -1 } } if (f == undefined || f) { this._rendervisualrows() } return true }, _applycellselection: function (e, b, h, f) { if (e == null) { return false } if (b == null) { return false } var j = this.selectedrowindex; if (this.selectionmode == "singlecell") { var d = this.selectedcell; if (d != null) { this._raiseEvent(16, { rowindex: d.rowindex, datafield: d.datafield }) } this.selectedcells = new Array() } if (this.selectionmode == "multiplecellsextended" || this.selectionmode == "multiplecellsadvanced") { var d = this.selectedcell; if (d != null) { this._raiseEvent(16, { rowindex: d.rowindex, datafield: d.datafield }) } } var g = e + "_" + b; if (this.dataview.filters.length > 0) { var c = this.getrowdata(e); if (c && c.dataindex !== undefined) { e = c.dataindex; var g = e + "_" + b } else { if (c && c.dataindex === undefined) { if (c.uid) { e = this.getrowboundindexbyid(c.uid); var g = e + "_" + b } } } } var i = { rowindex: e, datafield: b }; if (h) { this.selectedcell = i; if (!this.selectedcells[g]) { this.selectedcells[g] = i; this.selectedcells.length++; this._raiseEvent(15, i) } else { if (this.selectionmode == "multiplecells" || this.selectionmode == "multiplecellsextended" || this.selectionmode == "multiplecellsadvanced") { delete this.selectedcells[g]; if (this.selectedcells.length > 0) { this.selectedcells.length-- } this._raiseEvent(16, i) } } } else { delete this.selectedcells[g]; if (this.selectedcells.length > 0) { this.selectedcells.length-- } this._raiseEvent(16, i) } if (f == undefined || f) { this._rendervisualrows() } return true }, _getcellindex: function (b) { var c = -1; a.each(this.selectedcells, function () { c++; if (this[b]) { return false } }); return c }, _clearhoverstyle: function () { if (undefined == this.hoveredrow || this.hoveredrow == -1) { return } if (this.vScrollInstance.isScrolling()) { return } if (this.hScrollInstance.isScrolling()) { return } var b = this.table.find(".jqx-grid-cell-hover"); if (b.length > 0) { b.removeClass(this.toTP("jqx-grid-cell-hover")); b.removeClass(this.toTP("jqx-fill-state-hover")) } this.hoveredrow = -1 }, _clearselectstyle: function () { var k = this.table[0].rows.length; var p = this.table[0].rows; var l = this.toTP("jqx-grid-cell-selected"); var c = this.toTP("jqx-fill-state-pressed"); var m = this.toTP("jqx-grid-cell-hover"); var h = this.toTP("jqx-fill-state-hover"); for (var g = 0; g < k; g++) { var b = p[g]; var f = b.cells.length; var o = b.cells; for (var e = 0; e < f; e++) { var d = o[e]; var n = a(d); if (d.className.indexOf("jqx-grid-cell-selected") != -1) { n.removeClass(l); n.removeClass(c) } if (d.className.indexOf("jqx-grid-cell-hover") != -1) { n.removeClass(m); n.removeClass(h) } } } }, _selectpath: function (n, e) { var l = this; var i = this._lastClickedCell ? Math.min(this._lastClickedCell.row, n) : 0; var k = this._lastClickedCell ? Math.max(this._lastClickedCell.row, n) : 0; if (i <= k) { var h = this._getcolumnindex(this._lastClickedCell.column); var g = this._getcolumnindex(e); var f = Math.min(h, g); var d = Math.max(h, g); this.selectedcells = new Array(); var m = this.dataview.loadedrecords; for (var b = i; b <= k; b++) { for (var j = f; j <= d; j++) { var n = m[b]; this._applycellselection(l.getboundindex(n), l._getcolumnat(j).datafield, true, false) } } this._rendervisualrows() } }, _selectrowpath: function (g) { if (this.selectionmode == "multiplerowsextended") { var c = this; var b = this._lastClickedCell ? Math.min(this._lastClickedCell.row, g) : 0; var h = this._lastClickedCell ? Math.max(this._lastClickedCell.row, g) : 0; var f = this.dataview.loadedrecords; if (b <= h) { this.selectedrowindexes = new Array(); for (var e = b; e <= h; e++) { var g = f[e]; var d = this.getrowboundindex(e); this._applyrowselection(d, true, false) } this._rendervisualrows() } } }, _selectrowwithmouse: function (p, b, c, f, d, s) { var j = b.row; if (j == undefined) { return } var k = b.index; if (this.hittestinfo[k] == undefined) { return } var t = this.hittestinfo[k].visualrow; if (this.hittestinfo[k].details) { return } var m = t.cells[0].className; if (j.group) { return } if (this.selectionmode == "multiplerows" || this.selectionmode == "multiplecells" || this.selectionmode == "checkbox" || (this.selectionmode.indexOf("multiple") != -1 && (s == true || d == true))) { var l = this.getboundindex(j); if (this.dataview.filters.length > 0) { var v = this.getrowdata(l); if (v) { l = v.dataindex; if (l == undefined) { var l = this.getboundindex(j) } } } var q = c.indexOf(l) != -1; var w = this.getboundindex(j) + "_" + f; if (this.selectionmode.indexOf("cell") != -1) { var h = this.selectedcells[w] != undefined; if (this.selectedcells[w] != undefined && h) { this._selectcellwithstyle(p, false, k, f, t) } else { this._selectcellwithstyle(p, true, k, f, t) } if (s && this._lastClickedCell == undefined) { var g = this.getselectedcells(); if (g && g.length > 0) { this._lastClickedCell = { row: g[0].rowindex, column: g[0].datafield} } } if (s && this._lastClickedCell) { this._selectpath(j.visibleindex, f); this.mousecaptured = false; if (this.selectionarea.css("visibility") == "visible") { this.selectionarea.css("visibility", "hidden") } } } else { if (q) { if (d) { this._applyrowselection(this.getboundindex(j), false) } else { this._selectrowwithstyle(p, t, false, f) } } else { this._selectrowwithstyle(p, t, true, f) } if (s && this._lastClickedCell == undefined) { var i = this.getselectedrowindexes(); if (i && i.length > 0) { this._lastClickedCell = { row: i[0], column: f} } } if (s && this._lastClickedCell) { this.selectedrowindexes = new Array(); var e = this._lastClickedCell ? Math.min(this._lastClickedCell.row, j.visibleindex) : 0; var u = this._lastClickedCell ? Math.max(this._lastClickedCell.row, j.visibleindex) : 0; var n = this.dataview.loadedrecords; for (var o = e; o <= u; o++) { var j = n[o]; if (j) { this._applyrowselection(this.getboundindex(j), true, false, false) } } this._rendervisualrows() } } } else { this._clearselectstyle(); this._selectrowwithstyle(p, t, true, f); if (this.selectionmode.indexOf("cell") != -1) { this._selectcellwithstyle(p, true, k, f, t) } } if (!s) { this._lastClickedCell = { row: j.visibleindex, column: f} } }, _selectcellwithstyle: function (d, c, g, f, e) { var b = a(e.cells[d._getcolumnindex(f)]); b.removeClass(this.toTP("jqx-grid-cell-hover")); b.removeClass(this.toTP("jqx-fill-state-hover")); if (c) { b.addClass(this.toTP("jqx-grid-cell-selected")); b.addClass(this.toTP("jqx-fill-state-pressed")) } else { b.removeClass(this.toTP("jqx-grid-cell-selected")); b.removeClass(this.toTP("jqx-fill-state-pressed")) } }, _selectrowwithstyle: function (e, h, b, j) { var c = h.cells.length; var f = 0; if (e.rowdetails && e.showrowdetailscolumn) { if (!this.rtl) { f = 1 + this.groups.length } else { c -= 1; c -= this.groups.length } } else { if (this.groupable) { if (!this.rtl) { f = this.groups.length } else { c -= this.groups.length } } } for (var g = f; g < c; g++) { var d = h.cells[g]; if (b) { a(d).removeClass(this.toTP("jqx-grid-cell-hover")); a(d).removeClass(this.toTP("jqx-fill-state-hover")); if (e.selectionmode.indexOf("cell") == -1) { a(d).addClass(this.toTP("jqx-grid-cell-selected")); a(d).addClass(this.toTP("jqx-fill-state-pressed")) } } else { a(d).removeClass(this.toTP("jqx-grid-cell-hover")); a(d).removeClass(this.toTP("jqx-grid-cell-selected")); a(d).removeClass(this.toTP("jqx-fill-state-hover")); a(d).removeClass(this.toTP("jqx-fill-state-pressed")) } } }, _handlemousemoveselection: function (ab, o) { if (o.hScrollInstance.isScrolling() || o.vScrollInstance.isScrolling()) { return false } if ((o.selectionmode == "multiplerowsextended" || o.selectionmode == "multiplecellsextended" || o.selectionmode == "multiplecellsadvanced") && o.mousecaptured) { if (o.multipleselectionbegins) { var b = o.multipleselectionbegins(ab); if (b === false) { return true } } var aa = this.showheader ? this.columnsheader.height() + 2 : 0; var I = this._groupsheader() ? this.groupsheader.height() : 0; var K = this.showtoolbar ? this.toolbar.height() : 0; I += K; var Z = this.host.coord(); if (this.hasTransform) { Z = a.jqx.utilities.getOffset(this.host); var ad = this._getBodyOffset(); Z.left -= ad.left; Z.top -= ad.top } if (this.host.css("border-top-width") === "0px") { I -= 2 } var M = ab.pageX; var L = ab.pageY - I; if (Math.abs(this.mousecaptureposition.left - M) > 3 || Math.abs(this.mousecaptureposition.top - L) > 3) { var f = parseInt(this.columnsheader.coord().top); if (this.hasTransform) { f = a.jqx.utilities.getOffset(this.columnsheader).top } if (M < Z.left) { M = Z.left } if (M > Z.left + this.host.width()) { M = Z.left + this.host.width() } var X = Z.top + aa; if (L < X) { L = X + 5 } var J = parseInt(Math.min(o.mousecaptureposition.left, M)); var g = -5 + parseInt(Math.min(o.mousecaptureposition.top, L)); var H = parseFloat(Math.abs(o.mousecaptureposition.left - M)); var P = parseInt(Math.abs(o.mousecaptureposition.top - L)); J -= Z.left; g -= Z.top; this.selectionarea.css("visibility", "visible"); if (o.selectionmode == "multiplecellsadvanced") { var M = J; var t = M + H; var G = M; var n = o.hScrollInstance; var v = n.value; if (this.rtl) { if (this.hScrollBar.css("visibility") != "hidden") { v = n.max - n.value } if (this.vScrollBar[0].style.visibility != "hidden") { } } var h = o.table[0].rows[0]; var T = 0; var B = o.mousecaptureposition.clickedcell; var A = B; var m = false; var r = 0; var ac = h.cells.length; if (o.mousecaptureposition.left <= ab.pageX) { r = B } for (var W = r; W < ac; W++) { var Y = parseFloat(a(this.columnsrow[0].cells[W]).css("left")); var j = Y - v; if (o.columns.records[W].pinned) { j = Y; continue } var O = this._getcolumnat(W); if (O != null && O.hidden) { continue } if (o.groupable && o.groups.length > 0) { if (W < o.groups.length) { continue } } var S = j + a(this.columnsrow[0].cells[W]).width(); if (o.mousecaptureposition.left > ab.pageX) { if (S >= M && M >= j) { A = W; m = true; break } } else { if (S >= t && t >= j) { A = W; m = true; break } } } if (!m) { if (o.mousecaptureposition.left > ab.pageX) { a.each(this.columns.records, function (i, k) { if (o.groupable && o.groups.length > 0) { if (i < o.groups.length) { return true } } if (!this.pinned && !this.hidden) { A = i; return false } }) } else { if (!o.groupable || (o.groupable && !o.groups.length > 0)) { A = h.cells.length - 1 } } } var N = B; B = Math.min(B, A); A = Math.max(N, A); g += 5; g += I; var R = o.table[0].rows.indexOf(o.mousecaptureposition.clickedrow); var w = 0; var e = -1; var u = -1; var d = 0; for (var W = 0; W < o.table[0].rows.length; W++) { var s = a(o.table[0].rows[W]); if (W == 0) { d = s.coord().top } var F = s.height(); var z = d - Z.top; if (e == -1 && z + F >= g) { var c = false; for (var Q = 0; Q < o.groups.length; Q++) { var V = s[0].cells[Q].className; if (V.indexOf("jqx-grid-group-collapse") != -1 || V.indexOf("jqx-grid-group-expand") != -1) { c = true; break } } if (c) { continue } e = W } d += F; if (o.groupable && o.groups.length > 0) { var c = false; for (var Q = 0; Q < o.groups.length; Q++) { var V = s[0].cells[Q].className; if (V.indexOf("jqx-grid-group-collapse") != -1 || V.indexOf("jqx-grid-group-expand") != -1) { c = true; break } } if (c) { continue } var T = 0; for (var U = o.groups.length; U < s[0].cells.length; U++) { var E = s[0].cells[U]; if (a(E).html() == "") { T++ } } if (T == s[0].cells.length - o.groups.length) { continue } } if (e != -1) { w += F } if (z + F > g + P) { u = W; break } } if (e != -1) { g = a(o.table[0].rows[e]).coord().top - Z.top - I - 2; var D = 0; if (this.filterable && this.showfilterrow) { D = this.filterrowheight } if (parseFloat(o.table[0].style.top) < 0 && g < this.rowsheight + D) { g -= parseFloat(o.table[0].style.top); w += parseFloat(o.table[0].style.top) } P = w; var l = a(this.columnsrow[0].cells[B]); var C = a(this.columnsrow[0].cells[A]); J = parseFloat(l.css("left")); H = parseFloat(C.css("left")) - parseFloat(J) + C.width() - 2; J -= v; if (o.editcell && o.editable && o.endcelledit && (B != A || e != u)) { if (o.editcell.validated == false) { return } o.endcelledit(o.editcell.row, o.editcell.column, true, true) } } } this.selectionarea.width(H); this.selectionarea.height(P); this.selectionarea.css("left", J); this.selectionarea.css("top", g) } } }, _handlemouseupselection: function (u, o) { if (!this.selectionarea) { return } if (this.selectionarea[0].style.visibility != "visible") { o.mousecaptured = false; return true } if (o.mousecaptured && (o.selectionmode == "multiplerowsextended" || o.selectionmode == "multiplerowsadvanced" || o.selectionmode == "multiplecellsextended" || o.selectionmode == "multiplecellsadvanced")) { o.mousecaptured = false; if (this.selectionarea.css("visibility") == "visible") { this.selectionarea.css("visibility", "hidden"); var w = this.showheader ? this.columnsheader.height() + 2 : 0; var p = this._groupsheader() ? this.groupsheader.height() : 0; if (this.host.css("border-top-width") === "0px") { p -= 2 } var B = this.showtoolbar ? this.toolbar.height() : 0; p += B; var C = this.selectionarea.coord(); var c = this.host.coord(); if (this.hasTransform) { c = a.jqx.utilities.getOffset(this.host); C = a.jqx.utilities.getOffset(this.selectionarea) } if (this.host.css("border-top-width") === "0px") { p -= 2 } var n = C.left - c.left; var k = C.top - w - c.top - p; var s = k; var g = n + this.selectionarea.width(); var D = n; var l = new Array(); var e = new Array(); if (o.selectionmode == "multiplerowsextended") { while (k < s + this.selectionarea.height()) { var b = this._hittestrow(n, k); var f = b.row; var h = b.index; if (h != -1) { if (!e[h]) { e[h] = true; l[l.length] = b } } k += 20 } var s = 0; a.each(l, function () { var i = this; var m = this.row; if (o.selectionmode != "none" && o._selectrowwithmouse) { if (u.ctrlKey || u.metaKey) { o._applyrowselection(o.getboundindex(m), true, false, false) } else { if (s == 0) { o._applyrowselection(o.getboundindex(m), true, false, true) } else { o._applyrowselection(o.getboundindex(m), true, false, false) } } s++ } }) } else { if (o.selectionmode == "multiplecellsadvanced") { k += 2 } var r = o.hScrollInstance; var t = r.value; if (this.rtl) { if (this.hScrollBar.css("visibility") != "hidden") { t = r.max - r.value } if (this.vScrollBar[0].style.visibility != "hidden") { t -= this.scrollbarsize + 4 } } var q = o.table[0].rows[0]; var j = o.selectionarea.height(); if (!u.ctrlKey && !u.metaKey && j > 0) { o.selectedcells = new Array() } var A = j; while (k < s + A) { var b = o._hittestrow(n, k); if (!b) { k += 5; continue } var f = b.row; var h = b.index; if (h != -1) { if (!e[h]) { e[h] = true; for (var v = 0; v < q.cells.length; v++) { var d = parseFloat(a(o.columnsrow[0].cells[v]).css("left")) - t; var z = d + a(o.columnsrow[0].cells[v]).width(); if ((D >= d && D <= z) || (g >= d && g <= z) || (d >= D && d <= g)) { o._applycellselection(o.getboundindex(f), o._getcolumnat(v).datafield, true, false) } } } } k += 5 } } if (o.autosavestate) { if (o.savestate) { o.savestate() } } o._renderrows(o.virtualsizeinfo) } } }, selectprevcell: function (e, c) { var f = this._getcolumnindex(c); var b = this.columns.records.length; var d = this._getprevvisiblecolumn(f); if (d != null) { this.clearselection(); this.selectcell(e, d.datafield) } }, selectnextcell: function (e, d) { var f = this._getcolumnindex(d); var c = this.columns.records.length; var b = this._getnextvisiblecolumn(f); if (b != null) { this.clearselection(); this.selectcell(e, b.datafield) } }, _getfirstvisiblecolumn: function () { var b = this; var e = this.columns.records.length; for (var c = 0; c < e; c++) { var d = this.columns.records[c]; if (!d.hidden && d.datafield != null) { return d } } return null }, _getlastvisiblecolumn: function () { var b = this; var e = this.columns.records.length; for (var c = e - 1; c >= 0; c--) { var d = this.columns.records[c]; if (!d.hidden && d.datafield != null) { return d } } return null }, _handlekeydown: function (A, t) { if (t.groupable && t.groups.length > 0) { } if (t.disabled) { return false } var H = A.charCode ? A.charCode : A.keyCode ? A.keyCode : 0; if (t.editcell && t.selectionmode != "multiplecellsadvanced") { return true } else { if (t.editcell && t.selectionmode == "multiplecellsadvanced") { if (H >= 33 && H <= 40) { if (!A.altKey) { if (t._cancelkeydown == undefined || t._cancelkeydown == false) { if (t.editmode !== "selectedrow") { t.endcelledit(t.editcell.row, t.editcell.column, false, true); t._cancelkeydown = false; if (t.editcell && !t.editcell.validated) { t._rendervisualrows(); t.endcelledit(t.editcell.row, t.editcell.column, false, true); return false } } else { return true } } else { t._cancelkeydown = false; return true } } else { t._cancelkeydown = false; return true } } else { return true } } } if (t.selectionmode == "none") { return true } if (t.showfilterrow && t.filterable) { if (this.filterrow) { if (a(A.target).ischildof(t.filterrow)) { return true } } } if (t.showeverpresentrow) { if (t.addnewrowtop) { if (a(A.target).ischildof(t.addnewrowtop)) { return true } } if (t.addnewrowbottom) { if (a(A.target).ischildof(t.addnewrowbottom)) { return true } } } if (A.target.className && A.target.className.indexOf("jqx-grid-widget") >= 0) { return true } if (t.pageable) { if (a(A.target).ischildof(this.pager)) { return true } } if (this.showtoolbar) { if (a(A.target).ischildof(this.toolbar)) { return true } } if (this.showstatusbar) { if (a(A.target).ischildof(this.statusbar)) { return true } } var r = false; if (A.altKey) { return true } if (A.ctrlKey || A.metaKey) { if (this.clipboard) { var b = String.fromCharCode(H).toLowerCase(); if (this.clipboardbegin) { var j = null; if (b == "c") { j = this.clipboardbegin("copy", this.copyselection()) } else { if (b == "x") { j = this.clipboardbegin("cut", this.copyselection()) } else { if (b == "v") { j = this.clipboardbegin("paste") } } } if (j === false) { return false } } if (b == "c" || b == "x") { var q = this.copyselection(); if (b == "c" && this.clipboardend) { this.clipboardend("copy") } if (b == "x" && this.clipboardend) { this.clipboardend("cut") } if (window.clipboardData) { window.clipboardData.setData("Text", q) } else { var g = a('<textarea style="position: absolute; left: -1000px; top: -1000px;"/>'); g.val(q); a("body").append(g); g.select(); setTimeout(function () { document.designMode = "off"; g.select(); g.remove(); t.focus() }, 100) } if (b == "c" && a.jqx.browser.msie) { return false } else { if (b == "c") { return true } } } else { if (b == "v") { var F = a('<textarea style="position: absolute; left: -1000px; top: -1000px;"/>'); a("body").append(F); F.select(); var k = this; setTimeout(function () { k._clipboardselection = new Array(); var M = F.val(); if (M.length == 0 && window.clipboardData) { F.val(window.clipboardData.getData("Text")); var M = F.val() } var L = M.split("\n"); for (var K = 0; K < L.length; K++) { if (L[K].split("\t").length > 0) { var J = L[K].split("\t"); if (J.length == 1 && K == L.length - 1 && J[0] == "") { continue } if (J.length > 0) { k._clipboardselection.push(J) } } } k.pasteselection(); F.remove(); k.focus() }, 100); return true } } if (b == "x") { this.deleteselection(); this.host.focus(); return false } } } var n = Math.round(t._gettableheight()); var y = Math.round(n / t.rowsheight); var f = t.getdatainformation(); switch (t.selectionmode) { case "singlecell": case "multiplecells": case "multiplecellsextended": case "multiplecellsadvanced": var I = t.getselectedcell(); if (I != null) { var e = this.getrowvisibleindex(I.rowindex); var i = e; var p = I.datafield; var w = t._getcolumnindex(p); var c = t.columns.records.length; var v = function (Q, K, P, O) { var J = function (ab, U) { var W = t.dataview.loadedrecords[ab]; if (t.groupable && t.groups.length > 0) { var X = ab; if (O == "up") { X++ } if (O == "down") { X-- } var W = t.getdisplayrows()[X]; var R = function (ac) { if (ac.group) { if (t.expandedgroups[ac.uniqueid]) { return t.expandedgroups[ac.uniqueid].expanded } } else { return false } }; var Z = 1; var S = true; while (S && Z < 300) { S = false; if (O == "down") { W = t.getdisplayrows()[X + Z] } else { if (O == "up") { W = t.getdisplayrows()[X - Z] } } if (!W) { break } if (W && W.group) { S = true } var aa = W.parentItem; while (aa) { if (aa && !R(aa)) { S = true } aa = aa.parentItem } if (!S) { break } Z++ } if (Z == 300) { W = null } if (t.pageable) { var Y = false; if (W) { for (var V = 0; V < t.dataview.rows.length; V++) { if (t.dataview.rows[V].boundindex == W.boundindex) { Y = true } } if (!Y) { W = null } } } } if (W != undefined && U != null) { if (P || P == undefined) { t.clearselection() } var T = t.getboundindex(W); t.selectcell(T, U); t._oldselectedcell = t.selectedcell; r = true; t.ensurecellvisible(ab, U); return true } return false }; if (!J(Q, K)) { t.ensurecellvisible(Q, K); J(Q, K); if (t.virtualmode) { t.host.focus() } } var M = t.groupable && t.groups.length > 0; if (!M) { if (A.shiftKey && A.keyCode != 9) { if (t.selectionmode == "multiplecellsextended" || t.selectionmode == "multiplecellsadvanced") { if (t._lastClickedCell) { t._selectpath(Q, K); var N = t.dataview.loadedrecords[Q]; var L = t.getboundindex(N); t.selectedcell = { rowindex: L, datafield: K }; return } } } else { if (!A.shiftKey) { t._lastClickedCell = { row: Q, column: K} } } } }; var B = A.shiftKey && t.selectionmode != "singlecell" && t.selectionmode != "multiplecells"; var C = function () { v(0, p, !B) }; var h = function () { var J = f.rowscount - 1; v(J, p, !B) }; var d = H == 9 && !A.shiftKey; var m = H == 9 && A.shiftKey; if (t.rtl) { var s = d; d = m; m = s } if (d || m) { B = false } if (d || m) { if (document.activeElement && document.activeElement.className && document.activeElement.className.indexOf("jqx-grid-cell-add-new-row") >= 0) { return true } } var o = A.ctrlKey || A.metaKey; if (o && H == 37) { var E = t._getfirstvisiblecolumn(w); if (E != null) { v(i, E.datafield) } } else { if (o && H == 39) { var u = t._getlastvisiblecolumn(w); if (u != null) { v(i, u.datafield) } } else { if (H == 39 || d) { var x = t._getnextvisiblecolumn(w); if (x != null) { v(i, x.datafield, !B) } else { if (!d) { r = true } else { var G = t._getfirstvisiblecolumn(); H = 40; p = G.displayfield } } } else { if (H == 37 || m) { var E = t._getprevvisiblecolumn(w); if (E != null) { v(i, E.datafield, !B) } else { if (!m) { r = true } else { var l = t._getlastvisiblecolumn(); H = 38; p = l.displayfield } } } else { if (H == 36) { C() } else { if (H == 35) { h() } else { if (H == 33) { if (i - y >= 0) { var D = i - y; v(D, p, !B) } else { C() } } else { if (H == 34) { if (f.rowscount > i + y) { var D = i + y; v(D, p, !B) } else { h() } } } } } } } } } if (H == 38) { if (o) { C() } else { if (i > 0) { v(i - 1, p, !B, "up") } else { r = true } } } if (H == 40) { if (o) { h() } else { if ((f.rowscount > i + 1) || (t.groupable && t.groups.length > 0)) { v(i + 1, p, !B, "down") } else { r = true } } } } break; case "singlerow": case "multiplerows": case "multiplerowsextended": case "multiplerowsadvanced": var i = t.getselectedrowindex(); if (i == null || i == -1) { return true } i = this.getrowvisibleindex(i); var z = function (K, N, M) { var J = function (V) { var U = t.dataview.loadedrecords[V]; if (t.groupable && t.groups.length > 0) { if (M == "up") { V++ } if (M == "down") { V-- } var U = t.getdisplayrows()[V]; var O = function (Z) { if (Z.group) { if (t.expandedgroups[Z.uniqueid]) { return t.expandedgroups[Z.uniqueid].expanded } } else { return false } }; var X = 1; var P = true; while (P && X < 300) { P = false; if (M == "down") { U = t.getdisplayrows()[V + X] } else { if (M == "up") { U = t.getdisplayrows()[V - X] } } if (!U) { break } if (U && U.group) { P = true } var Y = U.parentItem; while (Y) { if (Y && !O(Y)) { P = true } Y = Y.parentItem } if (!P) { break } X++ } if (X == 300) { U = null } if (t.pageable) { var W = false; if (U) { for (var T = 0; T < t.dataview.rows.length; T++) { if (t.dataview.rows[T].boundindex == U.boundindex) { W = true } } if (!W) { U = null } } } } if (U != undefined) { var Q = t.getboundindex(U); var S = t.selectedrowindex; if (N || N == undefined) { t.clearselection() } t.selectedrowindex = S; t.selectrow(Q, false); var R = t.ensurerowvisible(V); if (!R || t.autoheight || t.groupable) { t._rendervisualrows() } r = true; return true } return false }; if (!J(K)) { t.ensurerowvisible(K); J(K, N); if (t.virtualmode) { setTimeout(function () { J(K, N) }, 25) } if (t.virtualmode) { t.host.focus() } } var L = t.groupable && t.groups.length > 0; if (!L) { if (A.shiftKey && H != 9) { if (t.selectionmode == "multiplerowsextended") { if (t._lastClickedCell) { t._selectrowpath(K); t.selectedrowindex = t.getrowboundindex(K); return } } } else { if (!A.shiftKey) { t._lastClickedCell = { row: K }; t.selectedrowindex = t.getrowboundindex(K) } } } }; var B = A.shiftKey && t.selectionmode != "singlerow" && t.selectionmode != "multiplerows"; var C = function () { z(0, !B) }; var h = function () { var J = f.rowscount - 1; z(J, !B) }; var o = A.ctrlKey || A.metaKey; if (H == 36 || (o && H == 38)) { C() } else { if (H == 35 || (o && H == 40)) { h() } else { if (H == 33) { if (i - y >= 0) { var D = i - y; z(D, !B) } else { C() } } else { if (H == 34) { if (f.rowscount > i + y) { var D = i + y; z(D, !B) } else { h() } } else { if (H == 38) { if (i > 0) { z(i - 1, !B, "up") } else { r = true } } else { if (H == 40) { if ((f.rowscount > i + 1) || (t.groupable && t.groups.length > 0)) { z(i + 1, !B, "down") } else { r = true } } } } } } } break } if (r) { if (t.autosavestate) { if (t.savestate) { t.savestate() } } return false } return true }, _handlemousemove: function (u, p) { if (p.vScrollInstance.isScrolling()) { return } if (p.hScrollInstance.isScrolling()) { return } var w; var q; var f; var n; var m; if (p.enablehover || p.selectionmode == "multiplerows") { w = this.showheader ? this.columnsheader.height() + 2 : 0; q = this._groupsheader() ? this.groupsheader.height() : 0; var A = this.showtoolbar ? this.toolbarheight : 0; q += A; f = this.host.coord(); if (this.hasTransform) { f = a.jqx.utilities.getOffset(this.host); var k = this._getBodyOffset(); f.left -= k.left; f.top -= k.top } n = u.pageX - f.left; m = u.pageY - w - f.top - q } if (p.selectionmode == "multiplerowsextended" || p.selectionmode == "multiplecellsextended" || p.selectionmode == "multiplecellsadvanced") { if (p.mousecaptured == true) { return } } if (p.enablehover) { if (p.disabled) { return } if (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling()) { return } var c = this._hittestrow(n, m); if (!c) { return } var h = c.row; var j = c.index; if (this.hoveredrow != -1 && j != -1 && this.hoveredrow == j && this.selectionmode.indexOf("cell") == -1 && this.selectionmode != "checkbox") { return } this._clearhoverstyle(); if (j == -1 || h == undefined) { return } var r = this.hittestinfo[j].visualrow; if (r == null) { return } if (this.hittestinfo[j].details) { return } if (u.clientX > a(r).width() + a(r).coord().left) { return } var B = 0; var o = r.cells.length; if (p.rowdetails && p.showrowdetailscolumn) { if (!this.rtl) { B = 1 + this.groups.length } else { o -= 1; o -= this.groups.length } } else { if (this.groupable) { if (!this.rtl) { B = this.groups.length } else { o -= this.groups.length } } } if (r.cells.length == 0) { return } var l = r.cells[B].className; if (h.group || (this.selectionmode.indexOf("row") >= 0 && l.indexOf("jqx-grid-cell-selected") != -1)) { return } this.hoveredrow = j; if (this.selectionmode.indexOf("cell") != -1 || this.selectionmode == "checkbox") { var e = -1; var s = this.hScrollInstance; var t = s.value; if (this.rtl) { if (this.hScrollBar.css("visibility") != "hidden") { t = s.max - s.value } } for (var v = B; v < o; v++) { var g = parseInt(a(this.columnsrow[0].cells[v]).css("left")) - t; var z = g + a(this.columnsrow[0].cells[v]).width(); if (z >= n && n >= g) { e = v; break } } if (e != -1) { var b = r.cells[e]; if (this.cellhover) { this.cellhover(b, u.pageX, u.pageY) } if (b.className.indexOf("jqx-grid-cell-selected") == -1) { if (this.editcell) { var d = this._getcolumnat(e); if (d) { if (this.editcell.row == j && this.editcell.column == d.datafield) { return } } } a(b).addClass(this.toTP("jqx-grid-cell-hover")); a(b).addClass(this.toTP("jqx-fill-state-hover")) } } return } for (var v = B; v < o; v++) { var b = r.cells[v]; a(b).addClass(this.toTP("jqx-grid-cell-hover")); a(b).addClass(this.toTP("jqx-fill-state-hover")); if (this.cellhover) { this.cellhover(b, u.pageX, u.pageY) } } } else { return true } } }) })(jqxBaseFramework);


/*
jqxgrid.pager
*/

(function (a) { a.extend(a.jqx._jqxGrid.prototype, { _initpager: function () { var r = this.that; var j = this.gridlocalization.pagergotopagestring; var s = this.gridlocalization.pagerrangestring; var l = this.gridlocalization.pagershowrowsstring; var m = (this.pagerheight - 17) / 2; this.pagerdiv = this.pagerdiv || a('<div style="width: 100%; height: 100%; position: relative;"></div>'); if (!this.pageable) { this.pagerdiv.remove(); this.vScrollBar.jqxScrollBar({ thumbSize: 0 }); return } if (!this.pagerrenderer) { this.pagerdiv.css("top", m); this.pager.append(this.pagerdiv); this.pagergotoinput = this.pagergotoinput || a('<div style="margin-right: 7px; width: 27px; height: 17px; float: right;"><input style="margin-top: 0px; text-align: right; width: 27px;" type="text"/></div>'); this.pagergoto = this.pagergoto || a('<div style="float: right; margin-right: 7px;"></div>'); this.pagerrightbutton = this.pagerrightbutton || a('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>'); this.pagerleftbutton = this.pagerleftbutton || a('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>'); this.pagerdetails = this.pagerdetails || a('<div style="margin-right: 7px; float: right;"></div>'); this.pagershowrows = this.pagershowrows || a('<div style="margin-right: 7px; float: right;"></div>'); this.pagerbuttons = a('<div style="margin-right: 3px; float: right;"></div>'); if (this.pagershowrowscombo && this.pagershowrowscombo.jqxDropDownList) { this.pagershowrowscombo.remove(); this.pagershowrowscombo = null } this.pagergotoinput.attr("disabled", this.disabled); this.pagerfirstbutton = a('<div type="button" style="padding: 0px; margin-top: 0px; margin-left: 3px; margin-right: 3px; width: 27px; float: right;"></div>'); this.pagerlastbutton = a('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>'); this.pagershowrowscombo = this.pagershowrowscombo || a('<div id="gridpagerlist" style="margin-top: 0px; margin-right: 7px; float: right;"></div>'); this.pagerdiv.children().remove(); this.pagershowrowscombo[0].id = "gridpagerlist" + this.element.id; this.removeHandler(this.pagerrightbutton, "mousedown"); this.removeHandler(this.pagerrightbutton, "mouseup"); this.removeHandler(this.pagerrightbutton, "click"); this.removeHandler(this.pagerleftbutton, "mousedown"); this.removeHandler(this.pagerleftbutton, "mouseup"); this.removeHandler(this.pagerleftbutton, "click"); this.removeHandler(this.pagerfirstbutton, "mousedown"); this.removeHandler(this.pagerfirstbutton, "mouseup"); this.removeHandler(this.pagerfirstbutton, "click"); this.removeHandler(this.pagerlastbutton, "mousedown"); this.removeHandler(this.pagerlastbutton, "mouseup"); this.removeHandler(this.pagerlastbutton, "click"); this.pagerleftbutton.attr("title", this.gridlocalization.pagerpreviousbuttonstring); this.pagerrightbutton.attr("title", this.gridlocalization.pagernextbuttonstring); if (this.pagermode == "simple") { if (a.jqx.browser.msie && a.jqx.browser.version < 8) { this.pagerbuttons.css("overflow", "visible"); this.pagerbuttons.css("padding", "3px") } this.pagerfirstbutton.attr("title", this.gridlocalization.pagerfirstbuttonstring); this.pagerlastbutton.attr("title", this.gridlocalization.pagerlastbuttonstring); var n = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); n.addClass(this.toThemeProperty("jqx-icon-arrow-first")); this.pagerfirstbutton.wrapInner(n); var g = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); g.addClass(this.toThemeProperty("jqx-icon-arrow-last")); this.pagerlastbutton.wrapInner(g); if (!this.rtl) { this.pagerdiv.append(this.pagerfirstbutton); this.pagerdiv.append(this.pagerleftbutton); this.pagerdiv.append(this.pagerbuttons); this.pagerdiv.append(this.pagerrightbutton); this.pagerdiv.append(this.pagerlastbutton) } else { this.pagerdiv.append(this.pagerlastbutton); this.pagerdiv.append(this.pagerrightbutton); this.pagerdiv.append(this.pagerbuttons); this.pagerdiv.append(this.pagerleftbutton); this.pagerdiv.append(this.pagerfirstbutton) } this.pagerlastbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); this.pagerfirstbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); var t = !this.rtl ? "left" : "right"; this.pagerbuttons.css("float", t); this.pagerlastbutton.css("float", t); this.pagerfirstbutton.css("float", t); this.pagerrightbutton.css("float", t); this.pagerleftbutton.css("float", t); this.pagerdetails.css("float", this.rtl ? "left" : "right"); if (this.rtl) { this.pagerdetails.css("margin-left", "7px"); this.pagerdetails.css("margin-right", "0px") } else { this.pagerdetails.css("margin-left", "0px"); this.pagerdetails.css("margin-right", "7px") } this.pagergotoinput.hide(); this.pagershowrowscombo.hide(); this.pagergoto.hide(); this.pagershowrows.hide() } else { this.pagergotoinput.show(); this.pagershowrowscombo.show(); this.pagergoto.show(); this.pagershowrows.show(); if (!this.rtl) { this.pagerdiv.append(this.pagerrightbutton); this.pagerdiv.append(this.pagerleftbutton) } } this.pagerrightbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); this.pagerleftbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); this.pagerleftbutton.find(".jqx-icon-arrow-left").remove(); this.pagerrightbutton.find(".jqx-icon-arrow-right").remove(); var c = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); c.addClass(this.toThemeProperty("jqx-icon-arrow-left")); this.pagerleftbutton.wrapInner(c); var d = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); d.addClass(this.toThemeProperty("jqx-icon-arrow-right")); this.pagerrightbutton.wrapInner(d); this.pagerdiv.append(this.pagerdetails); if (this.pagermode != "simple") { if (!this.rtl) { this.pagerdiv.append(this.pagershowrowscombo); this.pagerdiv.append(this.pagershowrows); this.pagerdiv.append(this.pagergotoinput); this.pagerdiv.append(this.pagergoto) } else { this.pagerdiv.append(this.pagergoto); this.pagerdiv.append(this.pagergotoinput); this.pagerdiv.append(this.pagershowrows); this.pagerdiv.append(this.pagershowrowscombo); this.pagerdiv.append(this.pagerdetails); this.pagerdiv.append(this.pagerrightbutton); this.pagerdiv.append(this.pagerleftbutton) } } var o = this.pagesizeoptions; if (!this.pagershowrowscombo.jqxDropDownList) { throw new Error("jqxGrid: jqxdropdownlist.js is not loaded."); return } this.pagershowrowscombo.jqxDropDownList({ rtl: this.rtl, disabled: this.disabled, source: o, enableBrowserBoundsDetection: true, keyboardSelection: false, autoDropDownHeight: true, width: "auto", height: 16, theme: this.theme }); var q = 0; for (var p = 0; p < o.length; p++) { if (this.pagesize >= o[p]) { q = p } } this.pagershowrows[0].innerHTML = l; this.pagergoto[0].innerHTML = j; this.updatepagerdetails(); this.pagershowrowscombo.jqxDropDownList({ selectedIndex: q }); this.pagerpageinput = this.pagergotoinput.find("input"); this.pagerpageinput.addClass(this.toThemeProperty("jqx-input")); this.pagerpageinput.addClass(this.toThemeProperty("jqx-widget-content")); if (this.rtl) { this.pagerpageinput.css("direction", "rtl") } var r = this.that; this.removeHandler(this.pagershowrowscombo, "select"); this.addHandler(this.pagershowrowscombo, "select", function (w) { if (w.args) { if (r.vScrollInstance) { r.vScrollInstance.setPosition(0) } if (r.editcell != null && r.endcelledit) { r.endcelledit(r.editcell.row, r.editcell.column, true, false) } var u = w.args.index; var x = r.dataview.pagenum * r.dataview.pagesize; var v = o[u]; var y = r.pagesize; r.pagesize = parseInt(v); if (isNaN(r.pagesize)) { r.pagesize = 10 } if (v >= 100) { r.pagershowrowscombo.jqxDropDownList({ width: "auto" }) } else { r.pagershowrowscombo.jqxDropDownList({ width: 44 }) } r.dataview.pagesize = r.pagesize; var i = Math.floor(x / r.dataview.pagesize); r.prerenderrequired = true; r._requiresupdate = true; r._raiseEvent(10, { pagenum: i, oldpagesize: y, pagesize: r.dataview.pagesize }); r.gotopage(i); if (r.autoheight && r._updatesizeonwindowresize) { r._updatesize(true); setTimeout(function () { r._updatesize(true) }, 500) } } }); var k = this.pagergotoinput.find("input"); k.addClass(this.toThemeProperty("jqx-grid-pager-input")); k.addClass(this.toThemeProperty("jqx-rc-all")); this.removeHandler(k, "keydown"); this.removeHandler(k, "change"); this.addHandler(k, "keydown", function (i) { if (i.keyCode >= 65 && i.keyCode <= 90) { return false } if (i.keyCode == "13") { var u = k.val(); u = parseInt(u); if (!isNaN(u)) { r.gotopage(u - 1) } return false } }); this.addHandler(k, "change", function () { var i = k.val(); i = parseInt(i); if (!isNaN(i)) { r.gotopage(i - 1) } }); this.addHandler(this.pagerrightbutton, "mouseenter", function () { d.addClass(r.toThemeProperty("jqx-icon-arrow-right-hover")) }); this.addHandler(this.pagerleftbutton, "mouseenter", function () { c.addClass(r.toThemeProperty("jqx-icon-arrow-left-hover")) }); this.addHandler(this.pagerrightbutton, "mouseleave", function () { d.removeClass(r.toThemeProperty("jqx-icon-arrow-right-hover")) }); this.addHandler(this.pagerleftbutton, "mouseleave", function () { c.removeClass(r.toThemeProperty("jqx-icon-arrow-left-hover")) }); this.addHandler(this.pagerrightbutton, "mousedown", function () { d.addClass(r.toThemeProperty("jqx-icon-arrow-right-selected")) }); this.addHandler(this.pagerrightbutton, "mouseup", function () { d.removeClass(r.toThemeProperty("jqx-icon-arrow-right-selected")) }); this.addHandler(this.pagerleftbutton, "mousedown", function () { c.addClass(r.toThemeProperty("jqx-icon-arrow-left-selected")) }); this.addHandler(this.pagerleftbutton, "mouseup", function () { c.removeClass(r.toThemeProperty("jqx-icon-arrow-left-selected")) }); this.addHandler(a(document), "mouseup.pagerbuttons" + this.element.id, function () { d.removeClass(r.toThemeProperty("jqx-icon-arrow-right-selected")); c.removeClass(r.toThemeProperty("jqx-icon-arrow-left-selected")) }); this.addHandler(this.pagerrightbutton, "click", function () { if (!r.pagerrightbutton.jqxButton("disabled")) { if (!r.rtl) { r.gotonextpage() } else { r.gotoprevpage() } } }); this.addHandler(this.pagerleftbutton, "click", function () { if (!r.pagerleftbutton.jqxButton("disabled")) { if (!r.rtl) { r.gotoprevpage() } else { r.gotonextpage() } } }); var f = this; if (this.pagermode === "simple") { var e = this.pagerfirstbutton; var h = this.pagerlastbutton; this.addHandler(h, "mouseenter", function () { g.addClass(f.toThemeProperty("jqx-icon-arrow-last-hover")) }); this.addHandler(e, "mouseenter", function () { n.addClass(f.toThemeProperty("jqx-icon-arrow-first-hover")) }); this.addHandler(h, "mouseleave", function () { g.removeClass(f.toThemeProperty("jqx-icon-arrow-last-hover")) }); this.addHandler(e, "mouseleave", function () { n.removeClass(f.toThemeProperty("jqx-icon-arrow-first-hover")) }); this.addHandler(h, "mousedown", function () { g.addClass(f.toThemeProperty("jqx-icon-arrow-last-selected")) }); this.addHandler(e, "mousedown", function () { n.addClass(f.toThemeProperty("jqx-icon-arrow-first-selected")) }); this.addHandler(h, "mouseup", function () { g.removeClass(f.toThemeProperty("jqx-icon-arrow-last-selected")) }); this.addHandler(e, "mouseup", function () { n.removeClass(f.toThemeProperty("jqx-icon-arrow-first-selected")) }); this.addHandler(a(document), "mouseup.pagerbuttons" + name + this.element.id, function () { d.removeClass(f.toThemeProperty("jqx-icon-arrow-right-selected")); c.removeClass(f.toThemeProperty("jqx-icon-arrow-left-selected")); if (g) { g.removeClass(f.toThemeProperty("jqx-icon-arrow-last-selected")); n.removeClass(f.toThemeProperty("jqx-icon-arrow-first-selected")) } }); this.addHandler(e, "click", function () { if (!e.jqxButton("disabled")) { if (!f.rtl) { f.gotopage(0) } else { var u = f.dataview.totalrecords; var i = Math.ceil(u / f.pagesize); f.gotopage(i - 1) } } }); this.addHandler(h, "click", function () { if (!h.jqxButton("disabled")) { if (!f.rtl) { var u = f.dataview.totalrecords; var i = Math.ceil(u / f.pagesize); f.gotopage(i - 1) } else { f.gotopage(0) } } }) } } else { this.pagerdiv.children().remove(); var b = this.pagerrenderer(); if (b != null) { this.pagerdiv.append(a(b)) } this.pager.append(this.pagerdiv) } this.vScrollBar.jqxScrollBar("refresh"); this._arrange() }, _updatepagertheme: function () { if (this.pagershowrowscombo == null) { return } this.pagershowrowscombo.jqxDropDownList({ theme: this.theme }); this.pagerrightbutton.jqxButton({ theme: this.theme }); this.pagerleftbutton.jqxButton({ theme: this.theme }); this.pagerpageinput.removeClass(); var c = this.pagergotoinput.find("input"); c.removeClass(); c.addClass(this.toThemeProperty("jqx-grid-pager-input")); c.addClass(this.toThemeProperty("jqx-rc-all")); this.pagerpageinput.addClass(this.toThemeProperty("jqx-input")); this.pagerpageinput.addClass(this.toThemeProperty("jqx-widget-content")); this.pagerleftbutton.find(".jqx-icon-arrow-left").remove(); this.pagerrightbutton.find(".jqx-icon-arrow-right").remove(); var d = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); d.addClass(this.toThemeProperty("jqx-icon-arrow-left")); this.pagerleftbutton.wrapInner(d); var e = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); e.addClass(this.toThemeProperty("jqx-icon-arrow-right")); this.pagerrightbutton.wrapInner(e); if (this.pagermode == "simple") { if (a.jqx.browser.msie && a.jqx.browser.version < 8) { this.pagerbuttons.css("overflow", "visible"); this.pagerbuttons.css("padding", "3px") } this.pagerfirstbutton.attr("title", this.gridlocalization.pagerfirstbuttonstring); this.pagerlastbutton.attr("title", this.gridlocalization.pagerlastbuttonstring); var h = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); h.addClass(this.toThemeProperty("jqx-icon-arrow-first")); this.pagerfirstbutton.wrapInner(h); var g = a("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); g.addClass(this.toThemeProperty("jqx-icon-arrow-last")); this.pagerlastbutton.wrapInner(g); this.pagerdiv.append(this.pagerfirstbutton); this.pagerdiv.append(this.pagerleftbutton); this.pagerdiv.append(this.pagerbuttons); this.pagerdiv.append(this.pagerrightbutton); this.pagerdiv.append(this.pagerlastbutton); this.pagerlastbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); this.pagerfirstbutton.jqxButton({ cursor: "pointer", disabled: this.disabled, theme: this.theme }); this.pagerbuttons.css("float", "left"); this.pagerlastbutton.css("float", "left"); this.pagerfirstbutton.css("float", "left"); this.pagerrightbutton.css("float", "left"); this.pagerleftbutton.css("float", "left"); this.pagergotoinput.hide(); this.pagershowrowscombo.hide(); this.pagergoto.hide(); this.pagershowrows.hide() } else { this.pagergotoinput.show(); this.pagershowrowscombo.show(); this.pagergoto.show(); this.pagershowrows.show() } var b = function (j, i) { j.removeHandler(i, "mouseenter"); j.removeHandler(i, "mouseleave"); j.removeHandler(i, "mousedown"); j.removeHandler(i, "mouseup") }; b(this, this.pagerrightbutton); b(this, this.pagerleftbutton); var f = this.that; this.addHandler(this.pagerrightbutton, "mouseenter", function () { e.addClass(f.toThemeProperty("jqx-icon-arrow-right-hover")) }); this.addHandler(this.pagerleftbutton, "mouseenter", function () { d.addClass(f.toThemeProperty("jqx-icon-arrow-left-hover")) }); this.addHandler(this.pagerrightbutton, "mouseleave", function () { e.removeClass(f.toThemeProperty("jqx-icon-arrow-right-hover")) }); this.addHandler(this.pagerleftbutton, "mouseleave", function () { d.removeClass(f.toThemeProperty("jqx-icon-arrow-left-hover")) }); this.addHandler(this.pagerrightbutton, "mousedown", function () { e.addClass(f.toThemeProperty("jqx-icon-arrow-right-selected")) }); this.addHandler(this.pagerrightbutton, "mouseup", function () { e.removeClass(f.toThemeProperty("jqx-icon-arrow-right-selected")) }); this.addHandler(this.pagerleftbutton, "mousedown", function () { d.addClass(f.toThemeProperty("jqx-icon-arrow-left-selected")) }); this.addHandler(this.pagerleftbutton, "mouseup", function () { d.removeClass(f.toThemeProperty("jqx-icon-arrow-left-selected")) }) }, gotopage: function (d) { if (d == null || d == undefined) { d = 0 } if (d == -1) { d = 0 } if (d < 0) { return } var c = this.dataview.totalrecords; if (this.summaryrows) { c += this.summaryrows.length } var e = this.pagenum; this._raiseEvent(25, { oldpagenum: this.dataview.pagenum, pagenum: d, pagesize: this.dataview.pagesize }); var b = Math.ceil(c / this.pagesize); if (d >= b) { if (this.dataview.totalrecords == 0) { this.dataview.pagenum = 0; this.updatepagerdetails() } if (d > 0) { d = b - 1 } if (d < 0) { d = 0 } } if (this.dataview.pagenum != d || this._requiresupdate) { if (this.pageable) { if (this.source.pager) { this.source.pager(d, this.dataview.pagesize, this.dataview.pagenum) } this.dataview.pagenum = d; if (this.virtualmode) { this.hiddens = new Array(); this.expandedgroups = new Array(); if (this.rendergridrows) { var h = d * this.dataview.pagesize; var g = h + this.dataview.pagesize; if (h != null && g != null) { if (this.pagerrightbutton) { this.pagerrightbutton.jqxButton({ disabled: true }); this.pagerleftbutton.jqxButton({ disabled: true }); this.pagershowrowscombo.jqxDropDownList({ disabled: true }) } if (this.pagerfirstbutton) { this.pagerfirstbutton.jqxButton({ disabled: true }); this.pagerlastbutton.jqxButton({ disabled: true }) } this.updatebounddata("pagechanged"); this._raiseEvent(9, { pagenum: d, oldpagenum: e, pagesize: this.dataview.pagesize }); this.updatepagerdetails(); if (this.autosavestate) { if (this.savestate) { this.savestate() } } return } } } else { this.dataview.updateview() } this._loadrows(); this._updatepageviews(); this.tableheight = null; this._updatecolumnwidths(); this._updatecellwidths(); this._renderrows(this.virtualsizeinfo); this.updatepagerdetails(); if (this.autoheight || this.autorowheight) { var f = this.host.height() - this._gettableheight(); height = f + this._pageviews[0].height; if (height != this.host.height()) { this._arrange(); this._updatepageviews(); if (this.autorowheight) { this._renderrows(this.virtualsizeinfo) } } } if (this.editcell != null && this.endcelledit) { this.endcelledit(this.editcell.row, this.editcell.column, false, false) } this.focus(); this._raiseEvent(9, { pagenum: d, oldpagenum: e, pagesize: this.dataview.pagesize }); if (this.autosavestate) { if (this.savestate) { this.savestate() } } } } }, gotoprevpage: function () { if (this.dataview.pagenum > 0) { this.gotopage(this.dataview.pagenum - 1) } else { if (this.pagermode != "simple") { var c = this.dataview.totalrecords; if (this.summaryrows) { c += this.summaryrows.length } var b = Math.ceil(c / this.pagesize); this.gotopage(b - 1) } } }, gotonextpage: function () { var c = this.dataview.totalrecords; if (this.summaryrows) { c += this.summaryrows.length } var b = Math.ceil(c / this.pagesize); if (this.dataview.pagenum < b - 1) { this.gotopage(this.dataview.pagenum + 1) } else { if (this.pagermode != "simple") { this.gotopage(0) } } }, updatepagerdetails: function () { if (this.pagerdetails != null && this.pagerdetails.length > 0) { var n = this.dataview.pagenum * this.pagesize; var d = (this.dataview.pagenum + 1) * this.pagesize; if (d >= this.dataview.totalrecords) { d = this.dataview.totalrecords } var q = this.dataview.totalrecords; if (this.summaryrows) { q += this.summaryrows.length; if ((this.dataview.pagenum + 1) * this.pagesize > this.dataview.totalrecords) { d = q } } n++; var g = Math.ceil(q / this.dataview.pagesize); if (g >= 1) { g-- } g++; if (this.pagermode !== "simple") { var o = this.pagergotoinput.find("input"); o.val(this.dataview.pagenum + 1) } else { var b = ""; var f = this.pagerbuttonscount; if (f == 0 || !f) { f = 5 } var h = 0; if (this.rtl) { h = f - 1 } while ((this.rtl && h >= 0) || (!this.rtl && h < f)) { var m = 1 + h; var k = this.dataview.pagenum / f; var e = Math.floor(k); m += e * f; var l = this.toTP("jqx-grid-pager-number"); l += " " + this.toTP("jqx-rc-all"); if (m > g) { break } if (!this.rtl) { if (h == 0 && m > f) { b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + (-1 + m) + "'>...</a>" } } if (this.dataview.pagenum === m - 1) { l += " " + this.toTP("jqx-fill-state-pressed") } if (!this.rtl) { b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + m + "'>" + m + "</a>"; if (h === f - 1) { var l = this.toTP("jqx-grid-pager-number"); l += " " + this.toTP("jqx-rc-all"); if (g >= 1 + m) { b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + (1 + m) + "'>...</a>" } } } else { if (h === f - 1) { var l = this.toTP("jqx-grid-pager-number"); l += " " + this.toTP("jqx-rc-all"); if (g >= 1 + m) { b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + (1 + m) + "'>...</a>" } } if (this.dataview.pagenum === m - 1) { l += " " + this.toTP("jqx-fill-state-pressed") } b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + m + "'>" + m + "</a>" } if (this.rtl) { var l = this.toTP("jqx-grid-pager-number"); l += " " + this.toTP("jqx-rc-all"); if (h == 0 && m > f) { b += "<a class='" + l + "' tabindex=-1 href='javascript:;' data-page='" + (-1 + m) + "'>...</a>" } } if (!this.rtl) { h++ } else { h-- } } var p = this["pagerbuttons"].find("a"); this.removeHandler(p, "click"); this.removeHandler(p, "mouseenter"); this.removeHandler(p, "mouseleave"); this["pagerbuttons"][0].innerHTML = b; var j = this; var c = function () { j.addHandler(p, "click", function (i) { var r = a(i.target).attr("data-page"); j.gotopage(parseInt(r) - 1); return false }); j.addHandler(p, "mouseenter", function (i) { a(i.target).addClass(j.toTP("jqx-fill-state-hover")) }); j.addHandler(p, "mouseleave", function (i) { a(i.target).removeClass(j.toTP("jqx-fill-state-hover")) }) }; var p = this["pagerbuttons"].find("a"); c(p) } this.pagergotoinput.attr("title", "1 - " + g); if (d == 0 && d < n) { n = 0 } if (!this.rtl) { this.pagerdetails[0].innerHTML = n + "-" + d + this.gridlocalization.pagerrangestring + q } else { this.pagerdetails[0].innerHTML = q + this.gridlocalization.pagerrangestring + d + "-" + n } if (n > d) { this.gotoprevpage() } } }, _updatepagedview: function (e, g, b) { var j = this.that; if (this.dataview.rows.length != this.dataview.pagesize) { this.dataview.updateview() } var k = this.dataview.rows.length; for (var d = 0; d < k; d++) { var f = this.dataview.rows[d].visibleindex; var h = { index: f, height: this.heights[f], hidden: this.hiddens[f], details: this.details[f] }; if (this.heights[f] == undefined) { this.heights[f] = this.rowsheight; h.height = this.rowsheight } if (this.hiddens[f] == undefined) { this.hiddens[f] = false; h.hidden = false } if (this.details[f] == undefined) { this.details[f] = null } if (h.height != j.rowsheight) { g -= j.rowsheight; g += h.height } if (h.hidden) { g -= h.height } else { b += h.height; var c = 0; if (this.rowdetails) { if (h.details && h.details.rowdetails && !h.details.rowdetailshidden) { c = h.details.rowdetailsheight; b += c; g += c } } } } this._pageviews[0] = { top: 0, height: b }; return g } }) })(jqxBaseFramework);

/*
jqxdropdownlist
*/

(function (a) { a.jqx.jqxWidget("jqxDropDownList", "", {}); a.extend(a.jqx._jqxDropDownList.prototype, { defineInstance: function () { var b = { disabled: false, width: null, height: null, items: new Array(), selectedIndex: -1, source: null, scrollBarSize: 15, arrowSize: 19, enableHover: true, enableSelection: true, visualItems: new Array(), groups: new Array(), equalItemsWidth: true, itemHeight: -1, visibleItems: new Array(), emptyGroupText: "Group", checkboxes: false, openDelay: 250, closeDelay: 300, animationType: "default", autoOpen: false, dropDownWidth: "auto", dropDownHeight: "200px", autoDropDownHeight: false, keyboardSelection: true, enableBrowserBoundsDetection: false, dropDownHorizontalAlignment: "left", displayMember: "", valueMember: "", groupMember: "", searchMember: "", searchMode: "startswithignorecase", incrementalSearch: true, incrementalSearchDelay: 700, renderer: null, placeHolder: "Please Choose:", promptText: "Please Choose:", emptyString: "", rtl: false, selectionRenderer: null, listBox: null, popupZIndex: 9999999999999, renderMode: "default", touchMode: "auto", _checkForHiddenParent: true, autoBind: true, focusable: true, filterable: false, filterHeight: 27, filterPlaceHolder: "Looking for", filterDelay: 100, aria: { "aria-disabled": { name: "disabled", type: "boolean"} }, events: ["open", "close", "select", "unselect", "change", "checkChange", "bindingComplete"] }; a.extend(true, this, b); return b }, createInstance: function (b) { this.render() }, render: function () { var q = this; if (!q.width) { q.width = 200 } if (!q.height) { q.height = 25 } var o = q.element.nodeName.toLowerCase(); if (o == "select" || o == "ul" || o == "ol") { q.field = q.element; if (q.field.className) { q._className = q.field.className } var k = { title: q.field.title }; if (q.field.id.length) { k.id = q.field.id.replace(/[^\w]/g, "_") + "_jqxDropDownList" } else { k.id = a.jqx.utilities.createId() + "_jqxDropDownList" } var c = a("<div></div>", k); if (!q.width) { q.width = a(q.field).width() } if (!q.height) { q.height = a(q.field).outerHeight() } a(q.field).hide().after(c); var i = q.host.data(); q.host = c; q.host.data(i); q.element = c[0]; q.element.id = q.field.id; q.field.id = k.id; if (q._className) { q.host.addClass(q._className); a(q.field).removeClass(q._className) } if (q.field.tabIndex) { var f = q.field.tabIndex; q.field.tabIndex = -1; q.element.tabIndex = f } var r = a.jqx.parseSourceTag(q.field); q.source = r.items; if (q.selectedIndex == -1) { q.selectedIndex = r.index } } q.element.innerHTML = ""; q.isanimating = false; q.id = q.element.id || a.jqx.utilities.createId(); q.host.attr("role", "combobox"); a.jqx.aria(q, "aria-autocomplete", "both"); a.jqx.aria(q, "aria-readonly", false); var g = "<div style='background-color: transparent; -webkit-appearance: none; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; border: 0px; position: relative;'><div id='dropdownlistWrapper' style='overflow: hidden; outline: none; background-color: transparent; border: none; float: left; width:100%; height: 100%; position: relative;'><div id='dropdownlistContent' unselectable='on' style='outline: none; background-color: transparent; border: none; float: left; position: relative;'></div><div id='dropdownlistArrow' unselectable='on' style='background-color: transparent; border: none; float: right; position: relative;'><div unselectable='on'></div></div></div></div>"; if (a.jqx._jqxListBox == null || a.jqx._jqxListBox == undefined) { throw new Error("jqxDropDownList: Missing reference to jqxlistbox.js.") } if (q.host.attr("tabindex")) { } else { q.host.attr("tabindex", 0) } var l = q; q.touch = a.jqx.mobile.isTouchDevice(); q.comboStructure = g; q.element.innerHTML = g; q.dropdownlistWrapper = a(q.element.firstChild.firstChild); q.dropdownlistArrow = a(q.dropdownlistWrapper[0].firstChild.nextSibling); q.arrow = a(q.dropdownlistArrow[0].firstChild); q.dropdownlistContent = a(q.dropdownlistWrapper[0].firstChild); q.dropdownlistContent.addClass(q.toThemeProperty("jqx-dropdownlist-content jqx-disableselect")); if (q.rtl) { q.dropdownlistContent.addClass(q.toThemeProperty("jqx-rtl jqx-dropdownlist-content-rtl")) } q.addHandler(q.dropdownlistWrapper, "selectstart", function () { return false }); q.dropdownlistWrapper[0].id = "dropdownlistWrapper" + q.element.id; q.dropdownlistArrow[0].id = "dropdownlistArrow" + q.element.id; q.dropdownlistContent[0].id = "dropdownlistContent" + q.element.id; q._addInput(); if (q.promptText != "Please Choose:") { q.placeHolder = q.promptText } var n = q.toThemeProperty("jqx-widget") + " " + q.toThemeProperty("jqx-dropdownlist-state-normal") + " " + q.toThemeProperty("jqx-rc-all") + " " + q.toThemeProperty("jqx-fill-state-normal"); q.element.className += " " + n; q._firstDiv = a(q.element.firstChild); try { var p = "listBox" + q.id; var h = a(a.find("#" + p)); if (h.length > 0) { h.remove() } a.jqx.aria(q, "aria-owns", p); a.jqx.aria(q, "aria-haspopup", true); var b = a("<div style='overflow: hidden; background-color: transparent; border: none; position: absolute;' id='listBox" + q.id + "'><div id='innerListBox" + q.id + "'></div></div>"); b.hide(); b.appendTo(document.body); q.container = b; q.listBoxContainer = a(a.find("#innerListBox" + q.id)); var d = q.width; if (q.dropDownWidth != "auto") { d = q.dropDownWidth } if (d == null) { d = q.host.width(); if (d == 0) { d = q.dropDownWidth } } if (q.dropDownHeight == null) { q.dropDownHeight = 200 } var l = q; q.container.width(parseInt(d) + 25); q.container.height(parseInt(q.dropDownHeight) + 25); q.addHandler(q.listBoxContainer, "bindingComplete", function (e) { if (!q.listBox) { q.listBox = a.data(q.listBoxContainer[0], "jqxListBox").instance } if (q.selectedIndex != q.listBoxContainer.jqxListBox("selectedIndex")) { q.listBox = a.data(q.listBoxContainer[0], "jqxListBox").instance; q.listBoxContainer.jqxListBox({ selectedIndex: q.selectedIndex }); q.renderSelection("mouse") } else { q.renderSelection("mouse") } q._raiseEvent("6") }); q.listBoxContainer.jqxListBox({ filterHeight: q.filterHeight, filterPlaceHolder: q.filterPlaceHolder, filterDelay: q.filterDelay, filterable: q.filterable, allowDrop: false, allowDrag: false, autoBind: q.autoBind, _checkForHiddenParent: false, focusable: q.focusable, touchMode: q.touchMode, checkboxes: q.checkboxes, rtl: q.rtl, _renderOnDemand: true, emptyString: q.emptyString, itemHeight: q.itemHeight, width: d, searchMode: q.searchMode, incrementalSearch: q.incrementalSearch, incrementalSearchDelay: q.incrementalSearchDelay, groupMember: q.groupMember, searchMember: q.searchMember, displayMember: q.displayMember, valueMember: q.valueMember, height: q.dropDownHeight, autoHeight: q.autoDropDownHeight, scrollBarSize: q.scrollBarSize, selectedIndex: q.selectedIndex, source: q.source, theme: q.theme, rendered: function () { if (q.selectedIndex != q.listBoxContainer.jqxListBox("selectedIndex")) { q.listBox = a.data(q.listBoxContainer[0], "jqxListBox").instance; q.listBoxContainer.jqxListBox({ selectedIndex: q.selectedIndex }); q.renderSelection("mouse") } else { q.renderSelection("mouse") } }, renderer: q.renderer }); q.listBoxContainer.css({ position: "absolute", zIndex: q.popupZIndex, top: 0, left: 0 }); q.listBox = a.data(q.listBoxContainer[0], "jqxListBox").instance; q.listBox.enableSelection = q.enableSelection; q.listBox.enableHover = q.enableHover; q.listBox.equalItemsWidth = q.equalItemsWidth; q.listBox.selectIndex(q.selectedIndex); q.listBox._arrange(); q.listBoxContainer.addClass(q.toThemeProperty("jqx-popup")); if (a.jqx.browser.msie) { q.listBoxContainer.addClass(q.toThemeProperty("jqx-noshadow")) } q.addHandler(q.listBoxContainer, "unselect", function (e) { q._raiseEvent("3", { index: e.args.index, type: e.args.type, item: e.args.item }) }); q.addHandler(q.listBoxContainer, "change", function (e) { if (e.args) { if (e.args.type != "keyboard") { q._raiseEvent("4", { index: e.args.index, type: e.args.type, item: e.args.item }) } else { if (e.args.type == "keyboard") { if (!q.isOpened()) { q._raiseEvent("4", { index: q.selectedIndex, type: "keyboard", item: q.getItem(q.selectedIndex) }) } } } } }); if (q.animationType == "none") { q.container.css("display", "none") } else { q.container.hide() } } catch (j) { if (console) { console.log(j) } } var q = q; q.propertyChangeMap.disabled = function (e, t, s, u) { if (u) { e.host.addClass(q.toThemeProperty("jqx-dropdownlist-state-disabled")); e.host.addClass(q.toThemeProperty("jqx-fill-state-disabled")); e.dropdownlistContent.addClass(q.toThemeProperty("jqx-dropdownlist-content-disabled")) } else { e.host.removeClass(q.toThemeProperty("jqx-dropdownlist-state-disabled")); e.host.removeClass(q.toThemeProperty("jqx-fill-state-disabled")); e.dropdownlistContent.removeClass(q.toThemeProperty("jqx-dropdownlist-content-disabled")) } a.jqx.aria(e, "aria-disabled", e.disabled) }; if (q.disabled) { q.host.addClass(q.toThemeProperty("jqx-dropdownlist-state-disabled")); q.host.addClass(q.toThemeProperty("jqx-fill-state-disabled")); q.dropdownlistContent.addClass(q.toThemeProperty("jqx-dropdownlist-content-disabled")) } q.arrow.addClass(q.toThemeProperty("jqx-icon-arrow-down")); q.arrow.addClass(q.toThemeProperty("jqx-icon")); if (q.renderMode === "simple") { q.arrow.remove(); q.host.removeClass(q.toThemeProperty("jqx-fill-state-normal")); q.host.removeClass(q.toThemeProperty("jqx-rc-all")) } q._updateHandlers(); q._setSize(); q._arrange(); if (q.listBox) { q.renderSelection() } if (a.jqx.browser.msie && a.jqx.browser.version < 8) { if (q.host.parents(".jqx-window").length > 0) { var m = q.host.parents(".jqx-window").css("z-index"); b.css("z-index", m + 10); q.listBoxContainer.css("z-index", m + 10) } } }, resize: function (c, b) { this.width = c; this.height = b; this._setSize(); this._arrange() }, val: function (c) { if (!this.dropdownlistContent) { return "" } var d = function (f) { for (var e in f) { if (f.hasOwnProperty(e)) { return false } } if (typeof c == "number") { return false } if (typeof c == "date") { return false } if (typeof c == "boolean") { return false } if (typeof c == "string") { return false } return true }; if (this.input && (d(c) || arguments.length == 0)) { return this.input.val() } var b = this.getItemByValue(c); if (b != null) { this.selectItem(b) } if (this.input) { return this.input.val() } }, focus: function () { try { var d = this; var c = function () { d.host.focus(); if (d._firstDiv) { d._firstDiv.focus() } }; c(); setTimeout(function () { c() }, 10) } catch (b) { } }, _addInput: function () { var b = this.host.attr("name"); this.input = a("<input type='hidden'/>"); this.host.append(this.input); if (b) { this.input.attr("name", b) } }, getItems: function () { if (!this.listBox) { return new Array() } return this.listBox.items }, getVisibleItems: function () { return this.listBox.getVisibleItems() }, _setSize: function () { if (this.width != null && this.width.toString().indexOf("px") != -1) { this.host.width(this.width) } else { if (this.width != undefined && !isNaN(this.width)) { this.host.width(this.width) } } if (this.height != null && this.height.toString().indexOf("px") != -1) { this.host.height(this.height) } else { if (this.height != undefined && !isNaN(this.height)) { this.host.height(this.height) } } var e = false; if (this.width != null && this.width.toString().indexOf("%") != -1) { e = true; this.host.width(this.width) } if (this.height != null && this.height.toString().indexOf("%") != -1) { e = true; this.host.height(this.height) } var c = this; var d = function () { c._arrange(); if (c.dropDownWidth == "auto") { var f = c.host.width(); c.listBoxContainer.jqxListBox({ width: f }); c.container.width(parseInt(f) + 25) } }; if (e) { var b = this.host.width(); if (this.dropDownWidth != "auto") { b = this.dropDownWidth } this.listBoxContainer.jqxListBox({ width: b }); this.container.width(parseInt(b) + 25) } a.jqx.utilities.resize(this.host, function () { d() }, false, this._checkForHiddenParent) }, isOpened: function () { var c = this; var b = a.data(document.body, "openedJQXListBox" + this.id); if (b != null && b == c.listBoxContainer) { return true } return false }, _updateHandlers: function () { var c = this; var d = false; this.removeHandlers(); if (!this.touch) { this.addHandler(this.host, "mouseenter", function () { if (!c.disabled && c.enableHover && c.renderMode !== "simple") { d = true; c.host.addClass(c.toThemeProperty("jqx-dropdownlist-state-hover")); c.arrow.addClass(c.toThemeProperty("jqx-icon-arrow-down-hover")); c.host.addClass(c.toThemeProperty("jqx-fill-state-hover")) } }); this.addHandler(this.host, "mouseleave", function () { if (!c.disabled && c.enableHover && c.renderMode !== "simple") { c.host.removeClass(c.toThemeProperty("jqx-dropdownlist-state-hover")); c.host.removeClass(c.toThemeProperty("jqx-fill-state-hover")); c.arrow.removeClass(c.toThemeProperty("jqx-icon-arrow-down-hover")); d = false } }) } if (this.host.parents()) { this.addHandler(this.host.parents(), "scroll.dropdownlist" + this.element.id, function (e) { var f = c.isOpened(); if (f) { c.close() } }) } var b = "mousedown"; if (this.touch) { b = a.jqx.mobile.getTouchEventName("touchstart") } this.addHandler(this.dropdownlistWrapper, b, function (f) { if (!c.disabled) { var e = c.container.css("display") == "block"; if (!c.isanimating) { if (e) { c.hideListBox(); return false } else { c.showListBox(); if (!c.focusable) { if (f.preventDefault) { f.preventDefault() } } else { c.focus() } } } } }); if (c.autoOpen) { this.addHandler(this.host, "mouseenter", function () { var e = c.isOpened(); if (!e && c.autoOpen) { c.open(); c.host.focus() } }); a(document).on("mousemove." + c.id, function (h) { var g = c.isOpened(); if (g && c.autoOpen) { var l = c.host.coord(); var k = l.top; var j = l.left; var i = c.container.coord(); var e = i.left; var f = i.top; canClose = true; if (h.pageY >= k && h.pageY <= k + c.host.height()) { if (h.pageX >= j && h.pageX < j + c.host.width()) { canClose = false } } if (h.pageY >= f && h.pageY <= f + c.container.height()) { if (h.pageX >= e && h.pageX < e + c.container.width()) { canClose = false } } if (canClose) { c.close() } } }) } if (this.touch) { this.addHandler(a(document), a.jqx.mobile.getTouchEventName("touchstart") + "." + this.id, c.closeOpenedListBox, { me: this, listbox: this.listBox, id: this.id }) } else { this.addHandler(a(document), "mousedown." + this.id, c.closeOpenedListBox, { me: this, listbox: this.listBox, id: this.id }) } this.addHandler(this.host, "keydown", function (f) { var e = c.container.css("display") == "block"; if (c.host.css("display") == "none") { return true } if (f.keyCode == "13" || f.keyCode == "9") { if (!c.isanimating) { if (e) { c.renderSelection(); if (f.keyCode == "13" && c.focusable) { c._firstDiv.focus() } c.hideListBox(); if (!c.keyboardSelection) { c._raiseEvent("2", { index: c.selectedIndex, type: "keyboard", item: c.getItem(c.selectedIndex) }) } if (f.keyCode == "13") { c._raiseEvent("4", { index: c.selectedIndex, type: "keyboard", item: c.getItem(c.selectedIndex) }) } } if (e && f.keyCode != "9") { return false } return true } } if (f.keyCode == 115) { if (!c.isanimating) { if (!c.isOpened()) { c.showListBox() } else { if (c.isOpened()) { c.hideListBox() } } } return false } if (f.altKey) { if (c.host.css("display") == "block") { if (f.keyCode == 38) { if (c.isOpened()) { c.hideListBox(); return true } } else { if (f.keyCode == 40) { if (!c.isOpened()) { c.showListBox(); return true } } } } } if (f.keyCode == "27") { if (!c.ishiding) { if (c.isOpened()) { c.hideListBox(); if (c.tempSelectedIndex != undefined) { c.selectIndex(c.tempSelectedIndex) } } return true } } if (!c.disabled) { c._kbnavigated = c.listBox._handleKeyDown(f); return c._kbnavigated } }); this.addHandler(this.listBoxContainer, "checkChange", function (e) { c.renderSelection(); c._updateInputSelection(); c._raiseEvent(5, { label: e.args.label, value: e.args.value, checked: e.args.checked, item: e.args.item }) }); this.addHandler(this.listBoxContainer, "select", function (e) { if (!c.disabled) { if (!e.args) { return } if (e.args.type == "keyboard" && !c.isOpened()) { c.renderSelection() } if (e.args.type != "keyboard" || c.keyboardSelection) { c.renderSelection(); c._raiseEvent("2", { index: e.args.index, type: e.args.type, item: e.args.item, originalEvent: e.args.originalEvent }); if (e.args.type == "mouse") { if (!c.checkboxes) { c.hideListBox(); if (c._firstDiv && c.focusable) { c._firstDiv.focus() } } } } } }); if (this.listBox) { if (this.listBox.content) { this.addHandler(this.listBox.content, "click", function (e) { if (!c.disabled) { if (c.listBox.itemswrapper && e.target === c.listBox.itemswrapper[0]) { return true } c.renderSelection("mouse"); if (!c.touch) { if (!c.ishiding) { if (!c.checkboxes) { c.hideListBox(); if (c._firstDiv && c.focusable) { c._firstDiv.focus() } } } } if (!c.keyboardSelection) { if (c._kbnavigated === false) { if (c.tempSelectedIndex != c.selectedIndex) { c._raiseEvent("4", { index: c.selectedIndex, type: "mouse", item: c.getItem(c.selectedIndex) }) } c._kbnavigated = true } if (c._oldSelectedInd == undefined) { c._oldSelectedIndx = c.selectedIndex } if (c.selectedIndex != c._oldSelectedIndx) { c._raiseEvent("2", { index: c.selectedIndex, type: "keyboard", item: c.getItem(c.selectedIndex) }); c._oldSelectedIndx = c.selectedIndex } } } }) } } this.addHandler(this.host, "focus", function (e) { if (c.renderMode !== "simple") { c.host.addClass(c.toThemeProperty("jqx-dropdownlist-state-focus")); c.host.addClass(c.toThemeProperty("jqx-fill-state-focus")) } }); this.addHandler(this.host, "blur", function () { if (c.renderMode !== "simple") { c.host.removeClass(c.toThemeProperty("jqx-dropdownlist-state-focus")); c.host.removeClass(c.toThemeProperty("jqx-fill-state-focus")) } }); this.addHandler(this._firstDiv, "focus", function (e) { if (c.renderMode !== "simple") { c.host.addClass(c.toThemeProperty("jqx-dropdownlist-state-focus")); c.host.addClass(c.toThemeProperty("jqx-fill-state-focus")) } }); this.addHandler(this._firstDiv, "blur", function () { if (c.renderMode !== "simple") { c.host.removeClass(c.toThemeProperty("jqx-dropdownlist-state-focus")); c.host.removeClass(c.toThemeProperty("jqx-fill-state-focus")) } }) }, removeHandlers: function () { var c = this; var b = "mousedown"; if (this.touch) { b = a.jqx.mobile.getTouchEventName("touchstart") } this.removeHandler(this.dropdownlistWrapper, b); if (this.listBox) { if (this.listBox.content) { this.removeHandler(this.listBox.content, "click") } } this.removeHandler(this.host, "loadContent"); this.removeHandler(this.listBoxContainer, "checkChange"); this.removeHandler(this.host, "keydown"); this.removeHandler(this.host, "focus"); this.removeHandler(this.host, "blur"); this.removeHandler(this._firstDiv, "focus"); this.removeHandler(this._firstDiv, "blur"); this.removeHandler(this.host, "mouseenter"); this.removeHandler(this.host, "mouseleave"); this.removeHandler(a(document), "mousemove." + c.id) }, getItem: function (b) { var c = this.listBox.getItem(b); return c }, getItemByValue: function (c) { var b = this.listBox.getItemByValue(c); return b }, selectItem: function (b) { if (this.listBox != undefined) { this.listBox.selectItem(b); this.selectedIndex = this.listBox.selectedIndex; this.renderSelection("mouse") } }, unselectItem: function (b) { if (this.listBox != undefined) { this.listBox.unselectItem(b); this.renderSelection("mouse") } }, checkItem: function (b) { if (this.listBox != undefined) { this.listBox.checkItem(b) } }, uncheckItem: function (b) { if (this.listBox != undefined) { this.listBox.uncheckItem(b) } }, indeterminateItem: function (b) { if (this.listBox != undefined) { this.listBox.indeterminateItem(b) } }, renderSelection: function () { if (this.listBox == null) { return } if (this.height && this.height.toString().indexOf("%") != -1) { this._arrange() } var r = this.listBox.visibleItems[this.listBox.selectedIndex]; if (this.filterable) { if (this.listBox.selectedIndex == -1) { for (var e in this.listBox.selectedValues) { var l = this.listBox.selectedValues[e]; var b = this.listBox.getItemByValue(l); if (b) { r = b } } } } var u = this; if (this.checkboxes) { var v = this.getCheckedItems(); if (v != null && v.length > 0) { r = v[0] } else { r = null } } if (r == null) { var j = a('<span unselectable="on" style="color: inherit; border: none; background-color: transparent;"></span>'); j.appendTo(a(document.body)); j.addClass(this.toThemeProperty("jqx-widget")); j.addClass(this.toThemeProperty("jqx-listitem-state-normal")); j.addClass(this.toThemeProperty("jqx-item")); a.jqx.utilities.html(j, this.placeHolder); var s = this.dropdownlistContent.css("padding-top"); var x = this.dropdownlistContent.css("padding-bottom"); j.css("padding-top", s); j.css("padding-bottom", x); var q = j.outerHeight(); j.remove(); j.removeClass(); a.jqx.utilities.html(this.dropdownlistContent, j); var h = this.host.height(); if (this.height != null && this.height != undefined) { if (this.height.toString().indexOf("%") === -1) { h = parseInt(this.height) } } var f = parseInt((parseInt(h) - parseInt(q)) / 2); if (f > 0) { this.dropdownlistContent.css("margin-top", f + "px"); this.dropdownlistContent.css("margin-bottom", f + "px") } if (this.selectionRenderer) { a.jqx.utilities.html(this.dropdownlistContent, this.selectionRenderer(j, -1, "", "")); this.dropdownlistContent.css("margin-top", "0px"); this.dropdownlistContent.css("margin-bottom", "0px"); this._updateInputSelection() } else { this._updateInputSelection() } this.selectedIndex = this.listBox.selectedIndex; if (this.width === "auto") { this._arrange() } if (this.focusable && this.isOpened()) { this.focus() } return } this.selectedIndex = this.listBox.selectedIndex; var j = a(document.createElement("span")); j[0].setAttribute("unselectable", "on"); try { j[0].style.color = "inherit" } catch (t) { } j[0].style.borderWidth = "0px"; j[0].style.backgroundColor = "transparent"; j.appendTo(a(document.body)); j.addClass(this.toThemeProperty("jqx-widget jqx-listitem-state-normal jqx-item")); var p = false; try { if (r.html != undefined && r.html != null && r.html.toString().length > 0) { a.jqx.utilities.html(j, r.html) } else { if (r.label != undefined && r.label != null && r.label.toString().length > 0) { a.jqx.utilities.html(j, r.label) } else { if (r.label === null || r.label === "") { p = true; a.jqx.utilities.html(j, "") } else { if (r.value != undefined && r.value != null && r.value.toString().length > 0) { a.jqx.utilities.html(j, r.value) } else { if (r.title != undefined && r.title != null && r.title.toString().length > 0) { a.jqx.utilities.html(j, r.title) } else { if (r.label == "" || r.label == null) { p = true; a.jqx.utilities.html(j, "") } } } } } } } catch (n) { var m = n } var s = this.dropdownlistContent[0].style.paddingTop; var x = this.dropdownlistContent[0].style.paddingBottom; if (s === "") { s = "0px" } if (x === "") { x = "0px" } j[0].style.paddingTop = s; j[0].style.paddingBottom = x; var q = j.outerHeight(); if (q === 0) { q = 16 } if ((r.label == "" || r.label == null) && p) { a.jqx.utilities.html(j, "") } var c = this.width && this.width.toString().indexOf("%") <= 0; j.remove(); j.removeClass(); if (this.selectionRenderer) { a.jqx.utilities.html(this.dropdownlistContent, this.selectionRenderer(j, r.index, r.label, r.value)); if (this.focusable && this.isOpened()) { this.focus() } } else { if (this.checkboxes) { var g = this.getCheckedItems(); var k = ""; for (var o = 0; o < g.length; o++) { if (o == g.length - 1) { k += g[o].label } else { k += g[o].label + "," } } j.text(k); if (c) { j.css("max-width", this.host.width() - 30) } j.css("overflow", "hidden"); j.css("display", "block"); if (!this.rtl) { if (c) { j.css("width", this.host.width() - 30) } } j.css("text-overflow", "ellipsis"); j.css("padding-bottom", 1 + parseInt(x)); this.dropdownlistContent.html(j); if (this.focusable && this.isOpened()) { this.focus() } } else { var d = this.host.width() - this.arrowSize - 3; if (this.width && this.width !== "auto") { if (c) { if (!this.rtl) { j.css("max-width", d + "px") } } j[0].style.overflow = "hidden"; j[0].style.display = "block"; j[0].style.paddingTop = (1 + parseInt(x)) + "px"; if (!this.rtl) { if (c) { if (d < 0) { d = 0 } j[0].style.width = d + "px" } } j[0].style.textOverflow = "ellipsis" } this.dropdownlistContent[0].innerHTML = j[0].innerHTML; if (this.focusable && this.isOpened()) { this.focus() } } } var h = this.host.height(); if (this.height != null && this.height != undefined) { if (this.height.toString().indexOf("%") === -1) { h = parseInt(this.height) } } var f = parseInt((parseInt(h) - parseInt(q)) / 2); if (f >= 0) { this.dropdownlistContent[0].style.marginTop = f + "px"; this.dropdownlistContent[0].style.marginBottom = f + "px" } if (this.selectionRenderer) { this.dropdownlistContent[0].style.marginTop = "0px"; this.dropdownlistContent[0].style.marginBottom = "0px" } if (this.dropdownlistContent && this.input) { this._updateInputSelection() } if (this.listBox && this.listBox._activeElement) { a.jqx.aria(this, "aria-activedescendant", this.listBox._activeElement.id) } if (this.width === "auto") { this._arrange() } }, _updateInputSelection: function () { if (this.input) { var c = new Array(); if (this.selectedIndex == -1) { this.input.val("") } else { var f = this.getSelectedItem(); if (f != null) { this.input.val(f.value); c.push(f.value) } else { this.input.val(this.dropdownlistContent.text()) } } if (this.checkboxes) { var b = this.getCheckedItems(); var g = ""; if (b != null) { for (var d = 0; d < b.length; d++) { var e = b[d].value; if (e == undefined) { continue } if (d == b.length - 1) { g += e } else { g += e + "," } c.push(e) } } this.input.val(g) } } if (this.field && this.input) { if (this.field.nodeName.toLowerCase() == "select") { a.each(this.field, function (h, i) { a(this).removeAttr("selected"); this.selected = c.indexOf(this.value) >= 0; if (this.selected) { a(this).attr("selected", true) } }) } else { a.each(this.items, function (h, i) { a(this.originalItem.originalItem).removeAttr("data-selected"); this.selected = c.indexOf(this.value) >= 0; if (this.selected) { a(this.originalItem.originalItem).attr("data-selected", true) } }) } } }, setContent: function (b) { a.jqx.utilities.html(this.dropdownlistContent, b); this._updateInputSelection() }, dataBind: function () { this.listBoxContainer.jqxListBox({ source: this.source }); this.renderSelection("mouse"); if (this.source == null) { this.clearSelection() } }, clear: function () { this.listBoxContainer.jqxListBox({ source: null }); this.clearSelection() }, clearSelection: function (b) { this.selectedIndex = -1; this._updateInputSelection(); this.listBox.clearSelection(); this.renderSelection(); if (!this.selectionRenderer) { a.jqx.utilities.html(this.dropdownlistContent, this.placeHolder) } }, unselectIndex: function (b, c) { if (isNaN(b)) { return } this.listBox.unselectIndex(b, c); this.renderSelection() }, selectIndex: function (b, d, e, c) { this.listBox.selectIndex(b, d, e, c, "api") }, getSelectedIndex: function () { return this.selectedIndex }, getSelectedItem: function () { return this.listBox.getVisibleItem(this.selectedIndex) }, getCheckedItems: function () { return this.listBox.getCheckedItems() }, checkIndex: function (b) { this.listBox.checkIndex(b) }, uncheckIndex: function (b) { this.listBox.uncheckIndex(b) }, indeterminateIndex: function (b) { this.listBox.indeterminateIndex(b) }, checkAll: function () { this.listBox.checkAll(); this.renderSelection("mouse") }, uncheckAll: function () { this.listBox.uncheckAll(); this.renderSelection("mouse") }, addItem: function (b) { return this.listBox.addItem(b) }, insertAt: function (c, b) { if (c == null) { return false } return this.listBox.insertAt(c, b) }, removeAt: function (c) { var b = this.listBox.removeAt(c); this.renderSelection("mouse"); return b }, removeItem: function (c) { var b = this.listBox.removeItem(c); this.renderSelection("mouse"); return b }, updateItem: function (c, d) { var b = this.listBox.updateItem(c, d); this.renderSelection("mouse"); return b }, updateAt: function (d, c) { var b = this.listBox.updateAt(d, c); this.renderSelection("mouse"); return b }, ensureVisible: function (b) { return this.listBox.ensureVisible(b) }, disableAt: function (b) { return this.listBox.disableAt(b) }, enableAt: function (b) { return this.listBox.enableAt(b) }, disableItem: function (b) { return this.listBox.disableItem(b) }, enableItem: function (b) { return this.listBox.enableItem(b) }, _findPos: function (c) { while (c && (c.type == "hidden" || c.nodeType != 1 || a.expr.filters.hidden(c))) { c = c.nextSibling } var b = a(c).coord(true); return [b.left, b.top] }, testOffset: function (h, f, c) { var g = h.outerWidth(); var j = h.outerHeight(); var i = a(window).width() + a(window).scrollLeft(); var e = a(window).height() + a(window).scrollTop(); if (f.left + g > i) { if (g > this.host.width()) { var d = this.host.coord().left; var b = g - this.host.width(); f.left = d - b + 2 } } if (f.left < 0) { f.left = parseInt(this.host.coord().left) + "px" } f.top -= Math.min(f.top, (f.top + j > e && e > j) ? Math.abs(j + c + 22) : 0); return f }, open: function () { this.showListBox() }, close: function () { this.hideListBox() }, _getBodyOffset: function () { var c = 0; var b = 0; if (a("body").css("border-top-width") != "0px") { c = parseInt(a("body").css("border-top-width")); if (isNaN(c)) { c = 0 } } if (a("body").css("border-left-width") != "0px") { b = parseInt(a("body").css("border-left-width")); if (isNaN(b)) { b = 0 } } return { left: b, top: c} }, showListBox: function () { a.jqx.aria(this, "aria-expanded", true); if (this.listBox._renderOnDemand) { this.listBoxContainer.jqxListBox({ _renderOnDemand: false }) } if (this.dropDownWidth == "auto" && this.width != null && this.width.indexOf && (this.width.indexOf("%") != -1 || this.width.indexOf("auto") != -1)) { if (this.listBox.host.width() != this.host.width()) { var c = this.host.width(); this.listBoxContainer.jqxListBox({ width: c }); this.container.width(parseInt(c) + 25) } } var p = this; var d = this.listBoxContainer; var j = this.listBox; var m = a(window).scrollTop(); var h = a(window).scrollLeft(); var k = parseInt(this._findPos(this.host[0])[1]) + parseInt(this.host.outerHeight()) - 1 + "px"; var f, g = parseInt(Math.round(this.host.coord(true).left)); f = g + "px"; var o = a.jqx.mobile.isSafariMobileBrowser() || a.jqx.mobile.isWindowsPhone(); if (this.listBox == null) { return } this.ishiding = false; if (!this.keyboardSelection) { this.listBox.selectIndex(this.selectedIndex); this.listBox.ensureVisible(this.selectedIndex) } this.tempSelectedIndex = this.selectedIndex; if (this.autoDropDownHeight) { this.container.height(this.listBoxContainer.height() + 25) } if ((o != null && o)) { f = a.jqx.mobile.getLeftPos(this.element); k = a.jqx.mobile.getTopPos(this.element) + parseInt(this.host.outerHeight()); if (a("body").css("border-top-width") != "0px") { k = parseInt(k) - this._getBodyOffset().top + "px" } if (a("body").css("border-left-width") != "0px") { f = parseInt(f) - this._getBodyOffset().left + "px" } } d.stop(); if (this.renderMode !== "simple") { this.host.addClass(this.toThemeProperty("jqx-dropdownlist-state-selected")); this.host.addClass(this.toThemeProperty("jqx-fill-state-pressed")); this.arrow.addClass(this.toThemeProperty("jqx-icon-arrow-down-selected")) } this.container.css("left", f); this.container.css("top", k); j._arrange(); var e = true; var q = false; if (this.dropDownHorizontalAlignment == "right" || this.rtl) { var l = this.container.outerWidth(); var b = Math.abs(l - this.host.width()); if (l > this.host.width()) { this.container.css("left", 25 + parseInt(Math.round(g)) - b + "px") } else { this.container.css("left", 25 + parseInt(Math.round(g)) + b + "px") } } if (this.enableBrowserBoundsDetection) { var i = this.testOffset(d, { left: parseInt(this.container.css("left")), top: parseInt(k) }, parseInt(this.host.outerHeight())); if (parseInt(this.container.css("top")) != i.top) { q = true; d.css("top", 23); d.addClass(this.toThemeProperty("jqx-popup-up")) } else { d.css("top", 0) } this.container.css("top", i.top); if (parseInt(this.container.css("left")) != i.left) { this.container.css("left", i.left) } } if (this.animationType == "none") { this.container.css("display", "block"); a.data(document.body, "openedJQXListBoxParent", p); a.data(document.body, "openedJQXListBox" + this.id, d); d.css("margin-top", 0); d.css("opacity", 1); j._renderItems(); p._raiseEvent("0", j) } else { this.container.css("display", "block"); p.isanimating = true; if (this.animationType == "fade") { d.css("margin-top", 0); d.css("opacity", 0); d.animate({ opacity: 1 }, this.openDelay, function () { a.data(document.body, "openedJQXListBoxParent", p); a.data(document.body, "openedJQXListBox" + p.id, d); p.ishiding = false; p.isanimating = false; j._renderItems(); p._raiseEvent("0", j) }) } else { d.css("opacity", 1); var n = d.outerHeight(); if (q) { d.css("margin-top", n) } else { d.css("margin-top", -n) } d.animate({ "margin-top": 0 }, this.openDelay, function () { a.data(document.body, "openedJQXListBoxParent", p); a.data(document.body, "openedJQXListBox" + p.id, d); p.ishiding = false; p.isanimating = false; j._renderItems(); p._raiseEvent("0", j) }) } } if (!q) { this.host.addClass(this.toThemeProperty("jqx-rc-b-expanded")); d.addClass(this.toThemeProperty("jqx-rc-t-expanded")) } else { this.host.addClass(this.toThemeProperty("jqx-rc-t-expanded")); d.addClass(this.toThemeProperty("jqx-rc-b-expanded")) } if (this.renderMode !== "simple") { d.addClass(this.toThemeProperty("jqx-fill-state-focus")); this.host.addClass(this.toThemeProperty("jqx-dropdownlist-state-focus")); this.host.addClass(this.toThemeProperty("jqx-fill-state-focus")) } }, hideListBox: function () { a.jqx.aria(this, "aria-expanded", false); var f = this.listBoxContainer; var g = this.listBox; var c = this.container; var d = this; a.data(document.body, "openedJQXListBox" + this.id, null); if (this.animationType == "none") { this.container.css("display", "none") } else { if (!d.ishiding) { f.stop(); var b = f.outerHeight(); f.css("margin-top", 0); d.isanimating = true; var e = -b; if (parseInt(this.container.coord().top) < parseInt(this.host.coord().top)) { e = b } if (this.animationType == "fade") { f.css({ opacity: 1 }); f.animate({ opacity: 0 }, this.closeDelay, function () { c.css("display", "none"); d.isanimating = false; d.ishiding = false }) } else { f.animate({ "margin-top": e }, this.closeDelay, function () { c.css("display", "none"); d.isanimating = false; d.ishiding = false }) } } } this.ishiding = true; this.host.removeClass(this.toThemeProperty("jqx-dropdownlist-state-selected")); this.host.removeClass(this.toThemeProperty("jqx-fill-state-pressed")); this.arrow.removeClass(this.toThemeProperty("jqx-icon-arrow-down-selected")); this.host.removeClass(this.toThemeProperty("jqx-rc-b-expanded")); f.removeClass(this.toThemeProperty("jqx-rc-t-expanded")); this.host.removeClass(this.toThemeProperty("jqx-rc-t-expanded")); f.removeClass(this.toThemeProperty("jqx-rc-b-expanded")); f.removeClass(this.toThemeProperty("jqx-fill-state-focus")); this.host.removeClass(this.toThemeProperty("jqx-dropdownlist-state-focus")); this.host.removeClass(this.toThemeProperty("jqx-fill-state-focus")); this._raiseEvent("1", g) }, closeOpenedListBox: function (e) { var d = e.data.me; var b = a(e.target); var c = e.data.listbox; if (c == null) { return true } if (a(e.target).ischildof(e.data.me.host)) { return true } if (!d.isOpened()) { return true } if (a(e.target).ischildof(d.listBoxContainer)) { return true } var f = d; var g = false; a.each(b.parents(), function () { if (this.className != "undefined") { if (this.className.indexOf) { if (this.className.indexOf("jqx-listbox") != -1) { g = true; return false } if (this.className.indexOf("jqx-dropdownlist") != -1) { if (d.element.id == this.id) { g = true } return false } } } }); if (c != null && !g && d.isOpened()) { d.hideListBox() } return true }, clearFilter: function () { this.listBox.clearFilter() }, loadFromSelect: function (b) { this.listBox.loadFromSelect(b) }, refresh: function (b) { if (b !== true) { this._setSize(); this._arrange(); if (this.listBox) { this.renderSelection() } } }, _arrange: function () { var h = this; var d = parseInt(h.host.width()); var j = parseInt(h.host.height()); var f = h.arrowSize; var g = h.arrowSize; var i = 3; var b = d - g - 2 * i; if (b > 0 && h.width !== "auto") { h.dropdownlistContent[0].style.width = b + "px" } else { if (b <= 0) { h.dropdownlistContent[0].style.width = "0px" } } if (h.width === "auto") { h.dropdownlistContent.css("width", "auto"); d = h.dropdownlistContent.width() + g + 2 * i; h.host.width(d) } h.dropdownlistContent[0].style.height = j + "px"; h.dropdownlistContent[0].style.left = "0px"; h.dropdownlistContent[0].style.top = "0px"; h.dropdownlistArrow[0].style.width = g + "px"; if (h.width && h.width.toString().indexOf("%") >= 0) { var e = (g * 100) / d; var c = (b * 100) / d; h.dropdownlistArrow[0].style.width = e + "%"; h.dropdownlistContent[0].style.width = c + "%" } h.dropdownlistArrow[0].style.height = j + "px"; if (h.rtl) { h.dropdownlistArrow.css("float", "left"); h.dropdownlistContent.css("float", "right") } }, destroy: function () { a.jqx.utilities.resize(this.host, null, true); this.removeHandler(this.listBoxContainer, "select"); this.removeHandler(this.listBoxContainer, "unselect"); this.removeHandler(this.listBoxContainer, "change"); this.removeHandler(this.dropdownlistWrapper, "selectstart"); this.removeHandler(this.dropdownlistWrapper, "mousedown"); this.removeHandler(this.host, "keydown"); this.removeHandler(this.listBoxContainer, "select"); this.removeHandler(this.listBox.content, "click"); this.removeHandler(this.listBoxContainer, "bindingComplete"); if (this.host.parents()) { this.removeHandler(this.host.parents(), "scroll.dropdownlist" + this.element.id) } this.removeHandlers(); this.listBoxContainer.jqxListBox("destroy"); this.listBoxContainer.remove(); this.host.removeClass(); this.removeHandler(a(document), "mousedown." + this.id, this.closeOpenedListBox); if (this.touch) { this.removeHandler(a(document), a.jqx.mobile.getTouchEventName("touchstart") + "." + this.id) } this.dropdownlistArrow.remove(); delete this.dropdownlistArrow; delete this.dropdownlistWrapper; delete this.listBoxContainer; delete this.input; delete this.arrow; delete this.dropdownlistContent; delete this.listBox; delete this._firstDiv; this.container.remove(); delete this.container; var b = a.data(this.element, "jqxDropDownList"); if (b) { delete b.instance } this.host.removeData(); this.host.remove(); delete this.comboStructure; delete this.host; delete this.element }, _raiseEvent: function (f, c) { if (c == undefined) { c = { owner: null} } var d = this.events[f]; args = c; args.owner = this; var e = new a.Event(d); e.owner = this; if (f == 2 || f == 3 || f == 4 || f == 5) { e.args = c } var b = this.host.trigger(e); return b }, propertyChangedHandler: function (b, c, f, e) { if (b.isInitialized == undefined || b.isInitialized == false) { return } if (c == "filterable") { b.listBoxContainer.jqxListBox({ filterable: e }) } if (c == "filterHeight") { b.listBoxContainer.jqxListBox({ filterHeight: e }) } if (c == "filterPlaceHolder") { b.listBoxContainer.jqxListBox({ filterPlaceHolder: e }) } if (c == "filterDelay") { b.listBoxContainer.jqxListBox({ filterDelay: e }) } if (c == "enableSelection") { b.listBoxContainer.jqxListBox({ enableSelection: e }) } if (c == "enableHover") { b.listBoxContainer.jqxListBox({ enableHover: e }) } if (c == "autoOpen") { b._updateHandlers() } if (c == "emptyString") { b.listBox.emptyString = b.emptyString } if (c == "itemHeight") { b.listBoxContainer.jqxListBox({ itemHeight: e }) } if (c == "renderer") { b.listBoxContainer.jqxListBox({ renderer: e }) } if (c == "rtl") { if (e) { b.dropdownlistArrow.css("float", "left"); b.dropdownlistContent.css("float", "right") } else { b.dropdownlistArrow.css("float", "right"); b.dropdownlistContent.css("float", "left") } b.listBoxContainer.jqxListBox({ rtl: b.rtl }) } if (c == "source") { b.listBoxContainer.jqxListBox({ source: b.source }); b.listBox.selectedIndex = -1; b.listBox.selectIndex(this.selectedIndex); b.renderSelection(); if (e == null) { b.clear() } } if (c == "displayMember" || c == "valueMember") { b.listBoxContainer.jqxListBox({ displayMember: b.displayMember, valueMember: b.valueMember }); b.renderSelection() } if (c == "placeHolder") { b.renderSelection() } if (c == "theme" && e != null) { b.listBoxContainer.jqxListBox({ theme: e }); b.listBoxContainer.addClass(b.toThemeProperty("jqx-popup")); a.jqx.utilities.setTheme(f, e, b.host) } if (c == "autoDropDownHeight") { b.listBoxContainer.jqxListBox({ autoHeight: b.autoDropDownHeight }); if (b.autoDropDownHeight) { b.container.height(b.listBoxContainer.height() + 25) } else { b.listBoxContainer.jqxListBox({ height: b.dropDownHeight }); b.container.height(parseInt(b.dropDownHeight) + 25) } b.listBox._arrange(); b.listBox._updatescrollbars() } if (c == "searchMode") { b.listBoxContainer.jqxListBox({ searchMode: b.searchMode }) } if (c == "incrementalSearch") { b.listBoxContainer.jqxListBox({ incrementalSearch: b.incrementalSearch }) } if (c == "incrementalSearchDelay") { b.listBoxContainer.jqxListBox({ incrementalSearchDelay: b.incrementalSearchDelay }) } if (c == "dropDownHeight") { if (!b.autoDropDownHeight) { b.listBoxContainer.jqxListBox({ height: b.dropDownHeight }); b.container.height(parseInt(b.dropDownHeight) + 25) } } if (c == "dropDownWidth" || c == "scrollBarSize") { var d = b.width; if (b.dropDownWidth != "auto") { d = b.dropDownWidth } b.listBoxContainer.jqxListBox({ width: d, scrollBarSize: b.scrollBarSize }); b.container.width(parseInt(d) + 25) } if (c == "width" || c == "height") { if (e != f) { this.refresh(); if (c == "width") { if (b.dropDownWidth == "auto") { var d = b.host.width(); b.listBoxContainer.jqxListBox({ width: d }); b.container.width(parseInt(d) + 25) } } } } if (c == "checkboxes") { b.listBoxContainer.jqxListBox({ checkboxes: b.checkboxes }) } if (c == "selectedIndex") { if (b.listBox != null) { b.listBox.selectIndex(parseInt(e)); b.renderSelection() } } } }) })(jqxBaseFramework);

/*
jqxlistbox
*/

(function (a) { a.jqx.jqxWidget("jqxListBox", "", {}); a.extend(a.jqx._jqxListBox.prototype, { defineInstance: function () { var b = { disabled: false, width: null, height: null, items: new Array(), multiple: false, selectedIndex: -1, selectedIndexes: new Array(), source: null, scrollBarSize: a.jqx.utilities.scrollBarSize, enableHover: true, enableSelection: true, visualItems: new Array(), groups: new Array(), equalItemsWidth: true, itemHeight: -1, visibleItems: new Array(), emptyGroupText: "Group", checkboxes: false, hasThreeStates: false, autoHeight: false, autoItemsHeight: false, roundedcorners: true, touchMode: "auto", displayMember: "", groupMember: "", valueMember: "", searchMember: "", searchMode: "startswithignorecase", incrementalSearch: true, incrementalSearchDelay: 1000, incrementalSearchKeyDownDelay: 300, allowDrag: false, allowDrop: true, dropAction: "default", touchModeStyle: "auto", keyboardNavigation: true, enableMouseWheel: true, multipleextended: false, selectedValues: new Array(), emptyString: "", rtl: false, rendered: null, renderer: null, dragStart: null, dragEnd: null, focusable: true, ready: null, _checkForHiddenParent: true, autoBind: true, _renderOnDemand: false, filterable: false, filterHeight: 27, filterPlaceHolder: "Looking for", filterDelay: 100, aria: { "aria-disabled": { name: "disabled", type: "boolean"} }, events: ["select", "unselect", "change", "checkChange", "dragStart", "dragEnd", "bindingComplete"] }; a.extend(true, this, b); return b }, createInstance: function (c) { var b = this; if (a.jqx.utilities.scrollBarSize != 15) { b.scrollBarSize = a.jqx.utilities.scrollBarSize } if (b.width == null) { b.width = 200 } if (b.height == null) { b.height = 200 } b.render(); var d = b; a.jqx.utilities.resize(b.host, function () { d._updateSize() }, false, b._checkForHiddenParent) }, resize: function (c, b) { this.width = c; this.height = b; this._updateSize() }, render: function () { var m = this; var l = m.element.nodeName.toLowerCase(); if (l == "select" || l == "ul" || l == "ol") { m.field = m.element; if (m.field.className) { m._className = m.field.className } var i = { title: m.field.title }; if (m.field.id.length) { i.id = m.field.id.replace(/[^\w]/g, "_") + "_jqxListBox" } else { i.id = a.jqx.utilities.createId() + "_jqxListBox" } var b = a("<div></div>", i); if (!m.width) { m.width = a(m.field).width() } if (!m.height) { m.height = a(m.field).outerHeight() } a(m.field).hide().after(b); var f = m.host.data(); m.host = b; m.host.data(f); m.element = b[0]; m.element.id = m.field.id; m.field.id = i.id; if (m._className) { m.host.addClass(m._className); a(m.field).removeClass(m._className) } if (m.field.tabIndex) { var c = m.field.tabIndex; m.field.tabIndex = -1; m.element.tabIndex = c } } m.element.innerHTML = ""; var m = m; var h = m.element.className; h += " " + m.toThemeProperty("jqx-listbox"); h += " " + m.toThemeProperty("jqx-reset"); h += " " + m.toThemeProperty("jqx-rc-all"); h += " " + m.toThemeProperty("jqx-widget"); h += " " + m.toThemeProperty("jqx-widget-content"); m.element.className = h; var g = false; if (m.width != null && m.width.toString().indexOf("%") != -1) { m.host.width(m.width); g = true } if (m.height != null && m.height.toString().indexOf("%") != -1) { m.host.height(m.height); if (m.host.height() == 0) { m.host.height(200) } g = true } if (m.width != null && m.width.toString().indexOf("px") != -1) { m.host.width(m.width) } else { if (m.width != undefined && !isNaN(m.width)) { m.element.style.width = parseInt(m.width) + "px" } } if (m.height != null && m.height.toString().indexOf("px") != -1) { m.host.height(m.height) } else { if (m.height != undefined && !isNaN(m.height)) { m.element.style.height = parseInt(m.height) + "px" } } if (m.multiple || m.multipleextended || m.checkboxes) { a.jqx.aria(m, "aria-multiselectable", true) } else { a.jqx.aria(m, "aria-multiselectable", false) } var e = "<div style='-webkit-appearance: none; background: transparent; outline: none; width:100%; height: 100%; align:left; border: 0px; padding: 0px; margin: 0px; left: 0px; top: 0px; valign:top; position: relative;'><div style='-webkit-appearance: none; border: none; background: transparent; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; align:left; left: 0px; top: 0px; valign:top; position: relative;'><div id='filter" + m.element.id + "' style='display: none; visibility: inherit; align:left; valign:top; left: 0px; top: 0px; position: absolute;'><input style='position: absolute;'/></div><div id='listBoxContent' style='-webkit-appearance: none; border: none; background: transparent; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='verticalScrollBar" + m.element.id + "' style='visibility: inherit; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='horizontalScrollBar" + m.element.id + "' style='visibility: inherit; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='bottomRight' style='align:left; valign:top; left: 0px; top: 0px; border: none; position: absolute;'/></div></div>"; m.host.attr("role", "listbox"); m.element.innerHTML = e; if (m._checkForHiddenParent) { m._addInput(); if (!m.host.attr("tabIndex")) { m.host.attr("tabIndex", 1) } } m.filter = a(m.element.firstChild.firstChild.firstChild); m.filterInput = a(m.filter[0].firstChild); m.filterInput.attr("placeholder", m.filterPlaceHolder); m.filterInput.addClass(m.toThemeProperty("jqx-widget jqx-listbox-filter-input jqx-input jqx-rc-all")); m.addHandler(m.filterInput, "keyup.textchange", function (o) { if (o.keyCode == 13) { m._search(o) } else { if (m.filterDelay > 0) { if (m._filterTimer) { clearTimeout(m._filterTimer) } m._filterTimer = setTimeout(function () { m._search(o) }, m.filterDelay) } } o.stopPropagation() }); var j = a(m.element.firstChild.firstChild.firstChild.nextSibling.nextSibling); if (!m.host.jqxButton) { throw new Error("jqxListBox: Missing reference to jqxbuttons.js."); return } if (!j.jqxScrollBar) { throw new Error("jqxListBox: Missing reference to jqxscrollbar.js."); return } var d = parseInt(m.host.height()) / 2; if (d == 0) { d = 10 } m.vScrollBar = j.jqxScrollBar({ _initialLayout: true, vertical: true, rtl: m.rtl, theme: m.theme, touchMode: m.touchMode, largestep: d }); var n = a(m.element.firstChild.firstChild.firstChild.nextSibling.nextSibling.nextSibling); m.hScrollBar = n.jqxScrollBar({ _initialLayout: true, vertical: false, rtl: m.rtl, touchMode: m.touchMode, theme: m.theme }); m.content = a(m.element.firstChild.firstChild.firstChild.nextSibling); m.content[0].id = "listBoxContent" + m.element.id; m.bottomRight = a(m.element.firstChild.firstChild.firstChild.nextSibling.nextSibling.nextSibling.nextSibling).addClass(m.toThemeProperty("jqx-listbox-bottomright")).addClass(m.toThemeProperty("jqx-scrollbar-state-normal")); m.bottomRight[0].id = "bottomRight" + m.element.id; m.vScrollInstance = a.data(m.vScrollBar[0], "jqxScrollBar").instance; m.hScrollInstance = a.data(m.hScrollBar[0], "jqxScrollBar").instance; if (m.isTouchDevice()) { if (!(a.jqx.browser.msie && a.jqx.browser.version < 9)) { var k = a("<div class='overlay' unselectable='on' style='z-index: 99; -webkit-appearance: none; border: none; background: black; opacity: 0.01; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>"); m.content.parent().append(k); m.overlayContent = m.host.find(".overlay"); if (m.filterable) { m.overlayContent.css("top", "30px") } } } m._updateTouchScrolling(); m.host.addClass("jqx-disableselect"); if (m.host.jqxDragDrop) { jqxListBoxDragDrop() } }, _highlight: function (b, c) { var d = c.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"); return b.replace(new RegExp("(" + d + ")", "ig"), function (e, f) { return "<b>" + f + "</b>" }) }, _addInput: function () { var b = this.host.attr("name"); if (b) { this.host.attr("name", "") } this.input = a("<input type='hidden'/>"); this.host.append(this.input); this.input.attr("name", b) }, _updateTouchScrolling: function () { var b = this; if (this.isTouchDevice()) { b.enableHover = false; var c = this.overlayContent ? this.overlayContent : this.content; this.removeHandler(a(c), a.jqx.mobile.getTouchEventName("touchstart") + ".touchScroll"); this.removeHandler(a(c), a.jqx.mobile.getTouchEventName("touchmove") + ".touchScroll"); this.removeHandler(a(c), a.jqx.mobile.getTouchEventName("touchend") + ".touchScroll"); this.removeHandler(a(c), "touchcancel.touchScroll"); a.jqx.mobile.touchScroll(c, b.vScrollInstance.max, function (f, e) { if (b.vScrollBar.css("visibility") != "hidden") { var d = b.vScrollInstance.value; b.vScrollInstance.setPosition(d + e); b._lastScroll = new Date() } if (b.hScrollBar.css("visibility") != "hidden") { var d = b.hScrollInstance.value; b.hScrollInstance.setPosition(d + f); b._lastScroll = new Date() } }, this.element.id, this.hScrollBar, this.vScrollBar); if (b.vScrollBar.css("visibility") != "visible" && b.hScrollBar.css("visibility") != "visible") { a.jqx.mobile.setTouchScroll(false, this.element.id) } else { a.jqx.mobile.setTouchScroll(true, this.element.id) } this._arrange() } }, isTouchDevice: function () { var b = a.jqx.mobile.isTouchDevice(); if (this.touchMode == true) { if (this.touchDevice) { return true } if (a.jqx.browser.msie && a.jqx.browser.version < 9) { return false } this.touchDevice = true; b = true; a.jqx.mobile.setMobileSimulator(this.element) } else { if (this.touchMode == false) { b = false } } if (b && this.touchModeStyle != false) { this.scrollBarSize = a.jqx.utilities.touchScrollBarSize } if (b) { this.host.addClass(this.toThemeProperty("jqx-touch")) } return b }, beginUpdate: function () { this.updatingListBox = true }, endUpdate: function () { this.updatingListBox = false; this._addItems(); this._renderItems() }, beginUpdateLayout: function () { this.updating = true }, resumeUpdateLayout: function () { this.updating = false; this.vScrollInstance.value = 0; this._render(false) }, propertiesChangedHandler: function (b, c, d) { b._cachedItemHtml = new Array(); b.clearSelection(); b.refresh() }, propertyChangedHandler: function (b, c, e, d) { if (this.isInitialized == undefined || this.isInitialized == false) { return } if (b.batchUpdate && c != "touchMode" && c != "rtl") { return } if (c == "_renderOnDemand") { b._render(false, true); if (b.selectedIndex != -1) { var f = b.selectedIndex; b.selectedIndex = -1; b._stopEvents = true; b.selectIndex(f, false, true); if (b.selectedIndex == -1) { b.selectedIndex = f } b._stopEvents = false } } if (c == "filterable") { b.refresh() } if (c == "filterHeight") { b._arrange() } if (c == "filterPlaceHolder") { b.filterInput.attr("placeholder", d) } if (c == "renderer") { b._cachedItemHtml = new Array(); b.refresh() } if (c == "itemHeight") { b.refresh() } if (c == "source" || c == "checkboxes") { if (d == null && e && e.unbindBindingUpdate) { e.unbindBindingUpdate(b.element.id); e.unbindDownloadComplete(b.element.id) } b.clearSelection(); b.refresh() } if (c == "scrollBarSize" || c == "equalItemsWidth") { if (d != e) { b._updatescrollbars() } } if (c == "disabled") { b._renderItems(); b.vScrollBar.jqxScrollBar({ disabled: d }); b.hScrollBar.jqxScrollBar({ disabled: d }) } if (c == "touchMode" || c == "rtl") { b._removeHandlers(); b.vScrollBar.jqxScrollBar({ touchMode: d }); b.hScrollBar.jqxScrollBar({ touchMode: d }); if (c == "touchMode") { if (!(a.jqx.browser.msie && a.jqx.browser.version < 9)) { var h = a("<div class='overlay' unselectable='on' style='z-index: 99; -webkit-appearance: none; border: none; background: black; opacity: 0.01; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>"); b.content.parent().append(h); b.overlayContent = b.host.find(".overlay") } } if (b.filterable && b.filterInput) { if (c == "rtl" && d) { b.filterInput.addClass(b.toThemeProperty("jqx-rtl")) } else { if (c == "rtl" && !d) { b.filterInput.removeClass(b.toThemeProperty("jqx-rtl")) } } b._arrange() } b._updateTouchScrolling(); b._addHandlers(); b._render(false) } if (!this.updating) { if (c == "width" || c == "height") { b._updateSize() } } if (c == "theme") { if (e != d) { b.hScrollBar.jqxScrollBar({ theme: b.theme }); b.vScrollBar.jqxScrollBar({ theme: b.theme }); b.host.removeClass(); b.host.addClass(b.toThemeProperty("jqx-listbox")); b.host.addClass(b.toThemeProperty("jqx-widget")); b.host.addClass(b.toThemeProperty("jqx-widget-content")); b.host.addClass(b.toThemeProperty("jqx-reset")); b.host.addClass(b.toThemeProperty("jqx-rc-all")); b.refresh() } } if (c == "selectedIndex") { b.clearSelection(); b.selectIndex(d, true) } if (c == "displayMember" || c == "valueMember") { if (e != d) { var g = b.selectedIndex; b.refresh(); b.selectedIndex = g; b.selectedIndexes[g] = g } b._renderItems() } if (c == "autoHeight") { if (e != d) { b._render(false) } else { b._updatescrollbars(); b._renderItems() } } if (b._checkForHiddenParent && a.jqx.isHidden(b.host)) { a.jqx.utilities.resize(this.host, function () { b._updateSize() }, false, b._checkForHiddenParent) } }, loadFromSelect: function (g) { if (g == null) { return } var c = "#" + g; var d = a(c); if (d.length > 0) { var b = a.jqx.parseSourceTag(d[0]); var f = b.items; var e = b.index; this.source = f; this.fromSelect = true; this.clearSelection(); this.selectedIndex = e; this.selectedIndexes[this.selectedIndex] = this.selectedIndex; this.refresh() } }, invalidate: function () { this._cachedItemHtml = []; this._renderItems(); this.virtualSize = null; this._updateSize() }, refresh: function (c) { var b = this; if (this.vScrollBar == undefined) { return } this._cachedItemHtml = []; this.visibleItems = new Array(); var d = function (e) { if (e == true) { if (b.selectedIndex != -1) { var f = b.selectedIndex; b.selectedIndex = -1; b._stopEvents = true; b.selectIndex(f, false, true); if (b.selectedIndex == -1) { b.selectedIndex = f } b._stopEvents = false } } }; if (this.itemswrapper != null) { this.itemswrapper.remove(); this.itemswrapper = null } if (a.jqx.dataAdapter && this.source != null && this.source._source) { this.databind(this.source, c); d(c); return } if (this.autoBind || (!this.autoBind && !c)) { if (this.field) { this.loadSelectTag() } this.items = this.loadItems(this.source) } this._render(false, c == true); d(c); this._raiseEvent("6") }, loadSelectTag: function () { var b = a.jqx.parseSourceTag(this.field); this.source = b.items; if (this.selectedIndex == -1) { this.selectedIndex = b.index } }, _render: function (c, b) { if (this._renderOnDemand) { this.visibleItems = new Array(); this.renderedVisibleItems = new Array(); this._renderItems(); return } this._addItems(); this._renderItems(); this.vScrollInstance.setPosition(0); this._cachedItemHtml = new Array(); if (c == undefined || c) { if (this.items != undefined && this.items != null) { if (this.selectedIndex >= 0 && this.selectedIndex < this.items.length) { this.selectIndex(this.selectedIndex, true, true, true) } } } if (this.allowDrag && this._enableDragDrop) { this._enableDragDrop(); if (this.isTouchDevice()) { this._removeHandlers(); if (this.overlayContent) { this.overlayContent.remove(); this.overlayContent = null } this._updateTouchScrolling(); this._addHandlers(); return } } this._updateTouchScrolling(); if (this.rendered) { this.rendered() } if (this.ready) { this.ready() } }, _hitTest: function (c, f) { if (this.filterable) { f -= this.filterHeight; if (f < 0) { f = 0 } } var e = parseInt(this.vScrollInstance.value); var b = this._searchFirstVisibleIndex(f + e, this.renderedVisibleItems); if (this.renderedVisibleItems[b] != undefined && this.renderedVisibleItems[b].isGroup) { return null } if (this.renderedVisibleItems.length > 0) { var d = this.renderedVisibleItems[this.renderedVisibleItems.length - 1]; if (d.height + d.top < f + e) { return null } } b = this._searchFirstVisibleIndex(f + e); return this.visibleItems[b]; return null }, _searchFirstVisibleIndex: function (e, f) { if (e == undefined) { e = parseInt(this.vScrollInstance.value) } var c = 0; if (f == undefined || f == null) { f = this.visibleItems } var b = f.length; while (c <= b) { mid = parseInt((c + b) / 2); var d = f[mid]; if (d == undefined) { break } if (d.initialTop > e && d.initialTop + d.height > e) { b = mid - 1 } else { if (d.initialTop < e && d.initialTop + d.height <= e) { c = mid + 1 } else { return mid; break } } } return 0 }, _renderItems: function () { if (this.items == undefined || this.items.length == 0) { this.visibleItems = new Array(); return } if (this.updatingListBox == true) { return } var N = this.isTouchDevice(); var G = this.vScrollInstance; var h = this.hScrollInstance; var g = parseInt(G.value); var f = parseInt(h.value); if (this.rtl) { if (this.hScrollBar[0].style.visibility != "hidden") { f = h.max - f } } var B = this.items.length; var M = this.host.width(); var K = parseInt(this.content[0].style.width); var b = K + parseInt(h.max); var q = parseInt(this.vScrollBar[0].style.width) + 2; if (this.vScrollBar[0].style.visibility == "hidden") { q = 0 } if (this.hScrollBar[0].style.visibility != "visible") { b = K } var l = this._getVirtualItemsCount(); var L = new Array(); var F = 0; var E = parseInt(this.element.style.height) + 2; if (this.element.style.height.indexOf("%") != -1) { E = this.host.outerHeight() } if (isNaN(E)) { E = 0 } var t = 0; var s = 0; var Q = 0; if (G.value == 0 || this.visibleItems.length == 0) { for (var r = 0; r < this.items.length; r++) { var x = this.items[r]; if (x.visible) { x.top = -g; x.initialTop = -g; if (!x.isGroup && x.visible) { this.visibleItems[s++] = x; x.visibleIndex = s - 1 } this.renderedVisibleItems[Q++] = x; x.left = -f; var c = x.top + x.height; if (c >= 0 && x.top - x.height <= E) { L[F++] = { index: r, item: x} } g -= x.height } } } var m = g > 0 ? this._searchFirstVisibleIndex(this.vScrollInstance.value, this.renderedVisibleItems) : 0; var O = 0; F = 0; var z = this.vScrollInstance.value; var J = 0; while (O < 100 + E) { var x = this.renderedVisibleItems[m]; if (x == undefined) { break } if (x.visible) { x.left = -f; var c = x.top + x.height - z; if (c >= 0 && x.initialTop - z - x.height <= 2 * E) { L[F++] = { index: m, item: x} } } m++; if (x.visible) { O += x.initialTop - z + x.height - O } J++; if (J > this.items.length - 1) { break } } if (this._renderOnDemand) { return } var o = this.toThemeProperty("jqx-listitem-state-normal") + " " + this.toThemeProperty("jqx-item"); var i = this.toThemeProperty("jqx-listitem-state-group"); var P = this.toThemeProperty("jqx-listitem-state-disabled") + " " + this.toThemeProperty("jqx-fill-state-disabled"); var C = 0; var n = this; for (var r = 0; r < this.visualItems.length; r++) { var D = this.visualItems[r]; var I = function () { var y = D[0].firstChild; if (n.checkboxes) { y = D[0].lastChild } if (y != null) { y.style.visibility = "hidden"; y.className = "" } if (n.checkboxes) { var R = D.find(".chkbox"); R.css({ visibility: "hidden" }) } }; if (r < L.length) { var x = L[r].item; if (x.initialTop - z >= E) { I(); continue } var A = a(D[0].firstChild); if (this.checkboxes) { A = a(D[0].lastChild) } if (A.length == 0) { continue } if (A[0] == null) { continue } A[0].className = ""; A[0].style.display = "block"; A[0].style.visibility = "inherit"; var p = ""; if (!x.isGroup && !this.selectedIndexes[x.index] >= 0) { p = o } else { p = i } if (x.disabled || this.disabled) { p += " " + P } if (this.roundedcorners) { p += " " + this.toThemeProperty("jqx-rc-all") } if (N) { p += " " + this.toThemeProperty("jqx-listitem-state-normal-touch") } A[0].className = p; if (this.renderer) { if (!x.key) { x.key = this.generatekey() } if (!this._cachedItemHtml) { this._cachedItemHtml = new Array() } if (this._cachedItemHtml[x.key]) { if (A[0].innerHTML != this._cachedItemHtml[x.key]) { A[0].innerHTML = this._cachedItemHtml[x.key] } } else { var w = this.renderer(x.index, x.label, x.value); A[0].innerHTML = w; this._cachedItemHtml[x.key] = A[0].innerHTML } } else { if (this.itemHeight !== -1) { var k = 2 + 2 * parseInt(A.css("padding-top")); A[0].style.lineHeight = (x.height - k) + "px"; A.css("vertical-align", "middle") } if (x.html != null && x.html.toString().length > 0) { A[0].innerHTML = x.html } else { if (x.label != null || x.value != null) { if (x.label != null) { if (A[0].innerHTML !== x.label) { A[0].innerHTML = x.label } if (a.trim(x.label) == "") { A[0].innerHTML = this.emptyString; if (this.emptyString == "") { A[0].style.height = (x.height - 8) + "px" } } if (!this.incrementalSearch && !x.disabled) { if (this.searchString != undefined && this.searchString != "") { A[0].innerHTML = this._highlight(x.label.toString(), this.searchString) } } } else { if (x.label === null) { A[0].innerHTML = this.emptyString; if (this.emptyString == "") { A[0].style.height = (x.height - 8) + "px" } } else { if (A[0].innerHTML !== x.value) { A[0].innerHTML = x.value } else { if (x.label == "") { A[0].innerHTML = " " } } } } } else { if (x.label == "" || x.label == null) { A[0].innerHTML = ""; A[0].style.height = (x.height - 8) + "px" } } } } D[0].style.left = x.left + "px"; D[0].style.top = x.initialTop - z + "px"; x.element = A[0]; if (x.title) { A[0].title = x.title } if (this.equalItemsWidth && !x.isGroup) { if (t == 0) { var d = parseInt(b); var v = parseInt(A.outerWidth()) - parseInt(A.width()); d -= v; var H = 1; if (H != null) { H = parseInt(H) } else { H = 0 } d -= 2 * H; t = d; if (this.checkboxes && this.hScrollBar[0].style.visibility == "hidden") { t -= 18 } } if (K > this.virtualSize.width) { A[0].style.width = t + "px"; x.width = t } else { A[0].style.width = -4 + this.virtualSize.width + "px"; x.width = this.virtualSize.width - 4 } } else { if (A.width() < this.host.width()) { A.width(this.host.width() - 2) } } if (this.rtl) { A[0].style.textAlign = "right" } if (this.autoItemsHeight) { A[0].style.whiteSpace = "pre-line"; A.width(t); x.width = t } C = 0; if (this.checkboxes && !x.isGroup) { if (C == 0) { C = (x.height - 16) / 2; C++ } var e = a(D.children()[0]); e[0].item = x; if (!this.rtl) { if (A[0].style.left != "18px") { A[0].style.left = "18px" } } else { if (A[0].style.left != "0px") { A[0].style.left = "0px" } } if (this.rtl) { e.css("left", 8 + x.width + "px") } e[0].style.top = C + "px"; e[0].style.display = "block"; e[0].style.visibility = "inherit"; var u = x.checked; var j = x.checked ? " " + this.toThemeProperty("jqx-checkbox-check-checked") : ""; if (e[0].firstChild && e[0].firstChild.firstChild && e[0].firstChild.firstChild.firstChild) { if (e[0].firstChild.firstChild) { if (u) { e[0].firstChild.firstChild.firstChild.className = j } else { if (u === false) { e[0].firstChild.firstChild.firstChild.className = "" } else { if (u === null) { e[0].firstChild.firstChild.firstChild.className = this.toThemeProperty("jqx-checkbox-check-indeterminate") } } } } } if (a.jqx.ariaEnabled) { if (u) { D[0].setAttribute("aria-selected", true) } else { D[0].removeAttribute("aria-selected") } } } else { if (this.checkboxes) { var e = a(D.children()[0]); e.css({ display: "none", visibility: "inherit" }) } } if (!x.disabled && ((!this.filterable && this.selectedIndexes[x.visibleIndex] >= 0) || (x.selected && this.filterable))) { A.addClass(this.toThemeProperty("jqx-listitem-state-selected")); A.addClass(this.toThemeProperty("jqx-fill-state-pressed")); if (a.jqx.ariaEnabled) { D[0].setAttribute("aria-selected", true); this._activeElement = D[0] } } else { if (!this.checkboxes) { if (a.jqx.ariaEnabled) { D[0].removeAttribute("aria-selected") } } } } else { I() } } }, generatekey: function () { var b = function () { return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1) }; return (b() + b() + "-" + b() + "-" + b() + "-" + b() + "-" + b() + b() + b()) }, _calculateVirtualSize: function (l) { if (this._renderOnDemand) { return } var p = 0; var n = 2; var g = 0; var o = document.createElement("span"); if (this.equalItemsWidth) { a(o).css("float", "left") } o.style.whiteSpace = "pre"; var h = 0; var i = undefined === l ? this.host.outerHeight() : l + 2; document.body.appendChild(o); var e = this.items.length; var j = this.host.width(); if (this.autoItemsHeight) { j -= 10; if (this.vScrollBar.css("visibility") != "hidden") { j -= 20 } } if (this.autoItemsHeight || this.renderer || this.groups.length >= 1 || (e > 0 && this.items[0].html != null && this.items[0].html != "")) { for (var g = 0; g < e; g++) { var s = this.items[g]; if (s.isGroup && (s.label == "" && s.html == "")) { continue } if (!s.visible) { continue } var d = ""; if (!s.isGroup) { d += this.toThemeProperty("jqx-listitem-state-normal jqx-rc-all") } else { d += this.toThemeProperty("jqx-listitem-state-group jqx-rc-all") } d += " " + this.toThemeProperty("jqx-fill-state-normal"); if (this.isTouchDevice()) { d += " " + this.toThemeProperty("jqx-touch") } o.className = d; if (this.autoItemsHeight) { o.style.whiteSpace = "pre-line"; var b = this.checkboxes ? -20 : 0; o.style.width = (b + j) + "px" } if (this.renderer) { var k = this.renderer(s.index, s.label, s.value); o.innerHTML = k } else { if (s.html != null && s.html.toString().length > 0) { o.innerHTML = s.html } else { if (s.label != null || s.value != null) { if (s.label != null) { o.innerHTML = s.label; if (s.label == "") { o.innerHTML = "Empty" } } else { o.innerHTML = s.value } } } } var r = o.offsetHeight; var t = o.offsetWidth; if (this.itemHeight > -1) { r = this.itemHeight } s.height = r; s.width = t; n += r; p = Math.max(p, t); if (n <= i) { h++ } } } else { var n = 0; var m = 0; var c = ""; var u = 0; var f = 0; var q = -1; for (var g = 0; g < e; g++) { var s = this.items[g]; if (s.isGroup && (s.label == "" && s.html == "")) { continue } if (!s.visible) { continue } q++; var d = ""; if (q == 0) { d += this.toThemeProperty("jqx-listitem-state-normal jqx-rc-all"); d += " " + this.toThemeProperty("jqx-fill-state-normal"); d += " " + this.toThemeProperty("jqx-widget"); d += " " + this.toThemeProperty("jqx-listbox"); d += " " + this.toThemeProperty("jqx-widget-content"); if (this.isTouchDevice()) { d += " " + this.toThemeProperty("jqx-touch"); d += " " + this.toThemeProperty("jqx-listitem-state-normal-touch") } o.className = d; if (this.autoItemsHeight) { o.style.whiteSpace = "pre-line"; var b = this.checkboxes ? -20 : 0; o.style.width = (b + j) + "px" } if (s.html == null || (s.label == "" || s.label == null)) { o.innerHTML = "Item" } else { if (s.html != null && s.html.toString().length > 0) { o.innerHTML = s.html } else { if (s.label != null || s.value != null) { if (s.label != null) { if (s.label.toString().match(new RegExp("\\w")) != null || s.label.toString().match(new RegExp("\\d")) != null) { o.innerHTML = s.label } else { o.innerHTML = "Item" } } else { o.innerHTML = s.value } } } } var r = 1 + o.offsetHeight; if (this.itemHeight > -1) { r = this.itemHeight } m = r } if (u != undefined) { f = u } if (s.html != null && s.html.toString().length > 0) { u = Math.max(u, s.html.toString().length); if (f != u) { c = s.html } } else { if (s.label != null) { u = Math.max(u, s.label.length); if (f != u) { c = s.label } } else { if (s.value != null) { u = Math.max(u, s.value.length); if (f != u) { c = s.value } } } } s.height = m; n += m; if (n <= i) { h++ } } o.innerHTML = c; p = o.offsetWidth } n += 2; if (h < 10) { h = 10 } if (this.filterable) { n += this.filterHeight } o.parentNode.removeChild(o); return { width: p, height: n, itemsPerPage: h} }, _getVirtualItemsCount: function () { if (this.virtualItemsCount == 0) { var b = parseInt(this.host.height()) / 5; if (b > this.items.length) { b = this.items.length } return b } else { return this.virtualItemsCount } }, _addItems: function (r) { if (this._renderOnDemand) { return } var v = this; if (v.updatingListBox == true) { return } if (v.items == undefined || v.items.length == 0) { v.virtualSize = { width: 0, height: 0, itemsPerPage: 0 }; v._updatescrollbars(); v.renderedVisibleItems = new Array(); if (v.itemswrapper) { v.itemswrapper.children().remove() } return } var h = v.host.height(); if (r == false) { var b = v._calculateVirtualSize(h); var g = b.itemsPerPage * 2; if (v.autoHeight) { g = v.items.length } v.virtualItemsCount = Math.min(g, v.items.length); var q = b.width; v.virtualSize = b; v._updatescrollbars(); return } var n = this; var l = 0; v.visibleItems = new Array(); v.renderedVisibleItems = new Array(); v._removeHandlers(); if (v.allowDrag && v._enableDragDrop) { v.itemswrapper = null } if (v.itemswrapper == null) { v.content[0].innerHTML = ""; v.itemswrapper = a('<div style="outline: 0 none; overflow:hidden; width:100%; position: relative;"></div>'); v.itemswrapper[0].style.height = (2 * h) + "px"; v.content[0].appendChild(v.itemswrapper[0]) } var b = v._calculateVirtualSize(h); var g = b.itemsPerPage * 2; if (v.autoHeight) { g = v.items.length } v.virtualItemsCount = Math.min(g, v.items.length); var v = this; var q = b.width; v.virtualSize = b; var c = Math.max(v.host.width(), 17 + b.width); v.itemswrapper[0].style.width = c + "px"; var e = 0; var i = ""; var f = a.jqx.browser.msie && a.jqx.browser.version < 9; var s = f ? ' unselectable="on"' : ""; for (var j = e; j < v.virtualItemsCount; j++) { var u = v.items[j]; var p = "listitem" + j + v.element.id; i += "<div" + s + " role='option' id='" + p + "' class='jqx-listitem-element'>"; if (v.checkboxes) { i += '<div style="background-color: transparent; padding: 0; margin: 0; position: absolute; float: left; width: 16px; height: 16px;" class="chkbox">'; var o = '<div class="' + v.toThemeProperty("jqx-checkbox-default") + " " + v.toThemeProperty("jqx-fill-state-normal") + " " + v.toThemeProperty("jqx-rc-all") + '"><div style="cursor: pointer; width: 13px; height: 13px;">'; var w = u.checked ? " " + v.toThemeProperty("jqx-checkbox-check-checked") : ""; o += '<span style="width: 13px; height: 13px;" class="checkBoxCheck' + w + '"></span>'; o += "</div></div>"; i += o; i += "</div>" } i += "<span" + s + " style='white-space: pre; -ms-touch-action: none;'></span></div>" } if (n.WinJS) { v.itemswrapper.html(i) } else { v.itemswrapper[0].innerHTML = i } var d = v.itemswrapper.children(); for (var j = e; j < v.virtualItemsCount; j++) { var u = v.items[j]; var t = a(d[j]); if (v.allowDrag && v._enableDragDrop) { t.addClass("draggable") } if (v.checkboxes) { var k = a(t.children()[0]); t.css("float", "left"); var m = a(t[0].firstChild); m.css("float", "left") } t[0].style.height = u.height + "px"; t[0].style.top = l + "px"; l += u.height; v.visualItems[j] = t } v._addHandlers(); v._updatescrollbars(); if (v.autoItemsHeight) { var b = v._calculateVirtualSize(h); var g = b.itemsPerPage * 2; if (v.autoHeight) { g = v.items.length } v.virtualItemsCount = Math.min(g, v.items.length); var v = this; var q = b.width; v.virtualSize = b; v._updatescrollbars() } if (a.jqx.browser.msie && a.jqx.browser.version < 8) { v.host.attr("hideFocus", true); v.host.find("div").attr("hideFocus", true) } }, _updatescrollbars: function () { var k = this; if (!k.virtualSize) { return } var n = k.virtualSize.height; var j = k.virtualSize.width; var f = k.vScrollInstance; var e = k.hScrollInstance; k._arrange(false); var l = false; var o = k.host.outerWidth(); var m = k.host.outerHeight(); var b = 0; if (j > o) { b = k.hScrollBar.outerHeight() + 2 } if (n + b > m) { var d = f.max; f.max = 2 + parseInt(n) + b - parseInt(m - 2); if (k.vScrollBar[0].style.visibility != "inherit") { k.vScrollBar[0].style.visibility = "inherit"; l = true } if (d != f.max) { f._arrange() } } else { if (k.vScrollBar[0].style.visibility != "hidden") { k.vScrollBar[0].style.visibility = "hidden"; l = true; f.setPosition(0) } } var h = 0; if (k.vScrollBar[0].style.visibility != "hidden") { h = k.scrollBarSize + 6 } var g = k.checkboxes ? 20 : 0; if (k.autoItemsHeight) { k.hScrollBar[0].style.visibility = "hidden" } else { if (j >= o - h - g) { var i = e.max; if (k.vScrollBar[0].style.visibility == "inherit") { e.max = g + h + parseInt(j) - k.host.width() + 4 } else { e.max = g + parseInt(j) - k.host.width() + 6 } if (k.hScrollBar[0].style.visibility != "inherit") { k.hScrollBar[0].style.visibility = "inherit"; l = true } if (i != e.max) { e._arrange() } if (k.vScrollBar[0].style.visibility == "inherit") { f.max = 2 + parseInt(n) + k.hScrollBar.outerHeight() + 2 - parseInt(k.host.height()) } } else { if (k.hScrollBar[0].style.visibility != "hidden") { k.hScrollBar[0].style.visibility = "hidden"; l = true } } } e.setPosition(0); if (l) { k._arrange() } if (k.itemswrapper) { k.itemswrapper[0].style.width = Math.max(0, Math.max(o - 2, 17 + j)) + "px"; k.itemswrapper[0].style.height = Math.max(0, 2 * m) + "px" } var c = k.isTouchDevice(); if (c) { if (k.vScrollBar.css("visibility") != "visible" && k.hScrollBar.css("visibility") != "visible") { a.jqx.mobile.setTouchScroll(false, k.element.id) } else { a.jqx.mobile.setTouchScroll(true, k.element.id) } } }, clear: function () { this.source = null; this.clearSelection(); this.refresh() }, clearSelection: function (b) { for (var c = 0; c < this.selectedIndexes.length; c++) { if (this.selectedIndexes[c] && this.selectedIndexes[c] != -1) { this._raiseEvent("1", { index: c, type: "api", item: this.getVisibleItem(c), originalEvent: null }) } this.selectedIndexes[c] = -1 } this.selectedIndex = -1; this.selectedValue = null; this.selectedValues = new Array(); if (b != false) { this._renderItems() } }, unselectIndex: function (c, d) { if (isNaN(c)) { return } this.selectedIndexes[c] = -1; var g = false; for (var e = 0; e < this.selectedIndexes.length; e++) { var b = this.selectedIndexes[e]; if (b != -1 && b != undefined) { g = true } } if (!g) { this.selectedValue = null; this.selectedIndex = -1; var f = this.getVisibleItem(c); if (f) { if (this.selectedValues[f.value]) { this.selectedValues[f.value] = null } } } if (d == undefined || d == true) { this._renderItems(); this._raiseEvent("1", { index: c, type: "api", item: this.getVisibleItem(c), originalEvent: null }) } this._updateInputSelection(); this._raiseEvent("2", { index: c, type: "api", item: this.getItem(c) }) }, getInfo: function () { var d = this; var c = this.getItems(); var b = this.getVisibleItems(); var e = function () { var h = d.vScrollInstance.value; if (d.filterable) { h -= d.filterHeight } var m = new Array(); for (var g = 0; g < b.length; g++) { var j = b[g]; if (j) { var f = j.initialTop; var l = j.height; var k = true; if (f + l - h < 0 || f - h >= d.host.height()) { k = false } if (k) { m.push(j) } } } return m } (); return { items: c, visibleItems: b, viewItems: e} }, getItem: function (c) { if (c == -1 || isNaN(c) || typeof (c) === "string") { if (c === -1) { return null } return this.getItemByValue(c) } var b = null; var d = a.each(this.items, function () { if (this.index == c) { b = this; return false } }); return b }, getVisibleItem: function (b) { if (b == -1 || isNaN(b) || typeof (b) === "string") { if (b === -1) { return null } return this.getItemByValue(b) } return this.visibleItems[b] }, getVisibleItems: function () { return this.visibleItems }, checkIndex: function (b, c, e) { if (!this.checkboxes) { return } if (isNaN(b)) { return } if (b < 0 || b >= this.visibleItems.length) { return } if (this.visibleItems[b] != null && this.visibleItems[b].disabled) { return } if (this.disabled) { return } var d = this.getItem(b); if (this.groups.length > 0 || this.filterable) { var d = this.getVisibleItem(b) } if (d != null) { var f = a(d.checkBoxElement); d.checked = true; if (c == undefined || c == true) { this._updateCheckedItems() } } if (e == undefined || e == true) { this._raiseEvent(3, { label: d.label, value: d.value, checked: true, item: d }) } }, getCheckedItems: function () { if (!this.checkboxes) { return null } var b = new Array(); if (this.items == undefined) { return } a.each(this.items, function () { if (this.checked) { b[b.length] = this } }); return b }, checkAll: function (b) { if (!this.checkboxes) { return } if (this.disabled) { return } var c = this; a.each(this.items, function () { var d = this; if (b !== false && d.checked !== true) { c._raiseEvent(3, { label: d.label, value: d.value, checked: true, item: d }) } this.checked = true }); this._updateCheckedItems() }, uncheckAll: function (b) { if (!this.checkboxes) { return } if (this.disabled) { return } var c = this; a.each(this.items, function () { var d = this; if (b !== false && d.checked !== false) { this.checked = false; c._raiseEvent(3, { label: d.label, value: d.value, checked: false, item: d }) } this.checked = false }); this._updateCheckedItems() }, uncheckIndex: function (b, c, e) { if (!this.checkboxes) { return } if (isNaN(b)) { return } if (b < 0 || b >= this.visibleItems.length) { return } if (this.visibleItems[b] != null && this.visibleItems[b].disabled) { return } if (this.disabled) { return } var d = this.getItem(b); if (this.groups.length > 0 || this.filterable) { var d = this.getVisibleItem(b) } if (d != null) { var f = a(d.checkBoxElement); d.checked = false; if (c == undefined || c == true) { this._updateCheckedItems() } } if (e == undefined || e == true) { this._raiseEvent(3, { label: d.label, value: d.value, checked: false, item: d }) } }, indeterminateIndex: function (b, c, e) { if (!this.checkboxes) { return } if (isNaN(b)) { return } if (b < 0 || b >= this.visibleItems.length) { return } if (this.visibleItems[b] != null && this.visibleItems[b].disabled) { return } if (this.disabled) { return } var d = this.getItem(b); if (this.groups.length > 0 || this.filterable) { var d = this.getVisibleItem(b) } if (d != null) { var f = a(d.checkBoxElement); d.checked = null; if (c == undefined || c == true) { this._updateCheckedItems() } } if (e == undefined || e == true) { this._raiseEvent(3, { checked: null }) } }, getSelectedIndex: function () { return this.selectedIndex }, getSelectedItems: function () { var b = this.getVisibleItems(); var e = this.selectedIndexes; var d = []; for (var c in e) { if (e[c] != -1) { d[d.length] = b[c] } } return d }, getSelectedItem: function () { var b = this.getSelectedItems(); if (b && b.length > 0) { return b[0] } return null }, _updateCheckedItems: function () { var b = this.selectedIndex; this.clearSelection(false); var c = this.getCheckedItems(); this.selectedIndex = b; this._renderItems(); var d = a.data(this.element, "hoveredItem"); if (d != null) { a(d).addClass(this.toThemeProperty("jqx-listitem-state-hover")); a(d).addClass(this.toThemeProperty("jqx-fill-state-hover")) } this._updateInputSelection() }, getItemByValue: function (d) { if (this.visibleItems == null) { return } if (d && d.value) { d = d.value } if (this.itemsByValue) { return this.itemsByValue[a.trim(d).split(" ").join("?")] } var b = this.visibleItems; for (var c = 0; c < b.length; c++) { if (b[c].value == d) { return b[c]; break } } }, checkItem: function (c) { if (c != null) { var b = this._getItemByParam(c); return this.checkIndex(b.visibleIndex, true) } return false }, uncheckItem: function (c) { if (c != null) { var b = this._getItemByParam(c); return this.uncheckIndex(b.visibleIndex, true) } return false }, indeterminateItem: function (c) { if (c != null) { var b = this._getItemByParam(c); return this.indeterminateIndex(b.visibleIndex, true) } return false }, val: function (c) { if (!this.input) { return } var d = function (f) { for (var e in f) { if (f.hasOwnProperty(e)) { return false } } if (typeof c == "number") { return false } if (typeof c == "date") { return false } if (typeof c == "boolean") { return false } if (typeof c == "string") { return false } return true }; if (d(c) || arguments.length == 0) { return this.input.val() } var b = this.getItemByValue(c); if (b != null) { this.selectItem(b) } if (this.input) { return this.input.val() } }, selectItem: function (c) { if (c != null) { if (c.index == undefined) { var b = this.getItemByValue(c); if (b) { c = b } } return this.selectIndex(c.visibleIndex, true) } return false }, unselectItem: function (c) { if (c != null) { if (c.index == undefined) { var b = this.getItemByValue(c); if (b) { c = b } } return this.unselectIndex(c.visibleIndex, true) } return false }, selectIndex: function (j, r, c, d, m, b) { if (isNaN(j)) { return } var q = this.selectedIndex; if (this.filterable) { this.selectedIndex = -1 } if (j < -1 || j >= this.visibleItems.length) { return } if (this.visibleItems[j] != null && this.visibleItems[j].disabled) { return } if (this.disabled) { return } if (!this.multiple && !this.multipleextended && this.selectedIndex == j && !d && !this.checkboxes) { if (this.visibleItems && this.items && this.visibleItems.length != this.items.length) { h = this.getVisibleItem(j); if (h) { this.selectedValue = h.value; this.selectedValues[h.value] = h.value } } return } if (this.checkboxes) { this._updateCheckedItems(); var p = q; if (this.selectedIndex == j && !this.multiple) { p = -1 } if (m == undefined) { m = "none" } var h = this.getItem(j); var s = this.getItem(p); if (this.visibleItems && this.items && this.visibleItems.length != this.items.length) { h = this.getVisibleItem(j); s = this.getVisibleItem(p) } this._raiseEvent("1", { index: p, type: m, item: s, originalEvent: b }); this.selectedIndex = j; this.selectedIndexes[p] = -1; this.selectedIndexes[j] = j; if (h) { this.selectedValue = h.value; this.selectedValues[h.value] = h.value } this._raiseEvent("0", { index: j, type: m, item: h, originalEvent: b }); this._renderItems(); return } this.focused = true; var o = false; if (this.selectedIndex != j) { o = true } var p = q; if (this.selectedIndex == j && !this.multiple) { p = -1 } if (m == undefined) { m = "none" } var h = this.getItem(j); var s = this.getItem(p); if (this.visibleItems && this.items && this.visibleItems.length != this.items.length) { h = this.getVisibleItem(j); s = this.getVisibleItem(p) } if (d != undefined && d) { this._raiseEvent("1", { index: p, type: m, item: s, originalEvent: b }); this.selectedIndex = j; this.selectedIndexes[p] = -1; this.selectedIndexes[j] = j; if (h) { this.selectedValue = h.value; this.selectedValues[h.value] = h.value } this._raiseEvent("0", { index: j, type: m, item: h, originalEvent: b }) } else { var l = this; var e = function (t, x, v, w, u, i) { l._raiseEvent("1", { index: x, type: v, item: w, originalEvent: i }); l.selectedIndex = t; l.selectedIndexes = []; x = t; l.selectedIndexes[t] = t; l.selectedValues = new Array(); if (u) { l.selectedValues[u.value] = u.value } l._raiseEvent("0", { index: t, type: v, item: u, originalEvent: i }) }; var k = function (t, x, v, w, u, i) { if (l.selectedIndexes[t] == undefined || l.selectedIndexes[t] == -1) { l.selectedIndexes[t] = t; l.selectedIndex = t; if (u) { l.selectedValues[u.value] = u.value; l._raiseEvent("0", { index: t, type: v, item: u, originalEvent: i }) } } else { x = l.selectedIndexes[t]; w = l.getVisibleItem(x); if (w) { l.selectedValues[w.value] = null } l.selectedIndexes[t] = -1; l.selectedIndex = -1; l._raiseEvent("1", { index: x, type: v, item: w, originalEvent: i }) } }; if (this.multipleextended) { if (!this._shiftKey && !this._ctrlKey) { if (m != "keyboard" && m != "mouse") { k(j, p, m, s, h, b); l._clickedIndex = j } else { this.clearSelection(false); l._clickedIndex = j; e(j, p, m, s, h, b) } } else { if (this._ctrlKey) { if (m == "keyboard") { this.clearSelection(false); l._clickedIndex = j } k(j, p, m, s, h, b) } else { if (this._shiftKey) { if (l._clickedIndex == undefined) { l._clickedIndex = p } var f = Math.min(l._clickedIndex, j); var n = Math.max(l._clickedIndex, j); this.clearSelection(false); for (var g = f; g <= n; g++) { l.selectedIndexes[g] = g; l.selectedValues[l.getVisibleItem(g).value] = l.getVisibleItem(g).value; l._raiseEvent("0", { index: g, type: m, item: this.getVisibleItem(g), originalEvent: b }) } if (m != "keyboard") { l.selectedIndex = l._clickedIndex } else { l.selectedIndex = j } } } } } else { if (this.multiple) { k(j, p, m, s, h, b) } else { if (h) { this.selectedValue = h.value } e(j, p, m, s, h, b) } } } if (c == undefined || c == true) { this._renderItems() } if (r != undefined && r != null && r == true) { this.ensureVisible(j) } this._raiseEvent("2", { index: j, item: h, oldItem: s, type: m, originalEvent: b }); this._updateInputSelection(); return o }, _updateInputSelection: function () { this._syncSelection(); var c = new Array(); if (this.input) { if (this.selectedIndex == -1) { this.input.val("") } else { if (this.items) { if (this.items[this.selectedIndex] != undefined) { this.input.val(this.items[this.selectedIndex].value); c.push(this.items[this.selectedIndex].value) } } } if (this.multiple || this.multipleextended || this.checkboxes) { var b = !this.checkboxes ? this.getSelectedItems() : this.getCheckedItems(); var e = ""; if (b) { for (var d = 0; d < b.length; d++) { if (undefined != b[d]) { if (d == b.length - 1) { e += b[d].value } else { e += b[d].value + "," } c.push(b[d].value) } } this.input.val(e) } } } if (this.field && this.input) { if (this.field.nodeName.toLowerCase() == "select") { a.each(this.field, function (f, g) { a(this).removeAttr("selected"); this.selected = c.indexOf(this.value) >= 0; if (this.selected) { a(this).attr("selected", true) } }) } else { a.each(this.items, function (f, g) { a(this.originalItem.originalItem).removeAttr("data-selected"); this.selected = c.indexOf(this.value) >= 0; if (this.selected) { a(this.originalItem.originalItem).attr("data-selected", true) } }) } } }, isIndexInView: function (c) { if (isNaN(c)) { return false } if (!this.items) { return false } if (c < 0 || c >= this.items.length) { return false } var e = this.vScrollInstance.value; var d = 0; if (this.filterable) { d = this.filterHeight } var f = this.visibleItems[c]; if (f == undefined) { return true } var b = f.initialTop; var g = f.height; if (b - e < d || b - e + d + g >= this.host.outerHeight()) { return false } return true }, _itemsInPage: function () { var b = 0; var c = this; if (this.items) { a.each(this.items, function () { if ((this.initialTop + this.height) >= c.content.height()) { return false } b++ }) } return b }, _firstItemIndex: function () { if (this.visibleItems != null) { if (this.visibleItems[0]) { if (this.visibleItems[0].isGroup) { return this._nextItemIndex(0) } else { return 0 } } else { return 0 } } return -1 }, _lastItemIndex: function () { if (this.visibleItems != null) { if (this.visibleItems[this.visibleItems.length - 1]) { if (this.visibleItems[this.visibleItems.length - 1].isGroup) { return this._prevItemIndex(this.visibleItems.length - 1) } else { return this.visibleItems.length - 1 } } else { return this.visibleItems.length - 1 } } return -1 }, _nextItemIndex: function (b) { for (indx = b + 1; indx < this.visibleItems.length; indx++) { if (this.visibleItems[indx]) { if (!this.visibleItems[indx].disabled && !this.visibleItems[indx].isGroup) { return indx } } } return -1 }, _prevItemIndex: function (b) { for (indx = b - 1; indx >= 0; indx--) { if (this.visibleItems[indx]) { if (!this.visibleItems[indx].disabled && !this.visibleItems[indx].isGroup) { return indx } } } return -1 }, clearFilter: function () { this.filterInput.val(""); this._updateItemsVisibility("") }, _search: function (c) { var b = this; var d = b.filterInput.val(); if (c.keyCode == 9) { return } if (b.searchMode == "none" || b.searchMode == null || b.searchMode == "undefined") { return } if (c.keyCode == 16 || c.keyCode == 17 || c.keyCode == 20) { return } if (c.keyCode == 37 || c.keyCode == 39) { return false } if (c.altKey || c.keyCode == 18) { return } if (c.keyCode >= 33 && c.keyCode <= 40) { return } if (c.ctrlKey || c.metaKey || b.ctrlKey) { if (c.keyCode != 88 && c.keyCode != 86) { return } } if (d === b.searchString) { return } b._updateItemsVisibility(d) }, _updateItemsVisibility: function (h) { var e = this.getItems(); if (e == undefined) { return { index: -1, matchItem: new Array()} } var f = this; var d = -1; var i = new Array(); var g = 0; a.each(e, function (k) { var m = ""; if (!this.isGroup) { if (this.searchLabel) { m = this.searchLabel } else { if (this.label) { m = this.label } else { if (this.value) { m = this.value } else { if (this.title) { m = this.title } else { m = "jqxItem" } } } } m = m.toString(); var l = false; switch (f.searchMode) { case "containsignorecase": l = a.jqx.string.containsIgnoreCase(m, h); break; case "contains": l = a.jqx.string.contains(m, h); break; case "equals": l = a.jqx.string.equals(m, h); break; case "equalsignorecase": l = a.jqx.string.equalsIgnoreCase(m, h); break; case "startswith": l = a.jqx.string.startsWith(m, h); break; case "startswithignorecase": l = a.jqx.string.startsWithIgnoreCase(m, h); break; case "endswith": l = a.jqx.string.endsWith(m, h); break; case "endswithignorecase": l = a.jqx.string.endsWithIgnoreCase(m, h); break } if (!l) { this.visible = false } if (l) { i[g++] = this; this.visible = true; d = this.visibleIndex } if (h == "") { this.visible = true; l = false } } }); f.renderedVisibleItems = new Array(); f.visibleItems = new Array(); f.vScrollInstance.setPosition(0, true); f._addItems(false); f._renderItems(); for (var b = 0; b < f.items.length; b++) { f.selectedIndexes[b] = -1 } f.selectedIndex = -1; for (var c in f.selectedValues) { var h = f.selectedValues[c]; var j = f.getItemByValue(h); if (j) { if (j.visible) { f.selectedIndex = j.visibleIndex; f.selectedIndexes[j.visibleIndex] = j.visibleIndex } } } f._syncSelection() }, _getMatches: function (g, d) { if (g == undefined || g.length == 0) { return -1 } if (d == undefined) { d = 0 } var b = this.getItems(); var f = this; var c = -1; var e = 0; a.each(b, function (h) { var k = ""; if (!this.isGroup) { if (this.searchLabel) { k = this.searchLabel.toString() } else { if (this.label) { k = this.label.toString() } else { if (this.value) { k = this.value.toString() } else { if (this.title) { k = this.title.toString() } else { k = "jqxItem" } } } } var j = false; switch (f.searchMode) { case "containsignorecase": j = a.jqx.string.containsIgnoreCase(k, g); break; case "contains": j = a.jqx.string.contains(k, g); break; case "equals": j = a.jqx.string.equals(k, g); break; case "equalsignorecase": j = a.jqx.string.equalsIgnoreCase(k, g); break; case "startswith": j = a.jqx.string.startsWith(k, g); break; case "startswithignorecase": j = a.jqx.string.startsWithIgnoreCase(k, g); break; case "endswith": j = a.jqx.string.endsWith(k, g); break; case "endswithignorecase": j = a.jqx.string.endsWithIgnoreCase(k, g); break } if (j && this.visibleIndex >= d) { c = this.visibleIndex; return false } } }); return c }, findItems: function (e) { var b = this.getItems(); var d = this; var c = 0; var f = new Array(); a.each(b, function (g) { var j = ""; if (!this.isGroup) { if (this.label) { j = this.label } else { if (this.value) { j = this.value } else { if (this.title) { j = this.title } else { j = "jqxItem" } } } var h = false; switch (d.searchMode) { case "containsignorecase": h = a.jqx.string.containsIgnoreCase(j, e); break; case "contains": h = a.jqx.string.contains(j, e); break; case "equals": h = a.jqx.string.equals(j, e); break; case "equalsignorecase": h = a.jqx.string.equalsIgnoreCase(j, e); break; case "startswith": h = a.jqx.string.startsWith(j, e); break; case "startswithignorecase": h = a.jqx.string.startsWithIgnoreCase(j, e); break; case "endswith": h = a.jqx.string.endsWith(j, e); break; case "endswithignorecase": h = a.jqx.string.endsWithIgnoreCase(j, e); break } if (h) { f[c++] = this } } }); return f }, _syncSelection: function () { var d = this; if (d.filterable) { if (d.items) { for (var b = 0; b < d.items.length; b++) { var c = d.items[b]; c.selected = false } } for (var b = 0; b < d.visibleItems.length; b++) { var c = d.visibleItems[b]; if (d.selectedIndexes && d.selectedIndexes[b] == c.visibleIndex) { c.selected = true } } if (d.itemswrapper) { d._renderItems() } } }, _handleKeyDown: function (n) { var s = n.keyCode; var k = this; var g = k.selectedIndex; var d = k.selectedIndex; var l = false; if (!this.keyboardNavigation || !this.enableSelection) { return } if (this.filterInput && n.target == this.filterInput[0]) { return } var j = function () { if (k.multiple || k.checkboxes) { k.clearSelection(false) } }; if (n.altKey) { s = -1 } if (s == 32 && this.checkboxes) { var f = this.getItem(g); if (f != null) { k._updateItemCheck(f, g); n.preventDefault() } k._searchString = ""; k.selectIndex(f.visibleIndex, false, true, true, "keyboard", n); k._renderItems(); return } if (k.incrementalSearch) { var o = -1; if (!k._searchString) { k._searchString = "" } if ((s == 8 || s == 46) && k._searchString.length >= 1) { k._searchString = k._searchString.substr(0, k._searchString.length - 1) } var r = String.fromCharCode(s); var m = (!isNaN(parseInt(r))); var i = false; if ((s >= 65 && s <= 97) || m || s == 8 || s == 32 || s == 46) { if (!n.shiftKey) { r = r.toLocaleLowerCase() } var e = 1 + k.selectedIndex; if (s != 8 && s != 32 && s != 46) { if (k._searchString.length > 0 && k._searchString.substr(0, 1) == r) { e = 1 + k.selectedIndex } else { k._searchString += r } } if (s == 32) { k._searchString += " " } var b = this._getMatches(k._searchString, e); o = b; if (o == k._lastMatchIndex || o == -1) { var b = this._getMatches(k._searchString, 0); o = b } k._lastMatchIndex = o; if (o >= 0) { var h = function () { j(); k.selectIndex(o, false, false, false, "keyboard", n); var t = k.isIndexInView(o); if (!t) { k.ensureVisible(o) } else { k._renderItems() } }; if (k._toSelectTimer) { clearTimeout(k._toSelectTimer) } k._toSelectTimer = setTimeout(function () { h() }, k.incrementalSearchKeyDownDelay) } i = true } if (k._searchTimer != undefined) { clearTimeout(k._searchTimer) } if (s == 27 || s == 13) { k._searchString = "" } k._searchTimer = setTimeout(function () { k._searchString = ""; k._renderItems() }, k.incrementalSearchDelay); if (o >= 0) { return } if (i) { return false } } if (s == 33) { var p = k._itemsInPage(); if (k.selectedIndex - p >= 0) { j(); k.selectIndex(d - p, false, false, false, "keyboard", n) } else { j(); k.selectIndex(k._firstItemIndex(), false, false, false, "keyboard", n) } k._searchString = "" } if (s == 32 && this.checkboxes) { var f = this.getItem(g); if (f != null) { k._updateItemCheck(f, g); n.preventDefault() } k._searchString = "" } if (s == 36) { j(); k.selectIndex(k._firstItemIndex(), false, false, false, "keyboard", n); k._searchString = "" } if (s == 35) { j(); k.selectIndex(k._lastItemIndex(), false, false, false, "keyboard", n); k._searchString = "" } if (s == 34) { var p = k._itemsInPage(); if (k.selectedIndex + p < k.visibleItems.length) { j(); k.selectIndex(d + p, false, false, false, "keyboard", n) } else { j(); k.selectIndex(k._lastItemIndex(), false, false, false, "keyboard", n) } k._searchString = "" } if (s == 38) { k._searchString = ""; if (k.selectedIndex > 0) { var c = k._prevItemIndex(k.selectedIndex); if (c != k.selectedIndex && c != -1) { j(); k.selectIndex(c, false, false, false, "keyboard", n) } else { return true } } else { return false } } else { if (s == 40) { k._searchString = ""; if (k.selectedIndex + 1 < k.visibleItems.length) { var c = k._nextItemIndex(k.selectedIndex); if (c != k.selectedIndex && c != -1) { j(); k.selectIndex(c, false, false, false, "keyboard", n) } else { return true } } else { return false } } } if (s == 35 || s == 36 || s == 38 || s == 40 || s == 34 || s == 33) { var q = k.isIndexInView(k.selectedIndex); if (!q) { k.ensureVisible(k.selectedIndex) } else { k._renderItems() } return false } return true }, _updateItemCheck: function (b, c) { if (this.disabled) { return } if (b.checked == true) { b.checked = (b.hasThreeStates && this.hasThreeStates) ? null : false } else { b.checked = b.checked != null } switch (b.checked) { case true: this.checkIndex(c); break; case false: this.uncheckIndex(c); break; default: this.indeterminateIndex(c); break } }, wheel: function (d, c) { if (c.autoHeight || !c.enableMouseWheel) { d.returnValue = true; return true } if (c.disabled) { return true } var e = 0; if (!d) { d = window.event } if (d.originalEvent && d.originalEvent.wheelDelta) { d.wheelDelta = d.originalEvent.wheelDelta } if (d.wheelDelta) { e = d.wheelDelta / 120 } else { if (d.detail) { e = -d.detail / 3 } } if (e) { var b = c._handleDelta(e); if (b) { if (d.preventDefault) { d.preventDefault() } if (d.originalEvent != null) { d.originalEvent.mouseHandled = true } if (d.stopPropagation != undefined) { d.stopPropagation() } } if (b) { b = false; d.returnValue = b; return b } else { return false } } if (d.preventDefault) { d.preventDefault() } d.returnValue = false }, _handleDelta: function (d) { var c = this.vScrollInstance.value; if (d < 0) { this.scrollDown() } else { this.scrollUp() } var b = this.vScrollInstance.value; if (c != b) { return true } return false }, focus: function () { try { this.focused = true; this.host.focus(); var c = this; setTimeout(function () { c.host.focus() }, 25) } catch (b) { } }, _removeHandlers: function () { var b = this; this.removeHandler(a(document), "keydown.listbox" + this.element.id); this.removeHandler(a(document), "keyup.listbox" + this.element.id); this.removeHandler(this.vScrollBar, "valueChanged"); this.removeHandler(this.hScrollBar, "valueChanged"); if (this._mousewheelfunc) { this.removeHandler(this.host, "mousewheel", this._mousewheelfunc) } else { this.removeHandler(this.host, "mousewheel") } this.removeHandler(this.host, "keydown"); this.removeHandler(this.content, "mouseleave"); this.removeHandler(this.content, "focus"); this.removeHandler(this.content, "blur"); this.removeHandler(this.host, "focus"); this.removeHandler(this.host, "blur"); this.removeHandler(this.content, "mouseenter"); this.removeHandler(this.content, "mouseup"); this.removeHandler(this.content, "mousedown"); this.removeHandler(this.content, "touchend"); if (this._mousemovefunc) { this.removeHandler(this.content, "mousemove", this._mousemovefunc) } else { this.removeHandler(this.content, "mousemove") } this.removeHandler(this.content, "selectstart"); if (this.overlayContent) { this.removeHandler(this.overlayContent, a.jqx.mobile.getTouchEventName("touchend")) } }, _updateSize: function () { if (!this.virtualSize) { this._oldheight = null; this.virtualSize = this._calculateVirtualSize() } var b = this; b._arrange(); if (b.host.height() != b._oldheight || b.host.width() != b._oldwidth) { var c = b.host.width() != b._oldwidth; if (b.autoItemsHeight) { b._render(false) } else { if (b.items) { if (b.items.length > 0 && b.virtualItemsCount * b.items[0].height < b._oldheight - 2) { b._render(false) } else { var d = b.vScrollInstance.value; b._updatescrollbars(); b._renderItems(); if (d < b.vScrollInstance.max) { b.vScrollInstance.setPosition(d) } else { b.vScrollInstance.setPosition(b.vScrollInstance.max) } } } } b._oldwidth = b.host.width(); b._oldheight = b.host.height() } }, _addHandlers: function () { var l = this; this.focused = false; var m = false; var j = 0; var g = null; var j = 0; var b = 0; var h = new Date(); var e = this.isTouchDevice(); this.addHandler(this.vScrollBar, "valueChanged", function (n) { if (a.jqx.browser.msie && a.jqx.browser.version > 9) { setTimeout(function () { l._renderItems() }, 1) } else { l._renderItems() } }); this.addHandler(this.hScrollBar, "valueChanged", function () { l._renderItems() }); if (this._mousewheelfunc) { this.removeHandler(this.host, "mousewheel", this._mousewheelfunc) } this._mousewheelfunc = function (n) { l.wheel(n, l) }; this.addHandler(this.host, "mousewheel", this._mousewheelfunc); this.addHandler(a(document), "keydown.listbox" + this.element.id, function (n) { l._ctrlKey = n.ctrlKey || n.metaKey; l._shiftKey = n.shiftKey }); this.addHandler(a(document), "keyup.listbox" + this.element.id, function (n) { l._ctrlKey = n.ctrlKey || n.metaKey; l._shiftKey = n.shiftKey }); this.addHandler(this.host, "keydown", function (n) { return l._handleKeyDown(n) }); this.addHandler(this.content, "mouseleave", function (n) { l.focused = false; var o = a.data(l.element, "hoveredItem"); if (o != null) { a(o).removeClass(l.toThemeProperty("jqx-listitem-state-hover")); a(o).removeClass(l.toThemeProperty("jqx-fill-state-hover")); a.data(l.element, "hoveredItem", null) } }); this.addHandler(this.content, "focus", function (n) { if (!l.disabled) { l.host.addClass(l.toThemeProperty("jqx-fill-state-focus")); l.focused = true } }); this.addHandler(this.content, "blur", function (n) { l.focused = false; l.host.removeClass(l.toThemeProperty("jqx-fill-state-focus")) }); this.addHandler(this.host, "focus", function (n) { if (!l.disabled) { l.host.addClass(l.toThemeProperty("jqx-fill-state-focus")); l.focused = true } }); this.addHandler(this.host, "blur", function (n) { if (a.jqx.browser.msie && a.jqx.browser.version < 9 && l.focused) { return } l.host.removeClass(l.toThemeProperty("jqx-fill-state-focus")); l.focused = false }); this.addHandler(this.content, "mouseenter", function (n) { l.focused = true }); var c = a.jqx.utilities.hasTransform(this.host); if (this.enableSelection) { var f = l.isTouchDevice() && this.touchMode !== true; var i = !f ? "mousedown" : "touchend"; var k = !f ? "mouseup" : "touchend"; if (this.overlayContent) { this.addHandler(this.overlayContent, a.jqx.mobile.getTouchEventName("touchend"), function (p) { if (!l.enableSelection) { return true } if (f) { l._newScroll = new Date(); if (l._newScroll - l._lastScroll < 500) { return true } } var s = a.jqx.mobile.getTouches(p); var t = s[0]; if (t != undefined) { var n = l.host.offset(); var r = parseInt(t.pageX); var q = parseInt(t.pageY); if (l.touchMode == true) { if (t._pageX != undefined) { r = parseInt(t._pageX); q = parseInt(t._pageY) } } r = r - n.left; q = q - n.top; var o = l._hitTest(r, q); if (o != null && !o.isGroup) { l._newScroll = new Date(); if (l._newScroll - l._lastScroll < 500) { return false } if (l.checkboxes) { l._updateItemCheck(o, o.visibleIndex); return } if (o.html.indexOf("href") != -1) { setTimeout(function () { l.selectIndex(o.visibleIndex, false, true, false, "mouse", p); l.content.trigger("click"); return false }, 100) } else { l.selectIndex(o.visibleIndex, false, true, false, "mouse", p); if (p.preventDefault) { p.preventDefault() } l.content.trigger("click"); return false } } } }) } else { var d = false; this.addHandler(this.content, i, function (n) { if (!l.enableSelection) { return true } d = true; if (f) { l._newScroll = new Date(); if (l._newScroll - l._lastScroll < 500) { return false } } l.focused = true; if (!l.isTouchDevice() && l.focusable) { l.host.focus() } if (n.target.id != ("listBoxContent" + l.element.id) && l.itemswrapper[0] != n.target) { var r = n.target; var z = a(r).offset(); var q = l.host.offset(); if (c) { var o = a.jqx.mobile.getLeftPos(r); var t = a.jqx.mobile.getTopPos(r); z.left = o; z.top = t; o = a.jqx.mobile.getLeftPos(l.element); t = a.jqx.mobile.getTopPos(l.element); q.left = o; q.top = t } var s = parseInt(z.top) - parseInt(q.top); var v = parseInt(z.left) - parseInt(q.left); var w = l._hitTest(v, s); if (w != null && !w.isGroup) { var p = function (y, x) { if (!l._shiftKey) { l._clickedIndex = y.visibleIndex } if (!l.checkboxes) { l.selectIndex(y.visibleIndex, false, true, false, "mouse", x) } else { v = 20 + x.pageX - z.left; if (l.rtl) { var A = l.hScrollBar.css("visibility") != "hidden" ? l.hScrollInstance.max : l.host.width(); if (v <= l.host.width() - 20) { if (!l.allowDrag) { l._updateItemCheck(y, y.visibleIndex); l.selectIndex(y.visibleIndex, false, true, false, "mouse", x) } else { setTimeout(function () { if (!l._dragItem) { if (!d) { l._updateItemCheck(y, y.visibleIndex); l.selectIndex(y.visibleIndex, false, true, false, "mouse", x) } } }, 200) } } } else { if (v + l.hScrollInstance.value >= 20) { if (!l.allowDrag) { l._updateItemCheck(y, y.visibleIndex); l.selectIndex(y.visibleIndex, false, true, false, "mouse", x) } else { setTimeout(function () { if (!l._dragItem) { if (!d) { l._updateItemCheck(y, y.visibleIndex); l.selectIndex(y.visibleIndex, false, true, false, "mouse", x) } } }, 200) } } } } }; if (!w.disabled) { if (w.html.indexOf("href") != -1) { setTimeout(function () { p(w, n) }, 100) } else { p(w, n) } } } if (i == "mousedown") { var u = false; if (n.which) { u = (n.which == 3) } else { if (n.button) { u = (n.button == 2) } } if (u) { return true } return false } } return true }) } this.addHandler(this.content, "mouseup", function (n) { l.vScrollInstance.handlemouseup(l, n); d = false }); if (a.jqx.browser.msie) { this.addHandler(this.content, "selectstart", function (n) { return false }) } } var e = this.isTouchDevice(); if (this.enableHover && !e) { this._mousemovefunc = function (n) { if (e) { return true } if (!l.enableHover) { return true } var p = a.jqx.browser.msie == true && a.jqx.browser.version < 9 ? 0 : 1; if (n.target == null) { return true } if (l.disabled) { return true } l.focused = true; var r = l.vScrollInstance.isScrolling(); if (!r && n.target.id != ("listBoxContent" + l.element.id)) { if (l.itemswrapper[0] != n.target) { var t = n.target; var B = a(t).offset(); var s = l.host.offset(); if (c) { var o = a.jqx.mobile.getLeftPos(t); var v = a.jqx.mobile.getTopPos(t); B.left = o; B.top = v; o = a.jqx.mobile.getLeftPos(l.element); v = a.jqx.mobile.getTopPos(l.element); s.left = o; s.top = v } var u = parseInt(B.top) - parseInt(s.top); var w = parseInt(B.left) - parseInt(s.left); var A = l._hitTest(w, u); if (A != null && !A.isGroup && !A.disabled) { var q = a.data(l.element, "hoveredItem"); if (q != null) { a(q).removeClass(l.toThemeProperty("jqx-listitem-state-hover")); a(q).removeClass(l.toThemeProperty("jqx-fill-state-hover")) } a.data(l.element, "hoveredItem", A.element); var z = a(A.element); z.addClass(l.toThemeProperty("jqx-listitem-state-hover")); z.addClass(l.toThemeProperty("jqx-fill-state-hover")) } } } }; this.addHandler(this.content, "mousemove", this._mousemovefunc) } }, _arrange: function (u) { if (u == undefined) { u = true } var t = this; var p = null; var n = null; var g = t.filterable ? t.filterHeight : 0; var j = function (h) { h = t.host.height(); if (h == 0) { h = 200; t.host.height(h) } return h }; if (t.width != null && t.width.toString().indexOf("px") != -1) { p = t.width } else { if (t.width != undefined && !isNaN(t.width)) { p = t.width } } if (t.height != null && t.height.toString().indexOf("px") != -1) { n = t.height } else { if (t.height != undefined && !isNaN(t.height)) { n = t.height } } if (t.width != null && t.width.toString().indexOf("%") != -1) { t.host.css("width", t.width); p = t.host.width() } if (t.height != null && t.height.toString().indexOf("%") != -1) { t.host.css("height", t.height); n = j(n) } if (p != null) { p = parseInt(p); if (parseInt(t.element.style.width) != parseInt(t.width)) { t.host.width(t.width) } } if (!t.autoHeight) { if (n != null) { n = parseInt(n); if (parseInt(t.element.style.height) != parseInt(t.height)) { t.host.height(t.height); j(n) } } } else { if (t.virtualSize) { if (t.hScrollBar.css("visibility") != "hidden") { t.host.height(t.virtualSize.height + parseInt(t.scrollBarSize) + 3); t.height = t.virtualSize.height + parseInt(t.scrollBarSize) + 3; n = t.height } else { t.host.height(t.virtualSize.height); t.height = t.virtualSize.height; n = t.virtualSize.height } } } var c = t.scrollBarSize; if (isNaN(c)) { c = parseInt(c); if (isNaN(c)) { c = "17px" } else { c = c + "px" } } c = parseInt(c); var m = 4; var e = 2; var f = 1; if (t.vScrollBar) { if (t.vScrollBar[0].style.visibility != "hidden") { f = c + m } else { t.vScrollInstance.setPosition(0) } } else { return } if (t.hScrollBar) { if (t.hScrollBar[0].style.visibility != "hidden") { e = c + m } else { t.hScrollInstance.setPosition(0) } } else { return } if (t.autoItemsHeight) { t.hScrollBar[0].style.visibility = "hidden"; e = 0 } if (n == null) { n = 0 } var q = parseInt(n) - m - c; if (q < 0) { q = 0 } if (parseInt(t.hScrollBar[0].style.height) != c) { if (parseInt(c) < 0) { c = 0 } t.hScrollBar[0].style.height = parseInt(c) + "px" } if (t.hScrollBar[0].style.top != q + "px") { t.hScrollBar[0].style.top = q + "px"; t.hScrollBar[0].style.left = "0px" } var b = p - c - m; if (b < 0) { b = 0 } var l = b + "px"; if (t.hScrollBar[0].style.width != l) { t.hScrollBar[0].style.width = l } if (f <= 1) { if (p >= 2) { t.hScrollBar[0].style.width = parseInt(p - 2) + "px" } } if (c != parseInt(t.vScrollBar[0].style.width)) { t.vScrollBar[0].style.width = parseInt(c) + "px" } if ((parseInt(n) - e) != parseInt(t.vScrollBar[0].style.height)) { var s = parseInt(n) - e; if (s < 0) { s = 0 } t.vScrollBar[0].style.height = s + "px" } if (p == null) { p = 0 } var d = parseInt(p) - parseInt(c) - m + "px"; if (d != t.vScrollBar[0].style.left) { if (parseInt(d) >= 0) { t.vScrollBar[0].style.left = d } t.vScrollBar[0].style.top = "0px" } var k = t.vScrollInstance; k.disabled = t.disabled; if (u) { k._arrange() } var o = t.hScrollInstance; o.disabled = t.disabled; if (u) { o._arrange() } if ((t.vScrollBar[0].style.visibility != "hidden") && (t.hScrollBar[0].style.visibility != "hidden")) { t.bottomRight[0].style.visibility = "inherit"; t.bottomRight[0].style.left = 1 + parseInt(t.vScrollBar[0].style.left) + "px"; t.bottomRight[0].style.top = 1 + parseInt(t.hScrollBar[0].style.top) + "px"; if (t.rtl) { t.bottomRight.css({ left: 0 }) } t.bottomRight[0].style.width = parseInt(c) + 3 + "px"; t.bottomRight[0].style.height = parseInt(c) + 3 + "px" } else { t.bottomRight[0].style.visibility = "hidden" } if (parseInt(t.content[0].style.width) != (parseInt(p) - f)) { var i = parseInt(p) - f; if (i < 0) { i = 0 } t.content[0].style.width = i + "px" } if (t.rtl) { t.vScrollBar.css({ left: 0 + "px", top: "0px" }); t.hScrollBar.css({ left: t.vScrollBar.width() + 2 + "px" }); if (t.vScrollBar[0].style.visibility != "hidden") { t.content.css("margin-left", 4 + t.vScrollBar.width()) } else { t.content.css("margin-left", 0); t.hScrollBar.css({ left: "0px" }) } if (t.filterable && t.filterInput) { t.filterInput.css({ left: t.vScrollBar.width() + 6 + "px" }) } } if (parseInt(t.content[0].style.height) != (parseInt(n) - e)) { var r = parseInt(n) - e; if (r < 0) { r = 0 } t.content[0].style.height = r + "px"; t.content[0].style.top = "0px" } if (g > 0) { t.content[0].style.top = g + "px"; t.content[0].style.height = parseInt(t.content[0].style.height) - g + "px" } if (t.filterable) { t.filterInput[0].style.height = (g - 6) + "px"; t.filterInput[0].style.top = "3px"; if (!t.rtl) { t.filterInput[0].style.left = parseInt(t.content.css("left")) + 3 + "px" } t.filterInput[0].style.width = parseInt(t.content.css("width")) - 7 + "px"; t.filter[0].style.display = "block" } else { t.filter[0].style.display = "none" } if (t.overlayContent) { t.overlayContent.width(parseInt(p) - f); t.overlayContent.height(parseInt(n) - e) } }, ensureVisible: function (h, i) { if (isNaN(h)) { var l = this.getItemByValue(h); if (l) { h = l.index } } var f = this.isIndexInView(h); if (!f) { if (h < 0) { return } if (this.autoHeight) { var g = a.data(this.vScrollBar[0], "jqxScrollBar").instance; g.setPosition(0) } else { for (indx = 0; indx < this.visibleItems.length; indx++) { var l = this.visibleItems[indx]; if (l.visibleIndex == h && !l.isGroup) { var g = a.data(this.vScrollBar[0], "jqxScrollBar").instance; var k = g.value; var b = !this.filterable ? 0 : this.filterHeight + 2; var e = this.hScrollBar.css("visibility") === "hidden"; var d = e ? 0 : this.scrollBarSize + 4; if (l.initialTop < k) { g.setPosition(l.initialTop); if (indx == 0) { g.setPosition(0) } } else { if (l.initialTop + l.height > k + this.host.height() - b) { var c = this.host.height(); if (this.filterable) { g.setPosition(this.filterHeight + 2 + l.initialTop + l.height + 2 - c + d) } else { g.setPosition(l.initialTop + l.height + 2 - c + d); if (indx === this.visibleItems.length - 1) { g.setPosition(g.max) } } if (i) { var k = g.value; var j = l.initialTop; if (this.filterable) { j = this.filterHeight + 2 + l.initialTop } if (k + c < g.max) { g.setPosition(j) } } } } break } } } } else { if (i) { for (indx = 0; indx < this.visibleItems.length; indx++) { var l = this.visibleItems[indx]; if (l.visibleIndex == h && !l.isGroup) { var k = this.vScrollInstance.value; var j = l.initialTop; if (this.filterable) { j = this.filterHeight + 2 + l.initialTop } if (k + this.host.height() < this.vScrollInstance.max) { this.vScrollInstance.setPosition(j) } } } } } this._renderItems() }, scrollTo: function (c, b) { if (this.vScrollBar.css("visibility") != "hidden") { this.vScrollInstance.setPosition(b) } if (this.hScrollBar.css("visibility") != "hidden") { this.hScrollInstance.setPosition(c) } }, scrollDown: function () { if (this.vScrollBar.css("visibility") == "hidden") { return false } var b = this.vScrollInstance; if (b.value + b.largestep <= b.max) { b.setPosition(b.value + b.largestep); return true } else { b.setPosition(b.max); return true } return false }, scrollUp: function () { if (this.vScrollBar.css("visibility") == "hidden") { return false } var b = this.vScrollInstance; if (b.value - b.largestep >= b.min) { b.setPosition(b.value - b.largestep); return true } else { if (b.value != b.min) { b.setPosition(b.min); return true } } return false }, databind: function (b, d) { this.records = new Array(); var f = b._source ? true : false; var c = new a.jqx.dataAdapter(b, { autoBind: false }); if (f) { c = b; b = b._source } var e = function (k) { if (b.type != undefined) { c._options.type = b.type } if (b.formatdata != undefined) { c._options.formatData = b.formatdata } if (b.contenttype != undefined) { c._options.contentType = b.contenttype } if (b.async != undefined) { c._options.async = b.async } }; var h = function (q, r) { var s = function (w) { var D = null; if (typeof w === "string") { var z = w; var A = w; var C = "" } else { if (q.displayMember != undefined && q.displayMember != "") { var A = w[q.valueMember]; var z = w[q.displayMember] } } var C = ""; if (q.groupMember) { C = w[q.groupMember] } else { if (w && w.group != undefined) { C = w.group } } if (q.searchMember) { D = w[q.searchMember] } else { if (w && w.searchLabel != undefined) { D = w.searchLabel } } if (!q.valueMember && !q.displayMember) { if (a.type(w) == "string") { z = A = w.toString() } } if (w && w.label != undefined) { var z = w.label } if (w && w.value != undefined) { var A = w.value } var B = false; if (w && w.checked != undefined) { B = w.checked } var v = ""; if (w && w.html != undefined) { v = w.html } var t = true; if (w && w.visible != undefined) { t = w.visible } var u = false; if (w && w.disabled != undefined) { u = w.disabled } var y = false; if (w && w.hasThreeStates != undefined) { y = w.hasThreeStates } var x = {}; x.label = z; x.value = A; x.searchLabel = D; x.html = v; x.visible = t; x.originalItem = w; x.group = C; x.groupHtml = ""; x.disabled = u; x.checked = B; x.hasThreeStates = y; return x }; if (r != undefined) { var k = c._changedrecords[0]; if (k) { a.each(c._changedrecords, function () { var t = this.index; var u = this.record; if (r != "remove") { var v = s(u) } switch (r) { case "update": q.updateAt(v, t); break; case "add": q.insertAt(v, t); break; case "remove": q.removeAt(t); break } }); return } } q.records = c.records; var m = q.records.length; var p = new Array(); for (var l = 0; l < m; l++) { var n = q.records[l]; var o = s(n); o.index = l; p[l] = o } q.items = q.loadItems(p, true); q._render(); q._raiseEvent("6") }; e(this); var i = this; switch (b.datatype) { case "local": case "array": default: if (b.localdata != null || a.isArray(b)) { c.unbindBindingUpdate(this.element.id); if (this.autoBind || (!this.autoBind && !d)) { c.dataBind() } h(this); c.bindBindingUpdate(this.element.id, function (k) { h(i, k) }) } break; case "json": case "jsonp": case "xml": case "xhtml": case "script": case "text": case "csv": case "tab": if (b.localdata != null) { c.unbindBindingUpdate(this.element.id); if (this.autoBind || (!this.autoBind && !d)) { c.dataBind() } h(this); c.bindBindingUpdate(this.element.id, function () { h(i) }); return } var j = {}; if (c._options.data) { a.extend(c._options.data, j) } else { if (b.data) { a.extend(j, b.data) } c._options.data = j } var g = function () { h(i) }; c.unbindDownloadComplete(i.element.id); c.bindDownloadComplete(i.element.id, g); if (this.autoBind || (!this.autoBind && !d)) { c.dataBind() } } }, loadItems: function (m, o) { if (m == null) { this.groups = new Array(); this.items = new Array(); this.visualItems = new Array(); return } var t = this; var k = 0; var d = 0; var b = 0; this.groups = new Array(); this.items = new Array(); this.visualItems = new Array(); var e = new Array(); this.itemsByValue = new Array(); a.map(m, function (x) { if (x == undefined) { return null } var j = new a.jqx._jqxListBox.item(); var y = x.group; var i = x.groupHtml; var z = x.title; var v = null; if (t.searchMember) { v = x[t.searchMember] } else { if (x && x.searchLabel != undefined) { v = x.searchLabel } } if (z == null || z == undefined) { z = "" } if (y == null || y == undefined) { y = "" } if (t.groupMember) { y = x[t.groupMember] } if (i == null || i == undefined) { i = "" } if (!t.groups[y]) { t.groups[y] = { items: new Array(), index: -1, caption: y, captionHtml: i }; k++; var u = k + "jqxGroup"; t.groups[u] = t.groups[y]; d++; t.groups.length = d } var w = t.groups[y]; w.index++; w.items[w.index] = j; if (typeof x === "string") { j.label = x; j.value = x; if (arguments.length > 1 && arguments[1] && a.type(arguments[1]) == "string") { j.label = x; j.value = arguments[1] } } else { if (x.label == null && x.value == null && x.html == null && x.group == null && x.groupHtml == null) { j.label = x.toString(); j.value = x.toString() } else { j.label = x.label; j.value = x.value; if (j.label === undefined) { j.label = x.value } if (j.value === undefined) { j.value = x.label } } } if (typeof x != "string") { if (x.label === undefined) { if (t.displayMember != "") { if (x[t.displayMember] != undefined) { j.label = x[t.displayMember] } else { j.label = "" } } } if (x.value === undefined) { if (t.valueMember != "") { j.value = x[t.valueMember] } } } j.hasThreeStates = x.hasThreeStates != undefined ? x.hasThreeStates : true; j.originalItem = x; if (o) { j.originalItem = x.originalItem } j.title = z; if (z && j.value === undefined && j.label === undefined) { j.value = j.label = z } j.html = x.html || ""; if (x.html && x.html != "") { if (z && z != "") { } } j.group = y; j.checked = x.checked || false; j.groupHtml = x.groupHtml || ""; j.disabled = x.disabled || false; j.visible = x.visible != undefined ? x.visible : true; j.searchLabel = v; j.index = b; e[b] = j; b++; return j }); var c = new Array(); var p = 0; if (this.fromSelect == undefined || this.fromSelect == false) { for (var h = 0; h < d; h++) { var k = h + 1; var n = k + "jqxGroup"; var r = this.groups[n]; if (r == undefined || r == null) { break } if (h == 0 && r.caption == "" && r.captionHtml == "" && d <= 1) { for (var g = 0; g < r.items.length; g++) { var q = r.items[g].value; if (r.items[g].value == undefined || r.items[g].value == null) { q = g } this.itemsByValue[a.trim(q).split(" ").join("?")] = r.items[g] } return r.items } else { var l = new a.jqx._jqxListBox.item(); l.isGroup = true; l.label = r.caption; if (r.caption == "" && r.captionHtml == "") { r.caption = this.emptyGroupText; l.label = r.caption } l.html = r.captionHtml; c[p] = l; p++ } for (var f = 0; f < r.items.length; f++) { c[p] = r.items[f]; var q = r.items[f].value; if (r.items[f].value == "" || r.items[f].value == null) { q = p } t.itemsByValue[a.trim(q).split(" ").join("?")] = r.items[f]; p++ } } } else { var p = 0; var s = new Array(); a.each(e, function () { if (!s[this.group]) { if (this.group != "") { var i = new a.jqx._jqxListBox.item(); i.isGroup = true; i.label = this.group; c[p] = i; p++; s[this.group] = true } } c[p] = this; var j = this.value; if (this.value == "" || this.value == null) { j = p - 1 } t.itemsByValue[a.trim(j).split(" ").join("?")] = this; p++ }) } return c }, _mapItem: function (c) { var b = new a.jqx._jqxListBox.item(); if (this.displayMember) { if (c.label == undefined) { c.label = c[this.displayMember] } if (c.value == undefined) { c.value = c[this.valueMember] } } if (typeof c === "string") { b.label = c; b.value = c } else { if (typeof c === "number") { b.label = c.toString(); b.value = c.toString() } else { b.label = c.label !== undefined ? c.label : c.value; b.value = c.value !== undefined ? c.value : c.label } } if (b.label == undefined && b.value == undefined && b.html == undefined) { b.label = b.value = c } b.html = c.html || ""; b.group = c.group || ""; b.checked = c.checked || false; b.title = c.title || ""; b.groupHtml = c.groupHtml || ""; b.disabled = c.disabled || false; b.visible = c.visible || true; return b }, addItem: function (b) { return this.insertAt(b, this.items ? this.items.length : 0) }, _getItemByParam: function (c) { if (c != null) { if (c.index == undefined) { var b = this.getItemByValue(c); if (b) { c = b } } } return c }, insertItem: function (d, b) { var c = this._getItemByParam(d); return this.insertAt(c, b) }, updateItem: function (c, d) { var b = this._getItemByParam(d); if (b && b.index != undefined) { return this.updateAt(c, b.index) } return false }, updateAt: function (d, c) { if (d != null) { var b = this._mapItem(d); this.itemsByValue[a.trim(b.value).split(" ").join("?")] = this.items[c]; this.items[c].value = b.value; this.items[c].label = b.label; this.items[c].html = b.html; this.items[c].disabled = b.disabled } this._cachedItemHtml = []; this._renderItems(); if (this.rendered) { this.rendered() } }, insertAt: function (l, f) { if (l == null) { return false } this._cachedItemHtml = []; if (this.items == undefined || this.items.length == 0) { this.source = new Array(); this.refresh(); var g = this._mapItem(l); g.index = 0; this.items[this.items.length] = g; this._addItems(true); this._renderItems(); if (this.rendered) { this.rendered() } if (this.allowDrag && this._enableDragDrop) { this._enableDragDrop() } var k = g.value; if (g.value == "" || g.value == null) { k = f } this.itemsByValue[a.trim(k).split(" ").join("?")] = g; return false } var g = this._mapItem(l); if (f == -1 || f == undefined || f == null || f >= this.items.length) { g.index = this.items.length; this.items[this.items.length] = g } else { var c = new Array(); var j = 0; var e = false; var h = 0; for (var b = 0; b < this.items.length; b++) { if (this.items[b].isGroup == false) { if (h >= f && !e) { c[j++] = g; g.index = f; h++; e = true } } c[j] = this.items[b]; if (!this.items[b].isGroup) { c[j].index = h; h++ } j++ } this.items = c } var k = g.value; if (g.value == "" || g.value == null) { k = f } this.itemsByValue[a.trim(k).split(" ").join("?")] = g; this.visibleItems = new Array(); this.renderedVisibleItems = new Array(); var d = a.data(this.vScrollBar[0], "jqxScrollBar").instance; var i = d.value; d.setPosition(0); if ((this.allowDrag && this._enableDragDrop) || (this.virtualSize && this.virtualSize.height < 10 + this.host.height())) { this._addItems(true) } else { this._addItems(false) } if (this.groups.length > 1) { } this._renderItems(); if (this.allowDrag && this._enableDragDrop) { this._enableDragDrop() } d.setPosition(i); if (this.rendered) { this.rendered() } return true }, removeAt: function (j) { if (j < 0 || j > this.items.length - 1) { return false } if (j == undefined) { return false } var d = this.items[j].height; var n = this.items[j].value; if (n == "" || n == null) { n = j } this.itemsByValue[a.trim(n).split(" ").join("?")] = null; if (this.groups.length > 1) { var h = new Array(); for (var b = 0; b < this.items.length; b++) { if (!this.items[b].isGroup) { h.push({ item: this.items[b], key: b }) } } if (h[j]) { this.items.splice(h[j].key, 1) } else { return false } } else { this.items.splice(j, 1) } var c = new Array(); var m = 0; var f = false; var k = 0; for (var b = 0; b < this.items.length; b++) { c[m] = this.items[b]; if (!this.items[b].isGroup) { c[m].index = k; k++ } m++ } this.items = c; var e = a.data(this.vScrollBar[0], "jqxScrollBar").instance; var e = a.data(this.vScrollBar[0], "jqxScrollBar").instance; var l = e.value; e.setPosition(0); this.visibleItems = new Array(); this.renderedVisibleItems = new Array(); if (this.items.length > 0) { if (this.virtualSize) { this.virtualSize.height -= d; var o = this.virtualSize.itemsPerPage * 2; if (this.autoHeight) { o = this.items.length } this.virtualItemsCount = Math.min(o, this.items.length) } this._updatescrollbars() } else { this._addItems() } this._renderItems(); if (this.allowDrag && this._enableDragDrop) { this._enableDragDrop() } if (this.vScrollBar.css("visibility") != "hidden") { e.setPosition(l) } else { e.setPosition(0) } this.itemsByValue = new Array(); for (var g = 0; g < this.items.length; g++) { var n = this.items[g].value; if (this.items[g].value == "" || this.items[g].value == null) { n = g } this.itemsByValue[a.trim(n).split(" ").join("?")] = this.items[g] } if (this.rendered) { this.rendered() } return true }, removeItem: function (e, f) { var d = this._getItemByParam(e); var b = -1; if (d && d.index != undefined && f !== true) { for (var c = 0; c < this.items.length; c++) { if (this.items[c].label == d.label && this.items[c].value == d.value) { b = c; break } } if (b != -1) { return this.removeAt(b) } } if (b == -1) { return this.removeAt(d.index) } }, getItems: function () { return this.items }, disableItem: function (c) { var b = this._getItemByParam(c); this.disableAt(b.index) }, enableItem: function (c) { var b = this._getItemByParam(c); this.enableAt(b.index) }, disableAt: function (b) { if (!this.items) { return false } if (b < 0 || b > this.items.length - 1) { return false } this.items[b].disabled = true; this._renderItems(); return true }, enableAt: function (b) { if (!this.items) { return false } if (b < 0 || b > this.items.length - 1) { return false } this.items[b].disabled = false; this._renderItems(); return true }, destroy: function () { if (this.source && this.source.unbindBindingUpdate) { this.source.unbindBindingUpdate(this.element.id) } this._removeHandlers(); this.vScrollBar.jqxScrollBar("destroy"); this.hScrollBar.jqxScrollBar("destroy"); this.vScrollBar.remove(); this.hScrollBar.remove(); this.content.remove(); a.jqx.utilities.resize(this.host, null, true); var b = a.data(this.element, "jqxListBox"); delete this.hScrollInstance; delete this.vScrollInstance; delete this.vScrollBar; delete this.hScrollBar; delete this.content; delete this.bottomRight; delete this.itemswrapper; delete this.visualItems; delete this.visibleItems; delete this.items; delete this.groups; delete this.renderedVisibleItems; delete this._mousewheelfunc; delete this._mousemovefunc; delete this._cachedItemHtml; delete this.itemsByValue; delete this._activeElement; delete this.source; delete this.events; if (this.input) { this.input.remove(); delete this.input } if (b) { delete b.instance } this.host.removeData(); this.host.removeClass(); this.host.remove(); this.element = null; delete this.element; this.host = null; delete this.set; delete this.get; delete this.call; delete this.host }, _raiseEvent: function (f, c) { if (this._stopEvents == true) { return true } if (c == undefined) { c = { owner: null} } var d = this.events[f]; args = c; args.owner = this; this._updateInputSelection(); var e = new a.Event(d); e.owner = this; e.args = args; if (this.host != null) { var b = this.host.trigger(e) } return b } }) })(jqxBaseFramework); (function (a) { a.jqx.parseSourceTag = function (m) { var l = new Array(); var o = a(m).find("option"); var b = a(m).find("optgroup"); var k = false; if (o.length === 0) { o = a(m).find("li"); if (o.length > 0) { k = true } } var d = null; var j = 0; var d = -1; var h = this; var c = new Array(); a.each(o, function (p) { var q = b.find(this).length > 0; var s = null; if (this.text != null && (this.label == null || this.label == "")) { this.label = this.text } if (k === true) { this.label = a(this).text(); this.selected = a(this).attr("data-selected"); this.checked = this.selected; this.value = a(this).attr("data-value") || p; this.disabled = a(this).attr("disabled") } var r = { style: this.style.cssText, selected: this.selected, html: this.innerHTML, classes: this.className, disabled: this.disabled, value: this.value, label: this.label, title: this.title, originalItem: this }; var i = a.jqx.browser.msie && a.jqx.browser.version < 8; if (i && !k) { if (r.value == "" && this.text != null && this.text.length > 0) { r.value = this.text } } if (q) { s = b.find(this).parent()[0].label; r.group = s; if (!c[s]) { c[s] = new Array(); c.length++ } c[s].push(r) } if (this.selected) { d = p } r.checked = this.selected; if (r.label !== undefined) { l.push(r) } }); if (c.length > 0) { var n = new Array(); for (var f in c) { if (f === "indexOf") { continue } var g = null; for (var e = 0; e < b.length; e++) { if (f === b[e].label || b[e].text) { g = b[e]; break } } a.each(c[f], function (i, p) { if (this.label !== undefined) { n.push(this) } }) } } if (n && n.length > 0) { return { items: n, index: d} } else { return { items: l, index: d} } }; a.jqx._jqxListBox.item = function () { var b = { group: "", groupHtml: "", selected: false, isGroup: false, highlighted: false, value: null, label: "", html: null, visible: true, disabled: false, element: null, width: null, height: null, initialTop: null, top: null, left: null, title: "", index: -1, checkBoxElement: null, originalItem: null, checked: false, visibleIndex: -1 }; return b } })(jqxBaseFramework);


/*
jqxdatatable
*/

(function (b) { b.jqx.jqxWidget("jqxDataTable", "", {}); b.extend(b.jqx._jqxDataTable.prototype, { defineInstance: function () { var c = { altRows: false, aggregatesHeight: 34, autoShowLoadElement: true, autoRowHeight: true, columnsHeight: 30, columns: [], columnGroups: null, columnsResize: false, columnsReorder: false, dataview: null, disabled: false, editable: false, editSettings: { saveOnPageChange: true, saveOnBlur: true, saveOnSelectionChange: true, cancelOnEsc: true, saveOnEnter: true, editSingleCell: false, editOnDoubleClick: true, editOnF2: true }, enableHover: true, enableBrowserSelection: false, filterHeight: 30, filterable: false, filterMode: "default", groupsRenderer: null, groups: new Array(), headerZIndex: 359, height: null, handleKeyboardNavigation: null, indentWidth: 25, initRowDetails: false, loadingErrorMessage: "The data is still loading and you cannot set a property or call a method. You can do that once the data binding is completed. jqxDataTable raises the 'bindingComplete' event when the binding is completed.", localization: null, pagerHeight: 28, pageSize: 10, pageSizeOptions: ["5", "10", "20"], pageable: false, pagerPosition: "bottom", pagerMode: "default", pageSizeMode: "default", pagerButtonsCount: 5, pagerRenderer: null, ready: null, rendertoolbar: null, rowDetails: false, renderStatusBar: null, rendered: null, rendering: null, rtl: false, sortable: false, showtoolbar: false, showstatusbar: false, statusBarHeight: 34, serverProcessing: false, selectionMode: "multiplerows", scrollBarSize: b.jqx.utilities.scrollBarSize, touchScrollBarSize: b.jqx.utilities.touchScrollBarSize, showAggregates: false, showHeader: true, maxHeight: 999999, maxWidth: 999999, autoBind: true, beginEdit: null, endEdit: null, autokoupdates: true, columnsVirtualization: false, exportSettings: { columnsHeader: true, hiddenColumns: false, serverURL: null, characterSet: null, collapsedRecords: false, recordsInView: true, fileName: "jqxDataTable" }, source: { beforeprocessing: null, beforesend: null, loaderror: null, localdata: null, data: null, datatype: "array", datafields: [], url: "", root: "", record: "", id: "", totalrecords: 0, recordstartindex: 0, recordendindex: 0, loadallrecords: true, sortcolumn: null, sortdirection: null, sort: null, filter: null, sortcomparer: null }, toolbarHeight: 34, tableZIndex: 369, _updating: false, touchmode: "auto", width: null, that: this, incrementalSearch: true, events: ["bindingComplete", "sort", "filter", "pageChanged", "pageSizeChanged", "rowClick", "rowDoubleClick", "cellValueChanged", "rowBeginEdit", "rowEndEdit", "rowSelect", "rowUnselect", "rowCheck", "rowUncheck", "columnResized", "columnReordered", "rowExpand", "rowCollapse", "cellBeginEdit", "cellEndEdit"] }; b.extend(true, this, c); this.that = this; return c }, createInstance: function (e) { var l = this; if (b.jqx.utilities.scrollBarSize != 15) { l.scrollBarSize = b.jqx.utilities.scrollBarSize } if ((l.element.nodeName.toLowerCase() == "table") || b(l.element).children("table").length > 0) { var n = l.host.find("tbody tr"); var d = l.host.find("th"); var w = new Array(); if (d.length === 0) { d = n[0]; n.splice(0, 1) } if (l.localizestrings) { l.localizestrings(); if (l.localization != null) { l.localizestrings(l.localization, false) } } var z = []; for (var u = 0; u < n.length; u++) { var k = n[u]; var h = {}; for (var t = 0; t < d.length; t++) { var g = b.trim(b(d[t]).text()); if (u === 0) { var s = { name: g }; if (l.columns[t] && l.columns[t].cellsFormat) { var v = l.columns[t].cellsFormat.toLowerCase(); if (v.indexOf("p") != -1 || v.indexOf("c") != -1 || v.indexOf("n") != -1 || v.indexOf("f") != -1) { s.type = "number" } if (v.indexOf("d") != -1 || v.indexOf("m") != -1 || v.indexOf("y") != -1 || v.indexOf("h") != -1 || v.indexOf("m") != -1 || v.indexOf("s") != -1 || v.indexOf("t") != -1) { s.type = "date" } } w.push(s) } var c = b(k).find("td:eq(" + t + ")"); var f = w[t].type; if (f) { var p = l.getvaluebytype(b.trim(c.text()), w[t]); h[g] = p } else { h[g] = b.trim(c.text()) } } z[z.length] = h } l.host.wrap("<div></div>"); var m = l.host.parent(); var q = l.host.data(); q.jqxDataTable.host = m; q.jqxDataTable.element = m[0]; l.host.parent()[0].id = l.element.id; try { l.host.parent()[0].style = l.element.style } catch (r) { } l.element = m[0]; l.host = m; l.host.data(q); var o = { dataFields: w, localdata: z, datatype: "array" }; var y = new b.jqx.dataAdapter(o); l.source = y } if (l.source && !l.source.dataBind) { l.source = new b.jqx.dataAdapter(l.source) } var x = l.source._source.datafields; if (x && x.length > 0) { l._camelCase = l.source._source.dataFields !== undefined; l.selectionMode = l.selectionMode.toLowerCase() } if (l.host.attr("tabindex") == null) { l.host.attr("tabindex", "0") } l.host.attr("role", "grid"); l.host.attr("align", "left"); l.host.addClass(l.toTP("jqx-grid")); l.host.addClass(l.toTP("jqx-reset")); l.host.addClass(l.toTP("jqx-rc-all")); l.host.addClass(l.toTP("jqx-widget")); l.host.addClass(l.toTP("jqx-widget-content")); if (l._testmodules()) { return } l.render(true); b.jqx.utilities.resize(l.host, function () { var A = b(window).width(); var i = b(window).height(); var j = l.host.width(); var B = l.host.height(); if (l._lastHostWidth != j || l._lastHostHeight != B) { l._updatesize(l._lastHostWidth != j, l._lastHostHeight != B) } l._lastWidth = A; l._lastHeight = i; l._lastHostWidth = j; l._lastHostHeight = B }) }, getvaluebytype: function (h, d) { var f = h; if (h == null) { return h } if (this.gridlocalization.decimalseparator == ",") { if (h.indexOf(this.gridlocalization.decimalseparator) >= 0) { h = h.replace(this.gridlocalization.decimalseparator, ".") } } if (h.indexOf(this.gridlocalization.currencysymbol) >= 0) { h = h.replace(this.gridlocalization.currencysymbol, "") } if (h.indexOf(this.gridlocalization.percentagesymbol) >= 0) { h = h.replace(this.gridlocalization.percentagesymbol, "") } if (b.isArray(h) && d.type != "array") { for (var e = 0; e < h.length; e++) { h[e] = this.getvaluebytype(h[e], d) } return h } if (d.type == "date") { if (h == "NaN") { h = "" } else { var g = new Date(h); if (typeof h == "string") { if (d.format) { var c = b.jqx.dataFormat.parsedate(h, d.format); if (c != null) { g = c } } } if (g.toString() == "NaN" || g.toString() == "Invalid Date") { if (b.jqx.dataFormat) { h = b.jqx.dataFormat.tryparsedate(h) } else { h = g } } else { h = g } if (h == null) { h = f } } } else { if (d.type == "float" || d.type == "number" || d.type == "decimal") { if (h == "NaN") { h = "" } else { var h = parseFloat(h); if (isNaN(h)) { h = f } } } else { if (d.type == "int" || d.type == "integer") { var h = parseInt(h); if (isNaN(h)) { h = f } } else { if (d.type == "bool" || d.type == "boolean") { if (h != null) { if (h.toLowerCase != undefined) { if (h.toLowerCase() == "false") { h = false } else { if (h.toLowerCase() == "true") { h = true } } } } if (h == 1) { h = true } else { if (h == 0 && h !== "") { h = false } else { h = "" } } } } } } return h }, _builddataloadelement: function () { if (this.dataloadelement) { this.dataloadelement.remove() } this.dataloadelement = b('<div class="jqx-datatable-load" style="z-index: 99998; background-color:rgba(50,50,50,0.1); overflow: hidden; position: absolute;"></div>'); var d = b('<div style="z-index: 99999; margin-left: -66px; left: 50%; top: 50%; margin-top: -24px; position: relative; width: 100px; height: 33px; padding: 5px; font-family: verdana; font-size: 12px; color: #767676; border-color: #898989; border-width: 1px; border-style: solid; background: #f6f6f6; border-collapse: collapse;"><div style="float: left;"><div style="float: left; overflow: hidden; width: 32px; height: 32px;" class="jqx-grid-load"/><span style="margin-top: 10px; float: left; display: block; margin-left: 5px;" >' + this.gridlocalization.loadtext + "</span></div></div>"); d.addClass(this.toTP("jqx-rc-all")); this.dataloadelement.addClass(this.toTP("jqx-rc-all")); d.addClass(this.toTP("jqx-fill-state-normal")); this.dataloadelement.append(d); this.dataloadelement.width(this.width); this.dataloadelement.height(this.height); this.host.prepend(this.dataloadelement); if (this.source._source.url != "") { var c = false; if (this.height === "auto" || this.height === null || this.autoheight) { if (this.maxHeight == 999999) { c = true } } if (c) { this.host.height(100); this.dataloadelement.height(100) } else { this.host.height(this.height); this.dataloadelement.height(this.height) } var e = false; if (this.width === "auto" || this.width === null || this.autoWidth) { e = true } if (e) { this.host.width(300); this.dataloadelement.width(300) } else { this.host.width(this.width); this.dataloadelement.width(this.width) } } }, _measureElement: function (d) { var c = b("<span style='visibility: hidden; white-space: nowrap;'>measure Text</span>"); c.addClass(this.toTP("jqx-widget")); b(document.body).append(c); if (d == "cell") { this._cellheight = c.height() } else { this._columnheight = c.height() } c.remove() }, _testmodules: function () { var g = ""; var e = this; var c = function () { if (g.length != "") { g += "," } }; if (!this.host.jqxScrollBar) { c(); g += " jqxscrollbar.js" } if (!this.host.jqxButton) { c(); g += " jqxbuttons.js" } if (!b.jqx.dataAdapter) { c(); g += " jqxdata.js" } if (g != "" || this.editable || this.filterable || this.pageable) { var d = []; var f = function (h) { switch (h) { case "checkbox": if (!e.host.jqxCheckBox && !d.checkbox) { d.checkbox = true; c(); g += " jqxcheckbox.js" } break; case "dropdownlist": if (!e.host.jqxDropDownList && !d.dropdownlist) { c(); d.dropdownlist = true; g += " jqxdropdownlist.js(requires: jqxlistbox.js)" } else { if (!e.host.jqxListBox && !d.listbox) { c(); d.listbox = true; g += " jqxlistbox.js" } } break } }; if ((this.filterable && this.filterMode != "simple") || (this.pagerMode == "advanced" && this.pageable)) { f("dropdownlist") } if (g != "") { throw new Error("jqxDataTable: Missing references to the following module(s): " + g); this.host.remove(); return true } } return false }, focus: function () { try { this.wrapper.focus(); this.host.focus(); var d = this; setTimeout(function () { d.wrapper.focus(); d.host.focus() }, 25); this.focused = true } catch (c) { } }, hiddenParent: function () { return b.jqx.isHidden(this.host) }, isBindingCompleted: function () { return !this._loading }, _updatesize: function (i, h) { if (this._loading) { return } var f = this; var g = f.host.width(); var e = f.host.height(); if (!f._oldWidth) { f._oldWidth = g } if (!f._oldHeight) { f._oldHeight = e } if (f._resizeTimer != undefined) { clearTimeout(f._resizeTimer); f._resizeTimer = null } var d = 300; var c = function () { if (f._resizeTimer) { clearTimeout(f._resizeTimer) } f.resizingGrid = true; if (b.jqx.isHidden(f.host)) { return } f._updatecolumnwidths(); f.refresh(); f._oldWidth = g; f._oldHeight = e; f.resizingGrid = false }; c(); f._resizeTimer = setTimeout(function () { var k = f.host.width(); var j = f.host.height(); if (f._oldWidth != k || f._oldHeight != j) { c() } }, d) }, resize: function (d, c) { if (d != undefined) { this.width = d } if (c != undefined) { this.height = c } this._updatecolumnwidths(); this.refresh() }, isTouchDevice: function () { if (this.touchDevice != undefined) { return this.touchDevice } var c = b.jqx.mobile.isTouchDevice(); this.touchDevice = c; if (this.touchmode == true) { c = true; b.jqx.mobile.setMobileSimulator(this.element); this.touchDevice = c } else { if (this.touchmode == false) { c = false } } if (c) { this.touchDevice = true; this.host.addClass(this.toThemeProperty("jqx-touch")); this.host.find("jqx-widget-content").addClass(this.toThemeProperty("jqx-touch")); this.host.find("jqx-widget-header").addClass(this.toThemeProperty("jqx-touch")); this.scrollBarSize = this.touchScrollBarSize } return c }, toTP: function (c) { return this.toThemeProperty(c) }, localizestrings: function (c, f) { this._cellscache = new Array(); if (b.jqx.dataFormat) { b.jqx.dataFormat.cleardatescache() } if (this._loading) { throw new Error("jqxDataTable: " + this.loadingErrorMessage); return false } if (c != null) { for (var h in c) { if (h.toLowerCase() !== h) { c[h.toLowerCase()] = c[h] } } var j = ["pagergotopagestring", "pagershowrowsstring", "pagerrangestring", "pagernextbuttonstring", "pagerpreviousbuttonstring", "pagerfirstbuttonstring", "pagerlastbuttonstring", "toppagerstring", "firstDay", "days", "months", "AM", "PM", "patterns", "percentsymbol", "currencysymbol", "currencysymbolposition", "decimalseparator", "thousandsseparator", "filterapplystring", "filteraddnew", "filtercancelstring", "filterclearstring", "filterstring", "filterstringcomparisonoperators", "filternumericcomparisonoperators", "filterdatecomparisonoperators", "filterbooleancomparisonoperators", "emptydatastring", "filterselectstring", "todaystring", "clearstring", "validationstring", "loadtext", "filtersearchstring", "loadingErrorMessage"]; var g = this; for (var e = 0; e < j.length; e++) { var d = j[e]; if (c[d] !== undefined) { g.gridlocalization[d] = c[d] } } if (c.loadingErrorMessage) { this.loadingErrorMessage = c.loadingErrorMessage } if (f !== false) { this._builddataloadelement(); b(this.dataloadelement).css("visibility", "hidden"); b(this.dataloadelement).css("display", "none") } } else { this.gridlocalization = { "/": "/", ":": ":", firstDay: 0, days: { names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"] }, months: { names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""] }, AM: ["AM", "am", "AM"], PM: ["PM", "pm", "PM"], eras: [{ name: "A.D.", start: null, offset: 0 }], twoDigitYearMax: 2029, patterns: { d: "M/d/yyyy", D: "dddd, MMMM dd, yyyy", t: "h:mm tt", T: "h:mm:ss tt", f: "dddd, MMMM dd, yyyy h:mm tt", F: "dddd, MMMM dd, yyyy h:mm:ss tt", M: "MMMM dd", Y: "yyyy MMMM", S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss", ISO: "yyyy-MM-dd hh:mm:ss", ISO2: "yyyy-MM-dd HH:mm:ss", d1: "dd.MM.yyyy", d2: "dd-MM-yyyy", d3: "dd-MMMM-yyyy", d4: "dd-MM-yy", d5: "H:mm", d6: "HH:mm", d7: "HH:mm tt", d8: "dd/MMMM/yyyy", d9: "MMMM-dd", d10: "MM-dd", d11: "MM-dd-yyyy" }, percentsymbol: "%", currencysymbol: "$", currencysymbolposition: "before", decimalseparator: ".", thousandsseparator: ",", pagergotopagestring: "Go to page:", pagershowrowsstring: "Show rows:", pagerrangestring: " of ", pagerpreviousbuttonstring: "previous", pagernextbuttonstring: "next", pagerfirstbuttonstring: "first", pagerlastbuttonstring: "last", filterapplystring: "Apply", filtercancelstring: "Cancel", filterclearstring: "Clear Filter", filterstring: "advanced", filtersearchstring: "Search:", filterstringcomparisonoperators: ["empty", "not empty", "contains", "contains(match case)", "does not contain", "does not contain(match case)", "starts with", "starts with(match case)", "ends with", "ends with(match case)", "equal", "equal(match case)", "null", "not null"], filternumericcomparisonoperators: ["equal", "not equal", "less than", "less than or equal", "greater than", "greater than or equal", "null", "not null"], filterdatecomparisonoperators: ["equal", "not equal", "less than", "less than or equal", "greater than", "greater than or equal", "null", "not null"], filterbooleancomparisonoperators: ["equal", "not equal"], validationstring: "Entered value is not valid", emptydatastring: "No data to display", filterselectstring: "Select Filter", loadtext: "Loading...", clearstring: "Clear", todaystring: "Today", loadingErrorMessage: "The data is still loading and you cannot set a property or call a method. You can do that once the data binding is completed. jqxDataTable raises the 'bindingComplete' event when the binding is completed." } } }, _updateScrollbars: function (m) { var p = false; if (this.width === "auto" || this.width === null || this.autowidth) { if (this.maxWidth == 999999) { p = true } } var d = parseInt(this.scrollBarSize); var j = this.table ? this.table.height() : 0; var n = 0; var e = "inherit"; var h = this.vScrollBar[0].style.visibility; var l = this.hScrollBar[0].style.visibility; if (!m) { var g = this.host.height() } else { var g = m } if (!this.columnGroups) { g -= this.showHeader ? this.columnsHeight : 0 } else { g -= this.showHeader ? this.columnsheader.height() : 0 } if (this.filterable) { g -= this.filter.height() } if (this.pageable) { g -= this.pagerHeight; if (this.pagerPosition === "both") { g -= this.pagerHeight } } if (this.showtoolbar) { g -= this.toolbarHeight } if (this.showstatusbar) { g -= this.statusBarHeight } if (this.showAggregates) { g -= this.aggregatesHeight } var q = false; if (this.height === "auto" || this.height === null || this.autoheight) { if (this.maxHeight == 999999) { q = true } } if (!q && j > g && (this.source.records.length > 0 || (this.source.hierarchy && this.source.hierarchy.length > 0))) { this.vScrollBar[0].style.visibility = e; n = 4 + parseInt(d); this.vScrollBar.jqxScrollBar({ max: j - g }) } else { this.vScrollBar[0].style.visibility = "hidden" } if ((h != this.vScrollBar[0].style.visibility)) { this._updatecolumnwidths(); var i = this.table.height(); if (j != i) { j = i; if (!q && j > g && (this.source.records.length > 0 || (this.source.hierarchy && this.source.hierarchy.length > 0))) { this.vScrollBar[0].style.visibility = e; n = 4 + parseInt(d); this.vScrollBar.jqxScrollBar({ max: j - g }) } } } var o = this.table ? this.table.width() : 0; if (o > 3) { o -= 3 } var c = parseInt(this.host.css("border-left-width")) + parseInt(this.host.css("border-right-width")); var r = c + this.host.width() - n; if (o > r && !p) { this.hScrollBar[0].style.visibility = e; this.hScrollBar.jqxScrollBar({ max: o - r }); n = 4 + parseInt(d); if (!q) { if (j > g - n + 4 && (this.source.records.length > 0 || (this.source.hierarchy && this.source.hierarchy.length > 0))) { this.hScrollBar.jqxScrollBar({ max: c + o - r }); var f = this.vScrollBar[0].style.visibility === "hidden"; this.vScrollBar[0].style.visibility = e; this._updatecolumnwidths(); if (f) { this.hScrollBar.jqxScrollBar({ max: o - r + n + c }) } var k = this.table ? this.table.width() : 0; if (k > 3) { k -= 3 } if (k != o) { if (k < r) { this.hScrollBar.jqxScrollBar({ max: c + k - r }); this.hScrollBar[0].style.visibility = "hidden"; n = 0 } } } this.vScrollBar.jqxScrollBar({ max: j - g + n }) } } else { this.hScrollBar[0].style.visibility = "hidden" } if (this.source.records.length === 0 && (this.source.hierarchy && this.source.hierarchy.length === 0)) { this.vScrollBar[0].style.visibility = "hidden"; this.bottomRight[0].style.visibility = "hidden" } if (this.vScrollBar[0].style.visibility == "hidden") { if (this.vScrollInstance.value != 0) { this.vScrollInstance.setPosition(0) } } }, _measureElementWidth: function (e) { var d = b("<span style='visibility: hidden; white-space: nowrap;'>" + e + "</span>"); d.addClass(this.toTP("jqx-widget")); d.addClass(this.toTP("jqx-grid")); d.addClass(this.toTP("jqx-grid-column-header")); d.addClass(this.toTP("jqx-widget-header")); b(document.body).append(d); var c = d.outerWidth() + 20; d.remove(); return c }, _arrangeAutoHeight: function (e) { if (!e) { e = 0 } if (this.height === "auto" || this.height === null || this.autoheight) { var h = this.table.height(); var g = 0; if (!this.columnGroups) { g += this.showHeader ? this.columnsHeight : -1 } else { g += this.showHeader ? this.columnsheader.height() : -1 } g += this.showstatusbar ? this.statusBarHeight : 0; g += this.showAggregates ? this.aggregatesHeight : 0; g += this.showtoolbar ? this.toolbarHeight : 0; g += this.pageable ? this.pagerHeight : 0; if (this.pagerPosition === "both") { g += this.pageable ? this.pagerHeight : 0 } g += h; if (this.filterable) { var f = this.filter.find(".filterrow"); var c = this.filter.find(".filterrow-hidden"); var d = 1; if (c.length > 0) { d = 0 } g += this.filterHeight - 1 + this.filterHeight * f.length * d } if (g + e > this.maxHeight) { this.host.height(this.maxHeight) } else { this.host.height(g + e) } return true } return false }, _arrangeAutoWidth: function (e) { if (!e) { e = 0 } if (this.width === "auto" || this.width === null || this.autowidth) { var d = 0; for (var f = 0; f < this.columns.records.length; f++) { var c = this.columns.records[f].width; if (this.columns.records[f].hidden) { continue } if (c == "auto") { c = this._measureElementWidth(this.columns.records[f].text); d += c } else { d += c } } width = d; if (width + e > this.maxWidth) { this.host.width(this.maxWidth) } else { this.host.width(width + e) } return true } return false }, _measureTopAndHeight: function () { var d = this.host.height(); var h = 0; if (this.showtoolbar) { h += this.toolbarHeight; d -= parseInt(this.toolbarHeight) } if (this.filterable) { var g = this.filter.find(".filterrow"); var e = this.filter.find(".filterrow-hidden"); var f = 1; if (e.length > 0) { f = 0 } h += this.filterHeight; d -= parseInt(this.filterHeight); var c = f == 1 ? g.length : 0; h += this.filterHeight * c; d -= this.filterHeight * c } if (this.pageable && this.pagerPosition != "bottom") { h += parseInt(this.pagerHeight) + 1; if (d > this.pagerHeight && this.pagerPosition === "both") { d -= parseInt(this.pagerHeight) } } return { top: h, height: d } }, _arrange: function () { if (!this.table) { return } this._arrangeAutoHeight(); this._arrangeAutoWidth(); var v = this.host.width(); var r = this.host.height(); var j = r; var i = this; if (this.pageable) { if (this.pagerPosition === "bottom") { this.toppager[0].style.visibility = "hidden"; this.pager[0].style.visibility = "inherit" } else { if (this.pagerPosition === "both") { this.toppager[0].style.visibility = "inherit"; this.pager[0].style.visibility = "inherit" } else { if (this.pagerPosition === "top") { this.toppager[0].style.visibility = "inherit"; this.pager[0].style.visibility = "hidden" } } } } else { this.toppager[0].style.visibility = "hidden"; this.pager[0].style.visibility = "hidden" } var q = 0; if (this.showtoolbar) { this.toolbar.width(v); this.toolbar.height(this.toolbarHeight - 1); this.toolbar.css("top", 0); q += this.toolbarHeight; r -= parseInt(this.toolbarHeight) } else { this.toolbar[0].style.height = "0px" } if (this.filterable) { this.filter.width(v); this.filter.css("top", q); var t = this.filter.find(".filterrow"); var h = this.filter.find(".filterrow-hidden"); var A = 1; if (h.length > 0) { A = 0 } this.filter.height(this.filterHeight - 1 + this.filterHeight * t.length * A); q += this.filterHeight; r -= parseInt(this.filterHeight); var x = A == 1 ? t.length : 0; q += this.filterHeight * x; r -= this.filterHeight * x } if (this.showstatusbar) { this.statusbar.width(!this.table ? v : Math.max(v, this.table.width())); this.statusbar.height(this.statusBarHeight - 1) } else { this.statusbar[0].style.height = "0px" } if (this.showAggregates) { this.aggregates.height(this.aggregatesHeight - 1) } else { this.aggregates[0].style.height = "0px" } if (this.pageable && this.pagerPosition != "bottom") { this.toppager[0].style.width = v + "px"; this.toppager[0].style.height = parseInt(this.pagerHeight) + "px"; this.toppager[0].style.top = parseInt(q) + "px"; q += parseInt(this.pagerHeight) + 1; if (r > this.pagerHeight) { r -= parseInt(this.pagerHeight) } } else { if (this.toppager[0].style.width != v + "px") { this.toppager[0].style.width = parseInt(v) + "px" } if (this.toppager[0].style.height != this.pagerHeight + "px") { this.toppager[0].style.height = parseInt(this.pagerHeight) + "px" } if (this.toppager[0].style.top != q + "px") { this.toppager[0].style.top = q + "px" } var y = this.pagerPosition != "bottom" ? this.pagerHeight : 0; var d = q + y + "px"; if (this.content[0].style.top != d) { this.content[0].style.top = q + this.pagerHeight + "px" } } this._updateScrollbars(j); var c = parseInt(this.scrollBarSize); var n = 4; var e = 2; var f = 0; if (this.vScrollBar[0].style.visibility != "hidden") { f = c + n } if (this.hScrollBar[0].style.visibility != "hidden") { e = c + n + 2 } if (this.showAggregates) { if (this.hScrollBar[0].style.visibility === "hidden") { this.aggregates.width(!this.table ? v : Math.max(v, this.table.width()) + 4) } else { this.aggregates.width("auto") } } if ("hidden" != this.vScrollBar[0].style.visibility || "hidden" != this.hScrollBar[0].style.visibility) { var w = this._arrangeAutoHeight(e - 2); var s = this._arrangeAutoWidth(f + 1); if (w || s) { var v = this.host.width(); this.toppager[0].style.width = parseInt(v) + "px"; this.toolbar[0].style.width = parseInt(v) + "px"; this.statusbar[0].style.width = parseInt(v) + "px"; this.filter[0].style.width = parseInt(v) + "px" } if (w) { var B = this._measureTopAndHeight(); q = B.top; r = B.height } } var m = 0; if (this.pageable) { m = this.pagerHeight; if (this.pagerPosition != "top") { e += this.pagerHeight } } if (this.showAggregates) { e += this.aggregatesHeight; m += this.aggregatesHeight } if (this.showstatusbar) { e += this.statusBarHeight; m += this.statusBarHeight } if (this.hScrollBar[0].style.height != c + "px") { this.hScrollBar[0].style.height = parseInt(c) + "px" } if (this.hScrollBar[0].style.top != q + r - n - c - m + "px" || this.hScrollBar[0].style.left != "0px") { this.hScrollBar[0].style.top = q + r - n - c - m - 1 + "px"; this.hScrollBar[0].style.left = "0px" } var l = this.hScrollBar[0].style.width; var g = false; var z = false; if (f == 0) { if (l != (v - 2) + "px") { this.hScrollBar[0].style.width = (v - 2) + "px"; g = true } } else { if (l != (v - c - n) + "px") { this.hScrollBar[0].style.width = (v - c - n + "px"); g = true } } if (this.vScrollBar[0].style.width != c + "px") { this.vScrollBar[0].style.width = c + "px"; z = true } if (this.vScrollBar[0].style.height != parseInt(r) - e + "px") { this.vScrollBar[0].style.height = (parseInt(r) - e + "px"); z = true } if (this.vScrollBar[0].style.left != parseInt(v) - parseInt(c) - n + "px" || this.vScrollBar[0].style.top != q + "px") { this.vScrollBar[0].style.top = q + "px"; this.vScrollBar[0].style.left = parseInt(v) - parseInt(c) - n + "px" } if (this.rtl) { this.vScrollBar.css({ left: "0px", top: q }); if (this.vScrollBar.css("visibility") != "hidden") { this.hScrollBar.css({ left: c + 2 }) } } var k = this.vScrollInstance; k.disabled = this.disabled; var u = this.hScrollInstance; u.disabled = this.disabled; if (g) { u.refresh() } if (z) { k.refresh() } var o = function (C) { if ((C.vScrollBar[0].style.visibility != "hidden") && (C.hScrollBar[0].style.visibility != "hidden")) { C.bottomRight[0].style.visibility = "inherit"; C.bottomRight[0].style.left = 1 + parseInt(C.vScrollBar.css("left")) + "px"; C.bottomRight[0].style.top = parseInt(C.hScrollBar.css("top")) + "px"; if (C.rtl) { C.bottomRight.css("left", "0px") } C.bottomRight[0].style.width = parseInt(c) + 3 + "px"; C.bottomRight[0].style.height = parseInt(c) + 4 + "px"; if (C.showAggregates) { C.bottomRight.css("z-index", 99); C.bottomRight.height(parseInt(c) + 4 + C.aggregatesHeight); C.bottomRight.css({ top: parseInt(C.hScrollBar.css("top")) - C.aggregatesHeight }) } } else { C.bottomRight[0].style.visibility = "hidden" } }; o(this); if (this.content[0].style.width != v - f + "px") { this.content[0].style.width = v - f + "px" } if (this.content[0].style.height != r - e + 3 + "px") { this.content[0].style.height = r - e + 3 + "px" } if (this.content[0].style.top != q + "px") { this.content[0].style.top = parseInt(q) + "px" } if (this.rtl) { this.content.css("left", f); if (this.filter && (this.filter.children().length > 0)) { b(this.filter.children()).css("left", f) } if (this.table) { var p = this.table.width(); if (p < v - f) { this.content.css("left", v - p + 2); if (this.filter && (this.filter.children().length > 0)) { b(this.filter.children()).css("left", v - p + 2) } } } } if (this.showAggregates) { this.aggregates.css("top", q + r - this.aggregatesHeight - (this.pageable ? this.pagerHeight : 0) - (this.showstatusbar ? (this.statusBarHeight + 1) : 0)); if (this.rtl) { this.aggregates.css("left", "0px") } if (this.hScrollBar.css("visibility") != "hidden") { this.hScrollBar.css({ top: q + r - n - c - m + this.aggregatesHeight + "px" }); this.aggregates.css("top", 1 + q + r - c - 5 - this.aggregatesHeight - (this.pageable ? this.pagerHeight : 0) - (this.showstatusbar ? (this.statusBarHeight + 1) : 0)) } o(this) } if (this.showstatusbar) { this.statusbar.css("top", q + r - this.statusBarHeight - (this.pageable ? this.pagerHeight : 0)); if (this.rtl) { if (this.hScrollBar.css("visibility") == "hidden") { this.statusbar.css("left", this.content.css("left")) } else { this.statusbar.css("left", "0px") } } } if (this.pageable) { this.pager[0].style.width = v + "px"; this.pager[0].style.height = this.pagerHeight + "px"; this.pager[0].style.top = parseInt(q) + parseInt(r) - parseInt(this.pagerHeight) - 1 + "px" } else { this.pager[0].style.height = "0px" } this.vScrollBar[0].style.zIndex = this.tableZIndex + this.headerZIndex + 10 + this.columns.records.length; this.hScrollBar[0].style.zIndex = this.tableZIndex + this.headerZIndex + 10 + this.columns.records.length; if (v != parseInt(this.dataloadelement[0].style.width)) { this.dataloadelement[0].style.width = this.element.style.width } if (r != parseInt(this.dataloadelement[0].style.height)) { this.dataloadelement[0].style.height = this.element.style.height } this._hostwidth = v }, scrollOffset: function (e, d) { if (arguments.length == 0 || (e != null && typeof (e) == "object" && !e.top)) { return { left: this.hScrollBar.jqxScrollBar("value"), top: this.vScrollBar.jqxScrollBar("value") } } if (e != null && typeof (e) == "object") { var d = e.left; var c = e.top; var e = c } if (e == null || d == null || e == undefined || d == undefined) { return } this.vScrollBar.jqxScrollBar("setPosition", e); this.hScrollBar.jqxScrollBar("setPosition", d) }, scrollleft: function (c) { if (c == null || c == undefined) { return } if (this.hScrollBar.css("visibility") != "hidden") { this.hScrollBar.jqxScrollBar("setPosition", c) } }, scrolltop: function (c) { if (c == null || c == undefined) { return } if (this.vScrollBar.css("visibility") != "hidden") { this.vScrollBar.jqxScrollBar("setPosition", c) } }, beginUpdate: function () { this._updating = true; this._datachanged = false }, endUpdate: function (c) { this._updating = false; if (c === false) { return } this._rendercolumnheaders(); this.refresh() }, updating: function () { return this._updating }, databind: function (g, i, c) { if (this.loadingstate === true) { return } if (this.host.css("display") == "block") { if (this.autoShowLoadElement) { b(this.dataloadelement).css("visibility", "visible"); b(this.dataloadelement).css("display", "block"); this.dataloadelement.width(this.host.width()); this.dataloadelement.height(this.host.height()) } else { b(this.dataloadelement).css("visibility", "hidden"); b(this.dataloadelement).css("display", "none") } } var f = this; if (g == null) { g = {} } if (g.sortcomparer == undefined || g.sortcomparer == null) { g.sortcomparer = null } if (g.filter == undefined || g.filter == null) { g.filter = null } if (g.sort == undefined || g.sort == null) { g.sort = null } if (g.data == undefined || g.data == null) { g.data = null } var d = null; if (g != null) { d = g._source != undefined ? g._source.url : g.url } this.dataview = this.dataview || new b.jqx.dataView(); this.dataview.pageable = this.pageable; this.dataview.grid = this; if (!f.initializedcall) { if (g._source) { if (this.sortable) { if (g._source.sortcolumn != undefined) { this.sortcolumn = g._source.sortcolumn; this.source.sortcolumn = this.sortcolumn; this.dataview.sortfield = g._source.sortcolumn; g._source.sortcolumn = null } if (g._source.sortdirection != undefined) { this.dataview.sortfielddirection = g._source.sortdirection; var h = g._source.sortdirection; if (h == "a" || h == "asc" || h == "ascending" || h == true) { var e = true } else { var e = false } if (h != null) { this.sortdirection = { ascending: e, descending: !e } } else { this.sortdirection = { ascending: false, descending: false } } } } } if (this.pageable) { if (g._source) { if (g._source.pagenum != undefined) { this.dataview.pagenum = g._source.pagenum } if (g._source.pagesize != undefined) { this.pageSize = g._source.pagesize; this.dataview.pagesize = g._source.pagesize } else { this.dataview.pagesize = g._source.pagesize; if (this.dataview.pagesize == undefined) { this.dataview.pagesize = this.pageSize } } } } if (this.sortable) { if (g.sortcolumn) { this.dataview.sortfield = g.sortcolumn } if (g.sortdirection) { this.dataview.sortfielddirection = g.sortdirection } } } this._loading = true; this.dataview.update = function (z) { f._loading = false; f.rowsByKey = new Array(); var m = f.source._source.datafields; if (f.groups && f.groups.length > 0) { var u = Object.prototype.toString; var w = f.groups[0]; Object.prototype.toString = (typeof w == "function") ? w : function () { return this[w] }; if (!f.source.records.sort) { var v = new Array(); var t = 0; b.each(data, function () { v[startindex + t++] = this }); data = v } f.source.records.sort(function (B, j) { if (B === undefined) { B = null } if (j === undefined) { j = null } if (B === null && j === null) { return 0 } if (B === null && j !== null) { return -1 } if (B !== null && j === null) { return 1 } var E = 0; var D = 0; if (B && B.uid) { E = B.uid } if (j && j.uid) { D = j.uid } B = B.toString(); j = j.toString(); if (b.jqx.dataFormat.isNumber(B) && b.jqx.dataFormat.isNumber(j)) { if (B < j) { return -1 } if (B > j) { return 1 } return 0 } else { if (b.jqx.dataFormat.isDate(B) && b.jqx.dataFormat.isDate(j)) { if (B < j) { return -1 } if (B > j) { return 1 } return 0 } else { if (!b.jqx.dataFormat.isNumber(B) && !b.jqx.dataFormat.isNumber(j)) { B = String(B).toLowerCase(); j = String(j).toLowerCase() } } } try { if (B < j) { return -1 } if (B > j) { return 1 } } catch (C) { var F = C } if (typeof (E) == "number") { if (E < D) { return -1 } if (E > D) { return 1 } } return 0 }); Object.prototype.toString = u } for (var q = 0; q < f.source.records.length; q++) { var A = f.source.records[q]; f.rowsByKey[A.uid] = A; if (A.records && A.records.length > 0) { var l = function (B) { for (var C = 0; C < B.length; C++) { if (!B[C]) { continue } f.rowsByKey[B[C].uid] = B[C]; if (B[C].records && B[C].records.length > 0) { l(B[C].records) } } }; l(A.records) } if (q === 0) { var k = false; if (m) { for (var o = 0; o < m.length; o++) { if (!m[o]) { continue } if (!m[o].type) { k = true; m[o].type = "string"; var y = A[m[o].name]; if (y == undefined) { continue } if (y === true || y === false) { m[o].type = "boolean" } if (y != null && y.toString().indexOf(f.gridlocalization.currencysymbol) > -1 || y.toString().indexOf(f.gridlocalization.percentsymbol) > -1) { var r = y.toString().split(" ").length; var s = new Number(f._toNumber(y.toString())); if (!isNaN(s) && r == 1) { m[o].type = "number" } } if (b.jqx.dataFormat.isNumber(y) || (!isNaN(parseFloat(y)) && isFinite(y))) { m[o].type = "number" } if (b.jqx.dataFormat.isDate(y)) { m[o].type = "date" } } } } if (k) { for (var o = 0; o < m.length; o++) { var x = f.source.getvaluebytype(A[m[o].name], m[o]); if (x != null && m[o].type == "number") { var p = x; p = new Number(f._toNumber(p.toString())); if (!isNaN(p)) { x = p } } A[m[o].name] = x } } } } if (i === "pager" || i === "filter" || i === "sort") { f.refresh() } else { f._render() } if (f.autoShowLoadElement && !f._loading) { b(f.dataloadelement).css("visibility", "hidden"); b(f.dataloadelement).css("display", "none") } if (f.pageable) { if (!f.disabled) { if (f.pagernexttop) { f.pagerfirsttop.jqxButton({ disabled: false }); f.pagerfirstbottom.jqxButton({ disabled: false }); f.pagerlasttop.jqxButton({ disabled: false }); f.pagerlastbottom.jqxButton({ disabled: false }); f.pagernexttop.jqxButton({ disabled: false }); f.pagerprevioustop.jqxButton({ disabled: false }); if (f.pagershowrowscombotop.jqxDropDownList) { if (f.pagerMode == "advanced") { f.pagershowrowscombotop.jqxDropDownList({ disabled: false }); f.pagershowrowscombobottom.jqxDropDownList({ disabled: false }) } } f.pagernextbottom.jqxButton({ disabled: false }); f.pagerpreviousbottom.jqxButton({ disabled: false }) } } } f._updateTouchScrolling(); f._raiseEvent("bindingComplete"); if (c) { c() } if (!f.initializedcall) { f.initializedcall = true; f.isInitialized = true; if (f.ready) { f.ready() } if ((f.width != null && f.width.toString().indexOf("%") != -1) || (f.height != null && f.height.toString().indexOf("%") != -1)) { f._updatesize(true) } if (f.host.css("visibility") == "hidden") { var n = b.jqx.browser.msie && b.jqx.browser.version < 8; if (f.vScrollBar.css("visibility") == "visible") { f.vScrollBar.css("visibility", "inherit") } if (f.hScrollBar.css("visibility") == "visible") { f.hScrollBar.css("visibility", "inherit") } f._intervalTimer = setInterval(function () { if (f.host.css("visibility") == "visible") { f._updatesize(true); clearInterval(f._intervalTimer) } }, 100) } } }; this.dataview.databind(g) }, _raiseEvent: function (g, d) { if (d == undefined) { d = { owner: null } } var e = g; args = d; args.owner = this; var f = new b.Event(e); f.owner = this; f.args = args; var c = this.host.trigger(f); d = f.args; return c }, ensureColumnVisible: function (d) { var g = 0; var c = 0; for (var f = 0; f < this.columns.records.length; f++) { if (this.columns.records[f].datafield != d) { g += this.columns.records[f].width } else { g += this.columns.records[f].width; c = this.columns.records[f].width; break } } if (this.hScrollBar.css("visibility") != "hidden") { var h = this.hScrollBar.jqxScrollBar("value"); var e = h + this.host.width(); if (h > g - c) { this.hScrollBar.jqxScrollBar("setPosition", g - c) } else { if (g > e) { this.hScrollBar.jqxScrollBar("setPosition", h + g - e) } } } }, ensurerowvisiblebykey: function (o) { if (this.vScrollBar[0].style.visibility === "hidden") { return false } var p = this._getuirow(o); if (!p) { return } var m = this.vScrollBar.jqxScrollBar("value"); var e = this.host.height(); var g = 0; if (!this.columnGroups) { g += this.showHeader ? this.columnsHeight : 0 } else { g += this.showHeader ? this.columnsheader.height() : 0 } if (this.filterable) { g += this.filter.height() } if (this.pageable) { if (this.pagerPosition === "top") { g += this.pagerHeight } } if (this.showtoolbar) { g += this.toolbarHeight } e -= g; if (this.pageable && this.pagerPosition !== "top") { e -= this.pagerHeight } if (this.showstatusbar) { e -= this.statusBarHeightt } if (this.showAggregates) { e -= this.aggregatesHeight } if (this.hScrollBar.css("visibility") != "hidden") { e -= 20 } var n = this.host.coord().top + g; var f = m; var c = e + f; var i = p.coord().top + m - n; i = Math.round(i); var l = i + p.outerHeight(); l = Math.round(l); if (Math.round(p.position().top) === 0) { return this.vScrollBar.jqxScrollBar("setPosition", 0) } else { var j = b(this._table.children()[1]).children().length - 1; var d = this._getuikey(j); var k = this._getuirow(d); if (k) { if (k[0] === p[0]) { return this.vScrollBar.jqxScrollBar("setPosition", this.vScrollBar.jqxScrollBar("max")) } } } if (i < f) { var h = i - p.height(); if (h < 0) { h = 0 } return this.vScrollBar.jqxScrollBar("setPosition", h) } if (l > c) { return this.vScrollBar.jqxScrollBar("setPosition", 4 + l - e - m) } }, ensureRowVisible: function (c) { var d = this._getkey(c); this.ensurerowvisiblebykey(d) }, getColumn: function (c) { var d = null; if (this.columns.records) { b.each(this.columns.records, function () { if (this.datafield == c || this.displayfield == c) { d = this; return false } }) } return d }, _setcolumnproperty: function (e, g, h) { if (e == null || g == null || h == null) { return null } var d = g; g = g.toLowerCase(); var f = this.getColumn(e); if (f == null) { return } var i = f[g]; f[g] = h; f[d] = h; var c = this.getColumn(e); if (c != null) { c[g] = h } switch (g) { case "filteritems": case "text": case "editable": case "resizable": case "draggable": case "hidden": case "hideable": case "renderer": case "cellsrenderer": case "align": case "aggregates": case "cellsalign": case "cellsformat": case "pinned": case "contenttype": case "filterable": case "groupable": case "cellclass": case "cellclassname": case "class": case "width": case "minwidth": case "maxwidth": if (g == "align") { this._rendercolumnheaders(); this.refresh() } else { if (g == "text" || g == "class" || g == "hidden" || g == "pinned" || g == "resizable" || g == "renderer") { this._rendercolumnheaders(); this.refresh() } else { if (g == "width" || g == "maxwidth" || g == "minwidth") { f._width = null; f._percentagewidth = null; this._updatecolumnwidths(); this.refresh() } else { this.refresh() } } } break } }, getColumnProperty: function (c, e) { if (c == null || e == null) { return null } e = e.toLowerCase(); var d = this.getColumn(c); return d[e] }, setColumnProperty: function (c, d, e) { this._setcolumnproperty(c, d, e) }, hideColumn: function (c) { this._setcolumnproperty(c, "hidden", true) }, showColumn: function (c) { this._setcolumnproperty(c, "hidden", false) }, updateBoundData: function (d, c) { this.databind(this.source, d, c) }, refresh: function (c) { if (c != true) { if (b.jqx.isHidden(this.host)) { return } this.vScrollInstance.setPosition(0); this._renderrows(); this.updatepagerdetails(); this._arrange(); if (this._arrangeFilterRow) { this._arrangeFilterRow() } this._renderhorizontalscroll(); this._showicons(); if (this.showAggregates) { this._updateaggregates() } this._updateTouchScrolling() } }, _updateTouchScrolling: function () { var d = this.that; if (d.isTouchDevice()) { var f = b.jqx.mobile.getTouchEventName("touchstart"); var e = b.jqx.mobile.getTouchEventName("touchend"); var c = b.jqx.mobile.getTouchEventName("touchmove"); if (d.gridcontent) { d.removeHandler(d.gridcontent, f + ".touchScroll"); d.removeHandler(d.gridcontent, c + ".touchScroll"); d.removeHandler(d.gridcontent, e + ".touchScroll"); d.removeHandler(d.gridcontent, "touchcancel.touchScroll"); b.jqx.mobile.touchScroll(d.gridcontent[0], Math.max(d.vScrollInstance.max, d.hScrollInstance.max), function (i, h) { if (d.vScrollBar.css("visibility") != "hidden") { var g = d.vScrollInstance.value; d.vScrollInstance.setPosition(g + h) } if (d.hScrollBar.css("visibility") != "hidden") { var g = d.hScrollInstance.value; d.hScrollInstance.setPosition(g + i) } d.scrolled = new Date(); d.vScrollInstance.thumbCapture = true }, this.element.id, this.hScrollBar, this.vScrollBar) } } }, _showicons: function () { if (!this.table) { return } for (var e = 0; e < this.columns.records.length; e++) { var g = this.columns.records[e]; b(g.filtericon).hide(); b(g.sortasc).hide(); b(g.sortdesc).hide(); if (this.filterMode !== "simple") { for (var d = 0; d < this.dataview.filters.length; d++) { var f = this.dataview.filters[d]; if (f.datafield === g.displayfield) { b(g.filtericon).show(); break } } } if (this.sortcolumn !== null) { if (this.sortcolumn === g.displayfield) { if (this.sortdirection != null) { if (this.sortdirection.ascending) { b(g.sortasc).show() } else { b(g.sortdesc).show() } } } } if ((g.align != "left" && g.align != "center" && !this.rtl) || (this.rtl && g.align != "right" && g.align != "center")) { var h = b.jqx.isHidden(b(g.filtericon)) ? 0 : 16; h += b.jqx.isHidden(b(g.sortasc)) ? 0 : 16; h += b.jqx.isHidden(b(g.sortdesc)) ? 0 : 16; var c = b(b(b(g.element).children()[0]).children()[0]); if (!this.rtl) { if (h > 0) { c.css("margin-right", 4 + h + "px") } else { c.css("margin-right", "4px") } } else { if (h > 0) { c.css("margin-left", 4 + h + "px") } else { c.css("margin-left", "4px") } } } } }, render: function (j) { var f = "<div style='overflow: hidden; -webkit-appearance: none; outline: none; width:100%; height: 100%; align:left; border: 0px; padding: 0px; margin: 0px; left: 0px; top: 0px; valign:top; position: relative;'><div id='wrapper" + this.element.id + "' style='overflow: hidden; -webkit-appearance: none; border: none; background: transparent; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; align:left; left: 0px; top: 0px; valign:top; position: relative;'><div id='toolbar' style='visibility: hidden; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='toppager' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='filter' style='visibility: hidden; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='content" + this.element.id + "' style='overflow: hidden; -webkit-appearance: none; border: none; background: transparent; outline: none; border: none; padding: 0px; margin-left: 0px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='verticalScrollBar" + this.element.id + "' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='horizontalScrollBar" + this.element.id + "' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='bottomRight' style='align:left; valign:top; left: 0px; top: 0px; border: none; position: absolute;'></div><div id='aggregates' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='statusbar' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='pager' style='z-index: 20; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div></div></div>"; this.element.innerText = ""; this.element.innerHTML = f; this.wrapper = this.host.find("#wrapper" + this.element.id); this.content = this.host.find("#content" + this.element.id); this.content.addClass(this.toTP("jqx-reset")); var h = this.host.find("#verticalScrollBar" + this.element.id); var l = this.host.find("#horizontalScrollBar" + this.element.id); this.bottomRight = this.host.find("#bottomRight").addClass(this.toTP("jqx-grid-bottomright")).addClass(this.toTP("jqx-scrollbar-state-normal")); if (this.vScrollBar) { this.vScrollBar.jqxScrollBar("destroy") } if (this.hScrollBar) { this.hScrollBar.jqxScrollBar("destroy") } this.vScrollBar = h.jqxScrollBar({ vertical: true, rtl: this.rtl, touchMode: this.touchmode, theme: this.theme, _triggervaluechanged: false }); this.hScrollBar = l.jqxScrollBar({ vertical: false, rtl: this.rtl, touchMode: this.touchmode, theme: this.theme, _triggervaluechanged: false }); this.vScrollBar.css("visibility", "hidden"); this.hScrollBar.css("visibility", "hidden"); this.vScrollInstance = b.data(this.vScrollBar[0], "jqxScrollBar").instance; this.hScrollInstance = b.data(this.hScrollBar[0], "jqxScrollBar").instance; this.filter = this.host.find("#filter"); this.filter[0].id = "filter" + this.element.id; this.filter.addClass(this.toTP("jqx-widget-header")); this.filter.addClass(this.toTP("jqx-grid-toolbar")); this.pager = this.host.find("#pager"); this.pager[0].id = "pager" + this.element.id; this.toolbar = this.host.find("#toolbar"); this.toolbar[0].id = "toolbar" + this.element.id; this.toolbar.addClass(this.toTP("jqx-grid-toolbar")); this.toolbar.addClass(this.toTP("jqx-widget-header")); this.aggregates = this.host.find("#aggregates"); this.aggregates[0].id = "aggregates" + this.element.id; this.aggregates.addClass(this.toTP("jqx-grid-statusbar")); this.aggregates.addClass(this.toTP("jqx-widget-header")); this.statusbar = this.host.find("#statusbar"); this.statusbar[0].id = "statusbar" + this.element.id; this.statusbar.addClass(this.toTP("jqx-grid-statusbar")); this.statusbar.addClass(this.toTP("jqx-widget-header")); this.pager.addClass(this.toTP("jqx-grid-pager")); this.pager.addClass(this.toTP("jqx-widget-header")); this.toppager = this.host.find("#toppager"); this.toppager.addClass(this.toTP("jqx-grid-pager-top")); this.toppager.addClass(this.toTP("jqx-widget-header")); this.gridtable = null; if (this.localizestrings) { this.localizestrings(); if (this.localization != null) { this.localizestrings(this.localization, false) } } this._builddataloadelement(); this._cachedcolumns = this.columns; var c = this.source.datafields; if (c == null && this.source._source) { c = this.source._source.datafields } if (c) { for (var d = 0; d < this.columns.length; d++) { var e = this.columns[d]; if (e && e.cellsFormat && e.cellsFormat.length > 2) { for (var k = 0; k < c.length; k++) { if (c[k].name == e.datafield && !c[k].format) { c[k].format = e.cellsFormat; break } } } } } this.databind(this.source); if (this.showtoolbar) { this.toolbar.css("visibility", "inherit") } if (this.showstatusbar) { this.statusbar.css("visibility", "inherit") } if (this.showAggregates) { this.aggregates.css("visibility", "inherit") } this.tableheight = null; var g = this; var i = function () { if (g.content) { g.content[0].scrollTop = 0; g.content[0].scrollLeft = 0 } if (g.gridcontent) { g.gridcontent[0].scrollLeft = 0; g.gridcontent[0].scrollTop = 0 } }; this.removeHandler(this.content, "scroll"); this.removeHandler(this.content, "mousedown"); this.addHandler(this.content, "scroll", function (m) { i(); return false }); if (j !== true) { this._render() } }, _render: function () { if (this.dataview == null) { return } if (this._loading) { return } if (this.columnsHeight != 25 || this.columnGroups) { this._measureElement("column") } if (this.filterable) { this.filter[0].style.visibility = "inherit" } else { this.filter[0].style.visibility = "hidden" } this.rowinfo = new Array(); this._removeHandlers(); if (this.columns == null) { this.columns = new b.jqx.dataCollection(this.element) } else { this._initializeColumns() } this.host.height(this.height); this.host.width(this.width); b.jqx.utilities.html(this.content, ""); this.columnsheader = this.columnsheader || b('<div style="overflow: hidden;"></div>'); this.columnsheader.remove(); this.columnsheader.addClass(this.toTP("jqx-widget-header")); this.columnsheader.addClass(this.toTP("jqx-grid-header")); if (!this.showHeader) { this.columnsheader.css("display", "none") } else { if (this.columnsheader) { this.columnsheader.css("display", "block") } } this.gridcontent = this.gridcontent || b('<div style="width: 100%; overflow: hidden; position: absolute;"></div>'); this.gridcontent.remove(); var c = this.columnsHeight; c = this._preparecolumnGroups(); this.columnsheader.height(c); this.content.append(this.columnsheader); this.content.append(this.gridcontent); this._rendercolumnheaders(); this.tableheight = null; this.gridcontent.find("#contenttable" + this.element.id).remove(); if (this.table != null) { this.table.remove(); this.table = null } this.table = b('<div id="contenttable' + this.element.id + '" style="overflow: hidden; position: relative;"></div>'); this.gridcontent.addClass(this.toTP("jqx-grid-content")); this.gridcontent.addClass(this.toTP("jqx-widget-content")); this.gridcontent.append(this.table); this._renderrows(); if (this.filterable) { this._renderfilter() } if (this.pageable) { this._initpager() } this._arrange(); if (this.renderStatusBar) { this.renderStatusBar(this.statusbar) } if (this.rendertoolbar) { this.rendertoolbar(this.toolbar) } if (this.showAggregates) { this._updateaggregates() } if (this.disabled) { this.host.addClass(this.toThemeProperty("jqx-fill-state-disabled")) } this._renderhorizontalscroll(); this._showicons(); this._addHandlers() }, clear: function () { if (this.source) { this.source.records = new Array(); this.source.hierarchy = new Array() } this.dataview._filteredData = new Array(); this.databind(null); this._render() }, _initpager: function () { var g = this; var c = this.gridlocalization.pagergotopagestring; var i = this.gridlocalization.pagerrangestring; var d = this.gridlocalization.pagershowrowsstring; var h = (this.pagerHeight - 17) / 2; this.pagerdiv = this.pagerdiv || b('<div style="width: 100%; height: 100%; position: relative;"></div>'); this.toppagerdiv = this.toppagerdiv || b('<div style="width: 100%; height: 100%; position: relative;"></div>'); if (!this.pageable) { this.pagerdiv.remove(); this.toppagerdiv.remove(); return } if (!this.pagerRenderer) { this.pagerdiv.css("top", h); this.toppagerdiv.css("top", h); var f = function (s, E) { var n = this; var r = b('<div style="margin-right: 7px; width: 27px; height: 17px; float: right;"><input style="margin-top: 0px; text-align: right; width: 27px;" type="text"/></div>'); var D = b('<div style="float: right; margin-right: 7px;"></div>'); var t = b('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>'); var j = b('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>'); var m = b('<div type="button" style="margin-left: 3px; padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>'); var q = b('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>'); var z = b('<div style="margin-right: 7px; float: right;"></div>'); var x = b('<div style="margin-right: 7px; float: right;"></div>'); var p = b('<div style="padding-bottom: 3px; margin-right: 3px; float: right;"></div>'); r.attr("disabled", n.disabled); var A = b('<div id="gridpagerlist" style="margin-top: 0px; margin-right: 7px; float: right;"></div>'); A[0].id = "gridpagerlist" + E + n.element.id; n.removeHandler(t, "mousedown"); n.removeHandler(t, "mouseup"); n.removeHandler(t, "click"); n.removeHandler(j, "mousedown"); n.removeHandler(j, "mouseup"); n.removeHandler(j, "click"); n.removeHandler(m, "mousedown"); n.removeHandler(m, "mouseup"); n.removeHandler(m, "click"); n.removeHandler(q, "mousedown"); n.removeHandler(q, "mouseup"); n.removeHandler(q, "click"); if (!n.rtl) { j.attr("title", n.gridlocalization.pagerpreviousbuttonstring); t.attr("title", n.gridlocalization.pagernextbuttonstring) } else { t.attr("title", n.gridlocalization.pagerpreviousbuttonstring); j.attr("title", n.gridlocalization.pagernextbuttonstring) } if (b.jqx.browser.msie && b.jqx.browser.version < 8) { p.css("padding-top", "3px") } this["pagerfirst" + E] = m; this["pagerlast" + E] = q; this["pagernext" + E] = t; this["pagerprevious" + E] = j; this["pagergotoinput" + E] = r; this["pagerdetails" + E] = z; this["pagershowrows" + E] = x; this["pagergotolabel" + E] = D; this["pagershowrowscombo" + E] = A; this["pagerbuttons" + E] = p; if (n.pagerMode == "default") { if (!n.rtl) { m.attr("title", n.gridlocalization.pagerfirstbuttonstring); q.attr("title", n.gridlocalization.pagerlastbuttonstring) } else { q.attr("title", n.gridlocalization.pagerfirstbuttonstring); m.attr("title", n.gridlocalization.pagerlastbuttonstring) } var v = b("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); v.addClass(n.toThemeProperty("jqx-icon-arrow-first")); m.wrapInner(v); var o = b("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); o.addClass(n.toThemeProperty("jqx-icon-arrow-last")); q.wrapInner(o); if (!n.rtl) { s.append(m); s.append(j); s.append(p); s.append(t); s.append(q) } else { s.append(q); s.append(t); s.append(p); s.append(j); s.append(m) } q.jqxButton({ cursor: "pointer", disabled: n.disabled, theme: n.theme }); m.jqxButton({ cursor: "pointer", disabled: n.disabled, theme: n.theme }); var C = !n.rtl ? "left" : "right"; p.css("float", C); q.css("float", C); m.css("float", C); t.css("float", C); j.css("float", C); z.css("float", n.rtl ? "left" : "right"); if (n.rtl) { z.css("margin-left", "7px"); z.css("margin-right", "0px") } else { z.css("margin-left", "0px"); z.css("margin-right", "7px") } } else { if (!n.rtl) { s.append(t); s.append(j) } } t.jqxButton({ cursor: "pointer", disabled: n.disabled, theme: n.theme }); j.jqxButton({ cursor: "pointer", disabled: n.disabled, theme: n.theme }); var k = b("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); k.addClass(n.toThemeProperty("jqx-icon-arrow-left")); j.wrapInner(k); var l = b("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>"); l.addClass(n.toThemeProperty("jqx-icon-arrow-right")); t.wrapInner(l); if (!n.rtl) { s.append(z) } if (n.pagerMode != "default") { if (!n.rtl) { s.append(A); s.append(x); s.append(r); s.append(D) } else { s.append(D); s.append(r); s.append(x); s.append(A); s.append(z); s.append(t); s.append(j) } var u = n.pageSizeOptions; A.jqxDropDownList({ _checkForHiddenParent: false, rtl: n.rtl, disabled: n.disabled, source: u, enableBrowserBoundsDetection: true, keyboardSelection: false, autoDropDownHeight: true, width: 44, height: 16, theme: n.theme }); var B = 0; for (var y = 0; y < u.length; y++) { if (this.pageSize >= u[y]) { B = y } } D[0].innerHTML = c; A.jqxDropDownList({ selectedIndex: B }); var w = r.find("input"); w.addClass(n.toThemeProperty("jqx-input")); w.addClass(n.toThemeProperty("jqx-widget-content")); if (this.rtl) { w.css("direction", "rtl") } var n = this; this.removeHandler(A, "select"); this.addHandler(A, "select", function (K) { if (K.args) { if (n.vScrollInstance) { n.vScrollInstance.setPosition(0) } var I = K.args.index; n.pagershowrowscombotop.data().jqxDropDownList.instance.selectIndex(I); n.pagershowrowscombobottom.data().jqxDropDownList.instance.selectIndex(I); n.pagershowrowscombobottom.data().jqxDropDownList.instance.renderSelection("mouse"); n.pagershowrowscombotop.data().jqxDropDownList.instance.renderSelection("mouse"); var L = n.dataview.pagenum * n.dataview.pagesize; var H = u[I]; var J = n.pageSize; n.pageSize = parseInt(H); if (isNaN(n.pageSize)) { n.pageSize = 10 } if (H >= 100) { n.pagershowrowscombotop.jqxDropDownList({ width: 55 }); n.pagershowrowscombobottom.jqxDropDownList({ width: 55 }) } else { n.pagershowrowscombotop.jqxDropDownList({ width: 44 }); n.pagershowrowscombobottom.jqxDropDownList({ width: 44 }) } n.dataview.pagesize = n.pageSize; var G = Math.floor(L / n.dataview.pagesize); if (G !== n.dataview.pagenum || parseInt(H) !== parseInt(J)) { n._raiseEvent("pageSizeChanged", { pagenum: G, oldpageSize: J, pageSize: n.dataview.pagesize }); var F = n.goToPage(G); if (!F) { if (!n.serverProcessing) { n.refresh() } else { n.updateBoundData("pager") } } } } }); var r = r.find("input"); r.addClass(n.toThemeProperty("jqx-grid-pager-input")); r.addClass(n.toThemeProperty("jqx-rc-all")); this.removeHandler(r, "keydown"); this.removeHandler(r, "change"); n.addHandler(r, "keydown", function (F) { if (F.keyCode >= 65 && F.keyCode <= 90) { return false } if (F.keyCode == "13") { var G = r.val(); G = parseInt(G); if (!isNaN(G)) { n.goToPage(G - 1) } return false } }); n.addHandler(r, "change", function () { var F = r.val(); F = parseInt(F); if (!isNaN(F)) { n.goToPage(F - 1) } }) } x[0].innerHTML = d; n.addHandler(t, "mouseenter", function () { l.addClass(n.toThemeProperty("jqx-icon-arrow-right-hover")) }); n.addHandler(j, "mouseenter", function () { k.addClass(n.toThemeProperty("jqx-icon-arrow-left-hover")) }); n.addHandler(t, "mouseleave", function () { l.removeClass(n.toThemeProperty("jqx-icon-arrow-right-hover")) }); n.addHandler(j, "mouseleave", function () { k.removeClass(n.toThemeProperty("jqx-icon-arrow-left-hover")) }); n.addHandler(t, "mousedown", function () { l.addClass(n.toThemeProperty("jqx-icon-arrow-right-selected")) }); n.addHandler(t, "mouseup", function () { l.removeClass(n.toThemeProperty("jqx-icon-arrow-right-selected")) }); n.addHandler(j, "mousedown", function () { k.addClass(n.toThemeProperty("jqx-icon-arrow-left-selected")) }); n.addHandler(j, "mouseup", function () { k.removeClass(n.toThemeProperty("jqx-icon-arrow-left-selected")) }); if (n.pagerMode === "default") { n.addHandler(q, "mouseenter", function () { o.addClass(n.toThemeProperty("jqx-icon-arrow-last-hover")) }); n.addHandler(m, "mouseenter", function () { v.addClass(n.toThemeProperty("jqx-icon-arrow-first-hover")) }); n.addHandler(q, "mouseleave", function () { o.removeClass(n.toThemeProperty("jqx-icon-arrow-last-hover")) }); n.addHandler(m, "mouseleave", function () { v.removeClass(n.toThemeProperty("jqx-icon-arrow-first-hover")) }); n.addHandler(q, "mousedown", function () { o.addClass(n.toThemeProperty("jqx-icon-arrow-last-selected")) }); n.addHandler(m, "mousedown", function () { v.addClass(n.toThemeProperty("jqx-icon-arrow-first-selected")) }); n.addHandler(q, "mouseup", function () { o.removeClass(n.toThemeProperty("jqx-icon-arrow-last-selected")) }); n.addHandler(m, "mouseup", function () { v.removeClass(n.toThemeProperty("jqx-icon-arrow-first-selected")) }) } n.addHandler(b(document), "mouseup.pagerbuttons" + E + this.element.id, function () { l.removeClass(n.toThemeProperty("jqx-icon-arrow-right-selected")); k.removeClass(n.toThemeProperty("jqx-icon-arrow-left-selected")); if (o) { o.removeClass(n.toThemeProperty("jqx-icon-arrow-last-selected")); v.removeClass(n.toThemeProperty("jqx-icon-arrow-first-selected")) } }); n.addHandler(t, "click", function () { if (!t.jqxButton("disabled")) { if (!n.rtl) { n.goToNextPage() } else { n.goToPrevPage() } } }); n.addHandler(j, "click", function () { if (!j.jqxButton("disabled")) { if (!n.rtl) { n.goToPrevPage() } else { n.goToNextPage() } } }); if (this.pagerMode === "default") { n.addHandler(m, "click", function () { if (!m.jqxButton("disabled")) { if (!n.rtl) { n.goToPage(0) } else { var G = n.dataview.totalrecords; var F = Math.ceil(G / n.pageSize); n.goToPage(F - 1) } } }); n.addHandler(q, "click", function () { if (!q.jqxButton("disabled")) { if (!n.rtl) { var G = n.dataview.totalrecords; var F = Math.ceil(G / n.pageSize); n.goToPage(F - 1) } else { n.goToPage(0) } } }) } }; this.pagerdiv.children().remove(); this.toppagerdiv.children().remove(); f.call(this, this.pagerdiv, "bottom"); f.call(this, this.toppagerdiv, "top"); this.pager.append(this.pagerdiv); this.toppager.append(this.toppagerdiv); this.updatepagerdetails() } else { this.pagerdiv.children().remove(); this.toppager.children().remove(); var e = this.pagerRenderer(); if (e != null) { this.pagerdiv.append(b(e)) } this.pager.append(this.pagerdiv); var e = this.pagerRenderer(); if (e != null) { this.toppagerdiv.append(b(e)) } this.toppager.append(this.toppagerdiv) } }, _updatepagertheme: function () { }, goToPage: function (f, h) { if (this._loading) { return false } if (this.editKey != undefined) { if (this.editSettings.saveOnPageChange) { var e = this.endroweditbykey(this.editKey); if (!e) { return false } } else { return false } } if (f == null || f == undefined) { f = 0 } if (f == -1) { f = 0 } if (f < 0) { return false } var d = this.dataview.totalrecords; var g = this.dataview.pagenum; var c = Math.ceil(d / this.pageSize); if (f >= c) { if (this.dataview.totalrecords == 0) { this.dataview.pagenum = 0; this.updatepagerdetails() } if (f > 0) { f = c - 1 } } if (this.dataview.pagenum != f) { if (this.pageable) { this.dataview.pagenum = f; this._raiseEvent("pageChanged", { pagenum: f, oldpagenum: g, pageSize: this.dataview.pagesize }) } if (!this.serverProcessing) { this.refresh(); if (h) { if (b.isFunction(h)) { h() } } } else { this.updateBoundData("pager", h) } return true } return false }, goToPrevPage: function (e) { if (this.dataview.pagenum > 0) { return this.goToPage(this.dataview.pagenum - 1, e) } else { if (this.pagerMode != "default" && this.pagerMode != "advanced") { var d = this.dataview.totalrecords; var c = Math.ceil(d / this.pageSize); return this.goToPage(c - 1, e) } } return false }, goToNextPage: function (e) { var d = this.dataview.totalrecords; if (this.summaryrows) { d += this.summaryrows.length } var c = Math.ceil(d / this.pageSize); if (this.dataview.pagenum < c - 1) { return this.goToPage(this.dataview.pagenum + 1, e) } else { if (this.pagerMode != "default" && this.pagerMode != "advanced") { return this.goToPage(0, e) } } return false }, updatepagerdetails: function () { if (!this.pageable) { return } var j = this; if (!this.serverProcessing) { if (this.source.hierarchy) { var m = j._names(); var g = 0; var r = function (y, w) { for (var x = 0; x < w.length; x++) { if (j.dataview.filters.length == 0) { w[x]._visible = true } if (w[x]._visible !== false) { g++ } if (j.treeGrid && j.treeGrid.pageSizeMode == "root") { continue } if (w[x].records && (w[x][m.expanded] || w[x][m.leaf])) { if (w[x]._visible !== false) { r(y + 1, w[x].records); if (this.treeGrid && b(this.treeGrid).jqxTreeGrid("showSubAggregates")) { if (y != 0) { g-- } } } } } }; r(0, this.dataview.rows); this.dataview.totalrecords = g } else { this.dataview.totalrecords = this.dataview.rows.length } } var d = this.dataview.pagenum * this.pageSize; var u = (this.dataview.pagenum + 1) * this.pageSize; if (u >= this.dataview.totalrecords) { u = this.dataview.totalrecords } var v = this.dataview.totalrecords; d++; var t = Math.ceil(v / this.dataview.pagesize); if (t >= 1) { t-- } t++; if (this.pageSizeMode == "root") { t = Math.ceil(this.rootRecordsLength / this.dataview.pagesize); if (t >= 1) { t-- } t++; v = this.rootRecordsLength; this.dataview.totalrecords = this.rootRecordsLength } if (this.pagerMode != "default") { if (this["pagergotoinputbottom"]) { var k = this["pagergotoinputbottom"].find("input"); k.val(this.dataview.pagenum + 1); k.attr("title", "1 - " + t); k = this["pagergotoinputtop"].find("input"); k.val(this.dataview.pagenum + 1); k.attr("title", "1 - " + t) } } else { var o = ""; var n = this.pagerButtonsCount; if (n == 0 || !n) { n = 5 } var s = 0; if (this.rtl) { s = n - 1 } while ((this.rtl && s >= 0) || (!this.rtl && s < n)) { var e = 1 + s; var p = this.dataview.pagenum / n; var f = Math.floor(p); e += f * n; var c = this.toTP("jqx-grid-pager-number"); c += " " + this.toTP("jqx-rc-all"); if (e > t && !this.rtl) { break } else { if (this.rtl && e > t) { s--; continue } } if (!this.rtl) { if (s == 0 && e > n) { o += "<a class='" + c + "' tabindex=-1 href='javascript:;' data-page='" + (-1 + e) + "'>...</a>" } } if (this.dataview.pagenum === e - 1) { c += " " + this.toTP("jqx-fill-state-pressed") } if (!this.rtl) { o += "<a class='" + c + "' tabindex=-1 href='javascript:;' data-page='" + e + "'>" + e + "</a>"; if (s === n - 1) { var c = this.toTP("jqx-grid-pager-number"); c += " " + this.toTP("jqx-rc-all"); if (t >= 1 + e) { o += "<a class='" + c + "' tabindex=-1 href='javascript:;' data-page='" + (1 + e) + "'>...</a>" } } } else { if (s === n - 1) { var c = this.toTP("jqx-grid-pager-number"); c += " " + this.toTP("jqx-rc-all"); if (t >= 1 + e) { o += "<a class='" + c + "' tabindex=-1 href='javascript:;' data-page='" + (1 + e) + "'>...</a>" } } if (this.dataview.pagenum === e - 1) { c += " " + this.toTP("jqx-fill-state-pressed") } o += "<a class='" + c + "' tabindex=-1 href='javascript:;' data-page='" + e + "'>" + e + "</a>" } if (this.rtl) { var c = this.toTP("jqx-grid-pager-number"); c += " " + this.toTP("jqx-rc-all"); if (s == 0 && e > n) { o += "<a class='" + c + "' tabindex=-1 href='javascript:;' data-page='" + (-1 + e) + "'>...</a>" } } if (!this.rtl) { s++ } else { s-- } } if (!this["pagerbuttonsbottom"]) { return } var h = this["pagerbuttonsbottom"].find("a"); this.removeHandler(h, "click"); this.removeHandler(h, "mouseenter"); this.removeHandler(h, "mouseleave"); var h = this["pagerbuttonstop"].find("a"); this.removeHandler(h, "click"); this.removeHandler(h, "mouseenter"); this.removeHandler(h, "mouseleave"); this["pagerbuttonsbottom"][0].innerHTML = o; this["pagerbuttonstop"][0].innerHTML = o; if (this.disabled) { this.host.find(".jqx-grid-pager-number").css("cursor", "default") } var q = function () { h.click(function (i) { if (j.disabled) { return } var w = b(i.target).attr("data-page"); j.goToPage(parseInt(w) - 1) }); h.mouseenter(function (i) { if (j.disabled) { return } b(i.target).addClass(j.toTP("jqx-fill-state-hover")) }); h.mouseleave(function (i) { if (j.disabled) { return } b(i.target).removeClass(j.toTP("jqx-fill-state-hover")) }) }; if (this.pagerPosition === "both" || this.pagerPosition === "bottom") { var h = this["pagerbuttonsbottom"].find("a"); q(h) } if (this.pagerPosition === "both" || this.pagerPosition === "top") { var h = this["pagerbuttonstop"].find("a"); q(h) } } if (u == 0 && u < d) { d = 0 } if (this["pagerdetailsbottom"]) { if (!this.rtl) { this["pagerdetailsbottom"][0].innerHTML = d + "-" + u + this.gridlocalization.pagerrangestring + v; this["pagerdetailstop"][0].innerHTML = d + "-" + u + this.gridlocalization.pagerrangestring + v } else { this["pagerdetailsbottom"][0].innerHTML = v + this.gridlocalization.pagerrangestring + u + "-" + d; this["pagerdetailstop"][0].innerHTML = v + this.gridlocalization.pagerrangestring + u + "-" + d } } if (this.pagerMode == "default") { var l = this["pagerbuttonsbottom"].width() + b(this["pagerdetailsbottom"]).width() + 160; this.pagerdiv.css("min-width", l); this.toppagerdiv.css("min-width", l) } if (d > u) { this.goToPrevPage() } }, _preparecolumnGroups: function () { var o = this.columnsHeight; if (this.columnGroups) { this.columnshierarchy = new Array(); if (this.columnGroups.length) { var m = this; for (var g = 0; g < this.columnGroups.length; g++) { this.columnGroups[g].parent = null; this.columnGroups[g].groups = null } for (var g = 0; g < this.columns.records.length; g++) { this.columns.records[g].parent = null; this.columns.records[g].groups = null } var n = function (j) { for (var t = 0; t < m.columnGroups.length; t++) { var u = m.columnGroups[t]; if (u.name === j) { return u } } return null }; for (var g = 0; g < this.columnGroups.length; g++) { var p = this.columnGroups[g]; if (!p.groups) { p.groups = null } if (p.parentGroup) { p.parentgroup = p.parentGroup } if (p.parentgroup) { var r = n(p.parentgroup); if (r) { p.parent = r; if (!r.groups) { r.groups = new Array() } if (r.groups.indexOf(p) === -1) { r.groups.push(p) } } } } for (var g = 0; g < this.columns.records.length; g++) { var p = this.columns.records[g]; if (p.columngroup) { var r = n(p.columngroup); if (r) { if (!r.groups) { r.groups = new Array() } p.parent = r; if (r.groups.indexOf(p) === -1) { r.groups.push(p) } } } } var q = 0; for (var g = 0; g < this.columns.records.length; g++) { var p = this.columns.records[g]; var d = p; p.level = 0; while (d.parent) { d = d.parent; p.level++ } var d = p; var c = p.level; q = Math.max(q, p.level); while (d.parent) { d = d.parent; if (d) { d.level = --c } } } var l = function (x) { var w = new Array(); if (x.columngroup) { w.push(x) } if (!x.groups) { return new Array() } for (var v = 0; v < x.groups.length; v++) { if (x.groups[v].columngroup) { w.push(x.groups[v]) } else { if (x.groups[v].groups) { var u = l(x.groups[v]); for (var t = 0; t < u.length; t++) { w.push(u[t]) } } } } return w }; for (var g = 0; g < this.columnGroups.length; g++) { var p = this.columnGroups[g]; var e = l(p); p.columns = e; var h = new Array(); var s = 0; for (var f = 0; f < e.length; f++) { h.push(this.columns.records.indexOf(e[f])); if (e[f].pinned) { s++ } } if (s != 0) { throw new Error("jqxDataTable: Column Groups initialization Error. Please, check the initialization of the jqxDataTable's columns array. The columns in a column group cannot be pinned.") } h.sort(function (j, i) { j = parseInt(j); i = parseInt(i); if (j < i) { return -1 } if (j > i) { return 1 } return 0 }); for (var k = 1; k < h.length; k++) { if (h[k] != h[k - 1] + 1) { throw new Error("jqxDataTable: Column Groups initialization Error. Please, check the initialization of the jqxDataTable's columns array. The columns in a column group are expected to be siblings in the columns array."); this.host.remove() } } } } this.columnGroupslevel = 1 + q; o = this.columnGroupslevel * this.columnsHeight } return o }, wheel: function (e, d) { if (d.autoheight && d.hScrollBar.css("visibility") == "hidden") { e.returnValue = true; return true } var f = 0; if (!e) { e = window.event } if (e.originalEvent && e.originalEvent.wheelDelta) { e.wheelDelta = e.originalEvent.wheelDelta } if (e.wheelDelta) { f = e.wheelDelta / 120 } else { if (e.detail) { f = -e.detail / 3 } } if (f) { var c = d._handleDelta(f); if (c) { if (e.preventDefault) { e.preventDefault() } if (e.originalEvent != null) { e.originalEvent.mouseHandled = true } if (e.stopPropagation != undefined) { e.stopPropagation() } } if (c) { c = false; e.returnValue = c; return c } else { return false } } if (e.preventDefault) { e.preventDefault() } e.returnValue = false }, _handleDelta: function (e) { if (this.vScrollBar.css("visibility") != "hidden") { var d = this.vScrollInstance.value; if (e < 0) { this.vScrollInstance.setPosition(this.vScrollInstance.value + 2 * 10) } else { this.vScrollInstance.setPosition(this.vScrollInstance.value - 2 * 10) } var c = this.vScrollInstance.value; if (d != c) { return true } } else { if (this.hScrollBar.css("visibility") != "hidden") { var d = this.hScrollInstance.value; if (e > 0) { if (this.hScrollInstance.value > 2 * 10) { this.hScrollInstance.setPosition(this.hScrollInstance.value - 2 * 10) } else { this.hScrollInstance.setPosition(0) } } else { if (this.hScrollInstance.value < this.hScrollInstance.max) { this.hScrollInstance.setPosition(this.hScrollInstance.value + 2 * 10) } else { this.hScrollInstance.setPosition(this.hScrollInstance.max) } } var c = this.hScrollInstance.value; if (d != c) { return true } } } return false }, _removeHandlers: function () { this.removeHandler(this.host, "focus"); this.removeHandler(b(window), "jqxReady." + this.element.id); if (this._mousewheelfunc) { this.removeHandler(this.host, "mousewheel", this._mousewheelfunc) } var c = "mousedown"; if (this.isTouchDevice()) { c = b.jqx.mobile.getTouchEventName("touchstart") } this.removeHandler(this.host, "dragstart." + this.element.id); this.removeHandler(this.host, "keydown"); if (this.table) { this.removeHandler(this.table, "mouseleave"); this.removeHandler(this.table, "mousemove"); this.removeHandler(this.table, c); this.removeHandler(this.table, "selectstart." + this.element.id); if (b.jqx.browser.msie && b.jqx.browser.version < 9) { this.removeHandler(this.table, "dblclick") } } }, _addHandlers: function () { var e = this; this._mousewheelfunc = this._mousewheelfunc || function (h) { e.wheel(h, e); return false }; this.addHandler(this.host, "dragstart." + this.element.id, function (h) { return false }); this.addHandler(this.table, "selectstart." + this.element.id, function (h) { if (e.enableBrowserSelection) { return true } if (e.filterable) { if (b(h.target).ischildof(e.filterrow)) { return true } } if (e.rowDetails) { if (b(h.target).parents("[data-role=details]").length > 0) { return true } } if (undefined == e.editKey) { return false } }); this.addHandler(b(window), "jqxReady." + this.element.id, function () { e._updatecolumnwidths(); e.refresh() }); if (this.editable) { this.addHandler(b(document), "mousedown.gridedit" + this.element.id, function (j) { if (e.editable && e.editSettings.saveOnBlur) { if (e.editKey != null) { if (!e.vScrollInstance.isScrolling() && !e.vScrollInstance.isScrolling()) { var r = e.host.coord(); var o = e.host.width(); var k = e.host.height(); var t = false; var h = false; var s = false; if (j.pageY < r.top || j.pageY > r.top + k) { t = true; h = true } if (j.pageX < r.left || j.pageX > r.left + o) { t = true; s = true } if (t) { var l = function (x) { var w = b(x.children()[0]).data(); if (w && !w.jqxWidget) { w = x.data() } if (!w) { w = x.data() } if (w.jqxWidget && w.jqxWidget.container && w.jqxWidget.container[0].style.display == "block") { var i = w.jqxWidget; var y = i.container.coord().top; var v = i.container.coord().top + i.container.height(); if (h && (j.pageY < y || j.pageY > v)) { t = true; i.close(); return true } else { return false } } }; var q = e._editors; if (q) { for (var m = 0; m < q.length; m++) { var n = q[m].editor; var u = l(n); var p = n.attr("aria-owns"); if (p) { if (p == document.activeElement.id) { return true } if (b(document.activeElement).ischildof(b("#" + p))) { return true } } else { p = n.children().attr("aria-owns"); if (p) { if (p == document.activeElement.id) { return true } if (b(document.activeElement).ischildof(b("#" + p))) { return true } } } if (u === false) { return } } } } if (t) { e.endroweditbykey(e.editKey) } } } } }) } this.removeHandler(this.host, "mousewheel", this._mousewheelfunc); this.addHandler(this.host, "mousewheel", this._mousewheelfunc); this.addHandler(this.host, "focus", function (h) { if (h.preventDefault) { } }); this.vScrollInstance.valueChanged = function (h) { if (e._timer) { clearTimeout(e._timer) } e._timer = setTimeout(function () { if (e.table) { e.table[0].style.top = 0 - e.vScrollInstance.value + "px" } }, 5) }; this.hScrollInstance.valueChanged = function (h) { if (e._timer) { clearTimeout(e._timer) } e._timer = setTimeout(function () { if (e.table) { e._renderhorizontalscroll() } }, 5) }; var d = "mousedown"; if (this.isTouchDevice()) { d = b.jqx.mobile.getTouchEventName("touchend"); if (b.jqx.browser.msie && b.jqx.browser.version < 10) { d = "mousedown" } } var g = function (r, q) { var l = null; var m = e._table.coord(); var t = m.top; var z = m.left; var A = e._table[0].rows; for (var n = 0; n < A.length; n++) { var w = A[n]; var v = w.cells; for (var o = 0; o < v.length; o++) { var s = v[o]; var k = s.offsetLeft + z; var p = s.offsetTop + t; var h = s.offsetWidth; var u = s.offsetHeight; if (h === 0 || u === 0) { continue } if (p <= q && q < p + u) { if (k <= r && r < k + h) { l = s; break } } else { break } } } return l }; var c = function () { if (e.hoveredRow) { var i = e.hoveredRow[0].cells; var h = function (l) { for (var m = 0; m < l.length; m++) { var k = l[m]; var n = k.className; n = n.replace(" " + e.toTP("jqx-fill-state-hover"), ""); n = n.replace(" " + e.toTP("jqx-grid-cell-hover"), ""); k.className = n } }; h(i); if (e._pinnedTable && i.length > 0) { var j = e._pinnedTable[0].rows[e.hoveredRow[0].rowIndex].cells; h(j) } } e.hoveredRow = null }; this.addHandler(this.table, "mouseleave", function (h) { c(); if (e.wrapper) { e.wrapper.parent().removeAttr("tabindex", 0); e.wrapper.removeAttr("tabindex", 1); e.content.removeAttr("tabindex", 2) } }); var f = function (n) { if (!e.enableHover) { return true } e.hoveredRow = n; if (!n) { return true } var k = n[0].cells; var m = e.rowDetails && !e.treeGrid; var p = m && !e.treeGrid ? 1 : 0; var j = 0; if (p > 0 && e.rtl) { p = 0; j = 1 } for (var l = p; l < k.length - j; l++) { var h = k[l]; h.className += " " + e.toTP("jqx-fill-state-hover") + " " + e.toTP("jqx-grid-cell-hover") } if (e._pinnedTable) { if (e._pinnedTable[0].rows.length) { var o = e._pinnedTable[0].rows[e.hoveredRow[0].rowIndex].cells; for (var l = p; l < o.length - j; l++) { var h = o[l]; h.className += " " + e.toTP("jqx-fill-state-hover") + " " + e.toTP("jqx-grid-cell-hover") } } } }; if (e.isTouchDevice()) { e.enableHover = false } this.addHandler(this.table, "mousemove", function (i) { var h = i.pageX; var l = i.pageY; if (e.disabled) { return true } if (!e.enableHover) { return true } if (e.hScrollInstance.isScrolling() || e.vScrollInstance.isScrolling()) { return true } var k = g(h, l); if (!k) { return true } var j = b(k).parent(); c(); if (e.rowDetails && e.treeGrid) { if (j.attr("data-role") == "row-details") { return true } } if (e.renderedRecords && e.renderedRecords.length === 0) { return true } if (e.editKey != null) { if (e.editKey === j.attr("data-key")) { return true } } f(j); return true }); this.addHandler(this.host, "keydown", function (h) { return e._handleKey(h) }); if (b.jqx.browser.msie && b.jqx.browser.version < 9) { this.addHandler(this.table, "dblclick", function (h) { e.table.trigger("mousedown", h) }) } this.addHandler(this.table, d, function (A) { var C = A.target; var p = null; if (e.disabled) { return true } var h = e.table.coord(); var r = A.pageX; var q = A.pageY; if (b.jqx.browser.msie && b.jqx.browser.version < 9) { if (arguments && arguments.length == 2) { r = arguments[1].pageX; q = arguments[1].pageY } } if (e.isTouchDevice()) { var D = b.jqx.position(A); r = D.left; q = D.top; if (isNaN(r) || isNaN(q)) { var D = b.jqx.position(A.originalEvent); r = D.left; q = D.top } } p = g(r, q); var o = b(p).parent(); var E = o.attr("data-key"); if (e.rowDetails && e.treeGrid) { if (o.attr("data-role") == "row-details") { return true } } var u = function () { if (!e.enableBrowserSelection) { if (A.preventDefault) { A.preventDefault() } A.stopPropagation() } e.host.focus() }; if (E !== undefined) { var l = b(p).index(); var j = e.columns.records[l]; if (E == e.editKey) { if (e.editSettings.editSingleCell) { if (e.clickedTD == p) { return true } else { if (e.editKey != null && e.editSettings.saveOnSelectionChange) { var t = e.endroweditbykey(e.editKey); if (!t) { return true } } } } else { return true } } else { if (e.editKey != null && e.editSettings.saveOnSelectionChange) { var t = e.endroweditbykey(e.editKey); if (!t) { return true } } } e.clickedTD = p; var k = e.rowinfo[E]; if (k && k.group) { return true } var z = false; if (k) { var B = e.getrowdisplayindex(k.row); var s = e.getrowindex(k.row); e._raiseEvent("rowClick", { index: B, boundIndex: s, key: E, row: k.row, originalEvent: A, dataField: j.datafield }); var n = new Date().getTime(); var v = 300; if (!e.clickTime) { e.clickTime = new Date() } if (e._lastSelectedKey == E && (n - e.clickTime.getTime() < v)) { e._raiseEvent("rowDoubleClick", { index: B, boundIndex: s, key: E, row: k.row, originalEvent: A, dataField: j.datafield }); z = true; if (A.preventDefault) { A.preventDefault() } } } e.clickTime = new Date(); if (p.className.indexOf("jqx-grid-group") >= 0) { if (!k.expanded) { e.showdetailsbykey(E) } else { e.hidedetailsbykey(E) } } else { if (A.target && A.target.className.indexOf && A.target.className.indexOf("jqx-grid-group") >= 0 && e.treeGrid) { if (!k.expanded) { e.treeGrid.expandRow(E) } else { e.treeGrid.collapseRow(E) } f(e._getuirow(E)); if (A.stopPropagation) { A.stopPropagation() } if (A.preventDefault) { A.preventDefault() } } else { if (A.target && A.target.className.indexOf && A.target.className.indexOf("checkbox") >= 0 && e.treeGrid) { if (!k.checked) { e.treeGrid.checkRow(E) } else { e.treeGrid.uncheckRow(E) } f(e._getuirow(E)); if (A.stopPropagation) { A.stopPropagation() } } else { var l = b(p).index(); var j = e.columns.records[l]; if (A.stopPropagation) { A.stopPropagation() } if (e.editable && e.editKey == null) { if (e._lastSelectedKey == E && e.editSettings.editOnDoubleClick && z) { var t = e.beginroweditbykey(E, j); return true } } if (e.isTouchDevice()) { if (e.scrolled && new Date() - e.scrolled < 500) { if (!e.enableBrowserSelection) { if (A.preventDefault) { A.preventDefault() } } return false } } if (e.selectionMode === "singlerow" && e.selectionMode !== "custom") { e.selectrowbykey(E, "mouse", false); e._lastSelectedKey = E; e._updateSelection(); if (A.preventDefault) { A.preventDefault() } u(); return true } else { if (e.selectionMode !== "custom") { if (!A.ctrlKey && !A.metaKey) { e.clearSelection(false) } if (A.shiftKey) { if (e._lastSelectedKey) { var k = e.rowinfo[e._lastSelectedKey]; e._doSelection(e._lastSelectedKey, true, false); var i = b(e._table.children()[1]).children(("[data-key=" + e._lastSelectedKey + "]")); var m = i.index(); var w = o.index(); e._selectRange(w, m); e.selectrowbykey(E, "mouse", false); e._updateSelection(); if (A.preventDefault) { A.preventDefault() } u(); return true } } } e._lastSelectedKey = E; e.clickTime = new Date(); if (e.selectionMode !== "custom") { if (k) { if (k.selected) { e.unselectrowbykey(E, "mouse", false) } else { e.selectrowbykey(E, "mouse", false) } u() } } else { return true } e._updateSelection(); if (!e.enableBrowserSelection) { if (A.preventDefault) { A.preventDefault() } } return true } } } } } }) }, _updateSelection: function () { var l = this; var r = b(l._table.children()[1]).children(); var n = l._pinnedTable ? b(l._pinnedTable.children()[1]).children() : null; var e = l.rowDetails && !l.treeGrid; var d = e ? 1 : 0; var f = 0; if (d > 0 && l.rtl) { d = 0; f = 1 } for (var h = 0; h < r.length; h++) { var q = r[h].cells; if (n) { var c = n[h].cells } var p = null; if (r[h].getAttribute) { p = r[h].getAttribute("data-key") } if (l.rowinfo[p] && l.selectionMode !== "none") { if (l.rowinfo[p].selected) { for (var g = d; g < q.length - f; g++) { var o = q[g]; b(o).addClass(l.toTP("jqx-grid-cell-selected") + " " + l.toTP("jqx-fill-state-pressed")); if (c) { b(c[g]).addClass(l.toTP("jqx-grid-cell-selected") + " " + l.toTP("jqx-fill-state-pressed")) } } } else { for (var g = d; g < q.length - f; g++) { var o = q[g]; if (c) { var k = c[g] } var m = o.className; m = m.replace(" jqx-fill-state-pressed", ""); m = m.replace(" jqx-fill-state-pressed-" + l.theme, ""); m = m.replace(" jqx-grid-cell-selected", ""); m = m.replace(" jqx-grid-cell-selected-" + l.theme, ""); o.className = m; if (k) { k.className = m } } } } } }, _selectRange: function (f, e) { var c = b(b(this._table.children()[1]).children()[e]); var j = this; if (f > e) { var h = e; var d = c; while (h < f) { var d = d.next(); var g = d.attr("data-key"); j._doSelection(g, true, false); h++ } } else { if (f < e) { var h = e; var d = c; while (h > f) { var d = d.prev(); var g = d.attr("data-key"); this._doSelection(g, true, false); h-- } } } }, _getuikey: function (d, g) { var f = null; var e = b(this._table.children()[1]).children(); f = b(e[d]).attr("data-key"); if (b(e[d]).attr("data-role")) { var c = b(e[d]); if (g == "next") { while (c) { c = c.next(); if (c) { var h = c.attr("data-role"); if (!h) { f = c.attr("data-key"); return f } } } } else { if (g == "prev") { while (c) { c = c.prev(); if (c) { var h = c.attr("data-role"); if (!h) { f = c.attr("data-key"); return f } } } } } return null } return f }, getRows: function () { return this.source.records }, getView: function () { var d = this; var e = this._names(); var f = new Array(); var c = function (k, h) { if (!h) { return } for (var j = 0; j < h.length; j++) { if (!h[j]) { continue } if (h[j]._visible !== false) { var g = b.extend({}, h[j]); k.push(g); if (h[j][e.expanded]) { g.records = new Array(); c(g.records, h[j].records) } else { if (d.dataview.filters.length > 0) { g.records = new Array(); c(g.records, h[j].records) } } } } }; c(f, this.dataViewRecords); return f }, getKeys: function () { var d = new Array(); var e = this.source.records; for (var c = 0; c < e.length; c++) { d.push(e[c].uid) } return d }, getKey: function (c) { var d = this.getRows(); if (d) { return d[c].uid } else { return -1 } }, _getkey: function (e) { if (this._loading) { throw new Error("jqxDataTable: " + this.loadingErrorMessage); return false } var f = null; var d = function () { var l = b(this._table.children()[1]).children(); var k = null; var n = 0; if (this.pageable) { n -= this.dataview.pagenum * this.dataview.pagesize } if (this.groups.length > 0) { var h = 0; for (var j = 0; j < l.length; j++) { var o = b(l[j]); var m = o.children()[0].getAttribute("colspan"); if (m > 0) { continue } if (h === n + e) { k = o.attr("data-key"); return k } h++ } return k } if (this.rowDetails) { var h = 0; for (var j = 0; j < l.length; j++) { if (h === e + n) { k = b(l[j]).attr("data-key"); return k } if (j % 2 == 1) { h++ } } } else { k = b(l[n + e]).attr("data-key") } return k }; f = d.call(this); if (f == null) { if (this.pageable) { var c = Math.floor(e / this.dataview.pagesize); if (this.dataview.pagenum != c) { var g = this.getRows()[e]; if (g && g.uid != null) { return g.uid } else { if (isNaN(c)) { return null } this.goToPage(c); f = d.call(this) } } } } return f }, _getuirow: function (g) { try { var c = b(this._table.children()[1]).children(("[data-key=" + g + "]")); if (c.length > 0) { return c } } catch (e) { var d = b(this._table.children()[1]).children(); for (var f = 0; f < d.length; f++) { var j = d[f]; var h = j.getAttribute("data-key"); if (g == h) { return b(j) } } return null } return null }, _getpinneduirow: function (g) { if (!this._pinnedTable) { return null } try { var c = b(this._pinnedTable.children()[1]).children(("[data-key=" + g + "]")); if (c.length > 0) { return c } } catch (e) { var d = b(this._pinnedTable.children()[1]).children(); for (var f = 0; f < d.length; f++) { var j = d[f]; var h = j.getAttribute("data-key"); if (g == h) { return b(j) } } return null } return null }, _names: function () { var d = { leaf: "leaf", parent: "parent", expanded: "expanded", checked: "checked", selected: "selected", level: "level", icon: "icon", data: "data" }; if (!this.source || (this.source && !this.source._source.hierarchy)) { return d } var c = this.source._source.hierarchy.reservedNames; if (!c) { return d } return c }, _getMatches: function (f, g) { if (f == undefined || f.length == 0) { return -1 } var c = this.renderedRecords; if (g != undefined) { c = c.slice(g) } var e = 0; if (this.rowDetails && !this.treeGrid) { e++ } if (e < this.columns.records.length) { var d = this.columns.records[e].datafield } else { new Array() } var h = new Array(); b.each(c, function (k) { var l = this[d]; if (!l) { l = "" } var j = b.jqx.string.startsWithIgnoreCase(l.toString(), f); if (j) { h.push(this.uid) } }); return h }, _handleKey: function (X) { if (this._loading) { return true } if (b(X.target).ischildof(this.filter)) { return true } if (b(X.target).ischildof(this.toolbar)) { return true } if (b(X.target).ischildof(this.statusbar)) { return true } var T = this._names(); var I = this; var s = X.charCode ? X.charCode : X.keyCode ? X.keyCode : 0; var n = this._lastSelectedKey; var V = this.rowinfo[n]; var v = this._getuirow(n); var x = X.shiftKey && this.selectionMode != "singlerow"; var Q = X.ctrlKey || X.metaKey; if (!v) { return } if (this.handleKeyboardNavigation) { var u = this.handleKeyboardNavigation(s); if (u) { return true } } if (this.editable && this.editKey == undefined && s === 113 && this.editSettings.editOnF2) { this.beginroweditbykey(v.attr("data-key")) } if (this.editKey == undefined) { if (!Q && !x && this.incrementalSearch && (!(s >= 33 && s <= 40))) { var z = -1; if (!this._searchString) { this._searchString = "" } if ((s == 8 || s == 46) && this._searchString.length >= 1) { this._searchString = this._searchString.substr(0, this._searchString.length - 1) } var e = String.fromCharCode(s); var H = (!isNaN(parseInt(e))); var J = false; if ((s >= 65 && s <= 97) || H || s == 8 || s == 32 || s == 46) { if (!X.shiftKey) { e = e.toLocaleLowerCase() } if (s != 8 && s != 32 && s != 46) { if (!(this._searchString.length > 0 && this._searchString.substr(0, 1) == e)) { this._searchString += e } } if (s == 32) { this._searchString += " " } this._searchTime = new Date(); var n = this.getSelection(); if (n.length >= 1) { var t = n[0].uid; var C = -1; for (var S = 0; S < this.renderedRecords.length; S++) { if (this.renderedRecords[S].uid == t) { C = S; break } } var B = this._getMatches(this._searchString, C); if (B.length == 0 || (B.length > 0 && B[0] == t)) { var B = this._getMatches(this._searchString) } } else { var B = this._getMatches(this._searchString) } if (B.length > 0) { var n = this.getSelection(); if (n.length >= 1) { var c = B.indexOf(n[0].uid); if (c == -1) { this.clearSelection(false); this.selectrowbykey(B[0]) } else { var h = c + 1; if (h >= B.length) { h = 0 } this.clearSelection(false); this.selectrowbykey(B[h]) } } else { this.clearSelection(false); this.selectrowbykey(B[0]) } this._lastSearchString = this._searchString } } if (this._searchTimer != undefined) { clearTimeout(this._searchTimer) } if (s == 27 || s == 13) { this._searchString = ""; this._lastSearchString = "" } this._searchTimer = setTimeout(function () { I._searchString = ""; I._lastSearchString = "" }, 500); if (z >= 0) { return } if (J) { return false } } } if (this.editKey != undefined) { if (s === 27 && this.editSettings.cancelOnEsc) { this.endroweditbykey(this.editKey, true) } else { if (s === 13 && this.editSettings.saveOnEnter) { if (X.target && X.target.nodeName.toLowerCase() != "div" && X.target.nodeName.toLowerCase() != "input") { return true } this.endroweditbykey(this.editKey, false) } else { if (this.editSettings.editSingleCell) { if (this.editColumn) { var P = this.columns.records.indexOf(this.editColumn); if (s == 9 && P < this.columns.records.length - 1 && !X.shiftKey) { var M = this.editKey; var y = null; for (var S = P + 1; S < this.columns.records.length; S++) { if (this.columns.records[S].editable && !this.columns.records[S].hidden) { y = this.columns.records[S]; break } } if (y) { this.endroweditbykey(this.editKey, false); this.beginroweditbykey(M, y) } } else { if (s == 9 && X.shiftKey && P > 0) { var M = this.editKey; var E = null; for (var S = P - 1; S >= 0; S--) { if (this.columns.records[S].editable && !this.columns.records[S].hidden) { E = this.columns.records[S]; break } } if (E) { this.endroweditbykey(this.editKey, false); this.beginroweditbykey(M, E) } } } if (s == 9) { var o = this.rowinfo[this.editKey]; var C = this.getrowindex(o); var v = this._getuirow(this.editKey); if (!X.shiftKey && !y) { var N = null; for (var S = 0; S < this.columns.records.length; S++) { if (this.columns.records[S].editable && !this.columns.records[S].hidden) { N = this.columns.records[S]; break } } if (N) { while (v) { v = v.next(); if (v) { var D = v.attr("data-role"); if (!D) { var F = v.attr("data-key"); break } } } if (F) { this.clearSelection(false); this._lastSelectedKey = F; var o = this.rowsByKey[F]; var C = this.getrowindex(o); var L = this.getrowdisplayindex(o); this._raiseEvent("rowSelect", { key: F, index: L, boundIndex: C, row: this.rowsByKey[F] }); var q = this.endroweditbykey(this.editKey, false); if (q) { this._doSelection(F, true, true); this.beginroweditbykey(F, N) } else { this.beginroweditbykey(this.editKey, N) } } } } else { if (!E && X.shiftKey) { var N = null; for (var S = this.columns.records.length - 1; S >= 0; S--) { if (this.columns.records[S].editable && !this.columns.records[S].hidden) { N = this.columns.records[S]; break } } if (N) { while (v) { v = v.prev(); if (v) { var D = v.attr("data-role"); if (!D) { var F = v.attr("data-key"); break } } } if (F) { this.clearSelection(false); this._lastSelectedKey = F; var o = this.rowsByKey[F]; var C = this.getrowindex(o); var L = this.getrowdisplayindex(o); this._raiseEvent("rowSelect", { key: F, index: L, boundIndex: C, row: this.rowsByKey[F] }); this.endroweditbykey(this.editKey, false); this._doSelection(F, true, true); this.beginroweditbykey(F, N) } } } } return false } } } } } return true } if (X.ctrlKey || X.metaKey) { var f = String.fromCharCode(s).toLowerCase(); if (f == "c" || f == "x") { var n = this.getSelection(); if (n.length >= 1) { var w = ""; for (var K = 0; K < this.renderedRecords.length; K++) { var Y = this.renderedRecords[K]; for (var S = 0; S < n.length; S++) { var o = n[S]; if (o.uid === Y.uid) { for (var R = 0; R < this.columns.records.length; R++) { var A = this.getCellTextByKey(o.uid, this.columns.records[R].displayfield); w += A; if (R < this.columns.records.length - 1) { w += "\t" } } w += "\r\n"; break } } } if (w != "") { w = w.substring(0, w.length - 1) } if (window.clipboardData) { window.clipboardData.setData("Text", w) } else { var O = b('<textarea style="position: absolute; left: -1000px; top: -1000px;"/>'); O.val(w); b("body").append(O); O.select(); setTimeout(function () { document.designMode = "off"; O.select(); O.remove() }, 100) } } } } if (s === 32 && this.treeGrid) { if (this.treeGrid.checkboxes) { var n = this.getSelection(); if (n.length > 1) { for (var S = 0; S < n.length; S++) { var G = n[S].uid; if (this.rowinfo[G].checked) { this.treeGrid.uncheckRow(G, false) } else { this.treeGrid.checkRow(G, false) } } this._renderrows(); return false } else { var t = v.attr("data-key"); if (t) { if (this.rowinfo[t].checked) { this.treeGrid.uncheckRow(t) } else { this.treeGrid.checkRow(t) } return false } } } } var d = v.index(); var W = function (Z) { var j = null; var p = b(I._table.children()[1]).children().length - 1; var i = b(b(I._table.children()[1]).children()[p]); var aa = i.attr("data-role"); if (!aa) { j = i.attr("data-key") } else { while (i) { i = i.prev(); if (i) { var aa = i.attr("data-role"); if (!aa) { j = i.attr("data-key"); break } } } } if (Z == "all") { return { row: i, key: j } } return j }; var g = function (p) { var j = null; var i = b(b(I._table.children()[1]).children()[0]); var Z = i.attr("data-role"); if (!Z) { j = i.attr("data-key") } else { while (i) { i = i.next(); if (i) { var Z = i.attr("data-role"); if (!Z) { j = i.attr("data-key"); break } } } } if (p == "all") { return { row: i, key: j } } return j }; var t = null; var l = function () { if (!Q && !x) { I.clearSelection(false) } if (s == 33 || s == 37) { var j = d; t = I._getuikey(j, "prev"); if (!t) { t = g() } } else { if (s == 34 || s == 39) { var j = d; t = I._getuikey(j, "next"); if (!t) { t = W() } } else { if (s == 38) { t = W() } else { if (s == 40) { t = g() } } } } I._lastSelectedKey = t; var p = I.rowsByKey[t]; var j = I.getrowindex(p); var i = I.getrowdisplayindex(p); I._raiseEvent("rowSelect", { key: t, index: i, boundIndex: j, row: I.rowsByKey[t] }); I._doSelection(t, true, true); I.host.focus() }; var k = function () { I.clearSelection(false); var i = g(); if (x || Q) { I._selectRange(v.index(), 0) } else { I._lastSelectedKey = i } I.selectrowbykey(i, "keyboard") }; var r = function () { I.clearSelection(false); var i = W("all"); var j = i.key; if (x || Q) { I._selectRange(v.index(), i.row.index()) } else { I._lastSelectedKey = j } I.selectrowbykey(j, "keyboard") }; if (this.treeGrid && this.rtl) { if (s == 37) { s = 39 } else { if (s == 39) { s = 37 } } } if (s == 36 || (Q && s == 38)) { k(); return false } else { if (s == 35 || (Q && s == 40)) { r(); return false } else { if (s == 33 || s == 37) { var t = v.attr("data-key"); if (this.rowDetails && s == 37 && !this.treeGrid) { this.hidedetailsbykey(t); return false } else { if (this.treeGrid && s == 37) { if (this.rowinfo[t].row && !this.rowinfo[t].row[T.parent] && !this.rowinfo[t][T.leaf] && !this.rowinfo[t].expanded) { return false } if (this.rowinfo[t].expanded && !this.rowinfo[t][T.leaf]) { this.treeGrid.collapseRow(t); return false } else { if (this.rowinfo[t].row && this.rowinfo[t].row[T.parent]) { t = this.rowinfo[t].row[T.parent].uid } } if (this.rowinfo[t][T.leaf]) { return false } } } if (this.pageable && !this.treeGrid) { if (!this.rtl) { this.goToPrevPage(l) } else { this.goToNextPage(l) } return false } if (this.treeGrid && this.pageable && s == 33) { this.goToPrevPage(l); return false } } else { if (s == 34 || s == 39) { var t = v.attr("data-key"); if (this.rowDetails && s == 39 && !this.treeGrid) { this.showdetailsbykey(t); return false } else { if (this.treeGrid && s == 39) { if (this.rowinfo[t][T.leaf]) { return false } if (!this.rowinfo[t].expanded) { this.treeGrid.expandRow(t); return false } else { if (this.rowinfo[t].row && this.rowinfo[t].row.records && this.rowinfo[t].row.records.length > 0) { if (this.dataview.filters.length > 0) { var m = this.rowinfo[t].row.records; for (var S = 0; S < m.length; S++) { if (m[S]._visible) { t = m[S].uid; break } } } else { t = this.rowinfo[t].row.records[0].uid } } } } } if (this.pageable && !this.treeGrid) { if (!this.rtl) { this.goToNextPage(l) } else { this.goToPrevPage(l) } return false } if (this.treeGrid && this.pageable && s == 34) { this.goToNextPage(l); return false } } else { if (s == 38) { while (v) { v = v.prev(); if (v) { var D = v.attr("data-role"); if (!D) { t = v.attr("data-key"); break } } } if (this.pageable && t == null) { this.goToPrevPage(l); return false } } else { if (s == 40) { while (v) { v = v.next(); if (v) { var D = v.attr("data-role"); if (!D) { t = v.attr("data-key"); break } } } if (this.pageable && t == null) { this.goToNextPage(l); return false } } } } } } } if (t != null) { if (!Q && !x) { this.clearSelection(false) } if (this.rowinfo[t]) { if (this.rowinfo[t].selected && (Q || x)) { this._doSelection(this._lastSelectedKey, false, false); this._lastSelectedKey = t; var o = this.rowsByKey[t]; var C = this.getrowindex(o); I._updateSelection(); var L = this.getrowdisplayindex(o); this._raiseEvent("rowUnselect", { key: t, index: L, boundIndex: C, row: o }); return false } } this._lastSelectedKey = t; var o = this.rowsByKey[t]; var C = this.getrowindex(o); this._doSelection(t, true, false); I._updateSelection(); var L = this.getrowdisplayindex(o); this._raiseEvent("rowSelect", { key: t, index: L, boundIndex: C, row: o }); if (this.treeGrid) { if (s == 37) { var v = this._getuirow(t); var U = null; if (v) { var D = v.attr("data-role"); if (!D) { U = v.attr("data-key") } } if (this.pageable && U == null && this.dataview.pagenum > 0) { while (this._getuirow(t) == null && this.dataview.pagenum > 0) { this.goToPrevPage() } } } else { if (s == 39) { var v = this._getuirow(t); var U = null; if (v) { var D = v.attr("data-role"); if (!D) { U = v.attr("data-key") } } if (this.pageable && U == null) { this.goToNextPage() } } } } return false } }, _selection: function (c) { if ("selectionStart" in c[0]) { var h = c[0]; var i = h.selectionEnd - h.selectionStart; return { start: h.selectionStart, end: h.selectionEnd, length: i, text: h.value } } else { var f = document.selection.createRange(); if (f == null) { return { start: 0, end: h.value.length, length: 0 } } var d = c[0].createTextRange(); var g = d.duplicate(); d.moveToBookmark(f.getBookmark()); g.setEndPoint("EndToStart", d); var i = f.text.length; return { start: g.text.length, end: g.text.length + f.text.length, length: i, text: f.text } } }, _doSelection: function (c, e, d) { if (c == null) { this.clearSelection(); return } if (this.selectionMode === "singlerow") { this.clearSelection(false) } var f = this.rowinfo[c]; if (f) { f.selected = e; this.ensurerowvisiblebykey(c) } else { this.ensurerowvisiblebykey(c); var f = this.rowinfo[c]; if (f) { f.selected = e } else { this.rowinfo[c] = { selected: e } } } if (this.selectionMode != "none") { if (d !== false) { this._renderrows() } } }, clearSelection: function (e) { if (this.rowinfo) { var f = this.getRows(); for (var h in this.rowinfo) { var g = this.rowinfo[h]; if (g.selected) { g.selected = false; var d = f.indexOf(g.row); var c = this.getrowdisplayindex(g.row); this._raiseEvent("rowUnselect", { key: h, index: c, boundIndex: d, row: g.row }) } } } if (e !== false) { this._renderrows() } }, exportData: function (t) { if (!b.jqx.dataAdapter.ArrayExporter) { if (!this.treeGrid) { throw "jqxDataTable: Missing reference to jqxdata.export.js!" } throw "jqxTreeGrid: Missing reference to jqxdata.export.js!" } var h = this.exportSettings.columnsHeader; if (h == undefined) { h = true } var w = this.exportSettings.hiddenColumns; if (w == undefined) { w = false } var P = this.exportSettings.serverURL; var I = this.exportSettings.characterSet; var ac = this.exportSettings.collapsedRecords; if (ac == undefined) { ac = false } var F = this.exportSettings.fileName; if (F === undefined) { F = this.treeGrid ? "jqxTreeGrid_Data" : "jqxDataTable_Data" } var s = this; var Y = this.getRows(); if (this.exportSettings.recordsInView == true) { Y = this.getView() } if (this.treeGrid && this.treeGrid.virtualModeCreateRecords) { var Y = this.treeGrid.getRows() } if (this.groups && this.groups.length > 0) { var k = this.source.getGroupedRecords(this.groups, "records", "label", null, "data", null, "parent", Y); var m = function (o, ae) { for (var ag = 0; ag < o.length; ag++) { var j = b.extend({}, o[ag]); ae.push(j); if (j.records && j.records.length > 0) { var ah = m(j.records, new Array()); for (var af = 0; af < ah.length; af++) { if (ah[af].leaf) { ae.push(ah[af]) } else { ae.push(ah[af]) } } } } return ae }; var S = m.call(this, k, new Array()); Y = S } if (Y.length == 0) { throw "No data to export." } this.exporting = true; if (this.altRows) { this._renderrows() } var p = new Array(); for (var X = 0; X < this.columns.records.length; X++) { if (!w && this.columns.records[X].hidden) { continue } p.push(b.extend({}, this.columns.records[X])) } if (this.groups && this.groups.length > 0) { if (p.length > 0) { var aa = this._names(); for (var X = 0; X < Y.length; X++) { if (!Y[X][aa.leaf]) { if (!s.rtl) { Y[X][p[0].displayfield] = Y[X].label } else { Y[X][p[p.length - 1].displayfield] = Y[X].label } } } } } var g = 0; if (this.treeGrid) { var L = this.treeGrid.getRows(); if (this.exportSettings.recordsInView == true) { L = this.getView() } var aa = this._names(); var d = function (ae) { for (var af = 0; af < ae.length; af++) { var j = ae[af]; var o = j[aa.expanded] || (!j[aa.expanded] && ac); g = Math.max(g, 1 + j[aa.level]); if (j.records && j.records.length > 0 && o) { d(ae[af].records) } } }; d(L); if (t != "xml" && t != "json") { var u = p.length; for (var X = 0; X < g; X++) { var Q = new a(this, this); Q.width = this.indentWidth; Q.datafield = "Level" + X; Q.displayfield = "Level" + X; Q.align = "center"; Q.cellsalign = "center"; Q.text = ""; if (!this.rtl) { p.splice(X, 0, Q) } else { p.splice(u, 0, Q) } } var y = new Array(); var x = this.source._source.hierarchy && this.source._source.hierarchy.groupingDataFields ? true : false; var U = function (af) { for (var ah = 0; ah < af.length; ah++) { var o = b.extend({}, af[ah]); for (var ag = 0; ag < o[aa.level]; ag++) { o["Level" + ag] = "" } var ae = o[aa.expanded] || (!o[aa.expanded] && ac); if (t == "xls" || t == "html" || t == "pdf") { if (o.records && o.records.length > 0) { o["Level" + o[aa.level]] = ae ? "-" : "+" } else { o["Level" + o[aa.level]] = "" } } else { o["Level" + o[aa.level]] = "" } if (o[aa.leaf]) { o["Level" + o[aa.level]] = "" } for (var ag = o[aa.level] + 1; ag < g; ag++) { o["Level" + ag] = "" } if (x && !o[aa.leaf]) { if (!s.rtl) { o[p[g].displayfield] = o.label } else { o[p[p.length - g - 1].displayfield] = o.label } } if (o.aggregate) { var aj = t == "xls" ? "_AG" : ""; for (var ag = g; ag < p.length; ag++) { var ai = ag; if (s.rtl) { ai = p.length - ag - 1 } if (o[p[ai].displayfield] != undefined) { o[p[ai].displayfield] = aj + o[p[ai].displayfield] } } } y.push(o); if (ae && !o[aa.leaf]) { U(o.records) } } }; U(L); Y = y } else { Y = L } } var f = w != undefined ? w : false; var Z = {}; var C = {}; var l = []; var M = this.host.find(".jqx-grid-cell:first"); var n = this.host.find(".jqx-grid-cell-alt:first"); var ad = this.toThemeProperty; M.removeClass(ad("jqx-grid-cell-selected")); M.removeClass(ad("jqx-fill-state-pressed")); n.removeClass(ad("jqx-grid-cell-selected")); n.removeClass(ad("jqx-fill-state-pressed")); M.removeClass(ad("jqx-grid-cell-hover")); M.removeClass(ad("jqx-fill-state-hover")); n.removeClass(ad("jqx-grid-cell-hover")); n.removeClass(ad("jqx-fill-state-hover")); var E = "cell"; var B = 1; var K = "column"; var z = 1; var A = []; for (var V = 0; V < p.length; V++) { var Q = p[V]; if (Q.cellclassname != "") { Q.customCellStyles = new Array(); if (typeof Q.cellclassname == "string") { Q.customCellStyles.push(Q.cellclassname) } else { for (var X = 0; X < Y.length; X++) { var c = X; var W = Q.cellclassname(c, Q.displayfield, Y[X][Q.displayfield], Y[X]); if (W) { Q.customCellStyles[X] = W } } } } } b.each(p, function (ag) { var aj = ag; if (s.treeGrid) { if (ag >= g) { aj = p.length - g - 1 } else { if (g > 0 && ag < g) { aj = 0 } } } var ak = b(s._table[0].rows[0].cells[aj]); if (s._table[0].rows.length > 1) { var j = b(s._table[0].rows[1].cells[aj]); if (j.length == 0) { var j = b(s._table[0].rows[1].cells[0]) } } if (ak.length == 0) { var ak = b(s._table[0].rows[0].cells[0]) } var af = this; var ah = function (am) { var ao = s.toThemeProperty; am.removeClass(ao("jqx-cell")); am.removeClass(ao("jqx-grid-cell-selected")); am.removeClass(ao("jqx-fill-state-pressed")); am.removeClass(ao("jqx-grid-cell-hover")); am.removeClass(ao("jqx-fill-state-hover")); if (af.customCellStyles) { for (var an in af.customCellStyles) { am.removeClass(af.customCellStyles[an]) } } }; ah(ak); if (j) { ah(j) } if (this.displayfield == null) { return true } if (s.showAggregates) { if (s.getcolumnaggregateddata) { A.push(s.getcolumnaggregateddata(this.displayfield, this.aggregates, true, Y)) } } var ai = s._getexportcolumntype(this); if (this.exportable && (!this.hidden || f)) { Z[this.displayfield] = {}; Z[this.displayfield].text = this.text; Z[this.displayfield].width = parseInt(this.width); if (isNaN(Z[this.displayfield].width)) { Z[this.displayfield].width = 60 } if (Z[this.displayfield].width > 500) { Z[this.displayfield].width = 500 } Z[this.displayfield].formatString = this.cellsFormat; Z[this.displayfield].localization = s.gridlocalization; Z[this.displayfield].type = ai; Z[this.displayfield].cellsAlign = this.cellsalign; Z[this.displayfield].hidden = !h; Z[this.displayfield].index = aj; Z[this.displayfield].maxIndex = p.length } E = "cell" + B; var al = this.element; if (t != "json" && t != "xml") { K = "column" + z; var i = function (o, au, at, am, ar, ao, an, ap, aq) { C[o] = { index: 1 + an, maxIndex: p.length }; if (ao.rtl) { C[o].index = p.length - an } if (t == "html" || t == "xls" || t == "pdf") { if (au) { C[o]["font-size"] = au.css("font-size"); C[o]["font-weight"] = au.css("font-weight"); C[o]["font-style"] = au.css("font-style"); C[o]["background-color"] = ao._getexportcolor(au.css("background-color")); C[o]["color"] = ao._getexportcolor(au.css("color")); C[o]["border-color"] = ao._getexportcolor(au.css("border-top-color")) } if (at) { C[o]["text-align"] = ar.align } else { C[o]["text-align"] = ar.cellsalign; C[o]["formatString"] = ar.cellsFormat; C[o]["dataType"] = ai } if (t == "html" || t == "pdf") { C[o]["border-top-width"] = "0px"; if (!ao.rtl) { C[o]["border-left-width"] = "0px"; C[o]["border-right-width"] = "1px" } else { C[o]["border-left-width"] = "1px"; C[o]["border-right-width"] = "0px"; if (an == p.length - g - 1 && at) { C[o]["border-right-width"] = "1px" } } C[o]["border-bottom-width"] = "1px"; if (au) { C[o]["border-top-style"] = au.css("border-top-style"); C[o]["border-left-style"] = au.css("border-left-style"); C[o]["border-right-style"] = au.css("border-right-style"); C[o]["border-bottom-style"] = au.css("border-bottom-style") } if (at) { if (an == 0 && !ao.rtl) { C[o]["border-left-width"] = "1px" } else { if (an == p.length - 1 && ao.rtl) { C[o]["border-right-width"] = "1px" } } if (au) { C[o]["border-top-width"] = "1px"; C[o]["border-bottom-width"] = au.css("border-bottom-width") } } else { if (an == 0 && !ao.rtl) { C[o]["border-left-width"] = "1px" } else { if (an == p.length - 1 && ao.rtl) { C[o]["border-right-width"] = "1px" } } } if (au) { C[o]["height"] = au.css("height") } if (ao.treeGrid && !at) { if (C[o].index - 1 < g) { if (ao.rtl) { C[o]["border-left-width"] = "0px" } else { C[o]["border-right-width"] = "0px" } } else { if (C[o].index - 1 == g) { if (!ao.rtl) { C[o]["border-left-width"] = "0px" } else { C[o]["border-right-width"] = "0px" } } } } } } if (ar.exportable && (!ar.hidden || f)) { if (ap == true) { if (!Z[ar.displayfield].customCellStyles) { Z[ar.displayfield].customCellStyles = new Array() } Z[ar.displayfield].customCellStyles[aq] = o } else { if (at) { Z[ar.displayfield].style = o } else { if (!am) { Z[ar.displayfield].cellStyle = o } else { Z[ar.displayfield].cellAltStyle = o } } } } }; i(K, al, true, false, this, s, ag); z++; i(E, ak, false, false, this, s, ag); if (s.altRows) { E = "cellalt" + B; i(E, j, false, true, this, s, ag) } if (this.customCellStyles) { for (var ae in af.customCellStyles) { ak.removeClass(af.customCellStyles[ae]) } for (var ae in af.customCellStyles) { ak.addClass(af.customCellStyles[ae]); i(E + af.customCellStyles[ae], ak, false, false, this, s, ag, true, ae); ak.removeClass(af.customCellStyles[ae]) } } B++ } }); if (t != "json" && t != "xml") { if (g > 0 && this.treeGrid) { var ab = g + 1; if (this.rtl) { ab = p.length - g } if (C["column" + ab]) { var e = C["column" + ab]; e.merge = g; e["border-left-width"] = "1px"; var H = C["cell" + ab]; for (var X = 0; X < p.length; X++) { var ab = X + 1; if (this.rtl) { ab = p.length - X } C["column" + ab].level = X; C["column" + ab].maxLevel = g; C["cell" + ab].maxLevel = g; var Q = p[X]; if (Q.customCellStyles) { for (var R in Q.customCellStyles) { if (C["cell" + ab + Q.customCellStyles[R]]) { C["cell" + ab + Q.customCellStyles[R]].maxLevel = g } } } if (C["cellalt" + ab]) { C["cellalt" + ab].maxLevel = g } } for (var X = 0; X < g; X++) { var ab = X + 1; var D = X; if (this.rtl) { ab = p.length - X } var r = C["column" + ab]; r.disabled = true; C["cell" + ab].level = D; C["cell" + ab].maxLevel = g; C["column" + ab].level = D; if (C["cellalt" + ab]) { C["cellalt" + ab].level = D; C["cellalt" + ab].maxLevel = g } var Q = p[X]; if (Q.customCellStyles) { for (var R in Q.customCellStyles) { if (C["cell" + ab + Q.customCellStyles[R]]) { C["cell" + ab + Q.customCellStyles[R]].maxLevel = g; C["cell" + ab + Q.customCellStyles[R]].level = D } } } if (t == "html" || t == "pdf" || t == "xls") { r["font-size"] = e["font-size"]; r["font-weight"] = e["font-weight"]; r["font-style"] = e["font-style"]; r["background-color"] = e["background-color"]; r.color = e.color; r["border-color"] = e["border-color"]; if (t == "html" || t == "pdf") { r["border-top-width"] = e["border-top-width"]; r["border-left-width"] = e["border-left-width"]; if (this.rtl) { r["border-right-width"] = e["border-right-width"]; if (X == 0) { r["border-right-width"] = "1px" } } if (X == 0 && !this.rtl) { r["border-left-width"] = "0px" } else { if (X == 0 && this.rtl) { r["border-left-width"] = "0px" } } if (!this.rtl) { r["border-right-width"] = "0px" } else { if (this.rtl) { r["border-left-width"] = "0px" } } r["border-bottom-width"] = "0px"; var r = C["cell" + ab]; if (!this.rtl) { r["border-right-width"] = "0px" } else { if (this.rtl) { r["border-left-width"] = "0px" } } } } } } } } if (this.showAggregates) { var G = []; var N = t == "xls" ? "_AG" : ""; var O = 0; if (this.rowDetails && !this.treeGrid) { O++ } if (A.length > 0) { b.each(p, function (j) { if (this.aggregates) { for (var ae = 0; ae < this.aggregates.length; ae++) { if (!G[ae]) { G[ae] = {} } if (G[ae]) { var af = s._getaggregatename(this.aggregates[ae]); var ag = s._getaggregatetype(this.aggregates[ae]); var o = A[j - O]; if (o) { G[ae][this.displayfield] = N + af + ": " + o[ag] } } } } }); b.each(p, function (j) { for (var o = 0; o < G.length; o++) { if (G[o][this.displayfield] == undefined) { G[o][this.displayfield] = N } } }) } b.each(G, function () { Y.push(this) }) } var J = this; var T = b.jqx.dataAdapter.ArrayExporter(Y, Z, C, P, this.treeGrid && (t == "xml" || t == "json")); if (F == undefined) { this._renderrows(); var q = this.treeGrid && (t == "xml" || t == "json"); var v = T.exportTo(t, this.treeGrid && (t == "xml" || t == "json")); if (this.showAggregates) { b.each(G, function () { Y.pop(this) }) } setTimeout(function () { J.exporting = false }, 50); return v } else { var q = this.treeGrid && (t == "xml" || t == "json"); T.exportToFile(t, F, P, I, q) } if (this.showAggregates) { b.each(G, function () { Y.pop(this) }) } this._renderrows(); setTimeout(function () { J.exporting = false }, 50) }, _getexportcolor: function (l) { var f = l; if (l == "transparent") { f = "#FFFFFF" } if (!f || !f.toString()) { f = "#FFFFFF" } if (f.toString().indexOf("rgb") != -1) { var i = f.split(","); if (f.toString().indexOf("rgba") != -1) { var d = parseInt(i[0].substring(5)); var h = parseInt(i[1]); var j = parseInt(i[2]); var k = parseInt(i[3].substring(1, 4)); var m = { r: d, g: h, b: j }; var e = this._rgbToHex(m); if (d == 0 && h == 0 && j == 0 && k == 0) { return "#ffffff" } return "#" + e } var d = parseInt(i[0].substring(4)); var h = parseInt(i[1]); var j = parseInt(i[2].substring(1, 4)); var m = { r: d, g: h, b: j }; var e = this._rgbToHex(m); return "#" + e } else { if (f.toString().indexOf("#") != -1) { if (f.toString().length == 4) { var c = f.toString().substring(1, 4); f += c } } } return f }, _rgbToHex: function (c) { return this._intToHex(c.r) + this._intToHex(c.g) + this._intToHex(c.b) }, _intToHex: function (d) { var c = (parseInt(d).toString(16)); if (c.length == 1) { c = ("0" + c) } return c.toUpperCase() }, _getexportcolumntype: function (g) { var h = this; var f = "string"; var e = h.source.datafields || ((h.source._source) ? h.source._source.datafields : null); if (e) { var j = ""; b.each(e, function () { if (this.name == g.displayfield) { if (this.type) { j = this.type } return false } }); if (j) { return j } } if (g != null) { if (this.dataview.cachedrecords == undefined) { return f } var c = null; if (!this.virtualmode) { if (this.dataview.cachedrecords.length == 0) { return f } c = this.dataview.cachedrecords[0][g.displayfield]; if (c != null && c.toString() == "") { return "string" } } else { b.each(this.dataview.cachedrecords, function () { c = this[g.displayfield]; return false }) } if (c != null) { if (g.cellsFormat.indexOf("c") != -1) { return "number" } if (g.cellsFormat.indexOf("n") != -1) { return "number" } if (g.cellsFormat.indexOf("p") != -1) { return "number" } if (g.cellsFormat.indexOf("d") != -1) { return "date" } if (g.cellsFormat.indexOf("y") != -1) { return "date" } if (g.cellsFormat.indexOf("M") != -1) { return "date" } if (g.cellsFormat.indexOf("m") != -1) { return "date" } if (g.cellsFormat.indexOf("t") != -1) { return "date" } if (typeof c == "boolean") { f = "boolean" } else { if (b.jqx.dataFormat.isNumber(c)) { f = "number" } else { var i = new Date(c); if (i.toString() == "NaN" || i.toString() == "Invalid Date") { if (b.jqx.dataFormat) { i = b.jqx.dataFormat.tryparsedate(c); if (i != null) { if (i && i.getFullYear()) { if (i.getFullYear() == 1970 && i.getMonth() == 0 && i.getDate() == 1) { var d = new Number(c); if (!isNaN(d)) { return "number" } return "string" } } return "date" } else { f = "string" } } else { f = "string" } } else { f = "date" } } } } } return f }, showDetails: function (c) { var d = this._getkey(c); this.showdetailsbykey(d) }, hideDetails: function (c) { var d = this._getkey(c); this.hidedetailsbykey(d) }, setCellValueByKey: function (D, s, w) { var o = this; var j = this.rowsByKey[D]; var k = this.getrowindex(j); var h = j; if (h != null && h[s] == w) { return false } if (h != null && h[s] === null && w === "") { return } var n = ""; if (h != null && h[s] !== w) { var e = this.getColumn(s); var f = "string"; var A = this.source.datafields || ((this.source._source) ? this.source._source.datafields : null); if (A) { var t = ""; b.each(A, function () { if (this.name == e.displayfield) { if (this.type) { t = this.type } return false } }); if (t) { f = t } } n = h[s]; if (!e.nullable || (w != null && w !== "" && e.nullable && w.label === undefined)) { if (b.jqx.dataFormat.isNumber(n) || f == "number" || f == "float" || f == "int" || f == "decimal" && f != "date") { w = new Number(w); w = parseFloat(w); if (isNaN(w)) { w = 0 } } else { if (b.jqx.dataFormat.isDate(n) || f == "date") { if (w != "") { var z = w; z = new Date(z); if (z != "Invalid Date" && z != null) { w = z } else { if (z == "Invalid Date") { z = new Date(); w = z } } } } } if (h[s] === w) { return } } o.dataview._filteredData = null; o.dataview._sortData = null; o.dataview._sortHierarchyData = null; h[s] = w; if (this.treeGrid) { var r = this.treeGrid.getRow(D); if (r) { r[s] = w } } if (w != null && w.label != null) { var e = this.getColumn(s); h[e.displayfield] = w.label; h[s] = w.value; if (this.treeGrid) { var r = this.treeGrid.getRow(D); if (r) { r[e.displayfield] = w.label; r[s] = w.value } } } } if (this.source && this.source._knockoutdatasource && !this._updateFromAdapter && this.autokoupdates) { if (this.source._source._localdata) { var y = k; var v = this.source._source._localdata()[y]; this.source.suspendKO = true; var l = v; if (l[s] && l[s].subscribe) { if (w != null && w.label != null) { l[e.displayfield](w.label); l[s](w.value) } else { l[s](w) } } else { var A = this.source._source.datafields; var d = null; var B = null; if (A) { b.each(A, function () { if (this.name == s) { B = this.map; return false } }) } if (B == null) { if (w != null && w.label != null) { l[s] = w.value; l[e.displayfield] = w.label } else { l[s] = w } } else { var g = B.split(this.source.mapChar); if (g.length > 0) { var c = l; for (var u = 0; u < g.length - 1; u++) { c = c[g[u]] } c[g[g.length - 1]] = w } } this.source._source._localdata.replace(v, b.extend({}, l)) } this.source.suspendKO = false } } if (this.source.updaterow && (sync == undefined || sync == true)) { var m = false; var q = function (p) { if (false == p) { this.setCellValue(j, s, n, true, false) } }; try { var i = D; m = this.source.updaterow(i, h, q); if (m == undefined) { m = true } } catch (x) { m = false; this.setCellValue(j, s, n); return } } var C = this.getrowdisplayindex(j); var e = this.getColumn(s); this._raiseEvent("cellValueChanged", { value: w, oldValue: n, dataField: s, displayField: e.displayfield, key: D, boundIndex: k, index: C, row: this.rowsByKey[D] }); if (this.editable) { if (this.editKey != null) { return } } this._renderrows() }, setCellValue: function (g, d, f) { if (g == null || d == null) { return false } var c = parseInt(g); var e = this._getkey(c); this.setCellValueByKey(e, d, f) }, getCellText: function (f, d) { if (f == null || d == null) { return false } var c = parseInt(f); var e = this._getkey(c); return this.getCellTextByKey(e, d) }, getCellTextByKey: function (e, d) { if (e == null || d == null) { return null } var c = this.getCellValueByKey(e, d); var f = this.getColumn(d); if (f && f.cellsFormat != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(c)) { c = b.jqx.dataFormat.formatdate(c, f.cellsFormat, this.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(c) || (!isNaN(parseFloat(c)) && isFinite(c))) { c = b.jqx.dataFormat.formatnumber(c, f.cellsFormat, this.gridlocalization) } } } } return c }, getCellValue: function (f, d) { if (f == null || d == null) { return false } var c = parseInt(f); var e = this._getkey(c); return this.getCellValueByKey(e, d) }, getCellValueByKey: function (e, d) { var h = this.rowsByKey[e]; if (!h && this.treeGrid) { h = this.treeGrid.getRow(e) } var c = this.getrowindex(h); var f = h; var g = ""; if (f != null) { return f[d] } return null }, beginRowEdit: function (c) { var d = this._getkey(c); this.beginroweditbykey(d) }, beginCellEdit: function (d, c) { var e = this._getkey(d); var f = this.getColumn(c); this.beginroweditbykey(e, f) }, endCellEdit: function (d, c, e) { this.endRowEdit(d, e) }, endRowEdit: function (c, e) { var d = this._getkey(c); this.endroweditbykey(d, e) }, getrowindex: function (f) { var d = this.getRows().indexOf(f); if (d != -1) { return d } if (this.groups && this.groups.length > 0) { var c = this.getRows(); for (var e = 0; e < c.length; e++) { if (f.originalRecord) { if (c[e].uid == f.originalRecord.uid) { d = e; break } } else { if (c[e].uid == f.uid) { d = e; break } } } } return d }, getrowdisplayindex: function (g) { if (this.treeGrid) { return -1 } var c = this.getView(); var e = c.indexOf(g); if (e != -1) { return e } if (g == undefined) { return e } var d = c; for (var f = 0; f < d.length; f++) { if (d[f].uid == g.uid || (g.originalRecord && d[f].uid == g.originalRecord.uid)) { e = f; break } } return e }, beginroweditbykey: function (G, q) { if (this.beginEdit) { var A = this.beginEdit(G, q); if (A === false) { return false } } var D = !this.treeGrid ? this.groups.length : this.source._source.hierarchy && this.source._source.hierarchy.groupingDataFields ? this.source._source.hierarchy.groupingDataFields.length : 0; if (D > 0) { var m = this.rowsByKey[G]; if (this.treeGrid) { var m = this.treeGrid.getRow(G) } if (m.level < D) { return false } } if (this._lastSelectedKey == null) { this.selectrowbykey(G) } if (this.editKey === G && this.editKey != undefined) { return false } if (this.rowinfo[G] && this.rowinfo[G].locked) { return false } if (this.editKey != null) { this.endroweditbykey(G, true); return false } var E = this.editSettings.editSingleCell; if (!q && E && this.columns.records && this.columns.records.length > 0) { for (var y = 0; y < this.columns.records.length; y++) { q = this.columns.records[y]; if (q.editable && !q.hidden) { break } } if (!q) { return false } } if (E && q && !q.editable) { this.editKey = null; return false } if (E) { this.editColumn = q } var o = this; var m = this.rowsByKey[G]; if (this.treeGrid) { var m = this.treeGrid.getRow(G) } var n = this.getrowindex(m); var C = this._getuirow(G); var s = this._getpinneduirow(G); this._editors = new Array(); var p = false; if (C) { var h = C[0].cells; var t = 0; for (var y = 0; y < h.length; y++) { var g = this.columns.records[y]; var d = h[y]; if (g.rowDetailscolumn) { continue } if (g.checkboxcolumn) { continue } if (g.pinned) { d = s[0].cells[y] } if (E && q && g.datafield != q.datafield) { continue } b(d).removeClass(this.toTP("jqx-grid-cell-selected")); b(d).removeClass(this.toTP("jqx-fill-state-pressed")); b(d).removeClass(this.toTP("jqx-grid-cell-hover")); b(d).removeClass(this.toTP("jqx-fill-state-hover")); if (g.columntype == "none") { continue } var u = b(d).outerWidth(); var w = b(d).width(); if (t === 0) { t = b(d).outerHeight() - 1 } b(d).css("padding", "0px"); cellContent = "<div style='height:" + t + "px; width: 100%; overflow: hidden; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 9999;'></div>"; var r = this.getCellTextByKey(G, g.displayfield); d.innerHTML = cellContent; var e = b(d.firstChild); switch (g.columntype) { case "textbox": case "default": var j = b("<input style='border: none;' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' type='textbox'/>").appendTo(e); if (this.rtl) { j.css("direction", "rtl") } j.addClass(this.toThemeProperty("jqx-input")); j.addClass(this.toThemeProperty("jqx-widget-content")); j.addClass(this.toThemeProperty("jqx-cell-editor")); j[0].onfocus = function (i) { setTimeout(function () { if (i) { var H = b(i.target).parent().parent().index(); if (H >= 0) { o.ensureColumnVisible(o.columns.records[H].datafield) } } else { var H = b(document.activeElement).parent().parent().index(); if (H >= 0) { o.ensureColumnVisible(o.columns.records[H].datafield) } } if (o.content) { o.content[0].scrollTop = 0; o.content[0].scrollLeft = 0 } if (o.gridcontent) { o.gridcontent[0].scrollLeft = 0; o.gridcontent[0].scrollTop = 0 } }, 10) }; if (!g.editable) { j.attr("disabled", true); j.attr("readOnly", true); j.addClass(this.toThemeProperty("jqx-fill-state-disabled")) } else { if (!p) { p = true; var f = b.jqx.browser.msie && b.jqx.browser.version > 10; if (!f) { j.focus() } var c = j; setTimeout(function () { var I = c.val().length; if (!f) { c.focus() } try { if ("selectionStart" in c[0]) { c[0].setSelectionRange(0, I) } else { var i = c[0].createTextRange(); i.collapse(true); i.moveEnd("character", I); i.moveStart("character", 0); i.select() } } catch (H) { var J = H } }, 10) } } j.width(w); j.height(t); if (b.jqx.browser.msie && b.jqx.browser.version < 9) { j.css("line-height", parseInt(t) + "px") } j.css("text-align", g.cellsalign); if (r === null) { r = "" } if (r == undefined) { r = "" } j.val(r); if (g.createeditor) { var B = r; var r = this.getCellValueByKey(G, g.displayfield); g.createeditor(!this.treeGrid ? n : G, r, j, B, w, t) } this._editors.push({ column: g, editor: j }); if (g.cellsFormat != "") { if (g.cellsFormat.indexOf("p") != -1 || g.cellsFormat.indexOf("c") != -1 || g.cellsFormat.indexOf("n") != -1 || g.cellsFormat.indexOf("f") != -1) { j.keydown(function (H) { var N = H.charCode ? H.charCode : H.keyCode ? H.keyCode : 0; var K = String.fromCharCode(N); var L = parseInt(K); if (isNaN(L)) { return true } if (o._selection(j).length > 0) { return true } var J = ""; var I = j.val(); if (g.cellsFormat.length > 1) { var M = parseInt(g.cellsFormat.substring(1)); if (isNaN(M)) { M = 0 } } else { var M = 0 } if (M > 0) { if (I.indexOf(o.gridlocalization.decimalseparator) != -1) { if (o._selection(j).start > I.indexOf(o.gridlocalization.decimalseparator)) { return true } } } for (var O = 0; O < I.length - M; O++) { var i = I.substring(O, O + 1); if (i.match(/^[0-9]+$/) != null) { J += i } } if (J.length >= 11) { return false } }) } } if (g.initeditor) { var B = r; var r = this.getCellValueByKey(G, g.displayfield); g.initeditor(!this.treeGrid ? n : G, r, j, B, w, t) } break; case "custom": case "template": if (!this.editorsCache) { this.editorsCache = new Array() } var k = b("<div style='width: 100%; height: 100%; border: none;'></div>").appendTo(e); var x = b.trim(g.datafield).split(" ").join(""); if (x.indexOf(".") != -1) { x = x.replace(".", "") } var z = this.editorsCache["templateeditor_" + x]; if (g.columntype == "custom") { var z = this.editorsCache["customeditor_" + x + "_" + G] } var B = r; var r = this.getCellValueByKey(G, g.displayfield); if (!z) { var j = b("<div style='border: none;'></div>"); j.width(u); j.height(t); z = j; if (r === null) { r = "" } if (g.columntype != "custom") { this.editorsCache["templateeditor_" + x] = j } else { this.editorsCache["customeditor_" + x + "_" + G] = j } j.appendTo(k); if (g.createeditor) { g.createeditor(!this.treeGrid ? n : G, r, j, B, u, t) } } else { var j = z; j.width(u); j.height(t); j.appendTo(k) } if (g.initeditor) { g.initeditor(!this.treeGrid ? n : G, r, j, B, u, t) } this._editors.push({ column: g, editor: j }); break } } } this.editKey = G; this.beginUpdate(); var F = this.getrowdisplayindex(m); this._raiseEvent("rowBeginEdit", { key: G, index: F, boundIndex: n, row: this.rowsByKey[G] }); if (E) { var m = this.rowsByKey[G]; var v = null; var l = null; if (m) { v = m[q.datafield]; l = m[q.displayfield] } this._raiseEvent("cellBeginEdit", { value: v, displayValue: l, key: G, index: F, dataField: q.datafield, displayField: q.displayfield, boundIndex: n, row: this.rowsByKey[G] }) } this.endUpdate(false) }, _toNumber: function (f) { if (!f.indexOf && f != undefined) { f = f.toString() } if (f.indexOf(this.gridlocalization.currencysymbol) > -1) { f = f.replace(this.gridlocalization.currencysymbol, "") } var c = function (l, j, k) { var h = l; if (j == k) { return l } var i = h.indexOf(j); while (i != -1) { h = h.replace(j, k); i = h.indexOf(j) } return h }; f = c(f, this.gridlocalization.thousandsseparator, ""); f = f.replace(this.gridlocalization.decimalseparator, "."); if (f.indexOf(this.gridlocalization.percentsymbol) > -1) { f = f.replace(this.gridlocalization.percentsymbol, "") } var g = ""; for (var d = 0; d < f.length; d++) { var e = f.substring(d, d + 1); if (e === "-") { g += "-" } if (e === ".") { g += "." } if (e.match(/^[0-9]+$/) != null) { g += e } } f = g; f = f.replace(/ /g, ""); return f }, _geteditorvalue: function (h, j, k, d) { var m = new String(); if (j) { if (!h.geteditorvalue) { switch (h.columntype) { case "textbox": default: m = j.val(); if (h.cellsFormat != "") { var l = "string"; var g = this.source.datafields || ((this.source._source) ? this.source._source.datafields : null); if (g) { var n = ""; b.each(g, function () { if (this.name == h.displayfield) { if (this.type) { n = this.type } return false } }); if (n) { l = n } } var i = l === "number" || l === "float" || l === "int" || l === "integer"; var f = l === "date" || l === "time"; if (i || (l === "string" && (h.cellsFormat.indexOf("p") != -1 || h.cellsFormat.indexOf("c") != -1 || h.cellsFormat.indexOf("n") != -1 || h.cellsFormat.indexOf("f") != -1))) { if (m === "" && h.nullable) { return "" } m = this._toNumber(m); m = new Number(m); if (isNaN(m)) { m = "" } } if (f || (l === "string" && (h.cellsFormat.indexOf("H") != -1 || h.cellsFormat.indexOf("m") != -1 || h.cellsFormat.indexOf("M") != -1 || h.cellsFormat.indexOf("y") != -1 || h.cellsFormat.indexOf("h") != -1 || h.cellsFormat.indexOf("d") != -1))) { if (m === "" && h.nullable) { return "" } var e = m; m = new Date(m); if (m == "Invalid Date" || m == null || h.cellsFormat.length > 1) { if (b.jqx.dataFormat) { m = b.jqx.dataFormat.parsedate(e, h.cellsFormat, this.gridlocalization) } if (m == "Invalid Date" || m == null) { m = "" } } } } if (h.displayfield != h.datafield) { m = { label: m, value: m } } break } } if (h.geteditorvalue) { var c = this.getCellValueByKey(d, h.displayfield); m = h.geteditorvalue(!this.treeGrid ? k : d, c, j) } } return m }, _validateEditors: function (c) { var k = this; var d = true; var s = k.rowsByKey[c]; var l = k.getrowindex(s); var m = k._editors; var c = k.editKey; var p = k._getuirow(c); for (var h = 0; h < m.length; h++) { var j = m[h].editor; var f = m[h].column; var o = k._geteditorvalue(f, j, l, c); if (f.validation) { j.removeClass(k.toThemeProperty("jqx-grid-validation-label")); var e = f.datafield; try { var r = f.validation({ value: o, row: c, datafield: f.datafield, displayfield: f.displayfield, column: f }, o); var g = k.gridlocalization.validationstring; if (r.message != undefined) { g = r.message } var q = typeof r == "boolean" ? r : r.result; if (!q) { if (r.showmessage == undefined || r.showmessage == true) { k._showvalidationpopup(p, e, g, j) } d = false } } catch (n) { k._showvalidationpopup(p, e, k.gridlocalization.validationstring, j); d = false } } } return d }, endroweditbykey: function (p, r) { var k = this; if (k.editKey === null) { return } if (this.endEdit) { var n = this.endEdit(p); if (n === false) { return } } var t = k.rowsByKey[p]; var l = k.getrowindex(t); var m = k._editors; var e = k.editKey; var q = k._getuirow(e); if (r !== true) { var d = true; if (m) { d = k._validateEditors(e); if (d) { var h = b.extend({}, t); var c = b.extend({}, t); for (var g = 0; g < m.length; g++) { var j = m[g].editor; var f = m[g].column; var o = k._geteditorvalue(f, j, l, e); if (o && o.label != undefined) { h[f.displayfield] = o.label; h[f.datafield] = o.value } else { h[f.displayfield] = o } } var s = function () { k.dataview._sortHierarchyData = null; k.dataview._sortData = null; for (var x = 0; x < m.length; x++) { var B = m[x].editor; var v = m[x].column; var C = k._geteditorvalue(v, B, l, e); var u = c[v.displayfield]; if (C && C.label != undefined) { t[v.displayfield] = C.label; t[v.datafield] = C.value } else { t[v.displayfield] = C } if (k.treeGrid) { var D = k.treeGrid.getRow(e); if (D) { D[v.displayfield] = C } } if (k.editorsCache) { var E = function (i) { if (i && i.jqxWidget) { var G = i.jqxWidget.element.className; if (G.indexOf("dropdownlist") >= 0 || G.indexOf("datetimeinput") >= 0 || G.indexOf("combobox") >= 0 || G.indexOf("menu") >= 0) { if (i.jqxWidget.isOpened) { var F = i.jqxWidget.isOpened(); if (F) { i.jqxWidget.close() } } } } }; var z = "customeditor_" + v.displayfield + "_" + p; var y = "templateeditor_" + v.displayfield; if (k.editorsCache[z]) { var w = b(k.editorsCache[z]).data(); var A = k.editorsCache[z]; if (!w.jqxWidget && b(A).children()[0] && b(b(A).children()[0]).data().jqxWidget) { w = b(b(A).children()[0]).data() } E(w); k.editorsCache[z].detach() } if (k.editorsCache[y]) { k.editorsCache[y].detach(); var w = b(k.editorsCache[y]).data(); var A = k.editorsCache[y]; if (!w.jqxWidget && b(A).children()[0] && b(b(A).children()[0]).data().jqxWidget) { w = b(b(A).children()[0]).data() } E(w) } } if (C != u) { k.beginUpdate(); k._raiseEvent("cellValueChanged", { value: C, oldValue: u, dataField: v.datafield, displayField: v.displayfield, key: p, index: l, row: t }); k.endUpdate(false) } } }; k.updaterowbykey(k.editKey, h, false, s) } } if (!d) { return false } } k._detachEditors(e); return true }, _detachEditors: function (l) { var g = this; var m = g.rowsByKey[l]; var i = g.getrowindex(m); if (g.editorsCache) { for (var h in g.editorsCache) { var f = b(g.editorsCache[h]).data(); if (f && f.jqxWidget) { var c = f.jqxWidget.element.className; if (c.indexOf("dropdownlist") >= 0 || c.indexOf("datetimeinput") >= 0 || c.indexOf("combobox") >= 0 || c.indexOf("menu") >= 0) { if (f.jqxWidget.isOpened) { var e = f.jqxWidget.isOpened(); if (e) { f.jqxWidget.close() } } } } b(g.editorsCache[h]).detach() } } g.beginUpdate(); var d = g.getrowdisplayindex(m); if (g.editSettings.editSingleCell) { var m = g.rowsByKey[l]; var k = null; var j = null; if (m) { k = m[g.editColumn.datafield]; j = m[g.editColumn.displayfield] } g._raiseEvent("cellEndEdit", { value: k, displayValue: j, key: l, index: d, dataField: g.editColumn.datafield, displayField: g.editColumn.displayfield, boundIndex: i, row: g.rowsByKey[l] }) } g._raiseEvent("rowEndEdit", { key: l, index: d, boundIndex: i, row: g.rowsByKey[l] }); g.endUpdate(false); g.editColumn = null; g.editKey = null; g._renderrows(); g._renderhorizontalscroll(); g.host.focus(); setTimeout(function () { g.host.focus() }, 10) }, _showvalidationpopup: function (r, e, s, m) { if (s == undefined) { var s = this.gridlocalization.validationstring } m.addClass(this.toThemeProperty("jqx-grid-validation-label")); var p = b("<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;'></div>"); var o = b("<div style='width: 20px; height: 20px; z-index: 999999; top: 0px; left: 0px; position: absolute;'></div>"); p.html(s); o.addClass(this.toThemeProperty("jqx-grid-validation-arrow-up")); p.addClass(this.toThemeProperty("jqx-grid-validation")); p.addClass(this.toThemeProperty("jqx-rc-all")); p.hide(); o.hide(); p.prependTo(this.table); o.prependTo(this.table); var h = this.hScrollInstance; var j = h.value; var g = parseInt(j); var l = this.getColumn(e).uielement; if (!r) { return } var k = r; p.css("top", parseInt(k.position().top) + 30 + "px"); var c = parseInt(p.css("top")); o.css("top", c - 11); o.removeClass(); o.addClass(this.toThemeProperty("jqx-grid-validation-arrow-up")); var f = false; if (c >= this._table.height()) { o.removeClass(this.toThemeProperty("jqx-grid-validation-arrow-up")); o.addClass(this.toThemeProperty("jqx-grid-validation-arrow-down")); c = parseInt(k.position().top) - k.outerHeight() - 5; if (c < 0) { c = 0; o.removeClass(this.toThemeProperty("jqx-grid-validation-arrow-down")); f = true } p.css("top", c + "px"); o.css("top", c + p.outerHeight() - 9) } var n = -g + parseInt(b(l).position().left); var q = parseInt(this._table.css("left")); if (isNaN(q)) { q = 0 } if (q != 0) { g = 0 } o.css("left", g + n + 30); var d = p.width(); if (d + n > this.host.width() - 20) { var i = d + n - this.host.width() + 40; n -= i } if (!f) { p.css("left", g + n) } else { p.css("left", g + parseInt(b(l).position().left) - p.outerWidth()) } m.mouseenter(function () { if (m.hasClass("jqx-grid-validation-label")) { p.show(); o.show() } }); m.mouseleave(function () { p.hide(); o.hide() }); if (!this.popups) { this.popups = new Array() } this.popups[this.popups.length] = { validation: p, validationrow: o } }, addRow: function (d, p, j, n) { if (p != undefined) { this._datachanged = true; if (j == undefined) { j = "last" } var o = false; var k = this.that; if (d == null) { var f = this.dataview.filters && this.dataview.filters.length > 0; var m = !f ? this.dataview.totalrecords : this.source.records.length; if (!this.pageable) { if (this.source._source.totalrecords) { this.dataview.totalrecords = this.source._source.totalrecords } else { if (this.source._source.totalRecords) { this.dataview.totalrecords = this.source._source.totalRecords } else { if (this.source.hierarchy.length !== 0) { this.dataview.totalrecords = this.source.hierarchy.length } else { this.dataview.totalrecords = this.source.records.length } } } var m = !f ? this.dataview.totalrecords : this.source.records.length } if (!b.isArray(p)) { d = this.dataview.getid(this.dataview.source.id, p, m); if (this.getColumn(this.dataview.source.id)) { p[this.dataview.source.id] = d } } else { var c = new Array(); b.each(p, function (e, q) { var r = k.dataview.getid(k.dataview.source.id, p[e], m + e); c.push(r); if (k.getColumn(k.dataview.source.id)) { p[e][k.dataview.source.id] = r } }); d = c } } else { if (!b.isArray(p)) { if (this.getColumn(this.dataview.source.id)) { p[this.dataview.source.id] = d } } else { b.each(p, function (e, q) { var r = d[e]; if (k.getColumn(k.dataview.source.id)) { p[e][k.dataview.source.id] = r } }) } } var i = this.treeGrid ? (this.treeGrid.virtualModeCreateRecords ? true : false) : false; var g = function (t, e, y, r) { if (t._loading) { throw new Error("jqxDataTable: " + t.loadingErrorMessage); return false } var q = t.vScrollInstance.value; var x = false; if (!b.isArray(y)) { y.uid = e; t.rowsByKey[e] = y; if (e == n) { n = null } x = t.source.addRecord(y, r, n, i) } else { b.each(y, function (z, A) { var B = null; if (e != null && e[z] != null) { B = e[z] } this.uid = B; t.rowsByKey[B] = this; if (e == n) { n = null } x = t.source.addRecord(this, r, n, i) }) } if (t.groups && t.groups.length > 0) { var u = Object.prototype.toString; var w = t.groups[0]; Object.prototype.toString = (typeof w == "function") ? w : function () { return this[w] }; if (!t.source.records.sort) { var v = new Array(); var s = 0; b.each(data, function () { v[startindex + s++] = this }); data = v } t.source.records.sort(function (A, z) { if (A === undefined) { A = null } if (z === undefined) { z = null } if (A === null && z === null) { return 0 } if (A === null && z !== null) { return -1 } if (A !== null && z === null) { return 1 } var D = 0; var C = 0; if (A && A.uid) { D = A.uid } if (z && z.uid) { C = z.uid } A = A.toString(); z = z.toString(); if (b.jqx.dataFormat.isNumber(A) && b.jqx.dataFormat.isNumber(z)) { if (A < z) { return -1 } if (A > z) { return 1 } return 0 } else { if (b.jqx.dataFormat.isDate(A) && b.jqx.dataFormat.isDate(z)) { if (A < z) { return -1 } if (A > z) { return 1 } return 0 } else { if (!b.jqx.dataFormat.isNumber(A) && !b.jqx.dataFormat.isNumber(z)) { A = String(A).toLowerCase(); z = String(z).toLowerCase() } } } try { if (A < z) { return -1 } if (A > z) { return 1 } } catch (B) { var E = B } if (typeof (D) == "number") { if (D < C) { return -1 } if (D > C) { return 1 } } return 0 }); Object.prototype.toString = u } t.dataview._filteredData = null; t.dataview._sortData = null; t.dataview._sortHierarchyData = null; if (t._updating == undefined || t._updating == false) { t.refresh() } if (t.source && t.source._knockoutdatasource && !t._updateFromAdapter && t.autokoupdates) { if (t.source._source._localdata) { t.source.suspendKO = true; t.source._source._localdata.push(y); t.source.suspendKO = false } } t.vScrollInstance.setPosition(q); return x }; if (this.source.addrow) { var h = function (e, q) { if (e == true || e == undefined) { if (q != undefined) { d = q } g(k, d, p, j) } }; try { if (!k.treeGrid) { o = this.source.addrow(d, p, j, h) } else { o = this.source.addrow(d, p, j, n, h) } if (o == undefined) { o = true } } catch (l) { o = false } if (o == false) { return false } } else { g(this, d, p, j) } return o } return false }, deleteRow: function (c) { var d = this._getkey(c); this.deleterowbykey(d) }, deleterowbykey: function (g) { if (g != undefined) { this._datachanged = true; var h = false; var f = this.that; var d = function (m, l) { if (m._loading) { throw new Error("jqxDataTable: " + m.loadingErrorMessage); return false } m.dataview._filteredData = null; m.dataview._sortData = null; m.dataview._sortHierarchyData = null; var o = false; var p = m.vScrollInstance.value; if (!b.isArray(l)) { var o = false; if (m.rowsByKey[l]) { o = true; if (m.rowinfo[l].selected) { m.unselectrowbykey(l, false) } if (m.treeGrid) { var n = m._names(); var k = m.rowsByKey[l][n.parent] } delete m.rowsByKey[l]; if (m.treeGrid) { if (m.rowinfo[l]) { var i = m.rowinfo[l].row.records; var j = function (q) { for (var r = 0; r < q.length; r++) { var s = q[r].uid; delete m.rowsByKey[s]; delete m.rowinfo[s]; if (q[r].records) { j(q[r].records) } } }; if (i) { j(i) } } } delete m.rowinfo[l]; m.source.deleteRecord(l); if (k) { if (n && k.records && k.records.length == 0) { k[n.leaf] = true; m.rowinfo[k.uid][n.leaf] = true } } } } else { b.each(l, function () { var t = this; if (m.rowsByKey[t]) { o = true; if (m.rowinfo[t].selected) { m.unselectrowbykey(t, false) } if (m.treeGrid) { var u = m._names(); var s = m.rowsByKey[t][u.parent] } delete m.rowsByKey[t]; if (m.treeGrid) { if (m.rowinfo[t]) { var q = m.rowinfo[t].row.records; var r = function (v) { for (var w = 0; w < v.length; w++) { var x = v[w].uid; delete m.rowsByKey[x]; delete m.rowinfo[x]; if (v[w].records) { r(v[w].records) } } }; if (q) { r(q); delete m.rowinfo[t] } } } m.source.deleteRecord(t); if (s) { if (u && s.records && s.records.length == 0) { s[u.leaf] = true; m.rowinfo[s.uid][u.leaf] = true } } } }) } m.refresh(); if (m.source && m.source._knockoutdatasource && !m._updateFromAdapter && m.autokoupdates) { if (m.source._source._localdata) { m.source.suspendKO = true; m.source._source._localdata.pop(rowdata); m.source.suspendKO = false } } m.vScrollInstance.setPosition(p); return o }; if (this.source.deleterow) { var c = function (i) { if (i == true || i == undefined) { d(f, g) } }; try { this.source.deleterow(g, c); if (h == undefined) { h = true } } catch (e) { h = false } } else { h = d(f, g) } return h } return false }, updateRow: function (c, e) { var d = this._getkey(c); this.updaterowbykey(d, e) }, updaterowbykey: function (c, k, g, i) { if (c != undefined && k != undefined) { var f = this.that; var j = false; var d = function (o, l, t) { if (o._loading) { throw new Error("jqxDataTable: " + o.loadingErrorMessage); return false } o.dataview._filteredData = null; o.dataview._sortData = null; o.dataview._sortHierarchyData = null; var r = false; if (!b.isArray(l)) { var n = o.rowsByKey[l]; var s = function (v) { if (!v) { r = false } else { for (var u = 0; u < o.columns.records.length; u++) { v[o.columns.records[u].datafield] = t[o.columns.records[u].datafield]; if (o.groups.length > 0 && v.originalRecord) { v.originalRecord[o.columns.records[u].datafield] = t[o.columns.records[u].datafield] } } r = true } }; s(n); if (o.treeGrid) { n = o.treeGrid.getRow(l); s(n) } } else { b.each(l, function (w, x) { var v = o.rowsByKey[this]; var u = function (z, y) { if (!v) { r = false } else { v[this] = t[w] } r = true }; u(this, v); if (o.treeGrid) { v = o.treeGrid.getRow(this); u(this, v) } }) } var m = o.vScrollInstance.value; if (g == undefined || g == true) { if (o._updating == undefined || o._updating == false) { o._renderrows() } } if (o.showAggregates && o._updatecolumnsaggregates) { o._updatecolumnsaggregates() } if (o.source && o.source._knockoutdatasource && !o._updateFromAdapter && o.autokoupdates) { if (o.source._source._localdata) { var n = o.rowsByKey[l]; var p = o.getrowindex(n); var q = o.source._source._localdata()[p]; o.source.suspendKO = true; o.source._source._localdata.replace(q, b.extend({}, n)); o.source.suspendKO = false } } o.vScrollInstance.setPosition(m); return r }; if (this.source.updaterow) { var e = function (l) { if (l == true || l == undefined) { d(f, c, k); if (i) { i() } f._renderrows(false) } }; try { j = this.source.updaterow(c, k, e); if (j == undefined) { j = true } } catch (h) { j = false } } else { j = d(f, c, k); if (j && i) { i() } f._renderrows(false) } return j } return false }, lockRow: function (c) { var d = this._getkey(c); this.lockrowbykey(d) }, unlockRow: function (c) { var d = this._getkey(c); this.unlockrowbykey(d) }, lockrowbykey: function (c) { if (this.rowinfo[c]) { this.rowinfo[c].locked = true } else { this.rowinfo[c] = { locked: true } } this._renderrows() }, unlockrowbykey: function (c) { if (this.rowinfo[c]) { this.rowinfo[c].locked = false } else { this.rowinfo[c] = { locked: false } } this._renderrows() }, selectRow: function (c) { var d = this._getkey(c); this.selectrowbykey(d) }, unselectRow: function (c) { var d = this._getkey(c); this.unselectrowbykey(d) }, selectrowbykey: function (e, h, f) { if (h != "keyboard" && h != "mouse") { this._lastSelectedKey = e } var g = f !== false ? true : false; this._doSelection(e, true, g); var i = this.rowsByKey[e]; var d = this.getrowindex(i); var c = this.getrowdisplayindex(i); this._raiseEvent("rowSelect", { key: e, index: c, boundIndex: d, row: this.rowsByKey[e] }) }, unselectrowbykey: function (e, f) { var g = f !== false ? true : false; this._doSelection(e, false, g); var h = this.rowsByKey[e]; var d = this.getrowindex(h); var c = this.getrowdisplayindex(h); this._raiseEvent("rowUnselect", { key: e, index: c, boundIndex: d, row: this.rowsByKey[e] }) }, getSelection: function () { var c = new Array(); if (this.rowinfo) { for (var e in this.rowinfo) { var d = this.rowinfo[e]; if (d.selected) { c.push(d.row) } } } return c }, showdetailsbykey: function (k) { if (!this.rowDetails) { return } var l = this.rowinfo[k]; if (l) { l.expanded = true; var f = b(this._table.children()[1]).children(("[data-key=" + k + "]")); var i = b(this._pinnedTable.children()[1]).children(("[data-key=" + k + "]")); if (f) { var c = i.children(); var h = b(c[0]); if (this.rtl) { var h = b(c[c.length - 1]) } if (!this.rtl) { h.removeClass(this.toThemeProperty("jqx-grid-group-collapse")); h.addClass(this.toThemeProperty("jqx-grid-group-expand")); h.removeClass(this.toThemeProperty("jqx-icon-arrow-right")); h.addClass(this.toThemeProperty("jqx-icon-arrow-down")) } else { h.removeClass(this.toThemeProperty("jqx-grid-group-collapse-rtl")); h.addClass(this.toThemeProperty("jqx-grid-group-expand-rtl")); h.removeClass(this.toThemeProperty("jqx-icon-arrow-left")); h.addClass(this.toThemeProperty("jqx-icon-arrow-down")) } f.next().show(); var d = i.next(); d.show(); if (b.jqx.browser.msie && b.jqx.browser.version < 8) { f.next().children().show(); i.next().children().show() } if (!l.initialized) { var j = l.detailsHeight; var m = this.initRowDetails(k, l.row, b(b(d).children().children().children()[0]), l); l.details = b(d).children().children().children()[0]; l.initialized = true; if (m === false || l.detailsHeight != j) { if (m === false) { l.expanded = false; l.nodetails = true; d.hide() } this._renderrows() } } this._updateScrollbars(); if (this.height === "auto" || this.height === null || this.autoheight) { this._arrange() } var g = this.getrowindex(l.row); var e = this.getrowdisplayindex(l.row); this._raiseEvent("rowExpand", { row: l.row, index: e, boundIndex: g, rowKey: k }) } } }, hidedetailsbykey: function (h) { if (!this.rowDetails) { return } var j = this.rowinfo[h]; if (j) { j.expanded = false; var d = b(this._table.children()[1]).children(("[data-key=" + h + "]")); var e = b(this._pinnedTable.children()[1]).children(("[data-key=" + h + "]")); if (d) { var g = e.children(); var i = b(g[0]); if (this.rtl) { var i = b(g[g.length - 1]) } if (!this.rtl) { i.addClass(this.toThemeProperty("jqx-grid-group-collapse")); i.removeClass(this.toThemeProperty("jqx-grid-group-expand")); i.addClass(this.toThemeProperty("jqx-icon-arrow-right")); i.removeClass(this.toThemeProperty("jqx-icon-arrow-down")) } else { i.addClass(this.toThemeProperty("jqx-grid-group-collapse-rtl")); i.removeClass(this.toThemeProperty("jqx-grid-group-expand-rtl")); i.addClass(this.toThemeProperty("jqx-icon-arrow-left")); i.removeClass(this.toThemeProperty("jqx-icon-arrow-down")) } d.next().hide(); e.next().hide(); if (b.jqx.browser.msie && b.jqx.browser.version < 8) { d.next().children().hide(); e.next().children().hide() } this._updateScrollbars(); if (this.height === "auto" || this.height === null || this.autoheight) { this._arrange() } var f = this.getrowindex(j.row); var c = this.getrowdisplayindex(j.row); this._raiseEvent("rowCollapse", { row: j.row, index: c, boundIndex: f, rowKey: h }) } } }, _getvirtualcolumnsindexes: function (d, l, h, k, c) { if (this.rowDetails || this.rtl || this.editcell || (this.width && this.width.toString().indexOf("%") >= 0) || this.exporting) { return { start: 0, end: h + k } } var e = 0; var i = -1; var f = h + k; if (this.autorowheight) { return { start: 0, end: h + k } } if (!c) { for (var g = 0; g < h + k; g++) { var m = g; if (!this.columns.records[g].hidden) { e += this.columns.records[g].width } if (e >= d && i == -1) { i = g } if (e > l + d) { f = g; break } } } f++; if (f > h + k) { f = h + k } if (i == -1) { i = 0 } return { start: i, end: f } }, _renderhorizontalscroll: function () { var t = this.hScrollInstance; var u = t.value; if (this.hScrollBar.css("visibility") === "hidden") { t.value = 0; u = 0 } var h = parseInt(u); if (this.table == null) { return } var q = this.columnsrow; var r = 0; var i = this.columns.records.length - r; var e = this.columns.records; var l = this.source.records.length == 0; if (this.rtl) { if (this.hScrollBar.css("visibility") != "hidden") { h = t.max - h } } if (l && !this._haspinned) { this.table[0].style.left = -h + "px"; q[0].style.marginLeft = -h + "px" } else { if (this._haspinned || this._haspinned == undefined) { for (var w = 0; w < r + i; w++) { var f = e[w]; if (f.pinned) { var g = null; if (this.showAggregates) { if (this.statusbar[0].cells) { g = this.statusbar[0].cells[w] } } if (this.filterrow) { if (this.filterrow[0].cells) { filtercell = this.filterrow[0].cells[w] } } if (!this.rtl) { var c = q[0].cells[w]; c.style.marginLeft = h + "px"; if (g) { g.style.marginLeft = h + "px" } if (this.filterrow && filtercell) { filtercell.style.marginLeft = h + "px" } } else { var c = q[0].cells[w]; c.style.marginLeft = -parseInt(u) + "px"; if (g) { g.style.marginLeft = -parseInt(u) + "px" } if (this.filterrow && filtercell) { filtercell.style.marginLeft = -parseInt(u) + "px" } } } } if (this.columnsVirtualization) { var s = this._getvirtualcolumnsindexes(h, this.host.width(), 0, this.columns.records.length, false); var n = s.start; var p = s.end; for (var o = 0; o < n; o++) { var m = o; var v = this.columns.records[m].element[0]; if (this.columns.records[m].pinned) { continue } if (v.parentNode) { v.parentNode.removeChild(v) } if (this.filterrow && this.filterrow[0]) { var d = this.filterrow[0].cells[m]; if (d.parentNode) { d.parentNode.removeChild(d) } } } for (var o = p; o < this.columns.records.length; o++) { var m = o; var v = this.columns.records[m].element[0]; if (this.columns.records[m].pinned) { continue } if (v.parentNode) { v.parentNode.removeChild(v) } if (this.filterrow && this.filterrow[0]) { var d = this.filterrow[0].cells[m]; if (d.parentNode) { d.parentNode.removeChild(d) } } } for (var o = n; o < p; o++) { var m = o; v = this.columns.records[m].element[0]; if (this.columns.records[m].pinned) { continue } if (!v.parentNode) { this.columnsrow[0].appendChild(v) } if (this.filterrow && this.filterrow[0]) { var d = this.filterrow[0].cells[m]; if (!d.parentNode) { this.filterrow[0].appendChild(d) } } } } this._table[0].style.left = -h + "px"; q[0].style.marginLeft = -h + "px" } else { if (this._haspinned == false) { if (this.columnsVirtualization) { var s = this._getvirtualcolumnsindexes(h, this.host.width(), 0, this.columns.records.length, false); var n = s.start; var p = s.end; for (var o = 0; o < n; o++) { var m = o; var v = this.columns.records[m].element[0]; if (v.parentNode) { v.parentNode.removeChild(v) } if (this.filterrow && this.filterrow[0]) { var d = this.filterrow[0].cells[m]; if (d.parentNode) { d.parentNode.removeChild(d) } } } for (var o = p; o < this.columns.records.length; o++) { var m = o; var v = this.columns.records[m].element[0]; if (v.parentNode) { v.parentNode.removeChild(v) } if (this.filterrow && this.filterrow[0]) { var d = this.filterrow[0].cells[m]; if (d.parentNode) { d.parentNode.removeChild(d) } } } for (var o = n; o < p; o++) { var m = o; v = this.columns.records[m].element[0]; if (!v.parentNode) { this.columnsrow[0].appendChild(v) } if (this.filterrow && this.filterrow[0]) { var d = this.filterrow[0].cells[m]; if (!d.parentNode) { this.filterrow[0].appendChild(d) } } } } this.table[0].style.left = -h + "px"; q[0].style.marginLeft = -h + "px" } } if (this.filterrow) { this.filterrow[0].style.left = -h + "px"; if (this.rtl) { this.filterrow[0].style.left = -h + parseInt(this.content.css("left")) + "px" } } } if (this.showAggregates) { if (this.aggregates[0].cells) { var k = 0; if (this.rtl) { if (this.vScrollBar.css("visibility") != "hidden") { if (this.hScrollBar.css("visibility") != "hidden") { k = 2 + parseInt(this.hScrollBar.css("left")) } else { k = 3 + parseInt(this.vScrollBar.width()) } } } this.aggregates[0].style.marginLeft = -h + k + "px" } } }, _initializeColumns: function () { var d = this.source.datafields; if (d == null && this.source._source) { d = this.source._source.datafields } var k = d ? d.length > 0 : false; if (this.columns && this.columns.records) { for (var e = 0; e < this.columns.records.length; e++) { this._removecolumnhandlers(this.columns.records[e]) } } var j = this; var c = new b.jqx.dataCollection(this.element); var h = 0; this._haspinned = false; if (!this._columns) { this._columns = this.columns } else { this.columns = this._columns } if (this.selectionMode == "checkbox") { var f = new a(j, this); f.visibleindex = h++; f.width = j.indentWidth; f.checkboxcolumn = true; f.editable = false; f.columntype = "checkbox"; f.groupable = false; f.draggable = false; f.filterable = false; f.resizable = false; f.datafield = "_checkboxcolumn"; c.add(f) } if (this.rowDetails && !this.treeGrid) { var f = new a(j, this); f.visibleindex = h++; f.width = j.indentWidth; f.editable = false; f.rowDetailscolumn = true; f.groupable = false; f.draggable = false; f.pinned = true; f.filterable = false; f.resizable = false; f.text = ""; c.add(f) } var g = new Array(); b.each(this.columns, function (i) { if (j.columns[i] != undefined) { var l = new a(j, this); l.visibleindex = h++; if (this.dataField != undefined) { this.datafield = this.dataField } if (this.pinned) { j._haspinned = true } if (this.datafield == null) { if (j.source && j.source._source && (j.source._source.datatype == "array")) { if (!k) { if (!j.source._source.datafields) { j.source._source.datafields = new Array(); j.source._source.datafields.push({ name: i.toString() }) } else { j.source._source.datafields.push({ name: i.toString() }) } } this.datafield = i.toString(); this.displayfield = i.toString(); l.datafield = this.datafield; l.displayfield = this.displayfield } } else { if (g[this.datafield]) { throw new Error("jqxDataTable: Invalid column 'dataField' setting. jqxDataTable's columns should be initialized with unique data fields."); j.host.remove(); return false } else { g[this.datafield] = true } } c.add(l) } }); if (this.rtl) { c.records.reverse() } this.columns = c }, addFilter: function (c, e) { var d = this.getColumn(c); if (!d) { return } this.dataview.addFilter(c, e) }, removeFilter: function (c) { var d = this.getColumn(c); if (!d) { return } this.dataview.removeFilter(c) }, clearFilters: function (d, c) { this.dataview.filters = new Array(); this.dataview._filteredData = null; this.dataview._sortData = null; this.dataview._sortHierarchyData = null; if (c !== false) { this.resetfilter() } if (d === false) { return } this.applyFilters() }, resetfilter: function () { if (this.filterinput) { this.filterinput.val("") } if (this.filterrow) { for (var e = 0; e < this.filterrow[0].cells.length; e++) { var c = this.filterrow[0].cells[e]; var d = b(c).find("input:first"); var h = b(c).find(".filterconditions"); var g = this.columns.records[e]; var k = ""; if (!g.filterable) { continue } d.val(""); var j = this.getcolumntypebydatafield(g); var f = new b.jqx.filter(); switch (j) { case "number": case "int": case "float": case "decimal": filtertype = "numericfilter"; conditions = f.getoperatorsbyfiltertype("numericfilter"); break; case "boolean": case "bool": filtertype = "booleanfilter"; conditions = f.getoperatorsbyfiltertype("booleanfilter"); break; case "date": case "time": filtertype = "datefilter"; conditions = f.getoperatorsbyfiltertype("datefilter"); break; case "string": filtertype = "stringfilter"; conditions = f.getoperatorsbyfiltertype("stringfilter"); break } if (h.length > 0) { if (filtertype === "stringfilter") { h.jqxDropDownList({ selectedIndex: 2 }) } else { h.jqxDropDownList({ selectedIndex: 0 }) } } } } }, applyFilters: function () { if (this.editable) { if (this.editKey != null) { var c = this.endroweditbykey(this.editKey) } } this.dataview._filteredData = null; this.dataview._sortData = null; this.dataview._sortHierarchyData = null; if (this.serverProcessing) { this.dataview.pagenum = 0; this.updateBoundData("filter") } else { this.goToPage(0); this.refresh() } if (arguments && arguments.length > 0) { if (this._updateSimpleFilter) { if (this.filtercolumnsList) { var d = this.filtercolumnsList.jqxDropDownList("getSelectedItem").value; this._updateSimpleFilter(d) } } if (this._updateFilterRow) { this._updateFilterRow() } } this._raiseEvent("filter", { filters: this.dataview.filters }) }, sortBy: function (d, f) { this.dataview._filteredData = null; this.dataview._sortData = null; this.dataview._sortHierarchyData = null; if (this._loading) { throw new Error("jqxDataTable: " + this.loadingErrorMessage); return false } if (this.editable) { if (this.editKey != null) { var c = this.endroweditbykey(this.editKey) } } if (d == null) { f = null; d = this.sortcolumn } if (d) { var e = this; if (f == "a" || f == "asc" || f == "ascending" || f == true) { ascending = true } else { ascending = false } if (f != null) { e.sortdirection = { ascending: ascending, descending: !ascending } } else { e.sortdirection = { ascending: false, descending: false } } if (f != null) { e.sortcolumn = d } else { e.sortcolumn = null } if (e.source.sort) { e.dataview.sortfield = d; if (f == null) { e.dataview.sortfielddirection = "" } else { e.dataview.sortfielddirection = ascending ? "asc" : "desc" } if (e.source.sort && !this._loading) { e.source.sort(d, f) } } e.dataview.sortBy(d, f); e._raiseEvent("sort", { sortcolumn: this.sortcolumn, sortdirection: this.sortdirection }) } if (!this.serverProcessing) { this.refresh() } else { this.updateBoundData("sort") } }, _togglesort: function (d) { var f = this; if (this.disabled) { return } if (d.sortable && f.sortable) { var c = { sortcolumn: this.sortcolumn, sortdirection: this.sortdirection }; var e = null; if (c.sortcolumn != null && c.sortcolumn == d.displayfield) { e = c.sortdirection.ascending; if (e == true) { e = false } else { e = null } } else { e = true } f.sortBy(d.displayfield, e) } }, _renderfilter: function () { var h = this; var j = b("<div style='position: relative; margin: 4px;'><input style='height: 22px; direction: ltr;' role='textbox' type='text'/><div style='cursor: pointer; height: 100%;'><div></div></div></div>"); j.height(22); var o = j.find("input"); var g = j.find("div:first"); j.addClass(this.toThemeProperty("jqx-rc-all")); j.addClass(this.toThemeProperty("jqx-widget")); j.addClass(this.toThemeProperty("jqx-input-group")); o.addClass(this.toThemeProperty("jqx-input")); o.addClass(this.toThemeProperty("jqx-rc-l")); o.addClass(this.toThemeProperty("jqx-input-group-addon")); o.addClass(this.toThemeProperty("jqx-widget")); o.addClass(this.toThemeProperty("jqx-widget-content")); g.addClass(this.toThemeProperty("jqx-fill-state-normal")); g.addClass(this.toThemeProperty("jqx-rc-r")); g.addClass(this.toThemeProperty("jqx-input-group-addon")); g.find("div").addClass(this.toThemeProperty("jqx-icon-search")); if (this.rtl) { o.addClass(this.toThemeProperty("jqx-rtl")); o.css("direction", "rtl") } this.filter.children().remove(); this.filterbutton = g; var d = new Array(); for (var f = 0; f < h.columns.records.length; f++) { if (h.columns.records[f].datafield && h.columns.records[f].filterable) { d.push({ label: h.columns.records[f].text, value: h.columns.records[f].displayfield }) } } var p = d.length < 10 ? true : false; var l = b("<div style='position: relative; top: 50%; display: none; margin-right: 4px; margin-left: 4px; float: left;'>" + this.gridlocalization.filtersearchstring + "</div>"); this.filter.append(l); var c = b("<div class='filtercolumns' style='position: relative; margin: 4px; float: left;'></div>"); this.filter.append(c); if (c.jqxDropDownList) { c.jqxDropDownList({ theme: this.theme, enableBrowserBoundsDetection: true, autoDropDownHeight: p, rtl: h.rtl, dropDownWidth: 220, selectedIndex: 0, width: "auto", height: 20, source: d, displayMember: "label", valueMember: "value" }) } this.filtercolumnsList = c; var n = function (q) { h.filterinput.val(""); for (var r = 0; r < h.dataview.filters.length; r++) { var s = h.dataview.filters[r]; if (s.datafield === q) { h.filterinput.val(s.filter.getfilterat(0).filtervalue) } } }; if (h.filterHeight !== 30) { h.filtercolumnsList.css("margin-top", h.filterHeight / 2 - 10); j.css("margin-top", h.filterHeight / 2 - 10) } h._updateSimpleFilter = n; this.addHandler(c, "select", function (q) { var i = q.args.item.value; n(i) }); if (this.filterMode === "simple") { this.filtercolumnsList.hide(); l.show(); l.css("margin-top", -this.filter.height() / 2); j.css("float", "left") } else { this.filtercolumnsList.show(); l.hide() } var m = function () { if (!g.hasClass("jqx-fill-state-disabled")) { var r = o.val(); if (c.jqxDropDownList) { var u = c.jqxDropDownList("getSelectedItem") } var w = function (B, x, i) { var A = new b.jqx.filter(); var z = h.getcolumntypebydatafield(B); var C = h._getfiltertype(z); if (C == "datefilter") { var y = A.createfilter(C, x, "EQUAL", null, B.cellsFormat, h.gridlocalization) } else { if (C == "numericfilter" || C == "booleanfilter") { if (C == "numericfilter") { if (h.gridlocalization.decimalseparator == ",") { if (x.indexOf(h.gridlocalization.decimalseparator) >= 0) { x = x.replace(h.gridlocalization.decimalseparator, ".") } } if (x.indexOf(h.gridlocalization.currencysymbol) >= 0) { x = x.replace(h.gridlocalization.currencysymbol, "") } if (x.indexOf(h.gridlocalization.percentagesymbol) >= 0) { x = x.replace(h.gridlocalization.percentagesymbol, "") } } var y = A.createfilter(C, x, "EQUAL", null, B.cellsFormat, h.gridlocalization) } else { var y = A.createfilter(C, x, "CONTAINS") } } A.operator = i; A.addfilter(0, y); return A }; if (h.filterMode !== "simple") { if (u) { var v = u.value; var t = h.getColumn(v); var s = w(t, r, "and"); if (r.length > 0) { h.removeFilter(v); h.addFilter(v, s); h.applyFilters() } else { h.removeFilter(v); h.applyFilters() } if (h.filterMode === "advanced") { if (h._updateFilterRow) { h._updateFilterRow(true) } } } } else { h.clearFilters(false, false); if (r.length > 0) { for (var q = 0; q < h.columns.records.length; q++) { var t = h.columns.records[q]; var s = w(t, r, "or"); h.addFilter(t.datafield, s) } } h.applyFilters() } if (h.dataview.filters.length == 0) { h.filtericon.fadeOut(200) } else { h.filtericon.fadeIn(200) } } }; o.keydown(function (i) { if (i.keyCode === 13) { m(); if (i.preventDefault) { i.preventDefault() } return false } }); g.click(function () { m() }); this.filterinput = o; this.filter.append(j); if (this.filterMode == "advanced") { var e = b("<a style='float: left; position: relative; margin: 2px; margin-left: 10px;' href='#'>" + this.gridlocalization.filterstring + "</a>"); j.append(e); this.addHandler(e, "click", function (q) { var i = function (u) { if (h.filterrow) { for (var x = 0; x < h.filterrow[0].cells.length; x++) { var t = h.filterrow[0].cells[x]; var v = b(t).find("input:first"); var z = h.columns.records[x]; if (!z.filterable) { continue } if (u === true) { v.val("") } for (var w = 0; w < h.dataview.filters.length; w++) { var y = h.dataview.filters[w]; if (y.datafield === z.displayfield) { v.val(y.filter.getfilterat(0).filtervalue); break } } } } }; var s = function (v) { if (h.filterrow) { var u = 0; for (var x = 0; x < h.filterrow[0].cells.length; x++) { var t = h.filterrow[0].cells[x]; var w = b(t).find("input:first"); var y = h.columns.records[x]; if (y.hidden) { t.style.visibility = "hidden" } else { t.style.visibility = "inherit" } if (!y.filterable) { continue } t.style.left = parseInt(u) + parseInt(y.uielement[0].style.left) + "px"; t.style.width = 6 + y.width + "px"; if (w[0]) { w[0].style.width = y.width - 6 - 22 + "px" } } } }; h._updateFilterRow = i; h._arrangeFilterRow = s; var r = function () { h.filtercolumnsList.jqxDropDownList({ disabled: true }); h.filterinput.addClass(h.toThemeProperty("jqx-fill-state-disabled")); h.filterinput.attr("disabled", true); h.filterbutton.addClass(h.toThemeProperty("jqx-fill-state-disabled")) }; if (h.filter.find(".filterrow").length === 0) { h._renderadvancedfilter(); r(); i(); h._arrange(); s() } else { if (h.filter.find(".filterrow").css("display") === "none") { r(); h.filter.find(".filterrow").removeClass("filterrow-hidden"); i(); h.filter.find(".filterrow").show(); s() } else { h.filtercolumnsList.jqxDropDownList({ disabled: false }); h.filterinput.removeClass(h.toThemeProperty("jqx-fill-state-disabled")); h.filterinput.attr("disabled", false); h.filterbutton.removeClass(h.toThemeProperty("jqx-fill-state-disabled")); n(h.filtercolumnsList.jqxDropDownList("getSelectedItem").value); h.filter.find(".filterrow").addClass("filterrow-hidden"); h.filter.find(".filterrow").hide() } h._arrange() } return false }) } var k = b("<div style='float: left; width: 16px; height: 16px; position: relative; margin: 3px;'></div>"); k.attr("title", h.gridlocalization.filterclearstring); k.addClass(h.toThemeProperty("jqx-icon-close")); j.append(k); k.hide(); h.filtericon = k; k.click(function () { h.clearFilters(); h.filtericon.fadeOut(200) }); if (h.dataview.filters.length > 0) { if (h.filterMode != "advanced") { n(h.dataview.filters[0].datafield) } else { if (h._updateFilterRow) { h._updateFilterRow() } } } }, _renderadvancedfilter: function () { var h = this; var c = function () { h.clearFilters(false, false); var n = h.filtercolumnsList.jqxDropDownList("getSelectedItem").value; var p = h.filterinput.val(); for (var m = 0; m < h.filterrow[0].cells.length; m++) { var t = h.filterrow[0].cells[m]; var s = b(t).find("input:first"); var q = b(t).find(".filterconditions"); var l = h.columns.records[m]; var k = ""; if (!l.filterable) { continue } if (l.displayfield === n) { h.filterinput.val(s.val()) } var o = h.getcolumntypebydatafield(l); var j = new b.jqx.filter(); switch (o) { case "number": case "int": case "float": case "decimal": filtertype = "numericfilter"; conditions = j.getoperatorsbyfiltertype("numericfilter"); break; case "boolean": case "bool": filtertype = "booleanfilter"; conditions = j.getoperatorsbyfiltertype("booleanfilter"); break; case "date": case "time": filtertype = "datefilter"; conditions = j.getoperatorsbyfiltertype("datefilter"); break; case "string": filtertype = "stringfilter"; conditions = j.getoperatorsbyfiltertype("stringfilter"); break } if (q.length == 0) { if (filtertype === "stringfilter") { k = conditions[2] } else { k = conditions[0] } } else { var w = q.jqxDropDownList("getSelectedItem"); if (w) { k = conditions[w.index] } else { if (filtertype === "stringfilter") { k = conditions[2] } else { k = conditions[0] } } } var u = s.val(); if (u.length > 0 || (u.length == 0 && k == "NOT_NULL") || (u.length == 0 && k == "NOT_EMPTY") || (u.length == 0 && k == "EMPTY") || (u.length == 0 && k == "NULL")) { var r = l.displayfield; var v = new b.jqx.filter(); if (filtertype == "numericfilter") { if (h.gridlocalization.decimalseparator == ",") { if (u.indexOf(h.gridlocalization.decimalseparator) >= 0) { u = u.replace(h.gridlocalization.decimalseparator, ".") } } if (u.indexOf(h.gridlocalization.currencysymbol) >= 0) { u = u.replace(h.gridlocalization.currencysymbol, "") } if (u.indexOf(h.gridlocalization.percentagesymbol) >= 0) { u = u.replace(h.gridlocalization.percentagesymbol, "") } } var j = v.createfilter(filtertype, u, k, null, l.cellsFormat, h.gridlocalization); v.addfilter(0, j); h.addFilter(r, v) } } if (h.dataview.filters.length > 0) { h.applyFilters() } else { h.clearFilters() } if (h.dataview.filters.length == 0) { h.filtericon.fadeOut(200) } else { h.filtericon.fadeIn(200) } }; var e = function () { var m = b("<div style='position: relative;' class='filterrow'></div>").appendTo(h.filter); h.filterrow = m; m[0].cells = new Array(); m.height(24); m.width(h.table.width()); var k = 0; var j = h.filtercolumnsList.jqxDropDownList("getSelectedItem").value; var l = h.filterinput.val(); b.each(h.columns.records, function () { var p = this; var n = b("<div></div>").appendTo(m); n.css("position", "absolute"); n.css("left", k + parseInt(p.uielement[0].style.left)); if (p.pinned) { n.css("z-index", h.tableZIndex + h.columns.records.length); n.addClass(h.toThemeProperty("jqx-widget-header")) } m[0].cells.push(n[0]); if (!this.filterable) { return true } var o = b("<input style='margin-left: 4px; height: 20px; float: left;' role='textbox' type='text'/>").appendTo(n); o.keydown(function (r) { if (r.keyCode === 13) { c() } }); if (p.displayfield === j) { o.val(l) } o.addClass(h.toThemeProperty("jqx-input")); o.addClass(h.toThemeProperty("jqx-rc-all")); o.addClass(h.toThemeProperty("jqx-widget")); o.addClass(h.toThemeProperty("jqx-widget-content")); var q = b("<div style='cursor: pointer; margin-left: 4px; margin-bottom: 4px; margin-top: 6px; width: 18px; position: relative; margin-top: 4px; float: left;'></div>").appendTo(n); q.append(b("<div style='width: 16px; height: 16px;' class='" + h.toThemeProperty("jqx-grid-column-filterbutton") + "'></div>")); o.focus(function () { h.ensureColumnVisible(p.displayfield); h.filter[0].scrollLeft = 0; h.ensureColumnVisible(p.displayfield); setTimeout(function () { h.filter[0].scrollLeft = 0; h.ensureColumnVisible(p.displayfield) }, 10) }); q.click(function () { var t = b("<div class='filterconditions' style='position: relative; margin-top: 1px; float: left;'></div>"); t.insertAfter(q); q.remove(); var r = h.getcolumntypebydatafield(p); var s = h._getfiltersbytype(r); if (r === "string") { index = 2 } else { index = 0 } t.jqxDropDownList({ theme: h.theme, enableBrowserBoundsDetection: true, renderMode: "simple", arrowSize: 0, selectedIndex: index, rtl: h.rtl, dropDownWidth: 230, dropDownHeight: 180, width: 20, height: 20, source: s, selectionRenderer: function () { return "<div style='width: 16px; height: 16px;' class='" + h.toThemeProperty("jqx-grid-column-filterbutton") + "'></div>" } }); h.addHandler(t, "close", function (u) { o.focus(); setTimeout(function () { o.focus() }, 10) }); t.removeAttr("tabindex"); t.find("div").removeAttr("tabindex"); t.jqxDropDownList("open") }); o[0].style.width = p.width - 6 - 22 + "px" }); b("<div style='clear: both;'></div>").appendTo(m) }; e(); var i = b("<div style='position:relative;' class='filterrow'></div>").appendTo(h.filter); var f = b("<input type='button' style='position: relative; float: left; margin-top: 4px; margin-left: 4px;' value='" + h.gridlocalization.filterapplystring + "'/>").appendTo(i); var g = b("<input type='button' style='position: relative; float: left; margin-top: 4px;  margin-left: 4px;' value='" + h.gridlocalization.filtercancelstring + "'/>").appendTo(i); var d = 0; f.css("left", d); g.css("left", d); f.jqxButton({ theme: h.theme }); g.jqxButton({ theme: h.theme }); g.click(function () { h.filtercolumnsList.jqxDropDownList({ disabled: false }); h.filterinput.removeClass(h.toThemeProperty("jqx-fill-state-disabled")); h.filterinput.attr("disabled", false); h.filterbutton.removeClass(h.toThemeProperty("jqx-fill-state-disabled")); h.filter.find(".filterrow").addClass("filterrow-hidden"); h.filter.find(".filterrow").hide(); h._arrange() }); f.click(function () { c() }); h._renderhorizontalscroll() }, _getfiltertype: function (c) { var d = "stringfilter"; switch (c) { case "number": case "int": case "float": case "decimal": d = "numericfilter"; break; case "boolean": case "bool": d = "booleanfilter"; break; case "date": case "time": d = "datefilter"; break; case "string": d = "stringfilter"; break } return d }, getcolumntypebydatafield: function (e) { var f = this; var d = "string"; var c = f.source.datafields || ((f.source._source) ? f.source._source.datafields : null); if (c) { var g = ""; b.each(c, function () { if (this.name == e.displayfield) { if (this.type) { g = this.type } return false } }); if (g) { return g } } return d }, _getfiltersbytype: function (c) { var d = this; var e = ""; switch (c) { case "number": case "float": case "int": e = d.gridlocalization.filternumericcomparisonoperators; break; case "date": e = d.gridlocalization.filterdatecomparisonoperators; break; case "boolean": case "bool": e = d.gridlocalization.filterbooleancomparisonoperators; break; case "string": default: e = d.gridlocalization.filterstringcomparisonoperators; break } return e }, _getcellvalue: function (c, e) { var d = null; d = e[c.datafield]; if (c.displayfield != null) { d = e[c.displayfield] } if (d == null) { d = "" } return d }, _renderrows: function (ap) { if (this.editable) { if (this.editKey != null) { if (ap !== false) { var M = this.endroweditbykey(this.editKey) } } } if (this.treeGrid) { this.treeGrid._renderrows(); return } if (this._loading) { return } if (this._updating) { return } if (this.rendering) { this.rendering() } var ab = this; var T = 0; this.table[0].rows = new Array(); var H = this.toTP("jqx-cell") + " " + this.toTP("jqx-widget-content"); if (this.rtl) { H += " " + this.toTP("jqx-cell-rtl") } var K = this.columns.records.length; var ao = b.jqx.browser.msie && b.jqx.browser.version < 8; if (ao) { this.host.attr("hideFocus", "true") } var R = ab.groups.length; var ai = new Array(); var k = this.source.records; k = this.dataview.evaluate(k); this.dataViewRecords = k; if (this.dataview.pagesize == "all" || !this.pageable || this.serverProcessing) { var u = k; if (this.pageable && this.serverProcessing && k.length > this.dataview.pagesize) { var u = k.slice(this.dataview.pagesize * this.dataview.pagenum, this.dataview.pagesize * this.dataview.pagenum + this.dataview.pagesize) } } else { var u = k.slice(this.dataview.pagesize * this.dataview.pagenum, this.dataview.pagesize * this.dataview.pagenum + this.dataview.pagesize) } if (ab.groups && ab.groups.length > 0) { var P = this.pageable ? this.dataview.pagesize * this.dataview.pagenum : 0; var z = function (w) { var au = 0; var i = new Array(); for (var c = 0; c < w.length; c++) { var j = w[c]; if (j.level == 0) { au++ } if (au > ab.dataview.pagesize * ab.dataview.pagenum && au <= ab.dataview.pagesize * ab.dataview.pagenum + ab.dataview.pagesize) { i.push(j) } if (au > ab.dataview.pagesize * ab.dataview.pagenum + ab.dataview.pagesize) { break } } return i }; if (this.pageSizeMode === "root") { var v = ab.source.getGroupedRecords(ab.groups, "records", "label", null, "data", null, "parent", k, 0); ab.rootRecordsLength = v.length; v = z(v) } else { var v = ab.source.getGroupedRecords(ab.groups, "records", "label", null, "data", null, "parent", u, P) } var y = function (j, w) { for (var av = 0; av < j.length; av++) { var c = j[av]; w.push(c); if (c.records && c.records.length > 0) { var aw = y(c.records, new Array()); for (var au = 0; au < aw.length; au++) { if (aw[au].leaf) { w.push(aw[au]) } else { w.push(aw[au]) } } } } return w }; var ai = y.call(ab, v, new Array()); u = ai; this.rowsByKey = new Array(); for (var am = 0; am < u.length; am++) { var G = u[am]; this.rowsByKey[G.uid] = G } } var ai = u; this.renderedRecords = ai; var U = ai.length; var V = this.tableZIndex; var aq = 0; var aa = 0; if (ao) { for (var al = 0; al < K; al++) { var Z = this.columns.records[al]; var e = Z.width; if (e < Z.minwidth) { e = Z.minwidth } if (e > Z.maxwidth) { e = Z.maxwidth } var l = b('<table><tr><td role="gridcell" style="max-width: ' + e + "px; width:" + e + 'px;" class="' + H + '"></td></tr></table>'); b(document.body).append(l); var n = l.find("td"); aq = 1 + parseInt(n.css("padding-left")) + parseInt(n.css("padding-right")); l.remove(); break } } var ak = this.rtl ? " " + this.toTP("jqx-grid-table-rtl") : ""; var B = "<table cellspacing='0' cellpadding='0' class='" + this.toTP("jqx-grid-table") + ak + "' id='table" + this.element.id + "'><colgroup>"; var ar = "<table cellspacing='0' cellpadding='0' class='" + this.toTP("jqx-grid-table") + ak + "' id='pinnedtable" + this.element.id + "'><colgroup>"; var I = 0; var s = K; for (var al = 0; al < K; al++) { var Z = this.columns.records[al]; if (Z.hidden) { I++; s--; continue } var e = Z.width; if (e < Z.minwidth) { e = Z.minwidth } if (e > Z.maxwidth) { e = Z.maxwidth } e -= aq; if (e < 0) { e = 0 } if (ao) { var ac = e; if (al == I) { ac++ } if (Z.rowDetailscolumn) { var ac = ac + 4; ar += "<col style='max-width: " + ac + "px; width: " + ac + "px;'>"; B += "<col style='max-width: " + ac + "px; width: " + ac + "px;'>" } else { ar += "<col style='max-width: " + ac + "px; width: " + ac + "px;'>"; B += "<col style='max-width: " + ac + "px; width: " + ac + "px;'>" } } else { ar += "<col style='max-width: " + e + "px; width: " + e + "px;'>"; B += "<col style='max-width: " + e + "px; width: " + e + "px;'>" } aa += e } B += "</colgroup>"; ar += "</colgroup>"; this._hiddencolumns = false; var g = false; if (this.rowDetails && this._pinnedTable) { this._pinnedTable.find("[data-role=details]").detach(); this._table.find("[data-role=details]").detach() } if (U === 0) { var o = '<tr role="row">'; var m = this.host.height(); if (this.pageable) { m -= this.pagerHeight; if (this.pagerPosition === "both") { m -= this.pagerHeight } } m -= this.columnsHeight; if (this.filterable) { var ag = this.filter.find(".filterrow"); var D = this.filter.find(".filterrow-hidden"); var C = 1; if (D.length > 0) { C = 0 } m -= this.filterHeight + this.filterHeight * ag.length * C } if (this.showstatusbar) { m -= this.statusBarHeight } if (this.showAggregates) { m -= this.aggregatesHeight } if (m < 25) { m = 25 } if (this.hScrollBar[0].style.visibility != "hidden") { m -= this.hScrollBar.outerHeight() } if (this.height === "auto" || this.height === null || this.autoheight) { m = 300 } var l = '<td colspan="' + this.columns.records.length + '" role="gridcell" style="border: none; min-height: ' + m + "px; height: " + m + "px; max-width:" + aa + "px; width:" + aa + "px;"; var H = this.toTP("jqx-cell") + " " + this.toTP("jqx-grid-cell") + " " + this.toTP("jqx-item"); H += " " + this.toTP("jqx-center-align"); l += '" class="' + H + '">'; l += this.gridlocalization.emptydatastring; l += "</td>"; o += l; B += o; ar += o; this.table[0].style.width = aa + 2 + "px"; T = aa } var q = this.getRows(); var x = new Array(); for (var am = 0; am < ai.length; am++) { var G = ai[am]; var L = G.uid; if (undefined === G.uid) { G.uid = this.dataview.generatekey() } var o = '<tr data-key="' + L + '" role="row" id="row' + am + this.element.id + '">'; var E = '<tr data-key="' + L + '" role="row" id="row' + am + this.element.id + '">'; if (R > 0) { if (G.level < R) { var o = '<tr data-role="row-group" data-key="' + L + '" role="row" id="row' + am + this.element.id + '">'; var E = '<tr data-role="row-group" data-key="' + L + '" role="row" id="row' + am + this.element.id + '">' } } var p = 0; var S = 0; for (var al = 0; al < K; al++) { var ae = this.columns.records[al]; if (ae.pinned || (this.rtl && this.columns.records[K - 1].pinned)) { g = true } var e = ae.width; if (e < ae.minwidth) { e = ae.minwidth } if (e > ae.maxwidth) { e = ae.maxwidth } e -= aq; if (e < 0) { e = 0 } var H = this.toTP("jqx-cell") + " " + this.toTP("jqx-grid-cell") + " " + this.toTP("jqx-item"); if (ae.pinned) { H += " " + this.toTP("jqx-grid-cell-pinned") } if (this.sortcolumn === ae.displayfield) { H += " " + this.toTP("jqx-grid-cell-sort") } if (this.altRows && am % 2 != 0) { H += " " + this.toTP("jqx-grid-cell-alt") } if (this.rtl) { H += " " + this.toTP("jqx-cell-rtl") } var O = ""; if (R > 0) { if (G.level < R) { if (!ao) { H += " " + this.toTP("jqx-grid-cell-pinned"); O += ' colspan="' + K + '"'; var ac = 0; for (var ad = 0; ad < K; ad++) { var at = ab.columns.records[ad]; var A = at.width; if (A < at.minwidth) { e = at.minwidth } if (A > at.maxwidth) { e = at.maxwidth } A -= aq; if (A < 0) { A = 0 } if (!at.hidden) { ac += A } } e = ac } else { H += " " + this.toTP("jqx-grid-cell-pinned") } } } var l = '<td role="gridcell" ' + O + ' style="max-width:' + e + "px; width:" + e + "px;"; var af = '<td role="gridcell" ' + O + ' style="pointer-events: none; visibility: hidden; border-color: transparent; max-width:' + e + "px; width:" + e + "px;"; if (al == K - 1 && K == 1) { l += "border-right-color: transparent;"; af += "border-right-color: transparent;" } var Y = false; if (R > 0) { if (G.level < R) { Y = true } } if (!Y) { if (ae.cellsalign != "left") { if (ae.cellsalign === "right") { H += " " + this.toTP("jqx-right-align") } else { H += " " + this.toTP("jqx-center-align") } } } else { if (this.rtl) { H += " " + this.toTP("jqx-right-align") } } if (this.rowinfo[G.uid]) { if (this.rowinfo[G.uid].selected && !ae.rowDetailscolumn) { if (this.editKey !== G.uid) { if (this.selectionMode !== "none") { H += " " + this.toTP("jqx-grid-cell-selected"); H += " " + this.toTP("jqx-fill-state-pressed") } } } if (this.rowinfo[G.uid].locked) { H += " " + this.toTP("jqx-grid-cell-locked") } } if (!(ae.hidden)) { p += aq + e; if (S == 0) { l += "border-left-width: 0px;"; af += "border-left-width: 0px;" } S++ } else { if (!Y) { l += "display: none;"; af += "display: none;"; this._hiddencolumns = true } } if (R > 0 && ao && Y && al >= R) { l += "font-size: 1px; border-color: transparent;  color: transparent;"; af += "font-size: 1px; border-color: transparent; color: transparent;" } if (ae.pinned) { l += "pointer-events: auto;"; af += "pointer-events: auto;" } if (!Y && ae.rowDetailscolumn) { if (this.rowinfo[G.uid]) { if (!this.rowinfo[G.uid].nodetails) { if (this.rowinfo[G.uid].expanded) { if (!this.rtl) { H += " " + this.toTP("jqx-grid-group-expand") } else { H += " " + this.toTP("jqx-grid-group-expand-rtl") } H += " " + this.toTP("jqx-icon-arrow-down") } else { if (!this.rtl) { H += " " + this.toTP("jqx-grid-group-collapse"); H += " " + this.toTP("jqx-icon-arrow-right") } else { H += " " + this.toTP("jqx-grid-group-collapse-rtl"); H += " " + this.toTP("jqx-icon-arrow-left") } } } } else { if (!this.rtl) { H += " " + this.toTP("jqx-grid-group-collapse"); H += " " + this.toTP("jqx-icon-arrow-right") } else { H += " " + this.toTP("jqx-grid-group-collapse-rtl"); H += " " + this.toTP("jqx-icon-arrow-left") } } } if (!this.autoRowHeight || (this.autoRowHeight && !ae.autoCellHeight)) { H += " " + this.toTP("jqx-grid-cell-nowrap ") } var aj = ab._getcellvalue(ae, G); var f = ae.cellsFormat; if (R > 0) { if (G.level < R) { aj = G.label; f = ab.getColumn(ab.groups[G.level]).cellsFormat } } if (f != "") { if (b.jqx.dataFormat) { if (b.jqx.dataFormat.isDate(aj)) { aj = b.jqx.dataFormat.formatdate(aj, f, ab.gridlocalization) } else { if (b.jqx.dataFormat.isNumber(aj) || (!isNaN(parseFloat(aj)) && isFinite(aj))) { aj = b.jqx.dataFormat.formatnumber(aj, f, ab.gridlocalization) } } } } if (!Y) { if (ae.cellclassname != "" && ae.cellclassname) { if (typeof ae.cellclassname == "string") { H += " " + ae.cellclassname } else { var r = ae.cellclassname(am, ae.datafield, aj, G); if (r) { H += " " + r } } } if (ae.cellsRenderer != "" && ae.cellsRenderer) { var d = q.indexOf(G); if (d === -1) { if (G.originalRecord) { var d = q.indexOf(G.originalRecord) } } aj = ae.cellsRenderer(d, ae.datafield, aj, G); if (aj && (aj.indexOf("<jqx-") >= 0 || aj.indexOf(" ng-") >= 0)) { x.push({ rowKey: G.uid, row: d, column: ae.datafield, value: aj, columnIndex: al }) } } } else { if (this.groupsRenderer) { aj = this.groupsRenderer(aj, G, G.level) } } l += '" class="' + H + '">'; l += aj; l += "</td>"; af += '" class="' + H + '">'; af += aj; af += "</td>"; if (!ae.pinned) { o += l; if (g) { E += af } } else { E += l; o += l } if (R > 0 && !ao) { if (G.level < R) { break } } } if (T == 0) { this.table[0].style.width = p + 2 + "px"; T = p } o += "</tr>"; E += "</tr>"; B += o; ar += E; if (!this.rowinfo[G.uid]) { this.rowinfo[G.uid] = { group: Y, row: G, details: null, detailsHeight: 200, initialized: false, expanded: false } } else { if (!("group" in this.rowinfo[G.uid])) { this.rowinfo[G.uid].group = Y } if (!("row" in this.rowinfo[G.uid])) { this.rowinfo[G.uid].row = G } if (!("details" in this.rowinfo[G.uid])) { this.rowinfo[G.uid].details = null } if (!("detailsHeight" in this.rowinfo[G.uid])) { this.rowinfo[G.uid].detailsHeight = 200 } if (!("initialized" in this.rowinfo[G.uid])) { this.rowinfo[G.uid].initialized = false } if (!("expanded" in this.rowinfo[G.uid])) { this.rowinfo[G.uid].expanded = false } } if (this.serverProcessing) { this.rowinfo[G.uid].row = G } if (this.rowDetails) { var F = this.rowinfo[G.uid].detailsHeight; if (this.rowinfo[G.uid]) { if (this.rowinfo[G.uid].expanded) { var ah = '<tr data-role="row-details"><td valign="top" style="pointer-events: auto; overflow: hidden; min-height: ' + F + "px; max-height: " + F + "px; height: " + F + 'px; overflow: hidden; border-left: none; border-right: none;" colspan="' + this.columns.records.length + '" role="gridcell"' } else { var ah = '<tr data-role="row-details" style="display: none;"><td valign="top" style="pointer-events: auto; overflow: hidden; min-height: ' + F + "px; max-height: " + F + "px; height: " + F + 'px; overflow: hidden; border-left: none; border-right: none;" colspan="' + this.columns.records.length + '" role="gridcell"' } } else { var ah = '<tr data-role="row-details" style="display: none;"><td valign="top" style="pointer-events: auto; overflow: hidden; min-height: ' + F + "px; max-height: " + F + "px; height: " + F + 'px; overflow: hidden; border-left: none; border-right: none;" colspan="' + this.columns.records.length + '" role="gridcell"' } var H = this.toTP("jqx-cell") + " " + this.toTP("jqx-grid-cell") + " " + this.toTP("jqx-item"); H += " " + this.toTP("jqx-details"); H += " " + this.toTP("jqx-reset"); ah += '" class="' + H + '"><div style="pointer-events: auto; overflow: hidden; min-height: ' + F + "px; max-height: " + F + "px; height: " + F + 'px;"><div data-role="details"></div></div></td></tr>'; B += ah; ar += ah } } B += "</table>"; ar += "</table>"; if (g) { if (ab.WinJS) { MSApp.execUnsafeLocalFunction(function () { ab.table.html(ar + B) }) } else { ab.table[0].innerHTML = ar + B } var W = this.table.find("#table" + this.element.id); var X = this.table.find("#pinnedtable" + this.element.id); X.css("float", "left"); X.css("pointer-events", "none"); W.css("float", "left"); X[0].style.position = "absolute"; W[0].style.position = "relative"; W[0].style.zIndex = V - 10; X[0].style.zIndex = V + 10; this._table = W; this._table[0].style.left = "0px"; this._pinnedTable = X; this._pinnedTable[0].style.left = "0px"; this._pinnedTable[0].style.width = T + "px"; this._table[0].style.width = T + "px"; if (this.rtl) { if (T > parseInt(this.element.style.width) && this._haspinned) { this._pinnedTable[0].style.left = 3 - T + parseInt(this.element.style.width) + "px" } } if (this.rowDetails) { for (var am = 0; am < U; am++) { var G = ai[am]; var L = G.uid; if (this.rowinfo[L].details) { var N = b(this._table.children()[1]).children(("[data-key=" + L + "]")); var Q = b(this._pinnedTable.children()[1]).children(("[data-key=" + L + "]")); if (N) { var h = Q.next(); var J = b(b(h).children().children()); J.children().detach(); J.append(this.rowinfo[G.uid].details) } } } } } else { if (ab.WinJS) { MSApp.execUnsafeLocalFunction(function () { ab.table.html(B) }) } else { ab.table[0].innerHTML = B } var ad = this.table.find("#table" + this.element.id); this._table = ad; if (b.jqx.browser.msie && b.jqx.browser.version < 10) { this._table[0].style.width = T + "px" } if (U === 0) { this._table[0].style.width = (2 + T) + "px" } } if (U === 0) { this._table[0].style.tableLayout = "auto"; if (this._pinnedTable) { this._pinnedTable[0].style.tableLayout = "auto" } } if (x && x.length > 0) { var an = this._table[0].rows; b.each(x, function () { var w = this.row; var au = this.rowKey; var j = this.column; var i = this.columnIndex; var t = ab._getuirow(au); if (t) { var c = t[0].cells[i]; if (b.jqx.angularCompile) { b.jqx.angularCompile(c, "<div>" + c.innerHTML + "</div>") } } }) } if (this.rendered) { this.rendered() } }, getcolumnindex: function (c) { var d = this.getColumn(c); var e = this.columns.records.indexOf(d); return e }, setcolumnindex: function (e, i, j) { var h = this.getColumn(e); if (h.pinned) { return } if (h.hidden) { return } if (h.checkboxcolumn) { return } if (h.grouped) { return } var l = this.columns.records.indexOf(h); this.columns.records.splice(l, 1); this.columns.records.splice(i, 0, h); var f = 0; var n = this.headerZIndex; this.columnsrow.children().detach(); var k = this.toThemeProperty("jqx-grid-cell"); k += " " + this.toThemeProperty("jqx-grid-cell-pinned"); k += " " + this.toThemeProperty("jqx-item"); var m = this; var c = null; if (m.filterrow != undefined) { var c = b(m.filterrow.children()[0]) } this.columnsrow[0].cells = []; var g = false; b.each(this.columns.records, function (p, s) { var q = this.uielement; m.columnsrow.append(q); if (!m.rtl) { q.css("z-index", n--) } else { q.css("z-index", n++) } var o = !m.rtl ? 250 + n - 1 : 250 + n + 1; if (this.pinned) { q.css("z-index", o) } var r = this.width; q.css("left", f); m.columnsrow[0].cells[m.columnsrow[0].cells.length] = q[0]; if (this.hidden) { g = true } if (!(this.hidden && this.hideable)) { f += r } }); if (this.groupable) { var d = this.groups.length; if (d > 0) { if (l - d >= 0) { l -= d; i -= d } } } if (this.rowDetails) { if (l - 1 >= 0) { l--; i-- } } if (this.selectionMode == "checkbox") { if (l - 1 >= 0) { l--; i-- } } var h = this._columns[l]; this._columns.splice(l, 1); this._columns.splice(i, 0, h); this.resize(); this._rendercolumnGroups(); this._raiseEvent("columnReordered", { dataField: h.datafield, oldIndex: l, newIndex: i }) }, _pinnedColumnsLength: function () { var c = 0; b.each(this.columns.records, function () { if (this.pinned) { c++ } if (this.grouped) { c++ } }); if (this.rowDetails) { c++ } if (this.selectionMode == "checkbox") { c++ } return c }, _handlecolumnsReorder: function () { var g = this; var h = -1; var d = false; if (!g.columnsReorder) { return } var f = "mousemove.reorder" + this.element.id; var e = "mousedown.reorder" + this.element.id; var i = "mouseup.reorder" + this.element.id; var c = false; if (this.isTouchDevice() && this.touchmode !== true) { c = true; f = b.jqx.mobile.getTouchEventName("touchmove") + ".reorder" + this.element.id; e = b.jqx.mobile.getTouchEventName("touchstart") + ".reorder" + this.element.id; i = b.jqx.mobile.getTouchEventName("touchend") + ".reorder" + this.element.id } this.removeHandler(b(document), f); this.addHandler(b(document), f, function (x) { if (g.resizing) { return true } if (g.reordercolumn != null) { var m = parseInt(x.pageX); var u = parseInt(x.pageY); if (c) { var t = g.getTouches(x); var p = t[0]; if (p != undefined) { m = parseInt(p.pageX); u = parseInt(p.pageY) } } var j = g.host.coord(); var w = parseInt(j.left); var k = parseInt(j.top); if (g.dragmousedownoffset == undefined || g.dragmousedownoffset == null) { g.dragmousedownoffset = { left: 0, top: 0 } } var B = parseInt(m) - parseInt(g.dragmousedownoffset.left); var s = parseInt(u) - parseInt(g.dragmousedownoffset.top); g.reordercolumn.css({ left: B + "px", top: s + "px" }); d = false; if (m >= w && m <= w + g.host.width()) { if (u >= k && u <= k + g.host.height()) { d = true } } h = -1; if (d) { g.reordercolumnicon.removeClass(g.toThemeProperty("jqx-grid-dragcancel-icon")); g.reordercolumnicon.addClass(g.toThemeProperty("jqx-grid-drag-icon")); var n = g.columnsheader.coord(); var q = n.top + g.columnsheader.height(); if (g.columnsdropline != null) { if (u >= n.top && u <= q) { h = g._handlereordercolumnsdroplines(m); if (g.columnGroups) { if (h != -1) { var l = 0; l += g._pinnedColumnsLength(); var o = h.index; if (o >= l) { var y = g.columns.records[o]; if (y != undefined) { var v = g.columns.records.indexOf(g.getColumn(y.datafield)); if (y.datafield == null) { var v = g.columns.records.indexOf(g.getcolumnbytext(y.text)) } var r = b.data(g.reordercolumn[0], "reorderrecord"); var A = g.columns.records.indexOf(g.getColumn(r)); var z = y; if (A < v) { if (h.position == "before") { z = g.columns.records[v - 1] } } if (z.columngroup != g.getColumn(r).columngroup) { g.columnsdropline.hide(); return } } } } } } else { g.columnsdropline.fadeOut("slow") } } } else { if (g.columnsdropline != null) { g.columnsdropline.fadeOut("slow") } g.reordercolumnicon.removeClass(g.toThemeProperty("jqx-grid-drag-icon")); g.reordercolumnicon.addClass(g.toThemeProperty("jqx-grid-dragcancel-icon")) } if (x.preventDefault) { x.preventDefault(); x.stopPropagation() } if (c) { x.preventDefault(); x.stopPropagation(); return false } } }); this.columnsbounds = new Array(); this.removeHandler(b(document), e); this.addHandler(b(document), e, function (k) { if (g.resizing) { return true } g.columnsbounds = new Array(); var m = g.host.coord().left; var l = g.host.coord().top; if (g.showtoolbar) { l += g.toolbarHeight } if (g.filter) { l += g.filter.height() } var j = 0; b.each(g.columns.records, function (o) { var p = this; if (p.hidden) { g.columnsbounds[g.columnsbounds.length] = { top: l, column: p, left: m, width: 0, height: 2 }; return true } if (j == 0) { if (!g.rtl) { m = parseInt(g.host.coord().left) - g.hScrollInstance.value } else { m = parseInt(g.host.coord().left) - g.hScrollInstance.max + g.hScrollInstance.value } } j++; var n = 2 + g.columnsHeight; if (g.columnshierarchy) { l = b(p.uielement).coord().top; n = b(p.uielement).height() } g.columnsbounds[g.columnsbounds.length] = { top: l, column: p, left: m, width: p.width, height: n }; m += p.width }) }); this.removeHandler(b(document), i); this.addHandler(b(document), i, function (j) { if (g.resizing) { return true } g.__drag = false; b(document.body).removeClass("jqx-disableselect"); var l = parseInt(j.pageX); var t = parseInt(j.pageY); if (c) { var o = g.getTouches(j); var n = o[0]; l = parseInt(n.pageX); t = parseInt(n.pageY) } var m = g.host.coord(); var v = parseInt(m.left); var w = parseInt(m.top); if (g.showtoolbar) { w += g.toolbarHeight } g.columndragstarted = false; g.dragmousedown = null; if (g.reordercolumn != null) { var k = b.data(g.reordercolumn[0], "reorderrecord"); var x = g.columns.records.indexOf(g.getColumn(k)); g.reordercolumn.remove(); g.reordercolumn = null; var p = 0; p += g._pinnedColumnsLength(); if (k != null) { if (d) { if (h != -1) { var q = h.index; if (q >= p) { var s = g.columns.records[q]; if (s != undefined) { var u = g.columns.records.indexOf(g.getColumn(s.datafield)); if (s.datafield == null) { var u = g.columns.records.indexOf(g.getcolumnbytext(s.text)) } if (g.columnGroups) { var r = s; if (x < u) { if (h.position == "before") { r = g.columns.records[u - 1] } } if (r.columngroup != g.getColumn(k).columngroup) { if (g.columnsdropline != null) { g.columnsdropline.remove(); g.columnsdropline = null } return } } if (x < u) { if (h.position == "before") { g.setcolumnindex(k, u - 1) } else { g.setcolumnindex(k, u) } } else { if (x > u) { g.setcolumnindex(k, u) } } } } } } if (g.columnsdropline != null) { g.columnsdropline.remove(); g.columnsdropline = null } } } }) }, getcolumnbytext: function (d) { var c = null; if (this.columns.records) { b.each(this.columns.records, function () { if (this.text == d) { c = this; return false } }) } return c }, _handlereordercolumnsdroplines: function (i) { var c = this; var h = -1; var e = c._pinnedColumnsLength(); var g = parseInt(c.host.coord().left); var d = g + c.host.width(); var f = c.vScrollBar.css("visibility") != "hidden" ? 19 : 0; if (!c.rtl) { f = 0 } b.each(c.columnsbounds, function (j) { if (j >= e) { if (this.width == 0) { return true } if (i <= this.left + this.width / 2) { if (i > d) { c.columnsdropline.fadeOut(); return false } c.columnsdropline.css("left", f + parseInt(this.left) + "px"); c.columnsdropline.css("top", parseInt(this.top) + "px"); c.columnsdropline.height(this.height); c.columnsdropline.fadeIn("slow"); h = { index: j, position: "before" }; return false } else { if (i >= this.left + this.width / 2) { if (this.left + this.width > d) { c.columnsdropline.fadeOut(); return false } c.columnsdropline.css("left", f + 1 + this.left + this.width); c.columnsdropline.css("top", this.top); c.columnsdropline.height(this.height); c.columnsdropline.fadeIn("slow"); h = { index: j, position: "after" } } } } }); return h }, _createreordercolumn: function (d, f, i) { var h = this; var g = f; if (h.reordercolumn) { h.reordercolumn.remove() } if (h.columnsdropline) { h.columnsdropline.remove() } h.reordercolumn = b("<div></div>"); var k = d.clone(); h.reordercolumn.css("z-index", 999999); k.css("border-width", "1px"); k.css("opacity", "0.4"); var j = b(k.find("." + h.toThemeProperty("jqx-grid-column-menubutton"))); if (j.length > 0) { j.css("display", "none") } var c = b(k.find(".jqx-icon-close")); if (c.length > 0) { c.css("display", "none") } h.reordercolumnicon = b('<div style="z-index: 9999; position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -7px;"></div>'); h.reordercolumnicon.addClass(h.toThemeProperty("jqx-grid-drag-icon")); h.reordercolumn.css("float", "left"); h.reordercolumn.css("position", "absolute"); var e = h.host.coord(); k.width(d.width() + 16); h.reordercolumn.append(k); h.reordercolumn.height(d.height()); h.reordercolumn.width(k.width()); h.reordercolumn.append(h.reordercolumnicon); b(document.body).append(h.reordercolumn); k.css("margin-left", 0); k.css("left", 0); k.css("top", 0); h.reordercolumn.css("left", g.left + h.dragmousedown.left); h.reordercolumn.css("top", g.top + h.dragmousedown.top); if (i != undefined && i) { h.columnsdropline = b('<div style="z-index: 9999; display: none; position: absolute;"></div>'); h.columnsdropline.width(2); h.columnsdropline.addClass(h.toThemeProperty("jqx-grid-group-drag-line")); b(document.body).append(h.columnsdropline) } }, _handlecolumnsdragreorder: function (d, g) { if (this.reordercolumn) { this.reordercolumn.remove() } if (this.columnsdropline) { this.columnsdropline.remove() } this.dragmousedown = null; this.dragmousedownoffset = null; this.columndragstarted = false; this.reordercolumn = null; var h = this; var f; var c = false; if (this.isTouchDevice() && this.touchmode !== true) { c = true } var e = "mousedown.drag"; var f = "mousemove.drag"; if (c) { e = b.jqx.mobile.getTouchEventName("touchstart") + ".drag"; f = b.jqx.mobile.getTouchEventName("touchmove") + ".drag" } else { this.addHandler(g, "dragstart", function (i) { return false }) } this.addHandler(g, e, function (k) { if (false == d.draggable) { return true } if (h.resizing) { return true } h.__drag = true; var j = k.pageX; var i = k.pageY; if (c) { var l = h.getTouches(k); var n = l[0]; j = n.pageX; i = n.pageY } h.dragmousedown = { left: j, top: i }; var m = b(k.target).coord(); h.dragmousedownoffset = { left: parseInt(j) - parseInt(m.left), top: parseInt(i - m.top) }; if (k.preventDefault) { k.preventDefault() } return true }); this.addHandler(g, f, function (k) { if (!d.draggable) { return true } if (undefined == d.datafield) { return true } if (d.pinned) { return true } if (h.resizing) { return true } if (h.dragmousedown) { var j = k.pageX; var i = k.pageY; if (c) { var m = h.getTouches(k); var o = m[0]; if (o != undefined) { j = o.pageX; i = o.pageY } } f = { left: j, top: i }; if (!h.columndragstarted && h.reordercolumn == null) { var l = Math.abs(f.left - h.dragmousedown.left); var n = Math.abs(f.top - h.dragmousedown.top); if (l > 3 || n > 3) { h._createreordercolumn(g, f, true); b(document.body).addClass("jqx-disableselect"); b.data(h.reordercolumn[0], "reorderrecord", d.datafield) } } } }) }, getTouches: function (c) { return b.jqx.mobile.getTouches(c) }, _handlecolumnsResize: function () { var i = this; if (this.columnsResize) { var k = false; if (i.isTouchDevice()) { k = true } var g = "mousemove.resize" + this.element.id; var d = "mousedown.resize" + this.element.id; var e = "mouseup.resize" + this.element.id; if (k) { var g = b.jqx.mobile.getTouchEventName("touchmove") + ".resize" + this.element.id; var d = b.jqx.mobile.getTouchEventName("touchstart") + ".resize" + this.element.id; var e = b.jqx.mobile.getTouchEventName("touchend") + ".resize" + this.element.id } this.removeHandler(b(document), g); this.addHandler(b(document), g, function (n) { if (i.resizablecolumn != null && !i.disabled && i.resizing) { if (i.resizeline != null) { var s = i.resizablecolumn.columnelement; var p = i.host.coord(); var v = parseInt(i.resizestartline.coord().left); var l = v - i._startcolumnwidth; var w = i.resizablecolumn.column.minwidth; if (w == "auto") { w = 0 } else { w = parseInt(w) } var m = i.resizablecolumn.column.maxwidth; if (m == "auto") { m = 0 } else { m = parseInt(m) } var q = n.pageX; if (k) { var t = b.jqx.mobile.getTouches(n); var r = t[0]; q = r.pageX } l += w; var u = m > 0 ? v + m : 0; var o = m == 0 ? true : i._startcolumnwidth + q - v < m ? true : false; if (i.rtl) { var o = true } if (o) { if (!i.rtl) { if (q >= p.left && q >= l) { if (u != 0 && n.pageX < u) { i.resizeline.css("left", q) } else { if (u == 0) { i.resizeline.css("left", q) } } if (k) { return false } } } else { if (q >= p.left && q <= p.left + i.host.width()) { i.resizeline.css("left", q); if (k) { return false } } } } } } if (!k && i.resizablecolumn != null) { return false } }); this.removeHandler(b(document), d); this.addHandler(b(document), d, function (m) { if (i.resizablecolumn != null && !i.disabled) { var l = i.resizablecolumn.columnelement; if (l.coord().top + l.height() + 5 < m.pageY) { i.resizablecolumn = null; return } if (l.coord().top - 5 > m.pageY) { i.resizablecolumn = null; return } i._startcolumnwidth = i.resizablecolumn.column.width; i.resizablecolumn.column._width = null; b(document.body).addClass("jqx-disableselect"); b(document.body).addClass("jqx-position-reset"); i._mouseDownResize = new Date(); i.resizing = true; i._resizecolumn = i.resizablecolumn.column; i.resizeline = i.resizeline || b('<div style="position: absolute;"></div>'); i.resizestartline = i.resizestartline || b('<div style="position: absolute;"></div>'); i.resizebackground = i.resizebackground || b('<div style="position: absolute; left: 0; top: 0; background: #000;"></div>'); i.resizebackground.css("opacity", 0.01); i.resizebackground.css("cursor", "col-resize"); i.resizeline.css("cursor", "col-resize"); i.resizestartline.css("cursor", "col-resize"); i.resizeline.addClass(i.toThemeProperty("jqx-grid-column-resizeline")); i.resizestartline.addClass(i.toThemeProperty("jqx-grid-column-resizestartline")); b(document.body).append(i.resizeline); b(document.body).append(i.resizestartline); b(document.body).append(i.resizebackground); var n = i.resizablecolumn.columnelement.coord(); i.resizebackground.css("left", i.host.coord().left); i.resizebackground.css("top", i.host.coord().top); i.resizebackground.width(i.host.width()); i.resizebackground.height(i.host.height()); i.resizebackground.css("z-index", 999999999); var o = function (q) { if (!i.rtl) { q.css("left", parseInt(n.left) + i._startcolumnwidth) } else { q.css("left", parseInt(n.left)) } var s = 0; var t = i.showtoolbar ? i.toolbarHeight : 0; s += t; var v = i.showstatusbar ? i.statusBarHeight : 0; s += v; var r = i.showAggregates ? i.aggregatesHeight : 0; s += r; if (i.pageable && i.pagerPosition != "bottom") { s += i.pagerHeight } if (i.filterable) { s += i.filter.height() } var p = 0; if (i.pageable && i.pagerPosition != "top") { p = i.pagerHeight } var u = i.hScrollBar.css("visibility") != "hidden" ? i.scrollBarSize : 0; q.css("top", parseInt(n.top)); q.css("z-index", 9999999999); if (i.columnGroups) { q.height(i.host.height() + i.resizablecolumn.columnelement.height() - p - s - u - i.columnGroupslevel * i.columnsHeight) } else { q.height(i.host.height() - p - s - u) } q.show("fast") }; o(i.resizeline); o(i.resizestartline); i.dragmousedown = null } }); var f = function () { b(document.body).removeClass("jqx-disableselect"); b(document.body).removeClass("jqx-position-reset"); if (!i.resizing) { return } i._mouseUpResize = new Date(); var t = i._mouseUpResize - i._mouseDownResize; if (t < 200) { i.resizing = false; if (i._resizecolumn != null && i.resizeline != null && i.resizeline.css("display") == "block") { i._resizecolumn = null; i.resizeline.hide(); i.resizestartline.hide(); i.resizebackground.remove() } return } i.resizing = false; if (i.disabled) { return } var n = i.host.width(); if (i.vScrollBar[0].style.visibility != "hidden") { n -= 20 } if (n < 0) { n = 0 } if (i._resizecolumn != null && i.resizeline != null && i.resizeline.css("display") == "block") { var u = parseInt(i.resizeline.css("left")); var o = parseInt(i.resizestartline.css("left")); var s = i._startcolumnwidth + u - o; if (i.rtl) { var s = i._startcolumnwidth - u + o } var r = i._resizecolumn.width; i._resizecolumn.width = s; if (i._resizecolumn._percentagewidth != undefined) { i._resizecolumn._percentagewidth = (s / n) * 100 } for (var q = 0; q < i._columns.length; q++) { if (i._columns[q].datafield === i._resizecolumn.datafield) { i._columns[q].width = i._resizecolumn.width; break } } var l = i.hScrollBar[0].style.visibility; var p = i._resizecolumn.displayfield; i._updatecolumnwidths(); i.refresh(); i._resizecolumn = null; i.resizeline.hide(); i.resizestartline.hide(); i.resizebackground.remove(); i.resizablecolumn = null; i._raiseEvent("columnResized", { dataField: p, oldWidth: r, newWidth: s }) } else { i.resizablecolumn = null } }; try { if (document.referrer != "" || window.frameElement) { var c = null; if (window.top != null && window.top != window.self) { if (window.parent && document.referrer) { c = document.referrer } } if (c && c.indexOf(document.location.host) != -1) { var h = function (l) { f() }; if (window.top.document.addEventListener) { window.top.document.addEventListener("mouseup", h, false) } else { if (window.top.document.attachEvent) { window.top.document.attachEvent("onmouseup", h) } } } } } catch (j) { } this.removeHandler(b(document), e); this.addHandler(b(document), e, function (m) { var l = b.data(document.body, "contextmenu" + i.element.id); if (l != null && i.autoshowcolumnsmenubutton) { return true } f() }) } }, _updatecolumnwidths: function () { var k = this.host.width(); var c = k; if (this.vScrollBar.css("visibility") !== "hidden") { k -= parseInt(this.scrollBarSize) + 6; c = k } var j = ""; if (this.columns == undefined || this.columns.records == undefined) { return } var i = this; var h = false; b.each(this.columns.records, function (l, m) { if (!(this.hidden)) { if (this.width.toString().indexOf("%") != -1 || this._percentagewidth != undefined) { var m = 0; var n = i.vScrollBar[0].style.visibility == "hidden" ? 0 : i.scrollBarSize + 5; m = parseFloat(this.width) * c / 100; if (this._percentagewidth != undefined) { m = parseFloat(this._percentagewidth) * (c) / 100 } if (m < this.minwidth && this.minwidth != "auto") { m = this.minwidth } if (m > this.maxwidth && this.maxwidth != "auto") { m = this.maxwidth } k -= Math.round(m) } else { if (this.width != "auto" && !this._width) { k -= this.width } else { j += this.text } } } }); var f = this.columnsheader.find("#columntable" + this.element.id); if (f.length == 0) { return } var d = 0; var g = f.find(".jqx-grid-column-header"); var e = 0; b.each(this.columns.records, function (m, r) { var o = b(g[m]); var l = false; var q = this.width; var p = this.width; if (this.width.toString().indexOf("%") != -1 || this._percentagewidth != undefined) { if (this._percentagewidth != undefined) { q = parseFloat(this._percentagewidth) * c / 100 } else { q = parseFloat(this.width) * c / 100 } q = Math.round(q); l = true } if (this.width != "auto" && !this._width && !l) { if (parseInt(o[0].style.width) != this.width) { o.width(this.width) } } else { if (l) { if (q < this.minwidth && this.minwidth != "auto") { q = this.minwidth; this.width = q } if (q > this.maxwidth && this.maxwidth != "auto") { q = this.maxwidth; this.width = q } if (parseInt(o[0].style.width) != q) { o.width(q); this.width = q } } else { var n = Math.floor(k * (this.text.length / j.length)); if (isNaN(n)) { n = this.minwidth } var s = (k * (this.text.length / j.length)) - n; d += s; if (d >= 1) { d -= 1; n++ } if (d >= 0.5 && m == i.columns.records.length - 1) { n++ } if (n < 0) { $element = b("<span>" + this.text + "</span>"); b(document.body).append($element); n = 10 + $element.width(); $element.remove() } if (n < this.minwidth) { n = this.minwidth } if (n > this.maxwidth) { n = this.maxwidth } this._width = "auto"; this.width = n; o.width(this.width) } } if (parseInt(o[0].style.left) != e) { o.css("left", e) } if (!(this.hidden)) { e += this.width } this._requirewidthupdate = true; if (p !== this.width) { h = true } }); this.columnsheader.width(2 + e); f.width(this.columnsheader.width()); this._resizecolumnGroups(); if (h) { this._renderrows() } if (this.showAggregates) { this._refreshcolumnsaggregates() } }, _rendercolumnheaders: function () { var r = this; if (this._updating) { return } this._columnsbydatafield = new Array(); this.columnsheader.find("#columntable" + this.element.id).remove(); var g = b('<div id="columntable' + this.element.id + '" style="height: 100%; position: relative;"></div>'); g[0].cells = new Array(); var l = 0; var h = 0; var s = ""; var u = this.host.width(); var f = u; var w = new Array(); var t = new Array(); b.each(this.columns.records, function (j, k) { if (!(this.hidden)) { if (this.width != "auto" && !this._width) { if (this.width < this.minwidth && this.minwidth != "auto") { u -= this.minwidth } else { if (this.width > this.maxwidth && this.maxwidth != "auto") { u -= this.maxwidth } else { if (this.width.toString().indexOf("%") != -1) { var k = 0; k = parseFloat(this.width) * f / 100; if (k < this.minwidth && this.minwidth != "auto") { k = this.minwidth } if (k > this.maxwidth && this.maxwidth != "auto") { k = this.maxwidth } u -= k } else { if (typeof this.width == "string") { this.width = parseInt(this.width) } u -= this.width } } } } else { s += this.text } } if (this.pinned || this.grouped || this.checkboxcolumn) { if (r._haspinned) { this.pinned = true } w[w.length] = this } else { t[t.length] = this } }); if (!this.rtl) { for (var o = 0; o < w.length; o++) { this.columns.replace(o, w[o]) } for (var m = 0; m < t.length; m++) { this.columns.replace(w.length + m, t[m]) } } else { var e = 0; w.reverse(); for (var o = this.columns.records.length - 1; o >= this.columns.records.length - w.length; o--) { this.columns.replace(o, w[e++]) } for (var m = 0; m < t.length; m++) { this.columns.replace(m, t[m]) } } var v = this.headerZIndex; var d = 0; var n = r.columnsHeight; var q = function (j, k) { var i = r.columnGroupslevel * r.columnsHeight; i = i - (k.level * r.columnsHeight); return i }; var c = 0; b.each(this.columns.records, function (J, H) { this.height = r.columnsHeight; if (r.columnGroups) { if (r.columnGroups.length) { this.height = q(this.datafield, this); n = this.height } } var M = r.toTP("jqx-grid-column-header") + " " + r.toTP("jqx-widget-header"); if (r.rtl) { M += " " + r.toTP("jqx-grid-column-header-rtl") } if (!r.enableBrowserSelection) { M += " " + r.toTP("jqx-disableselect") } var K = !self.rtl ? 250 + v - 1 : 250 + v + 1; var F = !r.rtl ? v-- : v++; var x = b('<div role="columnheader" style="z-index: ' + F + ';position: absolute; height: 100%;" class="' + M + '"><div style="height: 100%; width: 100%;"></div></div>'); if (r.rtl && J === 0) { x[0].style.borderLeftColor = "transparent" } if (r.columnGroups) { x[0].style.height = n + "px"; x[0].style.bottom = "0px"; if (this.pinned) { x[0].style.zIndex = K } } this.uielement = x; this.element = x; if (this.classname != "" && this.classname) { x.addClass(this.classname) } var C = this.width; var D = false; if (this.width === null) { this.width = "auto" } if (this.width.toString().indexOf("%") != -1 || this._percentagewidth != undefined) { if (this._percentagewidth != undefined) { C = parseFloat(this._percentagewidth) * f / 100 } else { C = parseFloat(this.width) * f / 100 } C = Math.round(C); D = true } if (this.width != "auto" && !this._width && !D) { if (C < this.minwidth && this.minwidth != "auto") { C = this.minwidth } if (C > this.maxwidth && this.maxwidth != "auto") { C = this.maxwidth } x[0].style.width = parseInt(C) + "px" } else { if (D) { if (C < this.minwidth && this.minwidth != "auto") { C = this.minwidth } if (C > this.maxwidth && this.maxwidth != "auto") { C = this.maxwidth } if (this._percentagewidth == undefined || this.width.toString().indexOf("%") != -1) { this._percentagewidth = this.width } x.width(C); this.width = C } else { var G = Math.floor(u * (this.text.length / s.length)); var E = (u * (this.text.length / s.length)) - G; c += E; if (c >= 1) { c -= 1; G++ } if (c >= 0.5 && J == r.columns.records.length - 1) { G++ } if (isNaN(G)) { G = this.minwidth } if (G < 0) { $element = b("<span>" + this.text + "</span>"); b(document.body).append($element); G = 10 + $element.width(); $element.remove() } if (G < this.minwidth) { G = this.minwidth } if (G > this.maxwidth) { G = this.maxwidth } this._width = "auto"; this.width = parseInt(G); C = this.width; x.width(this.width) } } if (this.hidden) { x.css("display", "none") } var k = b(x.children()[0]); g[0].cells[J] = x[0]; var p = false; var I = false; var z = this.renderer != null ? this.renderer(this.text, this.align, n) : r._rendercolumnheader(this.text, this.align, n, r); if (z == null) { z = r._rendercolumnheader(this.text, this.align, n, r) } if (this.renderer != null) { z = b(z) } p = true; if (r.WinJS) { MSApp.execUnsafeLocalFunction(function () { k.append(b(z)) }) } else { if (this.renderer) { k.append(b(z)) } else { if (z) { k[0].innerHTML = z } } } if (z != null) { var B = b('<div class="iconscontainer" style="height: ' + n + 'px; margin-left: -32px; display: block; position: absolute; left: 100%; top: 0%; width: 32px;"><div class="filtericon ' + r.toTP("jqx-widget-header") + '" style="height: ' + n + 'px; float: right; display: none; width: 16px;"><div class="' + r.toTP("jqx-grid-column-filterbutton") + '" style="width: 100%; height:100%;"></div></div><div class="sortasc ' + r.toTP("jqx-widget-header") + '" style="height: ' + n + 'px; float: right; display: none; width: 16px;"><div class="' + r.toTP("jqx-grid-column-sortascbutton") + '" style="width: 100%; height:100%;"></div></div><div class="sortdesc ' + r.toTP("jqx-widget-header") + '" style="height: ' + n + 'px; float: right; display: none; width: 16px;"><div class="' + r.toTP("jqx-grid-column-sortdescbutton") + '" style="width: 100%; height:100%;"></div></div></div>'); k.append(B); var N = B.children(); this.sortasc = N[1]; this.sortdesc = N[2]; this.filtericon = N[0]; this.iconscontainer = B; if (r.rtl) { B.css("margin-left", "0px"); B.css("left", "0px"); b(this.sortasc).css("float", "left"); b(this.filtericon).css("float", "left"); b(this.sortdesc).css("float", "left") } } g.append(x); if (r.columnsReorder && this.draggable && r._handlecolumnsdragreorder) { r._handlecolumnsdragreorder(this, x) } var L = this; r.addHandler(x, "click", function (i) { if (L.checkboxcolumn) { return true } if (r._togglesort) { if (!r._loading) { r._togglesort(L) } } i.preventDefault() }); if (r.columnsResize && !I) { var y = false; var j = "mousemove"; if (r.isTouchDevice()) { y = true; j = b.jqx.mobile.getTouchEventName("touchstart") } r.addHandler(x, j, function (O) { if (!L.resizable) { r.resizablecolumn = null; return true } var i = parseInt(O.pageX); var Q = 5; var T = parseInt(x.coord().left); if (r.hasTransform) { T = b.jqx.utilities.getOffset(x).left } if (r._handlecolumnsResize) { if (y) { var P = b.jqx.mobile.getTouches(O); var S = P[0]; i = S.pageX; Q = 40; if (i >= T + L.width - Q) { r.resizablecolumn = { columnelement: x, column: L }; x.css("cursor", "col-resize") } else { x.css("cursor", ""); r.resizablecolumn = null } return true } var R = L.width; if (r.rtl) { R = 0 } if (i >= T + R - Q) { if (i <= T + R + Q) { r.resizablecolumn = { columnelement: x, column: L }; x.css("cursor", "col-resize"); return false } else { x.css("cursor", ""); r.resizablecolumn = null } } else { x.css("cursor", ""); if (i < T + R - Q) { if (!L._animating && !L._menuvisible) { x.mouseenter() } } r.resizablecolumn = null } } }) } x.css("left", h); if (!(this.hidden)) { h += C } if (L.rendered) { var A = L.rendered(b(k[0].firstChild), L.align, n); if (A && B != null) { B.hide() } } }); if (h > 0) { this.columnsheader.width(2 + h) } else { this.columnsheader.width(h) } this.columnsrow = g; r.columnsheader.append(g); g.width(h); if (this._handlecolumnsdragdrop) { this._handlecolumnsdragdrop() } if (this._handlecolumnsReorder) { this._handlecolumnsReorder() } if (this._handlecolumnsResize) { this._handlecolumnsResize() } if (this.columnGroups) { this._rendercolumnGroups() } }, _rendercolumnGroups: function () { if (!this.columnGroups) { return } var o = 0; for (var l = 0; l < this.columns.records.length; l++) { if (this.columns.records[l].pinned) { o++ } } var t = this.headerZIndex - o + this.columns.records.length; var n = this; var g = n.toTP("jqx-grid-column-header") + " " + n.toTP("jqx-grid-columngroup-header") + " " + n.toTP("jqx-widget-header"); if (n.rtl) { g += " " + n.toTP("jqx-grid-columngroup-header-rtl") } var e = this.columnsheader.find("#columntable" + this.element.id); e.find("jqx-grid-columngroup-header").remove(); for (var h = 0; h < this.columnGroupslevel - 1; h++) { for (var l = 0; l < this.columnGroups.length; l++) { var q = this.columnGroups[l]; var c = q.level; if (c !== h) { continue } var p = c * this.columnsHeight; var d = 99999; if (q.groups) { var s = function (w) { var v = 0; for (var u = 0; u < w.groups.length; u++) { var i = w.groups[u]; if (!i.groups) { if (!i.hidden) { v += i.width; d = Math.min(parseInt(i.element[0].style.left), d) } } else { v += s(i) } } return v }; q.width = s(q); q.left = d; var r = this.columnsHeight; var m = t--; var f = b('<div role="columnheader" style="z-index: ' + m + ';position: absolute;" class="' + g + '"></div>'); var k = b(this._rendercolumnheader(q.text, q.align, this.columnsHeight, this)); f.append(k); f[0].style.left = d + "px"; if (d === 0) { f[0].style.borderLeftColor = "transparent" } f[0].style.top = p + "px"; f[0].style.height = r + "px"; f[0].style.width = -1 + q.width + "px"; e.append(f); q.element = f } } } }, _resizecolumnGroups: function () { if (!this.columnGroups) { return } for (var d = 0; d < this.columnGroups.length; d++) { var j = this.columnGroups[d]; var k = j.level; var h = k * this.columnsHeight; var g = 99999; if (j.groups) { var f = function (n) { var m = 0; for (var l = 0; l < n.groups.length; l++) { var i = n.groups[l]; if (!i.groups) { if (!i.hidden) { m += i.width; g = Math.min(parseInt(i.element[0].style.left), g) } } else { m += f(i) } } return m }; j.width = f(j); j.left = g; var c = this.columnsHeight; var e = j.element; e[0].style.left = g + "px"; e[0].style.top = h + "px"; e[0].style.height = c + "px"; e[0].style.width = -1 + j.width + "px" } } }, _removecolumnhandlers: function (f) { var d = this; var c = b(f.element); if (c.length > 0) { d.removeHandler(c, "mouseenter"); d.removeHandler(c, "mouseleave"); var e = b(f.filtericon); d.removeHandler(e, "mousedown"); d.removeHandler(e, "click"); d.removeHandler(c, "click") } }, _calculateaggregate: function (k, o, d, h) { if (!k.datafield) { return null } var e = k.aggregates; if (!e) { e = o } if (e) { var f = new Array(); for (var n = 0; n < e.length; n++) { if (e[n] == "count") { continue } f[f.length] = k.cellsFormat } if (this.source && this.source.getAggregatedData) { if (h == undefined) { h = this.getRows(); if (this.dataViewRecords) { h = this.dataViewRecords } } var s = h; var c = -1; if (this.treeGrid) { var q = new Array(); var r = function (u) { for (var t = 0; t < u.length; t++) { if (u[t] == undefined) { continue } if (c == -1) { c = u[t].level } if (!u[t].aggregate) { q.push(u[t]) } if (!u[t].leaf && u[t].records && u[t].records.length > 0) { r(u[t].records) } } }; r(h); h = q } if (this.treeGrid && this.filterable && this.dataview.filters.length > 0) { var p = new Array(); for (var n = 0; n < h.length; n++) { if (h[n] && h[n]._visible !== false) { p.push(h[n]) } } h = p; var l = new Array(); for (var n = 0; n < s.length; n++) { if (s[n] && s[n]._visible !== false) { l.push(s[n]) } } s = l } if (d == undefined || d == true) { var m = this.source.getAggregatedData([{ name: k.datafield, aggregates: e, formatStrings: f }], this.gridlocalization, h, c); if (this.treeGrid) { var g = this.source._source.hierarchy && this.source._source.hierarchy.groupingDataFields ? this.source._source.hierarchy.groupingDataFields.length : 0; if (g == 0 || c >= g) { if (m) { if (m[k.datafield].sum != undefined || m[k.datafield].avg != undefined) { var j = this.source.getAggregatedData([{ name: k.datafield, aggregates: e, formatStrings: f }], this.gridlocalization, s, c); if (m[k.datafield].sum != undefined) { m[k.datafield].sum = j[k.datafield].sum } if (m[k.datafield].avg != undefined) { m[k.datafield].avg = j[k.datafield].avg } } } } } return m } else { var m = this.source.getAggregatedData([{ name: k.datafield, aggregates: e }], this.gridlocalization, h, c); if (this.treeGrid && m) { if (m[k.datafield].sum != undefined || m[k.datafield].avg != undefined) { var g = this.source._source.hierarchy && this.source._source.hierarchy.groupingDataFields ? this.source._source.hierarchy.groupingDataFields.length : 0; if (g == 0 || c >= g) { var j = this.source.getAggregatedData([{ name: k.datafield, aggregates: e }], this.gridlocalization, s, c); if (m[k.datafield].sum != undefined) { m[k.datafield].sum = j[k.datafield].sum } if (m[k.datafield].avg != undefined) { m[k.datafield].avg = j[k.datafield].avg } } } } return m } } } return null }, getcolumnaggregateddata: function (d, h, i, e) { var f = this.getColumn(d); if (!f) { return "" } var k = (i == undefined || i == false) ? false : i; if (h == null) { return "" } var c = f.aggregates; f.aggregates = null; var j = this._calculateaggregate(f, h, k, e); var g = {}; if (j) { g = j[d]; f.aggregates = c } return g }, _updatecolumnaggregates: function (e, h, c) { var f = this; if (!h) { c.children().remove(); c.html(""); if (e.aggregatesRenderer) { var g = {}; if (e.aggregates) { g = this.getcolumnaggregateddata(e.datafield, e.aggregates) } var d = e.aggregatesRenderer({}, e, c, null); c.html(d) } return } c.children().remove(); c.html(""); if (e.aggregatesRenderer) { if (h) { var d = e.aggregatesRenderer(h[e.datafield], e, c, this.getcolumnaggregateddata(e.datafield, e.aggregates), "aggregates"); c.html(d) } } else { b.each(h, function () { var j = this; for (g in j) { var k = b('<div style="position: relative; margin: 4px; overflow: hidden;"></div>'); var i = g; i = f._getaggregatename(i); k.html(i + ":" + j[g]); if (f.rtl) { k.addClass(f.toThemeProperty("jqx-rtl")) } c.append(k) } }) } }, _getaggregatetype: function (d) { switch (d) { case "min": case "max": case "count": case "avg": case "product": case "var": case "varp": case "stdev": case "stdevp": case "sum": return d } var c = d; for (var e in d) { c = e; break } return c }, _getaggregatename: function (d) { var c = d; switch (d) { case "min": c = "Min"; break; case "max": c = "Max"; break; case "count": c = "Count"; break; case "avg": c = "Avg"; break; case "product": c = "Product"; break; case "var": c = "Var"; break; case "stdevp": c = "StDevP"; break; case "stdev": c = "StDev"; break; case "varp": c = "VarP"; case "sum": c = "Sum"; break } if (d === c && typeof (c) != "string") { for (var e in d) { c = e; break } } return c }, _updatecolumnsaggregates: function () { var g = this.getRows(); if (this.dataViewRecords) { g = this.dataViewRecords } var c = this.columns.records.length; if (undefined != this.aggregates[0].cells) { for (var f = 0; f < c; f++) { var h = b(this.aggregates[0].cells[f]); var e = this.columns.records[f]; var d = this._calculateaggregate(e, null, true, g); this._updatecolumnaggregates(e, d, h) } } }, _refreshcolumnsaggregates: function () { var c = this.columns.records.length; if (undefined != this.aggregates[0].cells) { var f = 0; for (var e = 0; e < c; e++) { var g = b(this.aggregates[0].cells[e]); var d = this.columns.records[e]; if (g) { g.width(d.width); g[0].style.left = f + "px"; if (!(d.hidden && d.hideable)) { f += d.width } else { g.css("display", "none") } } } } }, _updateaggregates: function () { var c = b('<div style="position: relative;" id="statusrow' + this.element.id + '"></div>'); var f = 0; var m = this.columns.records.length; var l = this.toThemeProperty("jqx-grid-cell"); if (this.rtl) { l += " " + this.toThemeProperty("jqx-grid-cell-rtl"); f = 0; c.css("border-left-width", "0px"); this.aggregates.css("border-left-color", "transparent") } l += " " + this.toThemeProperty("jqx-grid-cell-pinned"); var n = m + 10; var o = new Array(); this.aggregates[0].cells = o; for (var h = 0; h < m; h++) { var g = this.columns.records[h]; var i = this._calculateaggregate(g); var d = g.width; if (d < g.minwidth) { d = g.minwidth } if (d > g.maxwidth) { d = g.maxwidth } var e = l; if (g.cellsalign) { e += " " + this.toThemeProperty("jqx-" + g.cellsalign + "-align") } var k = b('<div style="overflow: hidden; position: absolute; height: 100%;" class="' + e + '"></div>'); c.append(k); k.css("left", f); if (!this.rtl) { k.css("z-index", n--) } else { k.css("z-index", n++); if (h == 0) { k.css("border-left-width", "0px") } } k.width(d); k[0].style.left = f + "px"; if (!(g.hidden && g.hideable)) { f += d } else { k.css("display", "none") } o[o.length] = k[0]; this._updatecolumnaggregates(g, i, k) } if (b.jqx.browser.msie && b.jqx.browser.version < 8) { c.css("z-index", n--) } c.width(parseInt(f) + 2); c.height(this.aggregatesHeight); this.aggregates.children().remove(); this.aggregates.append(c); this.aggregates.removeClass(this.toThemeProperty("jqx-widget-header")); this.aggregates.addClass(l); this.aggregates.css("border-bottom-color", "transparent"); this.aggregates.css("border-top-width", "1px"); if (this.rtl && this.hScrollBar.css("visibility") != "hidden") { this._renderhorizontalscroll() } }, destroy: function () { var h = this; if (h.columns && h.columns.records) { for (var f = 0; f < h.columns.records.length; f++) { h._removecolumnhandlers(h.columns.records[f]) } } h.removeHandler(b(document), "mouseup.pagerbuttonstop"); h.removeHandler(b(document), "mouseup.pagerbuttonsbottom"); h.removeHandler(h.content, "scroll"); h.removeHandler(h.content, "mousedown"); h.removeHandler(b(document), "mousedown.gridedit" + h.element.id); var g = "mousemove.resize" + h.element.id; var c = "mousedown.resize" + h.element.id; var e = "mouseup.resize" + h.element.id; h.removeHandler(b(document), g); h.removeHandler(b(document), c); h.removeHandler(b(document), e); var g = "mousemove.reorder" + h.element.id; var c = "mousedown.reorder" + h.element.id; var e = "mouseup.reorder" + h.element.id; h.removeHandler(b(document), g); h.removeHandler(b(document), c); h.removeHandler(b(document), e); if (h.filterable) { if (h.filterrow) { for (var f = 0; f < h.filterrow[0].cells.length; f++) { var k = h.filterrow[0].cells[f]; var j = b(k).find(".filterconditions"); var d = h.columns.records[f]; if (j.length > 0) { j.jqxDropDownList("destroy") } } } if (h.filtercolumnsList) { h.filtercolumnsList.jqxDropDownList("destroy") } } if (h.pageable) { if (h.pagershowrowscombotop && h.pagershowrowscombotop.jqxDropDownList) { h.pagershowrowscombotop.jqxDropDownList("destroy") } if (h.pagershowrowscombobottom && h.pagershowrowscombobottom.jqxDropDownList) { h.pagershowrowscombobottom.jqxDropDownList("destroy") } var l = h.pagerbuttonsbottom.find("a"); h.removeHandler(l, "click"); h.removeHandler(l, "mouseenter"); h.removeHandler(l, "mouseleave"); l.remove(); var l = h.pagerbuttonstop.find("a"); h.removeHandler(l, "click"); h.removeHandler(l, "mouseenter"); h.removeHandler(l, "mouseleave"); l.remove(); if (h.pagernexttop) { h.pagernexttop.jqxButton("destroy"); h.pagerprevioustop.jqxButton("destroy"); h.pagernextbottom.jqxButton("destroy"); h.pagerpreviousbottom.jqxButton("destroy"); h.pagerfirsttop.jqxButton("destroy"); h.pagerfirstbottom.jqxButton("destroy"); h.pagerlasttop.jqxButton("destroy"); h.pagerlastbottom.jqxButton("destroy") } } h._removeHandlers(); h.vScrollBar.jqxScrollBar("destroy"); h.hScrollBar.jqxScrollBar("destroy"); delete h.vScrollBar; delete h.hScrollBar; delete h._mousewheelfunc; b.jqx.utilities.resize(h.host, null, true); h.host.remove() }, propertyChangedHandler: function (e, l, d, k) { if (this.isInitialized == undefined || this.isInitialized == false) { return } if (k !== d) { if (l == "filterable") { e._render() } else { if (l === "height") { e.host.height(e.height); e.host.width(e.width); e._updatesize(false, true) } else { if (l === "width") { e.host.height(e.height); e.host.width(e.width); e._updatesize(true, false) } else { if (l === "source") { e.updateBoundData() } else { if (l === "columns" || l === "columnGroups") { e._columns = null; e._render() } else { if (l === "rtl") { e.content.css("left", ""); e.columns = e._columns; e.vScrollBar.jqxScrollBar({ rtl: k }); e.hScrollBar.jqxScrollBar({ rtl: k }); e._render() } else { if (l === "pagerMode") { e.pagerMode = k; e._initpager() } else { if (l == "pageSizeOptions") { e._initpager(); var j = false; for (var f = 0; f < k.length; f++) { if (parseInt(k[f]) == e.pageSize) { j = true; break } } if (!j) { b.jqx.set(e, [{ pageSize: k[0] }]) } } else { if (l == "pageSize") { var g = e.dataview.pagenum * e.dataview.pagesize; e.dataview.pagesize = e.pageSize; var h = Math.floor(g / e.dataview.pagesize); if (h !== e.dataview.pagenum || parseInt(k) !== parseInt(d)) { e._raiseEvent("pageSizeChanged", { pagenum: k, oldpageSize: d, pageSize: e.dataview.pagesize }); var m = e.goToPage(h); if (!m) { if (!e.serverProcessing) { e.refresh() } else { e.updateBoundData("pager") } } } } else { if (l === "pagerPosition") { e.refresh() } else { if (l === "selectionMode") { e.selectionMode = k.toLowerCase() } else { if (l == "touchmode") { e._removeHandlers(); e.touchDevice = null; e.vScrollBar.jqxScrollBar({ touchMode: k }); e.hScrollBar.jqxScrollBar({ touchMode: k }); e.refresh(); e._addHandlers() } else { if (l == "enableHover") { return } else { if (l == "disabled") { if (k) { e.host.addClass(this.toThemeProperty("jqx-fill-state-disabled")) } else { e.host.removeClass(this.toThemeProperty("jqx-fill-state-disabled")) } if (e.pageable) { if (e.pagernexttop) { e.pagernexttop.jqxButton({ disabled: k }); e.pagerprevioustop.jqxButton({ disabled: k }); e.pagernextbottom.jqxButton({ disabled: k }); e.pagerpreviousbottom.jqxButton({ disabled: k }); e.pagerfirsttop.jqxButton({ disabled: k }); e.pagerfirstbottom.jqxButton({ disabled: k }); e.pagerlasttop.jqxButton({ disabled: k }); e.pagerlastbottom.jqxButton({ disabled: k }); if (e.pagershowrowscombotop.jqxDropDownList) { if (e.pagerMode == "advanced") { e.pagershowrowscombotop.jqxDropDownList({ disabled: false }); e.pagershowrowscombobottom.jqxDropDownList({ disabled: false }) } } } e.host.find(".jqx-grid-pager-number").css("cursor", k ? "default" : "pointer") } e.host.find(".jqx-grid-group-collapse").css("cursor", k ? "default" : "pointer"); e.host.find(".jqx-grid-group-expand").css("cursor", k ? "default" : "pointer") } else { if (l == "columnsHeight") { e._render() } else { if (l == "theme") { b.jqx.utilities.setTheme(d, k, e.host); e.vScrollBar.jqxScrollBar({ theme: e.theme }); e.hScrollBar.jqxScrollBar({ theme: e.theme }); if (e.pageable && e.pagernexttop) { e.pagernexttop.jqxButton({ theme: e.theme }); e.pagerprevioustop.jqxButton({ theme: e.theme }); e.pagernextbottom.jqxButton({ theme: e.theme }); e.pagerpreviousbottom.jqxButton({ theme: e.theme }); e.pagerfirsttop.jqxButton({ theme: e.theme }); e.pagerfirstbottom.jqxButton({ theme: e.theme }); e.pagerlasttop.jqxButton({ theme: e.theme }); e.pagerlastbottom.jqxButton({ theme: e.theme }); if (e.pagershowrowscombotop.jqxDropDownList) { if (e.pagerMode == "advanced") { e.pagershowrowscombotop.jqxDropDownList({ theme: e.theme }); e.pagershowrowscombobottom.jqxDropDownList({ theme: e.theme }) } } } if (e.filterable) { var c = b(".filterconditions"); if (c.length > 0) { c.jqxDropDownList({ theme: e.theme }) } if (e.filtercolumnsList) { e.filtercolumnsList.jqxDropDownList({ theme: e.theme }) } } e.refresh() } else { e.refresh() } } } } } } } } } } } } } } } } } }, _rendercolumnheader: function (f, g, c, d) { var e = "4px"; if (d.columnGroups) { e = (c / 2 - this._columnheight / 2); if (e < 0) { e = 4 } e += "px" } else { if (this.columnsHeight != 25) { e = (this.columnsHeight / 2 - this._columnheight / 2); if (e < 0) { e = 4 } e += "px" } } return '<div style="overflow: hidden; text-overflow: ellipsis; text-align: ' + g + "; margin-left: 4px; margin-right: 4px; margin-bottom: " + e + "; margin-top: " + e + ';"><span style="text-overflow: ellipsis; cursor: default;">' + f + "</span></div>" } }); function a(c, d) { this.owner = c; this.datafield = null; this.displayfield = null; this.text = ""; this.sortable = true; this.editable = true; this.hidden = false; this.hideable = true; this.groupable = true; this.renderer = null; this.cellsRenderer = null; this.columntype = null; this.cellsFormat = ""; this.align = "left"; this.cellsalign = "left"; this.width = "auto"; this.minwidth = 25; this.maxwidth = "auto"; this.pinned = false; this.visibleindex = -1; this.filterable = true; this.filter = null; this.resizable = true; this.draggable = true; this.initeditor = null; this.createeditor = null; this.destroyeditor = null; this.geteditorvalue = null; this.autoCellHeight = true; this.validation = null; this.classname = ""; this.cellclassname = ""; this.aggregates = null; this.aggregatesRenderer = null; this.rendered = null; this.exportable = true; this.nullable = true; this.columngroup = null; this.columntype = "textbox"; this.getcolumnproperties = function () { return { nullable: this.nullable, sortable: this.sortable, hidden: this.hidden, groupable: this.groupable, width: this.width, align: this.align, editable: this.editable, minwidth: this.minwidth, maxwidth: this.maxwidth, resizable: this.resizable, datafield: this.datafield, text: this.text, exportable: this.exportable, cellsalign: this.cellsalign, pinned: this.pinned, cellsFormat: this.cellsFormat, columntype: this.columntype, classname: this.classname, cellclassname: this.cellclassname, menu: this.menu } }, this.setproperty = function (e, f) { if (this[e]) { var g = this[e]; this[e] = f; this.owner._columnPropertyChanged(this, e, f, g) } else { if (this[e.toLowerCase()]) { var g = this[e.toLowerCase()]; this[e.toLowerCase()] = f; this.owner._columnPropertyChanged(this, e.toLowerCase(), f, g) } } }; this._initfields = function (f) { if (f != null) { var e = this; if (b.jqx.hasProperty(f, "dataField")) { this.datafield = b.jqx.get(f, "dataField") } if (b.jqx.hasProperty(f, "displayField")) { this.displayfield = b.jqx.get(f, "displayField") } else { this.displayfield = this.datafield } if (b.jqx.hasProperty(f, "columnType")) { this.columntype = b.jqx.get(f, "columnType") } if (b.jqx.hasProperty(f, "validation")) { this.validation = b.jqx.get(f, "validation") } if (b.jqx.hasProperty(f, "autoCellHeight")) { this.autoCellHeight = b.jqx.get(f, "autoCellHeight") } if (b.jqx.hasProperty(f, "text")) { this.text = b.jqx.get(f, "text") } else { this.text = this.displayfield } if (b.jqx.hasProperty(f, "sortable")) { this.sortable = b.jqx.get(f, "sortable") } if (b.jqx.hasProperty(f, "hidden")) { this.hidden = b.jqx.get(f, "hidden") } if (b.jqx.hasProperty(f, "groupable")) { this.groupable = b.jqx.get(f, "groupable") } if (b.jqx.hasProperty(f, "renderer")) { this.renderer = b.jqx.get(f, "renderer") } if (b.jqx.hasProperty(f, "align")) { this.align = b.jqx.get(f, "align") } if (b.jqx.hasProperty(f, "cellsAlign")) { this.cellsalign = b.jqx.get(f, "cellsAlign") } if (b.jqx.hasProperty(f, "cellsFormat")) { this.cellsFormat = b.jqx.get(f, "cellsFormat") } if (b.jqx.hasProperty(f, "width")) { this.width = b.jqx.get(f, "width") } if (b.jqx.hasProperty(f, "minWidth")) { this.minwidth = b.jqx.get(f, "minWidth") } if (b.jqx.hasProperty(f, "maxWidth")) { this.maxwidth = b.jqx.get(f, "maxWidth") } if (b.jqx.hasProperty(f, "cellsRenderer")) { this.cellsRenderer = b.jqx.get(f, "cellsRenderer") } if (b.jqx.hasProperty(f, "columnType")) { this.columntype = b.jqx.get(f, "columnType") } if (b.jqx.hasProperty(f, "pinned")) { this.pinned = b.jqx.get(f, "pinned") } if (b.jqx.hasProperty(f, "filterable")) { this.filterable = b.jqx.get(f, "filterable") } if (b.jqx.hasProperty(f, "filter")) { this.filter = b.jqx.get(f, "filter") } if (b.jqx.hasProperty(f, "resizable")) { this.resizable = b.jqx.get(f, "resizable") } if (b.jqx.hasProperty(f, "draggable")) { this.draggable = b.jqx.get(f, "draggable") } if (b.jqx.hasProperty(f, "editable")) { this.editable = b.jqx.get(f, "editable") } if (b.jqx.hasProperty(f, "initEditor")) { this.initeditor = b.jqx.get(f, "initEditor") } if (b.jqx.hasProperty(f, "createEditor")) { this.createeditor = b.jqx.get(f, "createEditor") } if (b.jqx.hasProperty(f, "destroyEditor")) { this.destroyeditor = b.jqx.get(f, "destroyEditor") } if (b.jqx.hasProperty(f, "getEditorValue")) { this.geteditorvalue = b.jqx.get(f, "getEditorValue") } if (b.jqx.hasProperty(f, "className")) { this.classname = b.jqx.get(f, "className") } if (b.jqx.hasProperty(f, "cellClassName")) { this.cellclassname = b.jqx.get(f, "cellClassName") } if (b.jqx.hasProperty(f, "aggregates")) { this.aggregates = b.jqx.get(f, "aggregates") } if (b.jqx.hasProperty(f, "aggregatesRenderer")) { this.aggregatesRenderer = b.jqx.get(f, "aggregatesRenderer") } if (b.jqx.hasProperty(f, "rendered")) { this.rendered = b.jqx.get(f, "rendered") } if (b.jqx.hasProperty(f, "exportable")) { this.exportable = b.jqx.get(f, "exportable") } if (b.jqx.hasProperty(f, "nullable")) { this.nullable = b.jqx.get(f, "nullable") } if (b.jqx.hasProperty(f, "columnGroup")) { this.columngroup = b.jqx.get(f, "columnGroup") } if (!f instanceof String && !(typeof f == "string")) { for (var g in f) { if (!e.hasOwnProperty(g)) { if (!e.hasOwnProperty(g.toLowerCase())) { c.host.remove(); throw new Error("jqxDataTable: Invalid property name - " + g + ".") } } } } } }; this._initfields(d); return this } b.jqx.dataCollection = function (c) { this.records = new Array(); this.owner = c; this.updating = false; this.beginUpdate = function () { this.updating = true }; this.resumeupdate = function () { this.updating = false }; this.clear = function () { this.records = new Array() }; this.replace = function (e, d) { this.records[e] = d }; this.isempty = function (d) { if (this.records[d] == undefined) { return true } return false }; this.initialize = function (d) { if (d < 1) { d = 1 } this.records[d - 1] = -1 }; this.length = function () { return this.records.length }; this.indexOf = function (d) { return this.records.indexOf(d) }; this.add = function (d) { if (d == null) { return false } this.records[this.records.length] = d; return true }; this.insertAt = function (e, d) { if (e == null || e == undefined) { return false } if (d == null) { return false } if (e >= 0) { if (e < this.records.length) { this.records.splice(e, 0, d); return true } else { return this.add(d) } } return false }; this.remove = function (e) { if (e == null || e == undefined) { return false } var d = this.records.indexOf(e); if (d != -1) { this.records.splice(d, 1); return true } return false }; this.removeAt = function (e) { if (e == null || e == undefined) { return false } if (e < 0) { return false } if (e < this.records.length) { var d = this.records[e]; this.records.splice(e, 1); return true } return false }; return this }; b.jqx.dataView = function () { this.that = this; this.grid = null; this.records = []; this.rows = []; this.columns = []; this.filters = new Array(); this.pagesize = 0; this.pagenum = 0; this.source = null; this.databind = function (p, k) { var o = p._source ? true : false; var e = null; this._sortData = null; this._sortHierarchyData = null; if (o) { e = p; p = p._source } else { e = new b.jqx.dataAdapter(p, { autoBind: false }) } var c = function (m) { e.recordids = []; e.records = new Array(); e.cachedrecords = new Array(); e.originaldata = new Array(); e._options.totalrecords = m.totalrecords; e._options.originaldata = m.originaldata; e._options.recordids = m.recordids; e._options.cachedrecords = new Array(); e._options.pagenum = m.pagenum; e._options.pageable = m.pageable; if (p.type != undefined) { e._options.type = p.type } if (p.formatdata != undefined) { e._options.formatData = p.formatdata } if (p.contenttype != undefined) { e._options.contentType = p.contenttype } if (p.async != undefined) { e._options.async = p.async } if (p.updaterow != undefined) { e._options.updaterow = p.updaterow } if (p.addrow != undefined) { e._options.addrow = p.addrow } if (p.deleterow != undefined) { e._options.deleterow = p.deleterow } if (m.pagesize == 0) { m.pagesize = 10 } e._options.pagesize = m.pagesize }; var r = function (m) { m.originaldata = e.originaldata; m.records = e.records; m.hierarchy = e.hierarchy; if (!m.grid.serverProcessing) { m._sortData = null; m._sortfield = null; m._filteredData = null; m._sortHierarchyData = null } if (!m.hierarchy) { m.hierarchy = new Array(); e.hierarchy = new Array() } if (e._source.totalrecords) { m.totalrecords = e._source.totalrecords } else { if (e._source.totalRecords) { m.totalrecords = e._source.totalRecords } else { if (m.hierarchy.length !== 0) { m.totalrecords = m.hierarchy.length } else { m.totalrecords = m.records.length } } } m.cachedrecords = e.cachedrecords }; c(this); this.source = p; if (k !== undefined) { uniqueId = k } var f = this; switch (p.datatype) { case "local": case "array": default: if (p.localdata == null) { p.localdata = [] } if (p.localdata != null) { e.unbindBindingUpdate(f.grid.element.id); if ((!f.grid.autoBind && f.grid.isInitialized) || f.grid.autoBind) { e.dataBind() } var j = function () { r(f); f.update() }; j(); e.bindBindingUpdate(f.grid.element.id, j) } break; case "json": case "jsonp": case "xml": case "xhtml": case "script": case "text": case "csv": case "tab": if (p.localdata != null) { e.unbindBindingUpdate(f.grid.element.id); if ((!f.grid.autoBind && f.grid.isInitialized) || f.grid.autoBind) { e.dataBind() } var j = function (m) { r(f); f.update() }; j(); e.bindBindingUpdate(f.grid.element.id, j); return } var s = {}; var n = 0; var t = {}; for (var h = 0; h < this.filters.length; h++) { var d = this.filters[h].datafield; var i = this.filters[h].filter; var g = i.getfilters(); t[d + "operator"] = i.operator; for (var q = 0; q < g.length; q++) { g[q].datafield = d; var l = g[q].value; t["filtervalue" + n] = l.toString(); t["filtercondition" + n] = g[q].condition; t["filteroperator" + n] = g[q].operator; t["filterdatafield" + n] = d; n++ } } t.filterslength = n; b.extend(t, { sortdatafield: f.sortfield, sortorder: f.sortfielddirection, pagenum: f.pagenum, pagesize: f.grid.pageSize }); var u = e._options.data; if (e._options.data) { b.extend(e._options.data, t) } else { if (p.data) { b.extend(t, p.data) } e._options.data = t } var j = function () { var v = b.jqx.browser.msie && b.jqx.browser.version < 9; var w = function () { r(f); f.update() }; if (v) { try { w() } catch (m) { } } else { w() } }; e.unbindDownloadComplete(f.grid.element.id); e.bindDownloadComplete(f.grid.element.id, j); e._source.loaderror = function (w, m, v) { j() }; if ((!f.grid.autoBind && f.grid.isInitialized) || f.grid.autoBind) { e.dataBind() } e._options.data = u } }; this.addFilter = function (f, e) { this._sortData = null; this._sortHierarchyData = null; var d = -1; for (var c = 0; c < this.filters.length; c++) { if (this.filters[c].datafield == f) { d = c; break } } if (d == -1) { this.filters[this.filters.length] = { filter: e, datafield: f } } else { this.filters[d] = { filter: e, datafield: f } } }; this.removeFilter = function (d) { this._sortData = null; this._sortHierarchyData = null; for (var c = 0; c < this.filters.length; c++) { if (this.filters[c].datafield == d) { this.filters.splice(c, 1); break } } }; this.sortBy = function (e, c) { var d = this; if (c == null) { this.sortfield = ""; this.sortfielddirection = ""; return } if (c == undefined) { c = true } if (c == "a" || c == "asc" || c == "ascending" || c == true) { c = true } else { c = false } if (e == "constructor") { e = "" } this.sortfield = e; this.sortfielddirection = c ? "asc" : "desc" }; this._sort = function (d) { if (!this.sortfield || !this.sortfielddirection) { return d } if (this._sortfield == this.sortfield && this._sortfielddirection == this.sortfielddirection && this._sortData) { return this._sortData } var g = this; var j = Object.prototype.toString; Object.prototype.toString = (typeof g.sortfield == "function") ? g.sortfield : function () { return this[g.sortfield] }; var f = ""; if (this.source.datafields) { b.each(this.source.datafields, function () { if (this.name == g.sortfield) { if (this.type) { f = this.type } return false } }) } var c = new Array(); for (var e = 0; e < d.length; e++) { c.push(b.extend({ originalRecord: d[e] }, d[e])) } this._sortfield = this.sortfield; this._sortfielddirection = this.sortfielddirection; if (this.sortfielddirection === "desc") { var h = c.sort(function (k, i) { return g._compare(k, i, f) }).reverse() } else { var h = c.sort(function (k, i) { return g._compare(k, i, f) }) } this._sortData = h; Object.prototype.toString = j; return h }; this._compare = function (d, c, f) { var d = d; var c = c; if (d === undefined) { d = null } if (c === undefined) { c = null } if (d === null && c === null) { return 0 } if (d === null && c !== null) { return 1 } if (d !== null && c === null) { return 1 } d = d.toString(); c = c.toString(); if (b.jqx.dataFormat) { if (f && f != "") { switch (f) { case "number": case "int": case "float": if (d < c) { return -1 } if (d > c) { return 1 } return 0; case "date": case "time": if (d < c) { return -1 } if (d > c) { return 1 } return 0; case "string": case "text": d = String(d).toLowerCase(); c = String(c).toLowerCase(); break } } else { if (b.jqx.dataFormat.isNumber(d) && b.jqx.dataFormat.isNumber(c)) { if (d < c) { return -1 } if (d > c) { return 1 } return 0 } else { if (b.jqx.dataFormat.isDate(d) && b.jqx.dataFormat.isDate(c)) { if (d < c) { return -1 } if (d > c) { return 1 } return 0 } else { if (!b.jqx.dataFormat.isNumber(d) && !b.jqx.dataFormat.isNumber(c)) { d = String(d).toLowerCase(); c = String(c).toLowerCase() } } } } } try { if (d < c) { return -1 } if (d > c) { return 1 } } catch (e) { var g = e } return 0 }; this._equals = function (d, c) { return (this._compare(d, c) === 0) }; this.evaluate = function (p) { if (this.grid.serverProcessing) { if (p) { if (this.grid.source._source.id == "" || this.grid.source._source.id == null) { if (this.grid.pageable) { var c = this.grid.pageSize * this.pagenum; this.grid.rowsByKey = new Array(); var h = this; b.each(p, function (i) { this.uid = c; h.grid.rowsByKey[this.uid] = this; c++ }) } } } return p } var d = new Array(); if (this.filters.length) { var j = new Array(); var o = function (s, w) { for (var u = 0; u < s.length; u++) { var v = s[u]; v._visible = true; var q = undefined; for (var t = 0; t < this.filters.length; t++) { var r = this.filters[t].filter; var x = v[this.filters[t].datafield]; var y = r.evaluate(x); if (q == undefined) { q = y } else { if (r.operator == "or") { q = q || y } else { q = q && y } } } v._visible = false; if (q || v.aggregate) { v._visible = true; w.push(v); j[v.uid] = v } } }; if (!this._filteredData) { if (this.source.hierarchy || (this.grid.source.hierarchy && this.grid.source.hierarchy.length > 0)) { var n = new Array(); var k = function (r, s) { for (var q = 0; q < s.length; q++) { var t = s[q]; n.push(t); if (t.records && t.records.length > 0) { k(t, t.records) } } }; k(null, p); o.call(this, n, d); for (var e = 0; e < d.length; e++) { var g = d[e]; while (g.parent) { var m = g.parent; if (!j[m.uid]) { m._visible = true; j[m.uid] = m } g = m } } d = p } else { o.call(this, p, d) } this._filteredData = d; this.rows = d } else { this.rows = this._filteredData } } else { this.rows = p } if (this.source.hierarchy || (this.grid.source.hierarchy && this.grid.source.hierarchy.length > 0)) { var h = this; var l = new Array(); this._sortData = null; var f = function (t, q) { h._sortData = null; var r = null; if (h.source.hierarchy.groupingDataFields) { if (q && q.length > 0 && q[0].level < h.source.hierarchy.groupingDataFields.length) { r = new Array(); for (var s = 0; s < q.length; s++) { r.push(b.extend({ originalRecord: q[s] }, q[s])) } } else { r = h._sort(q) } } else { r = h._sort(q) } if (t.records) { t.records = r } else { t = t.concat(r) } for (var s = 0; s < r.length; s++) { if (r[s].records && r[s].records.length) { f(r[s], r[s].records) } } return t }; if (this.sortfield || this.sortfielddirection) { if (this._sortHierarchyData) { l = this._sortHierarchyData } else { l = f(l, p) } this.rows = l; this._sortHierarchyData = l } } else { this.rows = this._sort(this.rows) } return this.rows }; this.getid = function (j, d, e) { if (b(j, d).length > 0) { return b(j, d).text() } if (this.rows && j != "" && j != undefined && this.rows.length > 0) { var h = this.rows[this.rows.length - 1][j]; if (h == null) { h = null } for (var f = 1; f <= 100; f++) { var g = this.grid.rowsByKey[f + h]; if (!g) { if (this.grid && this.grid.treeGrid && this.grid.treeGrid.virtualModeCreateRecords) { var g = this.grid.rowsByKey["jqx" + h + f]; if (g) { continue } return "jqx" + h + f } return h + f } } } if (j != undefined) { if (j.toString().length > 0) { var c = b(d).attr(j); if (c != null && c.toString().length > 0) { if (this.grid && this.grid.treeGrid && this.grid.treeGrid.virtualModeCreateRecords) { return "jqx" + c } return c } } } if (this.rows && this.rows.length > 0) { var g = this.grid.rowsByKey[e]; if (g) { var h = this.rows[this.rows.length - 1][j]; if (h == null) { h = "" } for (var f = 1; f <= 1000; f++) { var g = this.grid.rowsByKey[f + h]; if (!g) { if (this.grid && this.grid.treeGrid && this.grid.treeGrid.virtualModeCreateRecords) { var g = this.grid.rowsByKey["jqx" + h + f]; if (g) { continue } return "jqx" + h + f } return h + f } } } } if (this.grid && this.grid.treeGrid && this.grid.treeGrid.virtualModeCreateRecords) { var g = this.grid.rowsByKey["jqx" + e]; if (!g) { return "jqx" + e } else { for (var f = e + 1; f <= 100; f++) { var g = this.grid.rowsByKey["jqx" + f]; if (!g) { var g = this.grid.rowsByKey["jqx" + f]; if (g) { continue } return "jqx" + f } } } } return e }; this.generatekey = function () { var c = function () { return (((1 + Math.random()) * 16) | 0) }; return ("" + c() + c() + "-" + c() + "-" + c()) }; return this } })(jqxBaseFramework);

/*
jqxtreegrid
*/

(function (a) { a.jqx.jqxWidget("jqxTreeGrid", "jqxDataTable", {}); a.extend(a.jqx._jqxTreeGrid.prototype, { defineInstance: function () { this.base.treeGrid = this; this.base.exportSettings = { recordsInView: false, columnsHeader: true, hiddenColumns: false, serverURL: null, characterSet: null, collapsedRecords: false, fileName: "jqxTreeGrid" }; var b = { pageSizeMode: "default", checkboxes: false, hierarchicalCheckboxes: false, icons: false, showSubAggregates: false, rowDetailsRenderer: null, virtualModeCreateRecords: null, virtualModeRecordCreating: null, loadingFailed: false }; a.extend(true, this, b); return b }, createInstance: function (b) { this.theme = this.base.theme; var c = this }, deleteRow: function (b) { var c = this.base; c.deleterowbykey(b) }, updateRow: function (b, d) { var c = this.base; c.updaterowbykey(b, d) }, setCellValue: function (c, b, e) { var d = this.base; d.setCellValueByKey(c, b, e) }, getCellValue: function (c, b) { var d = this.base; return d.getCellValueByKey(c, b) }, lockRow: function (b) { var c = this.base; c.lockrowbykey(b) }, unlockRow: function (b) { var c = this.base; c.unlockrowbykey(b) }, selectRow: function (b) { var c = this.base; c.selectrowbykey(b) }, unselectRow: function (b) { var c = this.base; c.unselectrowbykey(b) }, ensureRowVisible: function (b) { var c = this.base; c.ensurerowvisiblebykey(b) }, beginCellEdit: function (c, b) { var e = this.base; var d = e.getColumn(b); e.beginroweditbykey(c, d) }, beginRowEdit: function (b) { var c = this.base; c.beginroweditbykey(b) }, endCellEdit: function (c, b, e) { var d = this.base; d.endroweditbykey(c, e) }, endRowEdit: function (b, d) { var c = this.base; c.endroweditbykey(b, d) }, _showLoadElement: function () { var b = this.base; if (b.host.css("display") == "block") { if (b.autoShowLoadElement) { a(b.dataloadelement).css("visibility", "visible"); a(b.dataloadelement).css("display", "block"); b.dataloadelement.width(b.host.width()); b.dataloadelement.height(b.host.height()) } } }, _hideLoadElement: function () { var b = this.base; if (b.host.css("display") == "block") { if (b.autoShowLoadElement) { a(b.dataloadelement).css("visibility", "hidden"); a(b.dataloadelement).css("display", "none"); b.dataloadelement.width(b.host.width()); b.dataloadelement.height(b.host.height()) } } }, getKey: function (b) { if (b) { return b.uid } }, getRows: function () { var b = this.base; if (b.source.hierarchy) { if (b.source.hierarchy.length != 0) { return b.source.hierarchy } } return b.source.records }, getCheckedRows: function () { var c = this.base; var d = c._names(); var e = new Array(); var b = function (j, g) { if (!g) { return } for (var h = 0; h < g.length; h++) { if (!g[h]) { continue } var f = a.extend({}, g[h]); var k = c.rowinfo[g[h].uid]; if (k && k[d.checked]) { j.push(f) } else { if (f[d.checked]) { j.push(f) } } b(e, g[h].records) } }; b(e, c.dataViewRecords); return e }, getRow: function (d) { var e = this.base; var b = e.source.records; if (e.source.hierarchy) { var f = function (h) { for (var j = 0; j < h.length; j++) { if (!h[j]) { continue } if (h[j].uid == d) { return h[j] } if (h[j].records) { var k = f(h[j].records); if (k) { return k } } } }; var g = f(e.source.hierarchy); return g } else { for (var c = 0; c < b.length; c++) { if (!b[c]) { continue } if (b[c].uid == d) { return b[c] } } } }, _renderrows: function () { var N = this.base; var ar = this; if (N._loading) { return } if (N._updating) { return } var J = N._names(); if (N.source.hierarchy.length === 0 && !N.loadingFailed) { if (this.virtualModeCreateRecords) { var am = function (c) { if (c === false || (c && c.length == 0)) { N._loading = false; N.loadingFailed = true; N.source.hierarchy = new Array(); ar._hideLoadElement(); N._renderrows(); N._updateScrollbars(); N._arrange(); return } for (var j = 0; j < c.length; j++) { c[j].level = 0; ar.virtualModeRecordCreating(c[j]); N.rowsByKey[c[j].uid] = c[j] } N.source.hierarchy = c; if (!N.source._source.hierarchy) { N.source._source.hierarchy = {} } N._loading = false; ar._hideLoadElement(); N._renderrows(); N._updateScrollbars(); N._arrange() }; N._loading = true; this.virtualModeCreateRecords(null, am); this._showLoadElement() } } if (N.rendering) { N.rendering() } var ay = 0; N.table[0].rows = new Array(); var aI = N.toTP("jqx-cell") + " " + N.toTP("jqx-widget-content") + " " + N.toTP("jqx-item"); if (N.rtl) { aI += " " + N.toTP("jqx-cell-rtl") } var b = N.columns.records.length; var O = a.jqx.browser.msie && a.jqx.browser.version < 8; if (O) { N.host.attr("hideFocus", "true") } var v = new Array(); var aF = function (s, w) { for (var aJ = 0; aJ < s.length; aJ++) { var c = s[aJ]; if (!c) { continue } var j = !N.rowinfo[c.uid] ? c.expanded : N.rowinfo[c.uid].expanded; if (N.dataview.filters.length == 0) { c._visible = true } if (c._visible !== false) { if (j || c[J.leaf]) { w.push(c); if (c.records && c.records.length > 0) { var aK = aF(c.records, new Array()); for (var x = 0; x < aK.length; x++) { w.push(aK[x]) } } } else { w.push(c) } } } return w }; var ao = N.source.hierarchy.length === 0 ? N.source.records : N.source.hierarchy; ao = N.dataview.evaluate(ao); N.dataViewRecords = ao; if (this.showSubAggregates) { var p = function (s, c) { if (s != 0) { if (c.length > 0) { if (c[c.length - 1]) { if (!c[c.length - 1].aggregate) { c.push({ _visible: true, level: s, siblings: c, aggregate: true, leaf: true }) } } else { if (a.jqx.browser.msie && a.jqx.browser.version < 9) { if (c[c.length - 2]) { if (!c[c.length - 2].aggregate) { c.push({ _visible: true, level: s, siblings: c, aggregate: true, leaf: true }) } } } } } } for (var j = 0; j < c.length; j++) { if (c[j] && c[j].records) { p(s + 1, c[j].records) } } }; p(0, ao) } var ap = function (s) { var w = 0; var i = new Array(); for (var c = 0; c < s.length; c++) { var j = s[c]; if (j[J.level] == 0) { w++ } if (w > N.dataview.pagesize * N.dataview.pagenum && w <= N.dataview.pagesize * N.dataview.pagenum + N.dataview.pagesize) { i.push(j) } if (w > N.dataview.pagesize * N.dataview.pagenum + N.dataview.pagesize) { break } } return i }; if (N.source.hierarchy.length === 0) { if (N.dataview.pagesize == "all" || !N.pageable || N.serverProcessing) { var ak = ao; if (N.pageable && N.serverProcessing && ao.length > N.dataview.pagesize) { var ak = ao.slice(N.dataview.pagesize * N.dataview.pagenum, N.dataview.pagesize * N.dataview.pagenum + N.dataview.pagesize) } } else { var ak = ao.slice(N.dataview.pagesize * N.dataview.pagenum, N.dataview.pagesize * N.dataview.pagenum + N.dataview.pagesize) } var v = ak } else { var ao = aF.call(N, ao, new Array()); if (N.dataview.pagesize == "all" || !N.pageable) { var ak = ao } else { var ak = ao.slice(N.dataview.pagesize * N.dataview.pagenum, N.dataview.pagesize * N.dataview.pagenum + N.dataview.pagesize); if (this.pageSizeMode == "root") { ak = ap(ao) } } var v = ak; var I = N.dataview.pagenum; N.updatepagerdetails(); if (N.dataview.pagenum != I) { if (N.dataview.pagesize == "all" || !N.pageable) { var ak = ao } else { var ak = ao.slice(N.dataview.pagesize * N.dataview.pagenum, N.dataview.pagesize * N.dataview.pagenum + N.dataview.pagesize); if (this.pageSizeMode == "root") { ak = ap(ao) } } var v = ak } } N.renderedRecords = v; var D = v.length; var aG = N.tableZIndex; var k = 0; var aq = 0; if (O) { for (var P = 0; P < b; P++) { var T = N.columns.records[P]; var aw = T.width; if (aw < T.minwidth) { aw = T.minwidth } if (aw > T.maxwidth) { aw = T.maxwidth } var av = a('<table><tr><td role="gridcell" style="max-width: ' + aw + "px; width:" + aw + 'px;" class="' + aI + '"></td></tr></table>'); a(document.body).append(av); var ag = av.find("td"); k = 1 + parseInt(ag.css("padding-left")) + parseInt(ag.css("padding-right")); av.remove(); break } } var B = N.rtl ? " " + N.toTP("jqx-grid-table-rtl") : ""; var y = "<table cellspacing='0' class='" + N.toTP("jqx-grid-table") + B + "' id='table" + N.element.id + "'><colgroup>"; var W = "<table cellspacing='0' class='" + N.toTP("jqx-grid-table") + B + "' id='pinnedtable" + N.element.id + "'><colgroup>"; var ab = null; for (var P = 0; P < b; P++) { var T = N.columns.records[P]; if (T.hidden) { continue } ab = T; var aw = T.width; if (aw < T.minwidth) { aw = T.minwidth } if (aw > T.maxwidth) { aw = T.maxwidth } aw -= k; if (aw < 0) { aw = 0 } if (O) { var H = aw; if (P == 0) { H++ } W += "<col style='max-width: " + aw + "px; width: " + H + "px;'>"; y += "<col style='max-width: " + aw + "px; width: " + H + "px;'>" } else { W += "<col style='max-width: " + aw + "px; width: " + aw + "px;'>"; y += "<col style='max-width: " + aw + "px; width: " + aw + "px;'>" } aq += aw } y += "</colgroup>"; W += "</colgroup>"; N._hiddencolumns = false; var r = false; if (D === 0) { var n = '<tr role="row">'; var q = N.host.height(); if (N.pageable) { q -= N.pagerHeight; if (N.pagerPosition === "both") { q -= N.pagerHeight } } q -= N.columnsHeight; if (N.filterable) { var aB = N.filter.find(".filterrow"); var A = N.filter.find(".filterrow-hidden"); var E = 1; if (A.length > 0) { E = 0 } q -= N.filterHeight + N.filterHeight * aB.length * E } if (N.showstatusbar) { q -= N.statusBarHeight } if (N.showAggregates) { q -= N.aggregatesHeight } if (q < 25) { q = 25 } if (N.hScrollBar[0].style.visibility != "hidden") { q -= N.hScrollBar.outerHeight() } if (N.height === "auto" || N.height === null || N.autoheight) { q = 100 } var aw = N.host.width() + 2; var av = '<td colspan="' + N.columns.records.length + '" role="gridcell" style="border-right-color: transparent; min-height: ' + q + "px; height: " + q + "px;  min-width:" + aq + "px; max-width:" + aq + "px; width:" + aq + "px;"; var aI = N.toTP("jqx-cell") + " " + N.toTP("jqx-grid-cell") + " " + N.toTP("jqx-item"); aI += " " + N.toTP("jqx-center-align"); av += '" class="' + aI + '">'; if (!N._loading) { av += N.gridlocalization.emptydatastring } av += "</td>"; n += av; y += n; W += n; N.table[0].style.width = aq + 2 + "px"; ay = aq } var m = N.source._source.hierarchy && N.source._source.hierarchy.groupingDataFields ? N.source._source.hierarchy.groupingDataFields.length : 0; for (var Q = 0; Q < v.length; Q++) { var at = v[Q]; var ac = at.uid; if (m > 0) { if (at[J.level] < m) { ac = at.uid } } if (at.uid === undefined) { at.uid = N.dataview.generatekey() } var n = '<tr data-key="' + ac + '" role="row" id="row' + Q + N.element.id + '">'; var an = '<tr data-key="' + ac + '" role="row" id="row' + Q + N.element.id + '">'; if (at.aggregate) { var n = '<tr data-role="summaryrow" role="row" id="row' + Q + N.element.id + '">'; var an = '<tr data-role="summaryrow" role="row" id="row' + Q + N.element.id + '">' } var U = 0; if (!N.rowinfo[ac]) { var z = at[J.checked]; if (z === undefined) { z = false } N.rowinfo[ac] = { selected: at[J.selected], checked: z, icon: at[J.icon], aggregate: at.aggregate, row: at, leaf: at[J.leaf], expanded: at[J.expanded] } } else { if (N.rowinfo[ac].checked === undefined) { N.rowinfo[ac].checked = at[J.checked] } if (N.rowinfo[ac].icon === undefined) { N.rowinfo[ac].icon = at[J.icon] } if (N.rowinfo[ac].aggregate === undefined) { N.rowinfo[ac].aggregate = at[J.aggregate] } if (N.rowinfo[ac].row === undefined) { N.rowinfo[ac].row = at } if (N.rowinfo[ac].leaf === undefined) { N.rowinfo[ac].leaf = at[J.leaf] } if (N.rowinfo[ac].expanded === undefined) { N.rowinfo[ac].expanded = at[J.expanded] } } var h = N.rowinfo[ac]; h.row = at; if (at.originalRecord) { h.originalRecord = at.originalRecord } var o = 0; for (var P = 0; P < b; P++) { var M = N.columns.records[P]; if (M.pinned || (N.rtl && N.columns.records[b - 1].pinned)) { r = true } var aw = M.width; if (aw < M.minwidth) { aw = M.minwidth } if (aw > M.maxwidth) { aw = M.maxwidth } aw -= k; if (aw < 0) { aw = 0 } var aI = N.toTP("jqx-cell") + " " + N.toTP("jqx-grid-cell") + " " + N.toTP("jqx-item"); if (M.pinned) { aI += " " + N.toTP("jqx-grid-cell-pinned") } if (N.sortcolumn === M.displayfield) { aI += " " + N.toTP("jqx-grid-cell-sort") } if (N.altRows && Q % 2 != 0) { aI += " " + N.toTP("jqx-grid-cell-alt") } if (N.rtl) { aI += " " + N.toTP("jqx-cell-rtl") } var R = ""; if (m > 0 && !O && !at.aggregate) { if (at[J.level] < m) { R += ' colspan="' + b + '"'; var H = 0; for (var K = 0; K < b; K++) { var S = N.columns.records[K]; if (S.hidden) { continue } var Z = S.width; if (Z < S.minwidth) { aw = S.minwidth } if (Z > S.maxwidth) { aw = S.maxwidth } Z -= k; if (Z < 0) { Z = 0 } H += Z } aw = H } } var av = '<td role="gridcell"' + R + ' style="max-width:' + aw + "px; width:" + aw + "px;"; var aj = '<td role="gridcell"' + R + ' style="pointer-events: none; visibility: hidden; border-color: transparent; max-width:' + aw + "px; width:" + aw + "px;"; if (P == b - 1 && b == 1) { av += "border-right-color: transparent;"; aj += "border-right-color: transparent;" } if (m > 0 && at[J.level] < m && !at.aggregate) { if (N.rtl) { aI += " " + N.toTP("jqx-right-align") } } else { if (M.cellsalign != "left") { if (M.cellsalign === "right") { aI += " " + N.toTP("jqx-right-align") } else { aI += " " + N.toTP("jqx-center-align") } } } if (h) { if (h.selected) { if (N.editKey !== ac) { if (N.selectionMode !== "none") { aI += " " + N.toTP("jqx-grid-cell-selected"); aI += " " + N.toTP("jqx-fill-state-pressed") } } } if (h.locked) { aI += " " + N.toTP("jqx-grid-cell-locked") } if (h.aggregate) { aI += " " + N.toTP("jqx-grid-cell-pinned") } } if (!(M.hidden)) { if (o == 0 && !N.rtl) { av += "border-left-width: 0px;"; aj += "border-left-width: 0px;" } else { av += "border-right-width: 0px;"; aj += "border-right-width: 0px;" } o++; U += k + aw } else { av += "display: none;"; aj += "display: none;"; N._hiddencolumns = true } if (M.pinned) { av += "pointer-events: auto;"; aj += "pointer-events: auto;" } var u = ""; if ((N.source.hierarchy.length == 0 || (!at.records || (at.records && at.records.length === 0))) && !this.virtualModeCreateRecords) { h.leaf = true } if (at.records && at.records.length > 0) { h.leaf = false } if (N.dataview.filters.length > 0) { if (at.records && at.records.length > 0) { var aa = false; for (var L = 0; L < at.records.length; L++) { if (at.records[L]._visible !== false && at.records[L].aggregate == undefined) { aa = true; break } } if (!aa) { h.leaf = true } else { h.leaf = false } } } if (h && !h.leaf) { if (h.expanded) { u += N.toTP("jqx-tree-grid-expand-button") + " "; if (!N.rtl) { u += N.toTP("jqx-grid-group-expand") } else { u += N.toTP("jqx-grid-group-expand-rtl") } u += " " + N.toTP("jqx-icon-arrow-down") } else { u += N.toTP("jqx-tree-grid-collapse-button") + " "; if (!N.rtl) { u += N.toTP("jqx-grid-group-collapse"); u += " " + N.toTP("jqx-icon-arrow-right") } else { u += N.toTP("jqx-grid-group-collapse-rtl"); u += " " + N.toTP("jqx-icon-arrow-left") } } } if (!N.autoRowHeight || o === 1 || (N.autoRowHeight && !M.autoCellHeight)) { aI += " " + N.toTP("jqx-grid-cell-nowrap") } var V = N._getcellvalue(M, h.row); if (m > 0 && !at.aggregate) { if (at[J.level] < m) { V = at.label } } if (M.cellsFormat != "") { if (a.jqx.dataFormat) { if (a.jqx.dataFormat.isDate(V)) { V = a.jqx.dataFormat.formatdate(V, M.cellsFormat, N.gridlocalization) } else { if (a.jqx.dataFormat.isNumber(V) || (!isNaN(parseFloat(V)) && isFinite(V))) { V = a.jqx.dataFormat.formatnumber(V, M.cellsFormat, N.gridlocalization) } } } } if (M.cellclassname != "" && M.cellclassname) { if (typeof M.cellclassname == "string") { aI += " " + M.cellclassname } else { var aH = M.cellclassname(Q, M.datafield, N._getcellvalue(M, h.row), h.row, V); if (aH) { aI += " " + aH } } } if (M.cellsRenderer != "" && M.cellsRenderer) { var C = M.cellsRenderer(ac, M.datafield, N._getcellvalue(M, h.row), h.row, V); if (C !== undefined) { V = C } } if (h.aggregate) { if (M.aggregates) { var au = at.siblings.slice(0, at.siblings.length - 1); var X = N._calculateaggregate(M, null, true, au); at[M.displayfield] = ""; if (X) { if (M.aggregatesRenderer) { if (X) { var G = M.aggregatesRenderer(X[M.datafield], M, null, N.getcolumnaggregateddata(M.datafield, M.aggregates, false, au), "subAggregates"); V = G; at[M.displayfield] += name + ":" + X[M.datafield] + "\n" } } else { V = ""; at[M.displayfield] = ""; a.each(X, function () { var i = this; for (obj in i) { var c = obj; c = N._getaggregatename(c); var j = '<div style="position: relative; margin: 0px; overflow: hidden;">' + c + ":" + i[obj] + "</div>"; V += j; at[M.displayfield] += c + ":" + i[obj] + "\n" } }) } } else { V = "" } } } if ((o === 1 && !N.rtl) || (M == ab && N.rtl) || (m > 0 && at[J.level] < m)) { var ae = ""; var d = N.toThemeProperty("jqx-tree-grid-indent"); var Y = h.leaf ? 1 : 0; for (var F = 0; F < at[J.level] + Y; F++) { ae += "<span class='" + d + "'></span>" } var al = "<span class='" + u + "'></span>"; var az = ""; var e = ""; if (this.checkboxes && !at.aggregate) { var aC = N.toThemeProperty("jqx-tree-grid-checkbox") + " " + d + " " + N.toThemeProperty("jqx-checkbox-default") + " " + N.toThemeProperty("jqx-fill-state-normal") + " " + N.toThemeProperty("jqx-rc-all"); var g = true; if (a.isFunction(this.checkboxes)) { g = this.checkboxes(ac, at); if (g == undefined) { g = false } } if (g) { if (h) { var ax = h.checked; if (this.hierarchicalCheckboxes == false && ax === null) { ax = false } if (ax) { az += "<span class='" + aC + "'><div class='" + N.toThemeProperty("jqx-tree-grid-checkbox-tick") + " " + N.toThemeProperty("jqx-checkbox-check-checked") + "'></div></span>" } else { if (ax === false) { az += "<span class='" + aC + "'></span>" } else { az += "<span class='" + aC + "'><div class='" + N.toThemeProperty("jqx-tree-grid-checkbox-tick") + " " + N.toThemeProperty("jqx-checkbox-check-indeterminate") + "'></div></span>" } } } else { az += "<span class='" + aC + "'></span>" } } } if (this.icons && !at.aggregate) { var af = N.toThemeProperty("jqx-tree-grid-icon") + " " + d; if (N.rtl) { var af = N.toThemeProperty("jqx-tree-grid-icon") + " " + N.toThemeProperty("jqx-tree-grid-icon-rtl") + " " + d } var aA = N.toThemeProperty("jqx-tree-grid-icon-size") + " " + d; var f = h.icon; if (a.isFunction(this.icons)) { h.icon = this.icons(ac, at); if (h.icon) { f = true } } if (f) { if (h.icon) { e += "<span class='" + af + "'><img class='" + aA + "' src='" + h.icon + "'/></span>" } else { e += "<span class='" + af + "'></span>" } } } var ad = N.autoRowHeight && o === 1 && M.autoCellHeight ? " " + N.toTP("jqx-grid-cell-wrap") : ""; var ai = ae + al + az + e + "<span class='" + N.toThemeProperty("jqx-tree-grid-title") + ad + "'>" + V + "</span>"; if (!N.rtl) { V = ai } else { V = "<span class='" + N.toThemeProperty("jqx-tree-grid-title") + ad + "'>" + V + "</span>" + e + az + al + ae } } if (m > 0 && O && P >= m) { if (at[J.level] < m) { av += "padding-left: 5px; border-left-width: 0px;"; aj += "padding-left: 5px; border-left-width: 0px;"; V = "<span style='visibility: hidden;'>-</span>" } } av += '" class="' + aI + '">'; av += V; av += "</td>"; aj += '" class="' + aI + '">'; aj += V; aj += "</td>"; if (!M.pinned) { n += av; if (r) { an += aj } } else { an += av; n += av } if (m > 0 && !O) { if (at[J.level] < m && !at.aggregate) { break } } } if (ay == 0) { N.table[0].style.width = U + 2 + "px"; ay = U } n += "</tr>"; an += "</tr>"; y += n; W += an; if (N.rowDetails && !at.aggregate && this.rowDetailsRenderer) { var l = '<tr data-role="row-details"><td valign="top" align="left" style="pointer-events: auto; max-width:' + aw + "px; width:" + aw + 'px; overflow: hidden; border-left: none; border-right: none;" colspan="' + N.columns.records.length + '" role="gridcell"'; var aI = N.toTP("jqx-cell") + " " + N.toTP("jqx-grid-cell") + " " + N.toTP("jqx-item"); aI += " " + N.toTP("jqx-details"); aI += " " + N.toTP("jqx-reset"); var ah = this.rowDetailsRenderer(ac, at); if (ah) { l += '" class="' + aI + '"><div style="pointer-events: auto; overflow: hidden;"><div data-role="details">' + ah + "</div></div></td></tr>"; y += l; W += l } } } y += "</table>"; W += "</table>"; if (r) { if (N.WinJS) { MSApp.execUnsafeLocalFunction(function () { N.table.html(W + y) }) } else { N.table[0].innerHTML = W + y } var aD = N.table.find("#table" + N.element.id); var aE = N.table.find("#pinnedtable" + N.element.id); aE.css("float", "left"); aE.css("pointer-events", "none"); aD.css("float", "left"); aE[0].style.position = "absolute"; aD[0].style.position = "relative"; aD[0].style.zIndex = aG - 10; aE[0].style.zIndex = aG + 10; N._table = aD; N._table[0].style.left = "0px"; N._pinnedTable = aE; if (O) { aE[0].style.left = "0px" } N._table[0].style.width = ay + "px"; N._pinnedTable[0].style.width = ay + "px"; if (N.rtl && N._haspinned) { N._pinnedTable[0].style.left = 3 - ay + parseInt(N.element.style.width) + "px" } } else { if (N.WinJS) { MSApp.execUnsafeLocalFunction(function () { N.table.html(y) }) } else { N.table[0].innerHTML = y } var K = N.table.find("#table" + N.element.id); N._table = K; if (a.jqx.browser.msie && a.jqx.browser.version < 10) { N._table[0].style.width = ay + "px" } if (D === 0) { N._table[0].style.width = (2 + ay) + "px" } } if (D === 0) { N._table[0].style.tableLayout = "auto"; if (N._pinnedTable) { N._pinnedTable[0].style.tableLayout = "auto" } } if (N.showAggregates) { N._updatecolumnsaggregates() } if (N._loading && D == 0) { N._arrange(); this._showLoadElement() } if (N.rendered) { N.rendered() } }, propertyChangedHandler: function (b, c, e, d) { if (b.isInitialized == undefined || b.isInitialized == false) { return } if (c == "pageSizeMode" || c == "hierarchicalCheckboxes") { b._renderrows() } }, checkRow: function (c, d, b) { var e = this.base; var g = e._names(); if (e._loading) { return } var f = e.rowinfo[c]; if (f) { f.checked = true; f.row[g.checked] = true; if (f.originalRecord) { f.originalRecord[g.checked] = true } if (b == undefined && this.hierarchicalCheckboxes) { this.checkRows(f.row, f.row) } if (d !== false) { e._renderrows() } e._raiseEvent("rowCheck", { key: c, row: f.row }) } else { var h = this.getRow(c); if (h) { e.rowinfo[c] = { row: h, checked: true }; e.rowinfo[c].row[g.checked] = true; if (h.originalRecord) { e.rowinfo[c].originalRecord = h.originalRecord } e._raiseEvent("rowCheck", { key: c, row: h }); if (b == undefined && this.hierarchicalCheckboxes) { this.checkRows(h, h) } if (d !== false) { e._renderrows() } } } }, checkRows: function (d, n) { var e = this.base; var j = this; var i = e._names(); var l = function (o) { var p = new Array(); var q = function (s) { for (var r = 0; r < s.length; r++) { p.push(s[r]); if (s[r].records) { q(s[r].records) } } }; if (o.records) { q(o.records) } return p }; if (d != null) { var f = 0; var c = false; var g = 0; var b = function (o) { for (var p = 0; p < o.length; p++) { var q = o[p][i.checked]; if (q === undefined) { q = false } if (q != false) { if (o[p][i.checked] == null) { c = true } if (o[p].records) { b(o[p].records) } f++ } g++ } }; if (d.records) { b(d.records) } if (d != n) { if (f == g) { this.checkRow(d.uid, false, "tree") } else { if (f > 0) { this.indeterminateRow(d.uid, false, "tree") } else { this.uncheckRow(d.uid, false, "tree") } } } else { var k = n[i.checked]; var h = l(n); a.each(h, function () { if (k === true) { j.checkRow(this.uid, false, "tree") } else { if (k === false) { j.uncheckRow(this.uid, false, "tree") } else { j.indeterminateRow(this.uid, false, "tree") } } }) } var m = d[i.parent] ? d[i.parent] : null; this.checkRows(m, n) } else { var k = n[i.checked]; var h = l(n); a.each(h, function () { if (k === true) { j.checkRow(this.uid, false, "tree") } else { if (k === false) { j.uncheckRow(this.uid, false, "tree") } else { j.indeterminateRow(this.uid, false, "tree") } } }) } }, indeterminateRow: function (c, d, b) { var f = this.base; var h = f._names(); if (f._loading) { return } var e = this; var g = f.rowinfo[c]; if (g) { g.checked = null; g.row[h.checked] = null; if (g.originalRecord) { g.originalRecord[h.checked] = null } if (b == undefined && this.hierarchicalCheckboxes) { this.checkRows(g.row, g.row) } if (d !== false) { f._renderrows() } } else { var i = this.getRow(c); if (i) { f.rowinfo[c] = { row: i, checked: null }; f.rowinfo[c].row[h.checked] = null; if (i.originalRecord) { f.rowinfo[c].originalRecord = i.originalRecord } if (b == undefined && this.hierarchicalCheckboxes) { this.checkRows(i, i) } if (d !== false) { f._renderrows() } } } }, uncheckRow: function (c, d, b) { var f = this.base; var h = f._names(); if (f._loading) { return } var e = this; var g = f.rowinfo[c]; if (g) { g.checked = false; g.row[h.checked] = false; if (g.originalRecord) { g.originalRecord[h.checked] = false } if (b == undefined && this.hierarchicalCheckboxes) { this.checkRows(g.row, g.row) } if (d !== false) { f._renderrows() } f._raiseEvent("rowUncheck", { key: c, row: g.row }) } else { var i = this.getRow(c); if (i) { f.rowinfo[c] = { row: i, checked: false }; f.rowinfo[c].row[h.checked] = false; if (i.originalRecord) { f.rowinfo[c].originalRecord = i.originalRecord } f._raiseEvent("rowUncheck", { key: c, row: i }); if (b == undefined && this.hierarchicalCheckboxes) { this.checkRows(i, i) } if (d !== false) { f._renderrows() } } } }, expandRows: function (c) { var e = this; if (!c) { return } if (e.virtualModeCreateRecords) { a.each(c, function () { var f = this; var g = function () { e.base._loading = false; e.expandRows(f.records) }; e.base._loading = false; e.expandRow(f.uid, g) }) } else { for (var d = 0; d < c.length; d++) { var b = c[d]; e.expandRow(b.uid); e.expandRows(b.records) } } }, collapseRows: function (b) { if (!b) { return } for (var c = 0; c < b.length; c++) { this.collapseRow(b[c].uid); this.collapseRows(b[c].records) } }, expandAll: function () { var b = this.base; b.beginUpdate(); this.expandRows(this.getRows()); b.endUpdate() }, collapseAll: function () { var b = this.base; b.beginUpdate(); this.collapseRows(this.getRows()); b.endUpdate() }, expandRow: function (h, j) { var d = this.base; if (d._loading) { return } var e = d._names(); var f = this; var b = d.rowinfo[h]; if (!b) { var k = this.getRow(h); if (k) { d.rowinfo[h] = { row: k }; if (k.originalRecord) { d.rowinfo[h].originalRecord = k.originalRecord } b = d.rowinfo[h] } } if (b) { if (b.expanded) { b.row[e.expanded] = true; return } b.expanded = true; b.row[e.expanded] = true; if (b.originalRecord) { b.originalRecord[e.expanded] = true } if (this.virtualModeCreateRecords && !b.row._loadedOnDemand) { var c = function (m) { b.row._loadedOnDemand = true; if (m === false) { d._loading = false; f._hideLoadElement(); b.leaf = true; b.row[e.leaf] = true; d._renderrows(); if (j) { j() } return } for (var n = 0; n < m.length; n++) { m[n][e.level] = b.row[e.level] + 1; m[n][e.parent] = b.row; if (d.rowsByKey[m[n].uid]) { d._loading = false; f._hideLoadElement(); b.leaf = true; b.row[e.leaf] = true; d._renderrows(); if (j) { j() } throw new Error("Please, check whether you Add Records with unique ID/Key. ") } d.rowsByKey[m[n].uid] = m[n]; f.virtualModeRecordCreating(m[n]) } if (!b.row.records) { b.row.records = m } else { b.row.records = b.row.records.concat(m) } if ((!m) || (m && m.length == 0)) { b.leaf = true; b.row[e.leaf] = true } if (b.originalRecord) { b.originalRecord.records = m; b.originalRecord[e.expanded] = true; if (m.length == 0) { b.originalRecord[e.leaf] = true } } d._loading = false; f._hideLoadElement(); var l = d.vScrollBar.css("visibility"); d._renderrows(); d._updateScrollbars(); var o = l != d.vScrollBar.css("visibility"); if (d.height === "auto" || d.height === null || d.autoheight || o) { d._arrange() } d._renderhorizontalscroll(); if (j) { j() } }; if (!b.row[e.leaf]) { d._loading = true; this._showLoadElement(); this.virtualModeCreateRecords(b.row, c); return } } if (!d.updating()) { var g = d.vScrollBar.css("visibility"); d._renderrows(); d._updateScrollbars(); var i = g != d.vScrollBar.css("visibility"); if (d.height === "auto" || d.height === null || d.autoheight || i) { d._arrange() } d._renderhorizontalscroll(); d._raiseEvent("rowExpand", { row: b.row, key: h }) } } }, collapseRow: function (c) { var d = this.base; var g = d._names(); if (d._loading) { return } var f = d.rowinfo[c]; if (!f) { var h = this.getRow(c); if (h) { d.rowinfo[c] = { row: h }; if (h.originalRecord) { d.rowinfo[c].originalRecord = h.originalRecord } f = d.rowinfo[c] } } if (f) { if (!f.expanded) { f.row[g.expanded] = false; return } f.expanded = false; f.row[g.expanded] = false; if (f.originalRecord) { f.originalRecord[g.expanded] = false } if (!d.updating()) { var b = d.vScrollBar.css("visibility"); d._renderrows(); d._updateScrollbars(); var e = b != d.vScrollBar.css("visibility"); if (d.height === "auto" || d.height === null || d.autoheight || e) { d._arrange() } d._renderhorizontalscroll(); d._raiseEvent("rowCollapse", { row: f.row, key: c }) } } } }) })(jqxBaseFramework);


/*
jqxtree
*/

(function(a){a.jqx.jqxWidget("jqxTree","",{});a.extend(a.jqx._jqxTree.prototype,{defineInstance:function(){var b={items:new Array(),width:null,height:null,easing:"easeInOutCirc",animationShowDuration:"fast",animationHideDuration:"fast",treeElements:new Array(),disabled:false,enableHover:true,keyboardNavigation:true,enableKeyboardNavigation:true,toggleMode:"dblclick",source:null,checkboxes:false,checkSize:13,toggleIndicatorSize:16,hasThreeStates:false,selectedItem:null,touchMode:"auto",allowDrag:true,allowDrop:true,searchMode:"startswithignorecase",incrementalSearch:true,incrementalSearchDelay:700,animationHideDelay:0,submitCheckedItems:false,dragStart:null,dragEnd:null,rtl:false,dropAction:"default",events:["expand","collapse","select","initialized","added","removed","checkChange","dragEnd","dragStart","itemClick"],aria:{"aria-activedescendant":{name:"getActiveDescendant",type:"string"},"aria-disabled":{name:"disabled",type:"boolean"}}};a.extend(true,this,b);return b},createInstance:function(c){var b=this;this.host.attr("role","tree");this.host.attr("data-role","treeview");this.enableKeyboardNavigation=this.keyboardNavigation;this.propertyChangeMap.disabled=function(f,h,g,j){if(b.disabled){b.host.addClass(b.toThemeProperty("jqx-tree-disabled"))}else{b.host.removeClass(b.toThemeProperty("jqx-tree-disabled"))}a.jqx.aria(b,"aria-disabled",j)};if(this.width!=null&&this.width.toString().indexOf("px")!=-1){this.host.width(this.width)}else{if(this.width!=undefined&&!isNaN(this.width)){this.host.width(this.width)}}if(this.height!=null&&this.height.toString().indexOf("px")!=-1){this.host.height(this.height)}else{if(this.height!=undefined&&!isNaN(this.height)){this.host.height(this.height)}}if(this.width!=null&&this.width.toString().indexOf("%")!=-1){this.host.width(this.width)}if(this.height!=null&&this.height.toString().indexOf("%")!=-1){this.host.height(this.height)}if(!this.host.attr("tabindex")){this.host.attr("tabIndex",1)}if(this.disabled){this.host.addClass(this.toThemeProperty("jqx-tree-disabled"));a.jqx.aria(this,"aria-disabled",true)}if(this.host.jqxDragDrop){jqxTreeDragDrop()}this.originalInnerHTML=this.element.innerHTML;this.createdTree=false;if(this.element.innerHTML.indexOf("UL")){var e=this.host.find("ul:first");if(e.length>0){this.createTree(e[0]);this.createdTree=true}}if(this.source!=null){var d=this.loadItems(this.source);this.element.innerHTML=d;var e=this.host.find("ul:first");if(e.length>0){this.createTree(e[0]);this.createdTree=true}}this._itemslength=this.items.length;if(!this.createdTree){if(this.host.find("ul").length==0){this.host.append(a("<ul></ul>"));var e=this.host.find("ul:first");if(e.length>0){this.createTree(e[0]);this.createdTree=true}this.createdTree=true}}if(this.createdTree==true){this._render();this._handleKeys()}this._updateCheckLayout()},checkItems:function(f,h){var e=this;if(f!=null){var d=0;var g=false;var b=0;var j=a(f.element).find("li");b=j.length;a.each(j,function(k){var l=e.itemMapping["id"+this.id].item;if(l.checked!=false){if(l.checked==null){g=true}d++}});if(f!=h){if(d==b){this.checkItem(f.element,true,"tree")}else{if(d>0){this.checkItem(f.element,null,"tree")}else{this.checkItem(f.element,false,"tree")}}}else{var c=h.checked;var j=a(h.element).find("li");a.each(j,function(){var k=e.itemMapping["id"+this.id].item;e.checkItem(this,c,"tree")})}this.checkItems(this._parentItem(f),h)}else{var c=h.checked;var j=a(h.element).find("li");a.each(j,function(){var k=e.itemMapping["id"+this.id].item;e.checkItem(this,c,"tree")})}},_getMatches:function(e,f){if(e==undefined||e.length==0){return -1}var c=this.items;var b=new Array();for(var d=0;d<c.length;d++){if(this._isVisible(c[d])&&!c[d].disabled){b.push(c[d])}}c=b;if(f!=undefined){c=c.slice(f)}var g=new Array();a.each(c,function(j){var k=this.label;if(!k){k=""}var h=a.jqx.string.startsWithIgnoreCase(k.toString(),e);if(h){g.push({id:this.id,element:this.element})}});return g},_handleKeys:function(){var b=this;this.addHandler(this.host,"keydown",function(d){var s=d.keyCode;if(b.keyboardNavigation||b.enableKeyboardNavigation){if(b.selectedItem!=null){var l=b.selectedItem.element;if(b.incrementalSearch&&(!(s>=33&&s<=40))){var t=-1;if(!b._searchString){b._searchString=""}if((s==8||s==46)&&b._searchString.length>=1){b._searchString=b._searchString.substr(0,b._searchString.length-1)}var h=String.fromCharCode(s);var o=(!isNaN(parseInt(h)));var n=false;if((s>=65&&s<=97)||o||s==8||s==32||s==46){if(!d.shiftKey){h=h.toLocaleLowerCase()}if(s!=8&&s!=32&&s!=46){if(!(b._searchString.length>0&&b._searchString.substr(0,1)==h)){b._searchString+=h}}if(s==32){b._searchString+=" "}b._searchTime=new Date();var r=b.selectedItem;if(r){var g=r.id;var m=-1;for(var k=0;k<b.items.length;k++){if(b.items[k].id==g){m=k+1;break}}var f=b._getMatches(b._searchString,m);if(f.length==0||(f.length>0&&f[0].id==g)){var f=b._getMatches(b._searchString)}}else{var f=b._getMatches(b._searchString)}if(f.length>0){var r=b.selectedItem;if(b.selectedItem&&b.selectedItem.id!=f[0].id){b.clearSelection();b.selectItem(f[0].element,"keyboard")}b._lastSearchString=b._searchString}}if(b._searchTimer!=undefined){clearTimeout(b._searchTimer)}if(s==27||s==13){b._searchString="";b._lastSearchString=""}b._searchTimer=setTimeout(function(){b._searchString="";b._lastSearchString=""},500);if(t>=0){return}if(n){return false}}switch(s){case 32:if(b.checkboxes){b.fromKey=true;var q=a(b.selectedItem.checkBoxElement).jqxCheckBox("checked");b.checkItem(b.selectedItem.element,!q,"tree");if(b.hasThreeStates){b.checkItems(b.selectedItem,b.selectedItem)}return false}return true;case 33:var j=b._getItemsOnPage();var p=b.selectedItem;for(var k=0;k<j;k++){p=b._prevVisibleItem(p)}if(p!=null){b.selectItem(p.element,"keyboard");b.ensureVisible(p.element)}else{b.selectItem(b._firstItem().element,"keyboard");b.ensureVisible(b._firstItem().element)}return false;case 34:var j=b._getItemsOnPage();var c=b.selectedItem;for(var k=0;k<j;k++){c=b._nextVisibleItem(c)}if(c!=null){b.selectItem(c.element,"keyboard");b.ensureVisible(c.element)}else{b.selectItem(b._lastItem().element,"keyboard");b.ensureVisible(b._lastItem().element)}return false;case 37:case 39:if((s==37&&!b.rtl)||(s==39&&b.rtl)){if(b.selectedItem.hasItems&&b.selectedItem.isExpanded){b.collapseItem(l)}else{var e=b._parentItem(b.selectedItem);if(e!=null){b.selectItem(e.element,"keyboard");b.ensureVisible(e.element)}}}if((s==39&&!b.rtl)||(s==37&&b.rtl)){if(b.selectedItem.hasItems){if(!b.selectedItem.isExpanded){b.expandItem(l)}else{var c=b._nextVisibleItem(b.selectedItem);if(c!=null){b.selectItem(c.element,"keyboard");b.ensureVisible(c.element)}}}}return false;case 13:if(b.selectedItem.hasItems){if(b.selectedItem.isExpanded){b.collapseItem(l)}else{b.expandItem(l)}}return false;case 36:b.selectItem(b._firstItem().element,"keyboard");b.ensureVisible(b._firstItem().element);return false;case 35:b.selectItem(b._lastItem().element,"keyboard");b.ensureVisible(b._lastItem().element);return false;case 38:var p=b._prevVisibleItem(b.selectedItem);if(p!=null){b.selectItem(p.element,"keyboard");b.ensureVisible(p.element)}return false;case 40:var c=b._nextVisibleItem(b.selectedItem);if(c!=null){b.selectItem(c.element,"keyboard");b.ensureVisible(c.element)}return false}}}})},_firstItem:function(){var d=null;var c=this;var f=this.host.find("ul:first");var e=a(f).find("li");for(i=0;i<=e.length-1;i++){var b=e[i];d=this.itemMapping["id"+b.id].item;if(c._isVisible(d)){return d}}return null},_lastItem:function(){var d=null;var c=this;var f=this.host.find("ul:first");var e=a(f).find("li");for(i=e.length-1;i>=0;i--){var b=e[i];d=this.itemMapping["id"+b.id].item;if(c._isVisible(d)){return d}}return null},_parentItem:function(d){if(d==null||d==undefined){return null}var c=d.parentElement;if(!c){return null}var b=null;a.each(this.items,function(){if(this.element==c){b=this;return false}});return b},_nextVisibleItem:function(c){if(c==null||c==undefined){return null}var b=c;while(b!=null){b=b.nextItem;if(this._isVisible(b)&&!b.disabled){return b}}return null},_prevVisibleItem:function(c){if(c==null||c==undefined){return null}var b=c;while(b!=null){b=b.prevItem;if(this._isVisible(b)&&!b.disabled){return b}}return null},_isVisible:function(c){if(c==null||c==undefined){return false}if(!this._isElementVisible(c.element)){return false}var b=this._parentItem(c);if(b==null){return true}if(b!=null){if(!this._isElementVisible(b.element)){return false}if(b.isExpanded){while(b!=null){b=this._parentItem(b);if(b!=null&&!this._isElementVisible(b.element)){return false}if(b!=null&&!b.isExpanded){return false}}}else{return false}}return true},_getItemsOnPage:function(){var d=0;var c=this.panel.jqxPanel("getVScrollPosition");var b=parseInt(this.host.height());var f=0;var e=this._firstItem();if(parseInt(a(e.element).height())>0){while(f<=b){f+=parseInt(a(e.element).outerHeight());d++}}return d},_isElementVisible:function(b){if(b==null){return false}if(a(b).css("display")!="none"&&a(b).css("visibility")!="hidden"){return true}return false},refresh:function(c){if(this.width!=null&&this.width.toString().indexOf("px")!=-1){this.host.width(this.width)}else{if(this.width!=undefined&&!isNaN(this.width)){this.host.width(this.width)}}if(this.height!=null&&this.height.toString().indexOf("px")!=-1){this.host.height(this.height)}else{if(this.height!=undefined&&!isNaN(this.height)){this.host.height(this.height)}}if(this.panel){if(this.width!=null&&this.width.toString().indexOf("%")!=-1){var b=this;this.panel.jqxPanel("width","100%");b.removeHandler(a(window),"resize.jqxtree"+b.element.id);b.addHandler(a(window),"resize.jqxtree"+b.element.id,function(){b._calculateWidth()})}else{this.panel.jqxPanel("width",this.host.width())}this.panel.jqxPanel("_arrange")}this._calculateWidth();if(a.jqx.isHidden(this.host)){var b=this;if(this._hiddenTimer){clearInterval(this._hiddenTimer)}this._hiddenTimer=setInterval(function(){if(!a.jqx.isHidden(b.host)){clearInterval(b._hiddenTimer);b._calculateWidth()}},100)}if(c!=true){if(this.checkboxes){this._updateCheckLayout(null)}}},resize:function(c,b){this.width=c;this.height=b;this.refresh()},loadItems:function(c){if(c==null){return}var b=this;this.items=new Array();var d="<ul>";a.map(c,function(e){if(e==undefined){return null}d+=b._parseItem(e)});d+="</ul>";return d},_parseItem:function(m){var g="";if(m==undefined){return null}var k=m.label;if(!m.label&&m.html){k=m.html}if(!k){k="Item"}if(typeof m==="string"){k=m}var h=false;if(m.expanded!=undefined&&m.expanded){h=true}var f=false;if(m.locked!=undefined&&m.locked){f=true}var d=false;if(m.selected!=undefined&&m.selected){d=true}var e=false;if(m.disabled!=undefined&&m.disabled){e=true}var l=false;if(m.checked!=undefined&&m.checked){l=true}var j=m.icon;var c=m.iconsize;g+="<li";if(h){g+=' item-expanded="true" '}if(f){g+=' item-locked="true" '}if(e){g+=' item-disabled="true" '}if(d){g+=' item-selected="true" '}if(c){g+=' item-iconsize="'+m.iconsize+'" '}if(j!=null&&j!=undefined){g+=' item-icon="'+j+'" '}if(m.label&&!m.html){g+=' item-label="'+k+'" '}if(m.value!=null){g+=' item-value="'+m.value+'" '}if(m.checked!=undefined){g+=' item-checked="'+l+'" '}var b="";if(m.id!=undefined){b=m.id;g+=' id="'+b+'" '}else{b=this.createID();g+=' id="'+b+'" '}g+=">"+k;if(m.items){g+=this.loadItems(m.items)}if(!this._valueList){this._valueList=new Array()}this._valueList[b]=m.value;g+="</li>";return g},ensureVisible:function(d){if(d==null||d==undefined){return}var c=this.panel.jqxPanel("getVScrollPosition");var e=this.panel.jqxPanel("getHScrollPosition");var b=parseInt(this.host.height());var f=a(d).position().top;if(f<=c||f>=b+c){this.panel.jqxPanel("scrollTo",e,f-b+a(d).outerHeight())}},_syncItems:function(c){this._visibleItems=new Array();var b=this;a.each(c,function(){var e=a(this);if(e.css("display")!="none"){var d=e.outerHeight();if(e.height()>0){var f=parseInt(e.offset().top);b._visibleItems[b._visibleItems.length]={element:this,top:f,height:d,bottom:f+d}}}})},hitTest:function(h,g){var d=this;var b=this;var f=null;var e=this.host.find(".jqx-item");this._syncItems(e);if(b._visibleItems){var c=parseInt(b.host.offset().left);var j=b.host.outerWidth();a.each(b._visibleItems,function(l){if(h>=c&&h<c+j){if(this.top+5<g&&g<this.top+this.height){var k=a(this.element).parents("li:first");if(k.length>0){f=b.getItem(k[0]);if(f!=null){f.height=this.height;f.top=this.top;return false}}}}})}return f},addBefore:function(b,d,c){return this.addBeforeAfter(b,d,true,c)},addAfter:function(b,d,c){return this.addBeforeAfter(b,d,false,c)},addBeforeAfter:function(o,r,q,n){var l=this;var m=new Array();if(r&&r.treeInstance!=undefined){r=r.element}if(!a.isArray(o)){m[0]=o}else{m=o}var g="";var p=this;a.each(m,function(){g+=p._parseItem(this)});var b=a(g);if(l.element.innerHTML.indexOf("UL")){var h=l.host.find("ul:first")}if(r==undefined&&r==null){h.append(b)}else{if(q){a(r).before(b)}else{a(r).after(b)}}var d=b;for(var k=0;k<d.length;k++){this._createItem(d[k]);var c=a(d[k]).find("li");if(c.length>0){for(var f=0;f<c.length;f++){this._createItem(c[f])}}}var e=function(j){p._refreshMapping(false);p._updateItemsNavigation();if(j&&p.allowDrag&&p._enableDragDrop){p._enableDragDrop()}if(p.selectedItem!=null){a(p.selectedItem.titleElement).addClass(p.toThemeProperty("jqx-fill-state-pressed"));a(p.selectedItem.titleElement).addClass(p.toThemeProperty("jqx-tree-item-selected"))}};if(n==false){e(true);this._raiseEvent("4",{items:this.getItems()});return}e(false);p._render();this._raiseEvent("4",{items:this.getItems()});if(p.checkboxes){p._updateCheckLayout(null)}},addTo:function(q,s,p){var n=this;var o=new Array();if(s&&s.treeInstance!=undefined){s=s.element}if(!a.isArray(q)){o[0]=q}else{o=q}var k="";var r=this;a.each(o,function(){k+=r._parseItem(this)});var b=a(k);if(n.element.innerHTML.indexOf("UL")){var l=n.host.find("ul:first")}if(s==undefined&&s==null){l.append(b)}else{s=a(s);var e=s.find("ul:first");if(e.length==0){ulElement=a("<ul></ul>");a(s).append(ulElement);e=s.find("ul:first");var t=n.itemMapping["id"+s[0].id].item;t.subtreeElement=e[0];t.hasItems=true;e.addClass(n.toThemeProperty("jqx-tree-dropdown"));if(r.rtl){e.addClass(n.toThemeProperty("jqx-tree-dropdown-rtl"))}e.append(b);var h=e.find("li:first");t.parentElement=h}else{e.append(b)}}var d=b;for(var m=0;m<d.length;m++){this._createItem(d[m]);var c=a(d[m]).find("li");if(c.length>0){for(var g=0;g<c.length;g++){this._createItem(c[g])}}}var f=function(j){r._refreshMapping(false);r._updateItemsNavigation();if(j&&r.allowDrag&&r._enableDragDrop){r._enableDragDrop()}if(r.selectedItem!=null){a(r.selectedItem.titleElement).addClass(r.toThemeProperty("jqx-fill-state-pressed"));a(r.selectedItem.titleElement).addClass(r.toThemeProperty("jqx-tree-item-selected"))}};if(p==false){f(true);this._raiseEvent("4",{items:this.getItems()});return}f(false);r._render();if(r.checkboxes){r._updateCheckLayout(null)}this._raiseEvent("4",{items:this.getItems()})},updateItem:function(e,j){var h=e.treeInstance!=undefined?e:this.getItem(e);if(!h){var d=e;e=j;j=d;var h=e.treeInstance!=undefined?e:this.getItem(e)}if(h){if(typeof(j)==="string"){j={label:j}}if(j.value){h.value=j.value}if(j.label){h.label=j.label;a.jqx.utilities.html(a(h.titleElement),j.label);var b=a.jqx.browser.msie&&a.jqx.browser.version<8;if(b){a(document.body).append(this._measureItem);this._measureItem.html(a(h.titleElement).text());var g=this._measureItem.width();if(h.icon){g+=20}if(a(a(h.titleElement).find("img")).length>0){g+=20}a(h.titleElement).css("max-width",g+"px");this._measureItem.remove()}}if(j.icon){if(a(h.element).children(".itemicon").length>0){a(h.element).find(".itemicon")[0].src=j.icon}else{var c=j.iconsize;if(!c){c=16}var f=a('<img width="'+c+'" height="'+c+'" style="float: left;" class="itemicon" src="'+j.icon+'"/>');a(h.titleElement).prepend(f);f.css("margin-right","4px");if(this.rtl){f.css("margin-right","0px");f.css("margin-left","4px");f.css("float","right")}}}if(j.expanded){this.expandItem(h)}if(j.disabled){this.disableItem(h)}if(j.selected){this.selectItem(h)}return true}return false},removeItem:function(b,d){if(b==undefined||b==null){return}if(b.treeInstance!=undefined){b=b.element}var e=this;var h=b.id;var c=-1;var f=this.getItem(b);if(f){c=this.items.indexOf(f);if(c!=-1){(function g(p){var n=-1;n=this.items.indexOf(p);if(n!=-1){this.items.splice(n,1)}var k=a(p.element).find("li");var j=k.length;var o=this;var l=new Array();if(j>0){a.each(k,function(q){var r=o.itemMapping["id"+this.id].item;l.push(r)});for(var m=0;m<l.length;m++){g.apply(this,[l[m]])}}}).apply(this,[f])}}if(this.host.find("#"+b.id).length>0){a(b).remove()}if(d==false){this._raiseEvent("5");return}e._updateItemsNavigation();if(e.allowDrag&&e._enableDragDrop){e._render(true,false)}else{e._render()}if(e.selectedItem!=null){if(e.selectedItem.element==b){a(e.selectedItem.titleElement).removeClass(e.toThemeProperty("jqx-fill-state-pressed"));a(e.selectedItem.titleElement).removeClass(e.toThemeProperty("jqx-tree-item-selected"));e.selectedItem=null}}this._raiseEvent("5");if(e.checkboxes){e._updateCheckLayout(null)}},clear:function(){this.items=new Array();this.itemMapping=new Array();var b=this.host.find("ul:first");if(b.length>0){b[0].innerHTML=""}this.selectedItem=null},disableItem:function(b){if(b==null){return false}if(b.treeInstance!=undefined){b=b.element}var c=this;a.each(c.items,function(){var d=this;if(d.element==b){d.disabled=true;a(d.titleElement).addClass(c.toThemeProperty("jqx-fill-state-disabled"));a(d.titleElement).addClass(c.toThemeProperty("jqx-tree-item-disabled"));if(c.checkboxes&&d.checkBoxElement){a(d.checkBoxElement).jqxCheckBox({disabled:true})}return false}})},_updateInputSelection:function(){if(this.input){if(this.selectedItem==null){this.input.val("")}else{var c=this.selectItem.value;if(c==null){c=this.selectedItem.label}this.input.val(c)}if(this.checkboxes){var b=this.getCheckedItems();if(this.submitCheckedItems){var f="";for(var d=0;d<b.length;d++){var e=b[d].value;if(e==null){e=b[d].label}if(d==b.length-1){f+=e}else{f+=e+","}}this.input.val(f)}}}},getCheckedItems:function(){var b=new Array();var c=this;a.each(c.items,function(){var d=this;if(d.checked){b.push(d)}});return b},getUncheckedItems:function(){var b=new Array();var c=this;a.each(c.items,function(){var d=this;if(!d.checked){b.push(d)}});return b},checkAll:function(){var b=this;a.each(b.items,function(){var c=this;if(!c.disabled){c.checked=true;a(c.checkBoxElement).jqxCheckBox("_setState",true)}});this._raiseEvent("6",{element:this,checked:true})},uncheckAll:function(){var b=this;a.each(b.items,function(){var c=this;if(!c.disabled){c.checked=false;a(c.checkBoxElement).jqxCheckBox("_setState",false)}});this._raiseEvent("6",{element:this,checked:false})},checkItem:function(d,f,b){if(d==null){return false}if(f===undefined){f=true}if(d.treeInstance!=undefined){d=d.element}var e=this;var c=false;var g=null;a.each(e.items,function(){var h=this;if(h.element==d&&!h.disabled){c=true;h.checked=f;g=h;a(h.checkBoxElement).jqxCheckBox({checked:f});return false}});if(c){this._raiseEvent("6",{element:d,checked:f});this._updateInputSelection()}if(b==undefined){if(g){if(this.hasThreeStates){this.checkItems(g,g)}}}},uncheckItem:function(b){this.checkItem(b,false)},enableItem:function(b){if(b==null){return false}if(b.treeInstance!=undefined){b=b.element}var c=this;a.each(c.items,function(){var d=this;if(d.element==b){d.disabled=false;a(d.titleElement).removeClass(c.toThemeProperty("jqx-fill-state-disabled"));a(d.titleElement).removeClass(c.toThemeProperty("jqx-tree-item-disabled"));if(c.checkboxes&&d.checkBoxElement){a(d.checkBoxElement).jqxCheckBox({disabled:false})}return false}})},enableAll:function(){var b=this;a.each(b.items,function(){var c=this;c.disabled=false;a(c.titleElement).removeClass(b.toThemeProperty("jqx-tree-item-disabled"));a(c.titleElement).removeClass(b.toThemeProperty("jqx-fill-state-disabled"));if(b.checkboxes&&c.checkBoxElement){a(c.checkBoxElement).jqxCheckBox({disabled:false})}})},lockItem:function(b){if(b==null){return false}var c=this;a.each(c.items,function(){var d=this;if(d.element==b){d.locked=true;return false}})},unlockItem:function(b){if(b==null){return false}var c=this;a.each(c.items,function(){var d=this;if(d.element==b){d.locked=false;return false}})},getItems:function(){return this.items},getItem:function(b){if(b==null||b==undefined){return null}if(this.itemMapping["id"+b.id]){var c=this.itemMapping["id"+b.id].item;return c}return null},isExpanded:function(b){if(b==null||b==undefined){return false}var c=this.itemMapping["id"+b.id].item;if(c!=null){return c.isExpanded}return false},isSelected:function(b){if(b==null||b==undefined){return false}var c=this.itemMapping["id"+b.id].item;if(c!=null){return c==this.selectedItem}return false},getPrevItem:function(c){var d=this.getItem(c);if(c.treeInstance!=undefined){d=c}var b=this._prevVisibleItem(d);return b},getNextItem:function(c){var d=this.getItem(c);if(c.treeInstance!=undefined){d=c}var b=this._nextVisibleItem(d);return b},getSelectedItem:function(b){return this.selectedItem},val:function(d){if(arguments.length==0||typeof(d)=="object"){return this.selectedItem}if(typeof d=="string"){var b=this.host.find("#"+d);if(b.length>0){var c=this.getItem(b[0]);this.selectItem(c)}}else{var c=this.getItem(d);this.selectItem(c)}},getActiveDescendant:function(){if(this.selectedItem){return this.selectedItem.element.id}return""},clearSelection:function(){this.selectItem(null)},selectItem:function(b,c){if(this.disabled){return}var d=this;if(b&&b.treeInstance!=undefined){b=b.element}if(b==null||b==undefined){if(d.selectedItem!=null){a(d.selectedItem.titleElement).removeClass(d.toThemeProperty("jqx-fill-state-pressed"));a(d.selectedItem.titleElement).removeClass(d.toThemeProperty("jqx-tree-item-selected"));d.selectedItem=null}return}if(this.selectedItem!=null&&this.selectedItem.element==b){return}var e=this.selectedItem!=null?this.selectedItem.element:null;if(e){a(e).removeAttr("aria-selected")}a.each(d.items,function(){var f=this;this.selected=false;if(!f.disabled){if(f.element==b){if(d.selectedItem==null||(d.selectedItem!=null&&d.selectedItem.titleElement!=f.titleElement)){if(d.selectedItem!=null){a(d.selectedItem.titleElement).removeClass(d.toThemeProperty("jqx-fill-state-pressed"));a(d.selectedItem.titleElement).removeClass(d.toThemeProperty("jqx-tree-item-selected"))}a(f.titleElement).addClass(d.toThemeProperty("jqx-fill-state-pressed"));a(f.titleElement).addClass(d.toThemeProperty("jqx-tree-item-selected"));d.selectedItem=f;this.selected=true;a(f.element).attr("aria-selected","true");a.jqx.aria(d,"aria-activedescendant",f.element.id)}}}});this._updateInputSelection();if(!c){c=null}this._raiseEvent("2",{element:b,prevElement:e,type:c})},collapseAll:function(){this.isUpdating=true;var d=this;var b=d.items;var c=this.animationHideDuration;this.animationHideDuration=0;a.each(b,function(){var e=this;if(e.isExpanded==true){d._collapseItem(d,e)}});setTimeout(function(){d.isUpdating=false;d._calculateWidth()},this.animationHideDuration);this.animationHideDuration=c},expandAll:function(){var c=this;this.isUpdating=true;var b=this.animationShowDuration;this.animationShowDuration=0;a.each(this.items,function(){var d=this;if(d.hasItems){c._expandItem(c,d)}});setTimeout(function(){c.isUpdating=false;c._calculateWidth()},this.animationShowDuration);this.animationShowDuration=b},collapseItem:function(b){if(b==null){return false}if(b.treeInstance!=undefined){b=b.element}var c=this;a.each(this.items,function(){var d=this;if(d.isExpanded==true&&d.element==b){c._collapseItem(c,d);return false}});return true},expandItem:function(b){if(b==null){return false}if(b.treeInstance!=undefined){b=b.element}var c=this;a.each(c.items,function(){var d=this;if(d.isExpanded==false&&d.element==b&&!d.disabled&&!d.locked){c._expandItem(c,d);if(d.parentElement){c.expandItem(d.parentElement)}}});return true},_getClosedSubtreeOffset:function(c){var b=a(c.subtreeElement);var e=-b.outerHeight();var d=-b.outerWidth();d=0;return{left:d,top:e}},_collapseItem:function(g,k,d,b){if(g==null||k==null){return false}if(k.disabled){return false}if(g.disabled){return false}if(g.locked){return false}var e=a(k.subtreeElement);var l=this._getClosedSubtreeOffset(k);var h=l.top;var c=l.left;$treeElement=a(k.element);var f=g.animationHideDelay;f=0;if(e.data("timer").show!=null){clearTimeout(e.data("timer").show);e.data("timer").show=null}var j=function(){k.isExpanded=false;if(g.checkboxes){var n=e.find(".chkbox");n.stop();n.css("opacity",1);e.find(".chkbox").animate({opacity:0},50)}var m=a(k.arrow);g._arrowStyle(m,"",k.isExpanded);e.slideUp(g.animationHideDuration,function(){k.isCollapsing=false;g._calculateWidth();var o=a(k.arrow);g._arrowStyle(o,"",k.isExpanded);e.hide();g._raiseEvent("1",{element:k.element})})};if(f>0){e.data("timer").hide=setTimeout(function(){j()},f)}else{j()}},_expandItem:function(g,k){if(g==null||k==null){return false}if(k.isExpanded){return false}if(k.locked){return false}if(k.disabled){return false}if(g.disabled){return false}var e=a(k.subtreeElement);if((e.data("timer"))!=null&&e.data("timer").hide!=null){clearTimeout(e.data("timer").hide)}var j=a(k.element);var h=0;var d=0;if(parseInt(e.css("top"))==h){k.isExpanded=true;return}var c=a(k.arrow);g._arrowStyle(c,"",k.isExpanded);if(g.checkboxes){var f=e.find(".chkbox");f.stop();f.css("opacity",0);f.animate({opacity:1},g.animationShowDuration)}e.slideDown(g.animationShowDuration,g.easing,function(){var l=a(k.arrow);k.isExpanded=true;g._arrowStyle(l,"",k.isExpanded);k.isExpanding=false;g._raiseEvent("0",{element:k.element});g._calculateWidth()});if(g.checkboxes){g._updateCheckItemLayout(k);if(k.subtreeElement){var b=a(k.subtreeElement).find("li");a.each(b,function(){var l=g.getItem(this);if(l!=null){g._updateCheckItemLayout(l)}})}}},_calculateWidth:function(){var f=this;var g=this.checkboxes?20:0;var e=0;if(this.isUpdating){return}a.each(this.items,function(){var h=a(this.element).height();if(h!=0){var l=a(this.titleElement).outerWidth()+10+g+(1+this.level)*20;e=Math.max(e,l);if(this.hasItems){var j=parseInt(a(this.titleElement).css("padding-top"));if(isNaN(j)){j=0}j=j*2;j+=2;var k=(j+a(this.titleElement).height())/2-17/2;if(a.jqx.browser.msie&&a.jqx.browser.version<9){a(this.arrow).css("margin-top","3px")}else{if(parseInt(k)>=0){a(this.arrow).css("margin-top",parseInt(k)+"px")}}}}});if(this.toggleIndicatorSize>16){e=e+this.toggleIndicatorSize-16}if(f.panel){if(e>this.host.width()){var b=e-this.host.width();var d=f.panel.jqxPanel("vScrollBar").css("visibility")!=="hidden"?10:0;b+=d;f.panel.jqxPanel({horizontalScrollBarMax:b})}else{f.panel.jqxPanel({horizontalScrollBarMax:0})}}this.host.find("ul:first").width(e);var c=this.host.width()-30;if(c>0){this.host.find("ul:first").css("min-width",c)}if(f.panel){f.panel.jqxPanel("_arrange")}},_arrowStyle:function(c,h,b){var e=this;if(c.length>0){c.removeClass();var g="";if(h=="hover"){g="-"+h}var f=b?"-expand":"-collapse";var d="jqx-tree-item-arrow"+f+g;c.addClass(e.toThemeProperty(d));if(!this.rtl){var f=!b?"-right":"-down";c.addClass(e.toThemeProperty("jqx-icon-arrow"+f+""))}if(this.rtl){c.addClass(e.toThemeProperty(d+"-rtl"));var f=!b?"-left":"-down";c.addClass(e.toThemeProperty("jqx-icon-arrow"+f+""))}}},_initialize:function(f,c){var e=this;var d=0;this.host.addClass(e.toThemeProperty("jqx-widget"));this.host.addClass(e.toThemeProperty("jqx-widget-content"));this.host.addClass(e.toThemeProperty("jqx-tree"));this._updateDisabledState();var b=a.jqx.browser.msie&&a.jqx.browser.version<8;a.each(this.items,function(){var m=this;$element=a(m.element);var k=null;if(e.checkboxes&&!m.hasItems&&m.checkBoxElement){a(m.checkBoxElement).css("margin-left","0px")}if(!b){if(!m.hasItems){if(!e.rtl){m.element.style.marginLeft=parseInt(e.toggleIndicatorSize)+"px"}else{m.element.style.marginRight=parseInt(e.toggleIndicatorSize)+"px"}var j=a(m.arrow);if(j.length>0){j.remove();m.arrow=null}return true}else{if(!e.rtl){m.element.style.marginLeft="0px"}else{m.element.style.marginRight="0px"}}}else{if(!m.hasItems&&a(m.element).find("ul").length>0){a(m.element).find("ul").remove()}}var j=a(m.arrow);if(j.length>0){j.remove()}k=a('<span style="height: 17px; border: none; background-color: transparent;" id="arrow'+$element[0].id+'"></span>');k.prependTo($element);if(!e.rtl){k.css("float","left")}else{k.css("float","right")}k.css("clear","both");k.width(e.toggleIndicatorSize);e._arrowStyle(k,"",m.isExpanded);var l=parseInt(a(this.titleElement).css("padding-top"));if(isNaN(l)){l=0}l=l*2;l+=2;var n=(l+a(this.titleElement).height())/2-17/2;if(a.jqx.browser.msie&&a.jqx.browser.version<9){k.css("margin-top","3px")}else{if(parseInt(n)>=0){k.css("margin-top",parseInt(n)+"px")}}$element.addClass(e.toThemeProperty("jqx-disableselect"));k.addClass(e.toThemeProperty("jqx-disableselect"));var g="click";var h=e.isTouchDevice();if(h){g=a.jqx.mobile.getTouchEventName("touchend")}e.addHandler(k,g,function(){if(!m.isExpanded){e._expandItem(e,m)}else{e._collapseItem(e,m)}return false});e.addHandler(k,"selectstart",function(){return false});e.addHandler(k,"mouseup",function(){if(!h){return false}});m.hasItems=a(m.element).find("li").length>0;m.arrow=k[0];if(!m.hasItems){k.css("visibility","hidden")}$element.css("float","none")})},_getOffset:function(b){var f=a(window).scrollTop();var h=a(window).scrollLeft();var c=a.jqx.mobile.isSafariMobileBrowser();var g=a(b).offset();var e=g.top;var d=g.left;if(c!=null&&c){return{left:d-h,top:e-f}}else{return a(b).offset()}},_renderHover:function(c,e,b){var d=this;if(!b){var f=a(e.titleElement);d.addHandler(f,"mouseenter",function(){if(!e.disabled&&d.enableHover&&!d.disabled){f.addClass(d.toThemeProperty("jqx-fill-state-hover"));f.addClass(d.toThemeProperty("jqx-tree-item-hover"))}});d.addHandler(f,"mouseleave",function(){if(!e.disabled&&d.enableHover&&!d.disabled){f.removeClass(d.toThemeProperty("jqx-fill-state-hover"));f.removeClass(d.toThemeProperty("jqx-tree-item-hover"))}})}},_updateDisabledState:function(){if(this.disabled){this.host.addClass(this.toThemeProperty("jqx-fill-state-disabled"))}else{this.host.removeClass(this.toThemeProperty("jqx-fill-state-disabled"))}},_addInput:function(){if(this.input==null){var b=this.host.attr("name");if(b){this.host.attr("name","")}this.input=a("<input type='hidden'/>");this.host.append(this.input);this.input.attr("name",b);this._updateInputSelection()}},render:function(){this._updateItemsNavigation();this._render()},_render:function(f,j){if(a.jqx.browser.msie&&a.jqx.browser.version<8){var g=this;a.each(this.items,function(){var n=a(this.element);var p=n.parent();var m=parseInt(this.titleElement.css("margin-left"))+this.titleElement[0].scrollWidth+13;n.css("min-width",m);var o=parseInt(p.css("min-width"));if(isNaN(o)){o=0}var l=n.css("min-width");if(o<parseInt(n.css("min-width"))){p.css("min-width",l)}this.titleElement[0].style.width=null})}var h=1000;var c=[5,5];var g=this;a.data(g.element,"animationHideDelay",g.animationHideDelay);a.data(document.body,"treeel",this);this._initialize();var d=this.isTouchDevice();if(d&&this.toggleMode=="dblclick"){this.toggleMode="click"}if(f==undefined||f==true){a.each(this.items,function(){g._updateItemEvents(g,this)})}if(this.allowDrag&&this._enableDragDrop&&(j==undefined||j==true)){this._enableDragDrop()}this._addInput();if(this.host.jqxPanel){if(this.host.find("#panel"+this.element.id).length>0){this.panel.jqxPanel({touchMode:this.touchMode});this.panel.jqxPanel("refresh");return}this.host.find("ul:first").wrap('<div style="background-color: transparent; overflow: hidden; width: 100%; height: 100%;" id="panel'+this.element.id+'"></div>');var b=this.host.find("div:first");var k="fixed";if(this.height==null||this.height=="auto"){k="verticalwrap"}if(this.width==null||this.width=="auto"){if(k=="fixed"){k="horizontalwrap"}else{k="wrap"}}b.jqxPanel({rtl:this.rtl,theme:this.theme,width:"100%",height:"100%",touchMode:this.touchMode,sizeMode:k});if(a.jqx.browser.msie&&a.jqx.browser.version<8){b.jqxPanel("content").css("left","0px")}b.data({nestedWidget:true});if(this.height==null||(this.height!=null&&this.height.toString().indexOf("%")!=-1)){if(this.isTouchDevice()){this.removeHandler(b,a.jqx.mobile.getTouchEventName("touchend")+".touchScroll touchcancel.touchScroll");this.removeHandler(b,a.jqx.mobile.getTouchEventName("touchmove")+".touchScroll");this.removeHandler(b,a.jqx.mobile.getTouchEventName("touchstart")+".touchScroll")}}var e=a.data(b[0],"jqxPanel").instance;if(e!=null){this.vScrollInstance=e.vScrollInstance;this.hScrollInstance=e.hScrollInstance}this.panelInstance=e;if(a.jqx.browser.msie&&a.jqx.browser.version<8){this.host.attr("hideFocus",true);this.host.find("div").attr("hideFocus",true);this.host.find("ul").attr("hideFocus",true)}b[0].className="";this.panel=b}this._raiseEvent("3",this)},focus:function(){try{this.host.focus()}catch(b){}},_updateItemEvents:function(h,k){var b=this.isTouchDevice();if(b){this.toggleMode=a.jqx.mobile.getTouchEventName("touchend")}var j=a(k.element);if(h.enableRoundedCorners){j.addClass(h.toThemeProperty("jqx-rc-all"))}var e=!b?"mousedown":a.jqx.mobile.getTouchEventName("touchend");if(h.touchMode===true){h.removeHandler(a(k.checkBoxElement),"mousedown")}h.removeHandler(a(k.checkBoxElement),e);h.addHandler(a(k.checkBoxElement),e,function(l){if(!h.disabled){if(!this.treeItem.disabled){this.treeItem.checked=!this.treeItem.checked;h.checkItem(this.treeItem.element,this.treeItem.checked,"tree");if(h.hasThreeStates){h.checkItems(this.treeItem,this.treeItem)}}}return false});var c=a(k.titleElement);h.removeHandler(j);var f=this.allowDrag&&this._enableDragDrop;if(!f){h.removeHandler(c)}else{h.removeHandler(c,"mousedown.item");h.removeHandler(c,"click");h.removeHandler(c,"dblclick");h.removeHandler(c,"mouseenter");h.removeHandler(c,"mouseleave")}h._renderHover(j,k,b);var d=a(k.subtreeElement);if(d.length>0){var g=k.isExpanded?"block":"none";d.css({overflow:"hidden",display:g});d.data("timer",{})}h.addHandler(c,"selectstart",function(l){return false});if(a.jqx.browser.opera){h.addHandler(c,"mousedown.item",function(l){return false})}if(h.toggleMode!="click"){h.addHandler(c,"click",function(l){h.selectItem(k.element,"mouse");if(h.panel!=null){h.panel.jqxPanel({focused:true})}c.focus();h._raiseEvent("9",{element:k.element})})}h.addHandler(c,h.toggleMode,function(l){if(d.length>0){clearTimeout(d.data("timer").hide)}if(h.panel!=null){h.panel.jqxPanel({focused:true})}h.selectItem(k.element,"mouse");if(k.isExpanding==undefined){k.isExpanding=false}if(k.isCollapsing==undefined){k.isCollapsing=false}if(d.length>0){if(!k.isExpanded){if(false==k.isExpanding){k.isExpanding=true;h._expandItem(h,k)}}else{if(false==k.isCollapsing){k.isCollapsing=true;h._collapseItem(h,k,true)}}return false}})},isTouchDevice:function(){if(this._isTouchDevice!=undefined){return this._isTouchDevice}var b=a.jqx.mobile.isTouchDevice();if(this.touchMode==true){b=true}else{if(this.touchMode==false){b=false}}this._isTouchDevice=b;return b},createID:function(){return a.jqx.utilities.createId()},createTree:function(b){if(b==null){return}var d=this;var f=a(b).find("li");var c=0;this.items=new Array();this.itemMapping=new Array();a(b).addClass(d.toThemeProperty("jqx-tree-dropdown-root"));if(this.rtl){a(b).addClass(d.toThemeProperty("jqx-tree-dropdown-root-rtl"))}if(this.rtl||a.jqx.browser.msie&&a.jqx.browser.version<8){this._measureItem=a("<span style='position: relative; visibility: hidden;'></span>");this._measureItem.addClass(this.toThemeProperty("jqx-widget"));this._measureItem.addClass(this.toThemeProperty("jqx-fill-state-normal"));this._measureItem.addClass(this.toThemeProperty("jqx-tree-item"));this._measureItem.addClass(this.toThemeProperty("jqx-item"));a(document.body).append(this._measureItem)}if(a.jqx.browser.msie&&a.jqx.browser.version<8){}for(var e=0;e<f.length;e++){this._createItem(f[e])}if(this.rtl||a.jqx.browser.msie&&a.jqx.browser.version<8){this._measureItem.remove()}this._updateItemsNavigation();this._updateCheckStates()},_updateCheckLayout:function(c){var b=this;if(!this.checkboxes){return}a.each(this.items,function(){if(this.level==c||c==undefined){b._updateCheckItemLayout(this)}})},_updateCheckItemLayout:function(b){if(this.checkboxes){if(a(b.titleElement).css("display")!="none"){var c=a(b.checkBoxElement);var d=a(b.titleElement).outerHeight()/2-1-parseInt(this.checkSize)/2;c.css("margin-top",d);if(!this.rtl){if(a.jqx.browser.msie&&a.jqx.browser.version<8){b.titleElement.css("margin-left",parseInt(this.checkSize)+25)}else{if(b.hasItems){c.css("margin-left",this.toggleIndicatorSize)}}}}}},_updateCheckStates:function(){var b=this;if(b.hasThreeStates){a.each(this.items,function(){b._updateCheckState(this)})}else{a.each(this.items,function(){if(this.checked==null){b.checkItem(this.element,false,"tree")}})}},_updateCheckState:function(e){if(e==null||e==undefined){return}var d=this;var c=0;var f=false;var b=0;var g=a(e.element).find("li");b=g.length;if(e.checked&&b>0){a.each(g,function(h){var k=d.itemMapping["id"+this.id].item;var j=k.element.getAttribute("item-checked");if(j==undefined||j==null||j=="true"||j==true){d.checkItem(k.element,true,"tree")}})}a.each(g,function(h){var j=d.itemMapping["id"+this.id].item;if(j.checked!=false){if(j.checked==null){f=true}c++}});if(b>0){if(c==b){this.checkItem(e.element,true,"tree")}else{if(c>0){this.checkItem(e.element,null,"tree")}else{this.checkItem(e.element,false,"tree")}}}},_updateItemsNavigation:function(){var g=this.host.find("ul:first");var f=a(g).find("li");var c=0;for(var d=0;d<f.length;d++){var b=f[d];if(this.itemMapping["id"+b.id]){var e=this.itemMapping["id"+b.id].item;if(!e){continue}e.prevItem=null;e.nextItem=null;if(d>0){if(this.itemMapping["id"+f[d-1].id]){e.prevItem=this.itemMapping["id"+f[d-1].id].item}}if(d<f.length-1){if(this.itemMapping["id"+f[d+1].id]){e.nextItem=this.itemMapping["id"+f[d+1].id].item}}}}},_applyTheme:function(e,h){var f=this;this.host.removeClass("jqx-tree-"+e);this.host.removeClass("jqx-widget-"+e);this.host.removeClass("jqx-widget-content-"+e);this.host.addClass(f.toThemeProperty("jqx-tree"));this.host.addClass(f.toThemeProperty("jqx-widget"));var b=this.host.find("ul:first");a(b).removeClass(f.toThemeProperty("jqx-tree-dropdown-root-"+e));a(b).addClass(f.toThemeProperty("jqx-tree-dropdown-root"));if(this.rtl){a(b).removeClass(f.toThemeProperty("jqx-tree-dropdown-root-rtl-"+e));a(b).addClass(f.toThemeProperty("jqx-tree-dropdown-root-rtl"))}var g=a(b).find("li");for(var d=0;d<g.length;d++){var c=g[d];a(c).children().each(function(){if(this.tagName=="ul"||this.tagName=="UL"){a(this).removeClass(f.toThemeProperty("jqx-tree-dropdown-"+e));a(this).addClass(f.toThemeProperty("jqx-tree-dropdown"));if(f.rtl){a(this).removeClass(f.toThemeProperty("jqx-tree-dropdown-rtl-"+e));a(this).addClass(f.toThemeProperty("jqx-tree-dropdown-rtl"))}return false}})}a.each(this.items,function(){var l=this;var k=a(l.element);k.removeClass(f.toThemeProperty("jqx-tree-item-li-"+e));k.addClass(f.toThemeProperty("jqx-tree-item-li"));if(this.rtl){k.removeClass(f.toThemeProperty("jqx-tree-item-li-"+e));k.addClass(f.toThemeProperty("jqx-tree-item-li"))}a(l.titleElement).removeClass(f.toThemeProperty("jqx-tree-item-"+e));a(l.titleElement).addClass(f.toThemeProperty("jqx-tree-item"));a(l.titleElement).removeClass("jqx-item-"+e);a(l.titleElement).addClass(f.toThemeProperty("jqx-item"));var j=a(l.arrow);if(j.length>0){f._arrowStyle(j,"",l.isExpanded)}if(l.checkBoxElement){a(l.checkBoxElement).jqxCheckBox({theme:h})}if(f.enableRoundedCorners){k.removeClass("jqx-rc-all-"+e);k.addClass(f.toThemeProperty("jqx-rc-all"))}});if(this.host.jqxPanel){this.panel.jqxPanel({theme:h})}},_refreshMapping:function(f,q){var e=this.host.find("li");var b=new Array();var p=new Array();var h=a.data(document.body,"treeItemsStorage");var l=this;for(var j=0;j<e.length;j++){var k=e[j];var d=a(k);var o=h[k.id];if(o==null){continue}p[p.length]=o;if(f==undefined||f==true){this._updateItemEvents(this,o)}o.level=d.parents("li").length;o.treeInstance=this;var n=null;var g=null;if(o.titleElement[0].className.indexOf("jqx-fill-state-pressed")!=-1){a(o.titleElement).removeClass(l.toThemeProperty("jqx-fill-state-pressed"));a(o.titleElement).removeClass(l.toThemeProperty("jqx-tree-item-selected"))}var c=d.children();c.each(function(){if(this.tagName=="ul"||this.tagName=="UL"){o.subtreeElement=this;a(this).addClass(l.toThemeProperty("jqx-tree-dropdown"));if(l.rtl){a(this).addClass(l.toThemeProperty("jqx-tree-dropdown-rtl"))}return false}});var m=d.parents();m.each(function(){if((this.tagName=="li"||this.tagName=="LI")){g=this.id;n=this;return false}});o.parentElement=n;o.parentId=g;o.hasItems=a(o.element).find("li").length>0;if(o!=null){b[j]={element:k,item:o};b["id"+k.id]=b[j]}}this.itemMapping=b;this.items=p},_createItem:function(c){if(c==null||c==undefined){return}var r=c.id;if(!r){r=this.createID()}var F=c;var m=a(c);F.id=r;var g=a.data(document.body,"treeItemsStorage");if(g==undefined){g=new Array()}var x=this.items.length;this.items[x]=new a.jqx._jqxTree.jqxTreeItem();this.treeElements[r]=this.items[x];g[F.id]=this.items[x];a.data(document.body,"treeItemsStorage",g);x=this.items.length;var A=0;var H=this;var e=null;m.attr("role","treeitem");m.children().each(function(){if(this.tagName=="ul"||this.tagName=="UL"){H.items[x-1].subtreeElement=this;a(this).addClass(H.toThemeProperty("jqx-tree-dropdown"));if(H.rtl){a(this).addClass(H.toThemeProperty("jqx-tree-dropdown-rtl"));a(this).css("clear","both")}return false}});m.parents().each(function(){if((this.tagName=="li"||this.tagName=="LI")){A=this.id;e=this;return false}});var w=c.getAttribute("item-expanded");if(w==null||w==undefined||(w!="true"&&w!=true)){w=false}else{w=true}F.removeAttribute("item-expanded");var G=c.getAttribute("item-locked");if(G==null||G==undefined||(G!="true"&&G!=true)){G=false}else{G=true}F.removeAttribute("item-locked");var s=c.getAttribute("item-selected");if(s==null||s==undefined||(s!="true"&&s!=true)){s=false}else{s=true}F.removeAttribute("item-selected");var d=c.getAttribute("item-disabled");if(d==null||d==undefined||(d!="true"&&d!=true)){d=false}else{d=true}F.removeAttribute("item-disabled");var j=c.getAttribute("item-checked");if(j==null||j==undefined||(j!="true"&&j!=true)){j=false}else{j=true}var I=c.getAttribute("item-title");if(I==null||I==undefined||(I!="true"&&I!=true)){I=false}F.removeAttribute("item-title");var D=c.getAttribute("item-icon");var t=c.getAttribute("item-iconsize");var l=c.getAttribute("item-label");var v=c.getAttribute("item-value");F.removeAttribute("item-icon");F.removeAttribute("item-iconsize");F.removeAttribute("item-label");F.removeAttribute("item-value");var C=this.items[x-1];C.id=r;if(C.value==undefined){if(this._valueList&&this._valueList[r]){C.value=this._valueList[r]}else{C.value=v}}C.icon=D;C.iconsize=t;C.parentId=A;C.disabled=d;C.parentElement=e;C.element=c;C.locked=G;C.selected=s;C.checked=j;C.isExpanded=w;C.treeInstance=this;this.itemMapping[x-1]={element:F,item:C};this.itemMapping["id"+F.id]=this.itemMapping[x-1];var h=false;var E=false;h=false;if(this.rtl){a(C.element).css("float","right");a(C.element).css("clear","both")}if(!h||!E){if(a(F.firstChild).length>0){if(C.icon){var t=C.iconsize;if(!t){t=16}var D=a('<img width="'+t+'" height="'+t+'" style="float: left;" class="itemicon" src="'+C.icon+'"/>');a(F).prepend(D);D.css("margin-right","4px");if(this.rtl){D.css("margin-right","0px");D.css("margin-left","4px");D.css("float","right")}}var b=F.innerHTML.indexOf("<ul");if(b==-1){b=F.innerHTML.indexOf("<UL")}if(b==-1){C.originalTitle=F.innerHTML;F.innerHTML='<div style="display: inline-block;">'+F.innerHTML+"</div>";C.titleElement=a(a(F)[0].firstChild)}else{var B=F.innerHTML.substring(0,b);B=a.trim(B);C.originalTitle=B;B=a('<div style="display: inline-block;">'+B+"</div>");var o=a(F).find("ul:first");o.remove();F.innerHTML="";a(F).prepend(B);a(F).append(o);C.titleElement=B;if(this.rtl){B.css("float","right");o.css("padding-right","10px")}}if(a.jqx.browser.msie&&a.jqx.browser.version<8){a(a(F)[0].firstChild).css("display","inline-block");var n=false;if(this._measureItem.parents().length==0){a(document.body).append(this._measureItem);n=true}this._measureItem.css("min-width","20px");this._measureItem[0].innerHTML=(a(C.titleElement).text());var u=this._measureItem.width();if(C.icon){u+=20}if(a(a(item.titleElement).find("img")).length>0){u+=20}a(a(F)[0].firstChild).css("max-width",u+"px");if(n){this._measureItem.remove()}}}else{C.originalTitle="Item";a(F).append(a("<span>Item</span>"));a(F.firstChild).wrap("<span/>");C.titleElement=a(F)[0].firstChild;if(a.jqx.browser.msie&&a.jqx.browser.version<8){a(F.firstChild).css("display","inline-block")}}}var z=a(C.titleElement);var q=this.toThemeProperty("jqx-rc-all");if(this.allowDrag){z.addClass("draggable")}if(l==null||l==undefined){l=C.titleElement;C.label=a.trim(z.text())}else{C.label=l}a(F).addClass(this.toThemeProperty("jqx-tree-item-li"));if(this.rtl){a(F).addClass(this.toThemeProperty("jqx-tree-item-li-rtl"))}q+=" "+this.toThemeProperty("jqx-tree-item")+" "+this.toThemeProperty("jqx-item");if(this.rtl){q+=" "+this.toThemeProperty("jqx-tree-item-rtl")}z[0].className=z[0].className+" "+q;C.level=a(c).parents("li").length;C.hasItems=a(c).find("li").length>0;if(this.rtl&&C.parentElement){if(!this.checkboxes){}}if(this.checkboxes){if(this.host.jqxCheckBox){var p=a('<div style="position: absolute; width: 18px; height: 18px;" tabIndex=0 class="chkbox"/>');p.width(parseInt(this.checkSize));p.height(parseInt(this.checkSize));a(F).prepend(p);if(this.rtl){p.css("float","right");p.css("position","static")}p.jqxCheckBox({hasInput:false,checked:C.checked,boxSize:this.checkSize,animationShowDelay:0,animationHideDelay:0,disabled:d,theme:this.theme});if(!this.rtl){z.css("margin-left",parseInt(this.checkSize)+6)}else{var y=5;if(C.parentElement){p.css("margin-right",y+5+"px")}else{p.css("margin-right",y+"px")}}C.checkBoxElement=p[0];p[0].treeItem=C;var f=z.outerHeight()/2-1-parseInt(this.checkSize)/2;p.css("margin-top",f);if(a.jqx.browser.msie&&a.jqx.browser.version<8){z.css("width","1%");z.css("margin-left",parseInt(this.checkSize)+25)}else{if(C.hasItems){if(!this.rtl){p.css("margin-left",this.toggleIndicatorSize)}}}}else{throw new Error("jqxTree: Missing reference to jqxcheckbox.js.");return}}else{if(a.jqx.browser.msie&&a.jqx.browser.version<8){z.css("width","1%")}}if(d){this.disableItem(C.element)}if(s){this.selectItem(C.element)}if(a.jqx.browser.msie&&a.jqx.browser.version<8){a(F).css("margin","0px");a(F).css("padding","0px")}},destroy:function(){this.removeHandler(a(window),"resize.jqxtree"+this.element.id);this.host.removeClass();if(this.isTouchDevice()){this.removeHandler(this.panel,a.jqx.mobile.getTouchEventName("touchend")+".touchScroll touchcancel.touchScroll");this.removeHandler(this.panel,a.jqx.mobile.getTouchEventName("touchmove")+".touchScroll");this.removeHandler(this.panel,a.jqx.mobile.getTouchEventName("touchstart")+".touchScroll")}var c=this;var b=this.isTouchDevice();a.each(this.items,function(){var g=this;var e=a(this.element);var d=!b?"click":a.jqx.mobile.getTouchEventName("touchend");c.removeHandler(a(g.checkBoxElement),d);var h=a(g.titleElement);c.removeHandler(e);var f=c.allowDrag&&c._enableDragDrop;if(!f){c.removeHandler(h)}else{c.removeHandler(h,"mousedown.item");c.removeHandler(h,"click");c.removeHandler(h,"dblclick");c.removeHandler(h,"mouseenter");c.removeHandler(h,"mouseleave")}$arrowSpan=a(g.arrow);if($arrowSpan.length>0){c.removeHandler($arrowSpan,d);c.removeHandler($arrowSpan,"selectstart");c.removeHandler($arrowSpan,"mouseup");if(!b){c.removeHandler($arrowSpan,"mouseenter");c.removeHandler($arrowSpan,"mouseleave")}c.removeHandler(h,"selectstart")}if(a.jqx.browser.opera){c.removeHandler(h,"mousedown.item")}if(c.toggleMode!="click"){c.removeHandler(h,"click")}c.removeHandler(h,c.toggleMode)});if(this.panel){this.panel.jqxPanel("destroy");this.panel=null}this.host.remove()},_raiseEvent:function(f,c){if(c==undefined){c={owner:null}}var d=this.events[f];args=c;args.owner=this;var e=new a.Event(d);e.owner=this;e.args=args;var b=this.host.trigger(e);return b},propertyChangedHandler:function(d,l,b,j){if(this.isInitialized==undefined||this.isInitialized==false){return}if(l=="submitCheckedItems"){d._updateInputSelection()}if(l=="disabled"){d._updateDisabledState()}if(l=="theme"){d._applyTheme(b,j)}if(l=="keyboardNavigation"){d.enableKeyboardNavigation=j}if(l=="width"||l=="height"){d.refresh();d._initialize();d._calculateWidth();if(d.host.jqxPanel){var k="fixed";if(this.height==null||this.height=="auto"){k="verticalwrap"}if(this.width==null||this.width=="auto"){if(k=="fixed"){k="horizontalwrap"}else{k="wrap"}}d.panel.jqxPanel({sizeMode:k})}}if(l=="touchMode"){d._isTouchDevice=null;if(j){d.enableHover=false}d._render()}if(l=="source"||l=="checkboxes"){if(this.source!=null){var m=[];a.each(d.items,function(){if(this.isExpanded){m[m.length]={label:this.label,level:this.level}}});var f=d.loadItems(d.source);if(!d.host.jqxPanel){d.element.innerHTML=f}else{d.panel.jqxPanel("setcontent",f)}var e=d.disabled;var g=d.host.find("ul:first");if(g.length>0){d.createTree(g[0]);d._render()}var h=d;var c=h.animationShowDuration;h.animationShowDuration=0;d.disabled=false;if(m.length>0){a.each(d.items,function(){for(var n=0;n<m.length;n++){if(m[n].label==this.label&&m[n].level==this.level){var o=h.getItem(this.element);h._expandItem(h,o)}}})}d.disabled=e;h.animationShowDuration=c}}if(l=="hasThreeStates"){d._render();d._updateCheckStates()}if(l=="toggleIndicatorSize"){d._updateCheckLayout();d._render()}}})})(jqxBaseFramework);(function(a){a.jqx._jqxTree.jqxTreeItem=function(e,d,b){var c={label:null,id:e,parentId:d,parentElement:null,parentItem:null,disabled:false,selected:false,locked:false,checked:false,level:0,isExpanded:false,hasItems:false,element:null,subtreeElement:null,checkBoxElement:null,titleElement:null,arrow:null,prevItem:null,nextItem:null};return c}})(jqxBaseFramework);

/*
jqxpopover
*/

(function (a) { a.jqx.jqxWidget("jqxPopover", "", {}); a.extend(a.jqx._jqxPopover.prototype, { defineInstance: function () { var b = { arrowOffsetValue: null, animationType: "fade", position: "bottom", animationOpenDelay: "fast", animationCloseDelay: "fast", autoClose: true, isModal: false, height: null, initContent: null, offset: null, rtl: false, showArrow: true, showCloseButton: false, selector: null, title: "", width: null, _toggleElement: null, _popover: null, _popoverTop: 0, _popoverLeft: 0, _init: false, _ie8: (a.jqx.browser.msie && a.jqx.browser.version === 8), _ie7: (a.jqx.browser.msie && a.jqx.browser.version < 8), _left: 0, _top: 0, events: ["open", "close"] }; a.extend(true, this, b) }, createInstance: function () { var b = this; b._content = b.host.children() }, render: function () { var h = this; var c = h.element.id; h._content.detach(); h._toggleElement = a(h.selector); if (h._toggleElement.length === 0) { throw new Error('jqxPopover: Invalid Popover toggler: "' + h.selector + '".') } else { if (h._toggleElement === null) { throw new Error("jqxPopover: Missing Popover toggler.") } } var k = a('<div id="' + c + '" class="' + h.toThemeProperty("jqx-popover") + '"><div class="' + h.toThemeProperty("jqx-popover-arrow") + '"></div><div class="' + h.toThemeProperty("jqx-popover-title") + '"></div><div class="' + h.toThemeProperty("jqx-popover-content") + '"></div></div>'); a("body").append(k); var g = h.host.data(); h.host.detach(); h.host = k; h.host.data(g); h.element = k[0]; h.element.id = c; h._popover = a("#" + c); var j = h._popover.find(".jqx-popover-title"); j.append(h.title); var i = h._popover.find(".jqx-popover-content"); i.append(h._content); h._popover.hide(); h._removeHandlers(); h._addHandlers(); h._popover.addClass(h.position); j.addClass(h.toThemeProperty("jqx-widget-header")); h._popover.addClass(h.toThemeProperty("jqx-widget jqx-widget-content jqx-rc-all")); if (h.showArrow) { h._popover.addClass(h.toThemeProperty("jqx-popover-arrow-" + h.position)) } if (h.rtl) { j.addClass(h.toThemeProperty("jqx-rtl")); j.css("direction", "rtl"); i.css("direction", "rtl") } if (h.showCloseButton) { var d = a('<div class="' + this.toThemeProperty("jqx-window-close-button-background") + '"></div>'); var e = a('<div style="width: 100%; height: 100%;" class="' + this.toThemeProperty("jqx-window-close-button") + " " + this.toThemeProperty("jqx-icon-close") + '"></div>'); d.append(e); j.append(d); j.css("min-height", "16px"); d.addClass(h.toThemeProperty("jqx-popover-close-button")); h.closeButton = e; if (h.rtl) { d.addClass(h.toThemeProperty("jqx-popover-close-button-rtl")) } } if (h.arrowOffsetValue) { if (h.position == "bottom" || h.position == "top") { var b = h._popover.find(".jqx-popover-arrow").css("margin-left"); h._popover.find(".jqx-popover-arrow").css("margin-left", parseInt(b) + h.arrowOffsetValue) } else { var f = h._popover.find(".jqx-popover-arrow").css("margin-top"); h._popover.find(".jqx-popover-arrow").css("margin-top", parseInt(f) + h.arrowOffsetValue) } } if (h.width || h.height) { h._popover.css("width", h.width); h._popover.css("height", h.height) } }, refresh: function (b) { this.render() }, destroy: function () { var b = this; if (b.length !== 0) { b._removeHandlers(); b._popover.remove(); b._removeModalBackground() } }, propertyChangedHandler: function (b, c, f, e) { var d = this; d.render() }, _stickToToggleElement: function () { var g = this; g._popover.css("left", "0px"); g._popover.css("top", "0px"); var j = g._toggleElement; var e = j.offset(); var b = j.outerHeight(); var h = j.outerWidth(); var d = g._popover.height(); var i = g._popover.width(); switch (g.position) { case "left": g._popoverTop = e.top - d / 2 + b / 2; g._popoverLeft = e.left - g._popover.outerWidth(); break; case "right": g._popoverTop = e.top - d / 2 + b / 2; g._popoverLeft = e.left + h; break; case "top": g._popoverTop = e.top - g._popover.outerHeight(); g._popoverLeft = e.left - i / 2 + h / 2; break; case "bottom": g._popoverTop = e.top + b; g._popoverLeft = e.left - i / 2 + h / 2; break } var c = g.offset ? g.offset.left : 0; var f = g.offset ? g.offset.top : 0; g._popover.css("top", f + g._popoverTop); g._popover.css("left", c + g._popoverLeft) }, open: function () { var c = this; c._stickToToggleElement(); function d() { c._popover.show(); c._raiseEvent("0"); c._isOpen = true } function b() { if (c.initContent && c._init === false) { c.initContent(); c._init = true; c._stickToToggleElement() } } if (c._ie7 === true) { d(); b(); return } switch (c.animationType) { case "fade": c._popover.fadeIn(c.animationOpenDelay, function () { c._raiseEvent("0"); b(); c._isOpen = true }); break; case "none": d(); b(); break } c._makeModalBackground() }, close: function () { var c = this; if (!c._isOpen) { return } function b() { c._popover.hide(); c._raiseEvent("1"); c._isOpen = false } if (c._ie7 === true) { b(); return } switch (c.animationType) { case "fade": c._popover.fadeOut(c.animationCloseDelay, function () { c._raiseEvent("1"); c._isOpen = false }); break; case "none": b(); break } c._removeModalBackground() }, _raiseEvent: function (f, c) { if (c === undefined) { c = { owner: null } } var d = this.events[f]; c.owner = this; var e = new a.Event(d); e.owner = this; e.args = c; if (e.preventDefault) { e.preventDefault() } var b = this._popover.trigger(e); return b }, _makeModalBackground: function () { var b = this; if (b.isModal === true) { b.modalBackground = a("<div></div>"); b.modalBackground.addClass(this.toThemeProperty("jqx-popover-modal-background")); a(document.body).prepend(b.modalBackground); a(document.body).addClass(b.toThemeProperty("jqx-unselectable")); b.host.addClass(b.toThemeProperty("jqx-selectable")) } }, _removeModalBackground: function () { var b = this; if ((b.isModal === true) && (b.modalBackground !== undefined)) { b.modalBackground.remove(); a(document.body).removeClass(b.toThemeProperty("jqx-unselectable")); b.host.removeClass(b.toThemeProperty("jqx-selectable")) } }, _addHandlers: function () { var b = this, c = b.element.id; b.addHandler(a(document), "keydown.jqxPopover" + c, function (d) { if (d.keyCode == 27) { b.close() } }); b.addHandler(a(document), "click.jqxPopover" + c, function (d) { if (b.closeButton && d.target == b.closeButton[0]) { b.close() } if (b.autoClose === true) { if (d.target != b.element && !a(d.target).ischildof(b._popover)) { if (!b.isModal) { b.close() } } } }); b.addHandler(a(window), "resize.jqxPopover" + c, function (d) { if (b.element.style.display != "none") { b._stickToToggleElement() } }); if (b.selector) { b.addHandler(b._toggleElement, "click.jqxPopover" + c, function (d) { d.stopPropagation(); if (b.host.css("display") != "none") { b.close() } else { b.open() } }) } }, _removeHandlers: function () { var b = this, c = b.element.id; b.removeHandler(a(document), "click.jqxPopover" + c); if (b.selector) { b.removeHandler(b._toggleElement, "click.jqxPopover" + c) } b.removeHandler(a(document), "keydown.jqxPopover" + c); b.removeHandler(a(window), "resize.jqxPopover" + c) } }) })(jqxBaseFramework);

/*
jqxloader
*/

(function (a) { a.jqx.jqxWidget("jqxLoader", "", {}); a.extend(a.jqx._jqxLoader.prototype, { defineInstance: function () { var b = { width: 200, height: 150, text: "Loading...", html: null, textPosition: "bottom", imagePosition: "center", isModal: false, autoOpen: false, rtl: false, events: ["create"] }; a.extend(true, this, b) }, createInstance: function (b) { var c = this; c._render(true); c._raiseEvent("0") }, render: function () { this._render() }, open: function (d, c) { var b = this; if (this.width !== null && this.width.toString().indexOf("%") !== -1) { b.host.css("width", this.width) } if (this.height !== null && this.height.toString().indexOf("%") !== -1) { b.host.css("height", this.height) } b.host.show(); b.host.css("left", -b.host.width() / 2); b.host.css("top", -b.host.height() / 2); if (d && c) { b.host.css("left", d); b.host.css("top", c) } if (b.isModal) { b._modal.show() } }, close: function () { var b = this; b.host.hide(); if (b.isModal) { b._modal.hide() } }, _checkBrowser: function () { var b = this; if (a.jqx.browser.browser === "msie") { if (a.jqx.browser.version === "7.0") { if (b.isModal === false) { b.host.addClass(b.toThemeProperty("jqx-loader-ie-transparency")) } b.host.css("top", Math.max(0, ((a(window).height() - a(b.host).outerHeight()) / 2) + a(window).scrollTop()) + "px"); b.host.css("left", Math.max(0, ((a(window).width() - a(b.host).outerWidth()) / 2) + a(window).scrollLeft()) + "px"); a(window).resize(function () { b.host.css("top", Math.max(0, ((a(window).height() - a(b.host).outerHeight()) / 2) + a(window).scrollTop()) + "px"); b.host.css("left", Math.max(0, ((a(window).width() - a(b.host).outerWidth()) / 2) + a(window).scrollLeft()) + "px") }); this.host.css({ "margin-top": "0", "margin-left": "0" }) } else { if (a.jqx.browser.version === "8.0") { if (b.isModal === false) { b.host.addClass(b.toThemeProperty("jqx-loader-ie-transparency")) } } } } }, _textPos: function () { var b = this; this._text = b.host.children("div:eq(1)"); if (this._image) { this._image.css("background-position-y", b.imagePosition) } if (b.textPosition === "top") { this._text.addClass(b.toThemeProperty("jqx-loader-text-top")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-bottom")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-left")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-right")) } else { if (b.textPosition === "bottom") { this._text.addClass(b.toThemeProperty("jqx-loader-text-bottom")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-top")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-left")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-right")) } else { if (b.textPosition === "left") { this._text.addClass(b.toThemeProperty("jqx-loader-text-left")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-right")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-top")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-bottom")) } else { if (b.textPosition === "right") { this._text.addClass(b.toThemeProperty("jqx-loader-text-right")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-left")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-top")); this._text.removeClass(b.toThemeProperty("jqx-loader-text-bottom")) } } } } }, refresh: function (b) { if (b !== true) { this._render(false) } }, destroy: function () { var b = this; b._removeHandlers(); b.host.remove() }, propertyChangedHandler: function (b, c, e, d) { if (d !== e) { switch (c) { case "width": b.host.width(d); break; case "height": b.host.height(d); break; case "text": b._text.text(d); break; case "html": b.host.html(d); break; case "textPosition": b._textPos(d); break; case "rtl": if (d === true) { b._text.addClass(b.toThemeProperty("jqx-loader-rtl")) } else { b._text.removeClass(b.toThemeProperty("jqx-loader-rtl")) } break } } }, _raiseEvent: function (h, e) { var g = this; var c = g.events[h]; var f = new a.Event(c); f.owner = g; f.args = e; try { var b = g.host.trigger(f) } catch (d) { } return b }, _render: function (b) { var c = this; c.host.width(c.width); c.host.height(c.height); if (c.autoOpen === false) { c.host.hide() } if (b) { if (c.html === null) { c.host.append('<div class="' + c.toThemeProperty("jqx-loader-icon") + '"></div><div class="' + c.toThemeProperty("jqx-loader-text") + '">' + c.text + "</div>"); c._image = c.host.children("div:eq(0)"); c._text = c.host.children("div:eq(1)") } else { c.host.html(this.html) } if (c.isModal === true) { var d = c.host.css("display"); c._modal = a('<div id="' + c.element.id + 'Modal" class="' + c.toThemeProperty("jqx-loader-modal") + '" style="display: ' + d + ';"></div>'); a("body").append(c._modal) } } c._checkBrowser(); c._textPos(); c._addClass(); c._removeHandlers(); c._addHandlers() }, _addHandlers: function () { var b = this; if (b.isModal === true) { b.addHandler(a(document), "keyup.loader" + b.element.id, function (c) { if (c.keyCode === 27) { b.close() } }) } }, _removeHandlers: function () { var b = this; b.removeHandler(a(document), "keyup.loader" + b.element.id) }, _addClass: function () { var b = this; b.host.addClass(b.toThemeProperty("jqx-widget")); b.host.addClass(b.toThemeProperty("jqx-loader")); b.host.addClass(b.toThemeProperty("jqx-rc-all")); b.host.addClass(b.toThemeProperty("jqx-fill-state-normal")); if (b.rtl) { b._text.addClass(b.toThemeProperty("jqx-loader-rtl")) } if (a.jqx.browser.msie) { b.host.addClass(this.toThemeProperty("jqx-noshadow")) } b.host.addClass(this.toThemeProperty("jqx-rc-t")); b.host.addClass(this.toThemeProperty("jqx-rc-b")); b.host.addClass(this.toThemeProperty("jqx-popup")) } }) })(jqxBaseFramework);

/*
jqxScrollView
*/
(function (b) { var a = 0; b.jqx.jqxWidget("jqxScrollView", "", {}); b.extend(b.jqx._jqxScrollView.prototype, { defineInstance: function () { var c = { width: 320, height: 320, buttonsOffset: [0, 0], moveThreshold: 0.5, currentPage: 0, animationDuration: 300, showButtons: true, bounceEnabled: true, slideShow: false, slideDuration: 3000, disabled: false, _mouseDown: false, _movePermited: false, _startX: -1, _startOffset: -1, _lastOffset: -1, _events: ["pageChanged"], _eventsMap: { mousedown: b.jqx.mobile.getTouchEventName("touchstart"), mouseup: b.jqx.mobile.getTouchEventName("touchend"), mousemove: b.jqx.mobile.getTouchEventName("touchmove") } }; b.extend(true, this, c); return c }, createInstance: function () { a += 1; this._instanceId = a; this._isTouchDevice = b.jqx.mobile.isTouchDevice(); var c = this; b.jqx.utilities.resize(this.host, function () { c.refresh() }) }, resize: function (d, c) { this.width = d; this.height = c; this.refresh() }, refresh: function () { this.host.width(this.width); this.host.height(this.height); this._render(); this._performLayout(); if (this.moveThreshold.toString().indexOf("%") >= 0) { this.moveThreshold = parseInt(this.moveThreshold, 10) / 100 } this._refreshPages(); this._refreshButtons(); this._removeEventListeners(); this._addEventListeners(); this._changePage(this.currentPage, false, 0); if (this.slideShow) { var c = this; this.slideShowTimer = setInterval(function () { if (c.currentPage >= c._pages.length - 1) { c._changePage(0, true, c.animationDuration) } else { c._changePage(c.currentPage + 1, true, c.animationDuration) } }, this.slideDuration) } else { if (this.slideShowTimer != undefined) { clearInterval(this.slideShowTimer) } } }, destroy: function () { this.host.remove() }, _getEvent: function (c) { if (this._isTouchDevice) { return this._eventsMap[c] } return c }, _eventNamespace: function () { return ".scrollview" + this._instanceId }, _removeEventListeners: function () { this.removeHandler(this._innerWrapper); this.removeHandler(this.host, this._getEvent("mousemove") + this._eventNamespace()); this.removeHandler(b(document), this._getEvent("mouseup") + this._eventNamespace()) }, _getCoordinate: function (c, d) { if (this._isTouchDevice) { var e = b.jqx.position(c); if (d == "pageX") { return e.left } if (d == "pageY") { return e.top } if (c.originalEvent.touches) { return c.originalEvent.touches[0][d] } } return c[d] }, _draggedRight: function () { if (this.currentPage > 0) { var e = this.currentPage - 1, d = b(this._pages[e]), c = d.offset().left + d.outerWidth(), f = c - this.host.offset().left; if (f >= (this.host.width() * this.moveThreshold)) { this.changePage(e); return true } } return false }, _draggedLeft: function () { if (this.currentPage + 1 < this._pages.length) { var d = this.currentPage + 1, c = b(this._pages[d]), e = this.host.width() - (c.offset().left - this.host.offset().left); if (e >= (this.host.width() * this.moveThreshold)) { this.changePage(d); return true } } return false }, _dropTarget: function () { var c; if (this._movedLeft) { c = this._draggedLeft() } else { c = this._draggedRight() } if (!c) { this.changePage(this.currentPage, false) } }, _scrollEnabled: function (c) { if (!this._mouseDown) { return false } if (!this._movePermited) { if (Math.abs(this._getCoordinate(c, "pageX") - this._startX) >= 15) { this._movePermited = true } } return this._movePermited }, _setMoveDirection: function (c) { if (this._lastOffset > c) { this._movedLeft = true } else { this._movedLeft = false } }, _getBounceOffset: function (d) { var c = -(this._innerWrapper.width() - this.host.width()); if (d > 0) { d = 0 } else { if (d < c) { d = c } } return d }, _addEventListeners: function () { var c = this; this.addHandler(this._innerWrapper, this._getEvent("mousedown") + this._eventNamespace(), function (f) { c._mouseDown = true; c._startX = c._getCoordinate(f, "pageX"); c._startOffset = c._lastOffset = parseInt(c._innerWrapper.css("margin-left"), 10) }); this.addHandler(this.host, "dragstart", function () { return false }); this.addHandler(this.host, this._getEvent("mousemove") + this._eventNamespace(), function (f) { if (c._scrollEnabled(f)) { var g = c._startOffset + c._getCoordinate(f, "pageX") - c._startX; if (!c.bounceEnabled) { g = c._getBounceOffset(g) } c._innerWrapper.css("margin-left", g); c._setMoveDirection(g); c._lastOffset = g; f.preventDefault(); return false } return true }); this.addHandler(b(document), this._getEvent("mouseup") + this._eventNamespace(), function (f) { if (c._movePermited) { c._dropTarget() } c._movePermited = false; c._mouseDown = false }); try { if (document.referrer != "" || window.frameElement) { if (window.top != null) { if (window.parent && document.referrer) { parentLocation = document.referrer } } if (parentLocation.indexOf(document.location.host) != -1) { var e = function (f) { if (c._movePermited) { c._dropTarget() } c._movePermited = false; c._mouseDown = false }; if (window.top.document.addEventListener) { window.top.document.addEventListener("mouseup", e, false) } else { if (window.top.document.attachEvent) { window.top.document.attachEvent("onmouseup", e) } } } } } catch (d) { } }, _render: function () { this.host.addClass(this.toThemeProperty("jqx-scrollview")); this.host.css({ overflow: "hidden", position: "relative" }) }, _performLayout: function () { this.host.css({ width: this.width, height: this.height }) }, _renderPages: function () { if (!this._innerWrapper) { this._innerWrapper = b("<div/>"); this.host.wrapInner(this._innerWrapper); this._innerWrapper = this.host.children().first() } this._innerWrapper.addClass(this.toThemeProperty("jqx-scrollview-inner-wrapper")); this._innerWrapper.height(this.host.height()) }, _refreshPage: function (c) { c.addClass(this.toThemeProperty("jqx-scrollview-page")); this._performPageLayout(c) }, _refreshPages: function () { var c = this, d = 0; this._renderPages(); this._pages = this._innerWrapper.children(); this._pages.each(function () { c._refreshPage(b(this)); d += b(this).outerWidth(true) }); this._innerWrapper.width(d) }, _performPageLayout: function (c) { c.css("float", "left"); c.width(this.host.width()); c.height(this.host.height()) }, _refreshButtons: function () { this._renderButtons(); this._removeButtonsEventListeners(); this._addButtonsEventListeners(); this._performButtonsLayout() }, _removeButtonsEventListeners: function () { var c = this; this._buttonsContainer.children().each(function () { c.removeHandler(b(this)) }) }, _addButtonsEventListeners: function () { var c = this; this._buttonsContainer.children().each(function (d) { c.addHandler(b(this), "click", function () { c.changePage(d) }) }) }, _performButtonsLayout: function () { var d = (this.host.width() - this._buttonsContainer.width()) / 2; var c = this._buttonsContainer.outerHeight() != 0 ? this._buttonsContainer.outerHeight() : 14; this._buttonsContainer.css({ position: "absolute", left: d + parseInt(this.buttonsOffset[0], 10), top: this.host.height() - 2 * c + parseInt(this.buttonsOffset[1], 10) - 1 }) }, _renderButtons: function () { if (this._buttonsContainer) { this._buttonsContainer.remove() } var e, d; this._buttons = []; this._buttonsContainer = b("<span/>"); for (var c = 0; c < this._pages.length; c += 1) { d = b('<span class="' + this.toThemeProperty("jqx-scrollview-button") + " " + this.toThemeProperty("jqx-fill-state-normal") + '"></span>'); this._buttonsContainer.append(d); this._buttons[c] = d } this._buttonsContainer.appendTo(this.host); if (!this.showButtons) { this._buttonsContainer.hide() } }, _raiseEvent: function (c, e) { var d = new b.Event(this._events[c]); d.args = e; return this.host.trigger(d) }, _swapButtons: function (c, d) { this._buttons[c].removeClass(this.toThemeProperty("jqx-scrollview-button-selected")); this._buttons[c].removeClass(this.toThemeProperty("jqx-fill-state-pressed")); this._buttons[d].addClass(this.toThemeProperty("jqx-scrollview-button-selected")); this._buttons[d].addClass(this.toThemeProperty("jqx-fill-state-pressed")) }, _changePage: function (d, f, i) { if (this.disabled) { return } var h = b(this._pages[d]), g = (this.host.width() - h.width()) / 2, e = h.offset().left - this._innerWrapper.offset().left - g, j = this.currentPage, c = this; if (typeof i === "undefined") { i = this.animationDuration } this._innerWrapper.stop(); this._swapButtons(this.currentPage, d); this.currentPage = d; this._innerWrapper.animate({ marginLeft: -e }, i, function () { if (f) { c._raiseEvent(0, { currentPage: d, oldPage: j }) } }) }, propertyChangedHandler: function (c, d, f, e) { if (d === "currentPage") { c.currentPage = f; c.changePage(e) } else { if ((/(buttonsOffset|width|height)/).test(d)) { c.refresh() } else { if (d === "showButtons") { if (!e) { c._buttonsContainer.css("display", "none") } else { c._buttonsContainer.css("display", "block") } return } else { if (d == "slideShow") { c.refresh() } } } } }, changePage: function (c) { if (c >= this._pages.length || c < 0) { throw new Error("Invalid index!") } this._changePage(c, true) }, forward: function () { if (this.currentPage + 1 < this._pages.length) { this.changePage(this.currentPage + 1) } }, back: function () { if (this.currentPage - 1 >= 0) { this.changePage(this.currentPage - 1) } } }) }(jqxBaseFramework));

/*
jqxWindow
*/
(function(a){a.jqx.jqxWidget("jqxWindow","",{});a.extend(a.jqx._jqxWindow.prototype,{defineInstance:function(){var e={height:"auto",width:200,minHeight:50,maxHeight:600,minWidth:50,maxWidth:800,showCloseButton:true,disabled:false,autoOpen:true,keyboardCloseKey:"esc",title:"",content:"",draggable:true,resizable:true,animationType:"fade",closeAnimationDuration:250,showAnimationDuration:250,isModal:false,position:"center",closeButtonSize:16,closeButtonAction:"hide",modalOpacity:0.3,dragArea:null,okButton:null,cancelButton:null,dialogResult:{OK:false,Cancel:false,None:true},collapsed:false,showCollapseButton:false,collapseAnimationDuration:150,collapseButtonSize:16,rtl:false,keyboardNavigation:true,headerHeight:null,_events:["created","closed","moving","moved","open","collapse","expand","open","close","resize"],initContent:null,enableResize:true,restricter:null,autoFocus:true,closing:null,_invalidArgumentExceptions:{invalidHeight:"Invalid height!",invalidWidth:"Invalid width!",invalidMinHeight:"Invalid minHeight!",invalidMaxHeight:"Invalid maxHeight!",invalidMinWidth:"Invalid minWidth!",invalidMaxWidth:"Invalid maxWidth",invalidKeyCode:"Invalid keyCode!",invalidAnimationType:"Invalid animationType!",invalidCloseAnimationDuration:"Invalid closeAnimationDuration!",invalidShowAnimationDuration:"Invalid showAnimationDuration!",invalidPosition:"Invalid position!",invalidCloseButtonSize:"Invalid closeButtonSize!",invalidCollapseButtonSize:"Invalid collapseButtonSize!",invalidCloseButtonAction:"Invalid cluseButtonAction!",invalidModalOpacity:"Invalid modalOpacity!",invalidDragArea:"Invalid dragArea!",invalidDialogResult:"Invalid dialogResult!",invalidIsModal:"You can have just one modal window!"},_enableResizeCollapseBackup:null,_enableResizeBackup:undefined,_heightBeforeCollapse:null,_minHeightBeforeCollapse:null,_mouseDown:false,_isDragging:false,_rightContentWrapper:null,_leftContentWrapper:null,_headerContentWrapper:null,_closeButton:null,_collapseButton:null,_title:null,_content:null,_mousePosition:{},_windowPosition:{},_modalBackground:null,_SCROLL_WIDTH:21,_visible:true,modalBackgroundZIndex:12990,modalZIndex:18000,zIndex:9001,_touchEvents:{mousedown:a.jqx.mobile.getTouchEventName("touchstart"),mouseup:a.jqx.mobile.getTouchEventName("touchend"),mousemove:a.jqx.mobile.getTouchEventName("touchmove"),mouseenter:"mouseenter",mouseleave:"mouseleave",click:a.jqx.mobile.getTouchEventName("touchstart")}};a.extend(true,this,e);return e},createInstance:function(){this.host.attr("role","dialog");this.host.removeAttr("data-bind");this.host.detach();a(document.body).append(this.host);var f=this;var g=function(){var i=parseInt(a(f.restricter).css("padding-top"));var h=parseInt(a(f.restricter).css("padding-left"));var k=parseInt(a(f.restricter).css("padding-bottom"));var m=parseInt(a(f.restricter).css("padding-right"));var l=a(f.restricter).coord();f.dragArea={left:h+l.left,top:i+l.top,width:1+m+a(f.restricter).width(),height:1+k+a(f.restricter).height()}};if(this.restricter){g()}if(this.restricter){this.addHandler(a(window),"resize."+this.element.id,function(){g()});this.addHandler(a(window),"orientationchanged."+this.element.id,function(){g()});this.addHandler(a(window),"orientationchange."+this.element.id,function(){g()})}this._isTouchDevice=a.jqx.mobile.isTouchDevice();this._validateProperties();this._createStructure();this._refresh();if(!this.autoOpen){this.host.css("display","none")}if(a.jqx.browser.msie){this.host.addClass(this.toThemeProperty("jqx-noshadow"))}if(!this.isModal){this._fixWindowZIndex()}this._setStartupSettings();this._positionWindow();this._raiseEvent(0);if(this.autoOpen){this._performLayout();var e=this;if(this.isModal){this._fixWindowZIndex("modal-show")}if(e.initContent){e.initContent();e._contentInitialized=true}this._raiseEvent(7);this._raiseEvent(9)}},refresh:function(){this._performLayout()},_setStartupSettings:function(){if(this.disabled){this.disable()}if(this.collapsed){this.collapsed=false;this.collapse(0)}if(!this.autoOpen){this.hide(null,0.001,true);this._visible=false}if(this.title!==null&&this.title!==""){this.setTitle(this.title)}if(this.content!==null&&this.content!==""){this.setContent(this.content)}this.title=this._headerContentWrapper.html();this.content=this._content.html()},_fixWindowZIndex:function(m){var e=a.data(document.body,"jqxwindows-list")||[],n=this.zIndex,h;if(!this.isModal){if(this._indexOf(this.host,e)<0){e.push(this.host)}a.data(document.body,"jqxwindows-list",e);if(e.length>1){var f=e[e.length-2];if(f.css("z-index")=="auto"){n=this.zIndex+e.length+1}else{n=parseInt(f.css("z-index"),10)+1}}}else{if(e){e=this._removeFromArray(this.host,e);a.data(document.body,"jqxwindows-list",e)}var g=a.data(document.body,"jqxwindows-modallist");if(!g){if(m=="modal-show"){var k=new Array();k.push(this.host);a.data(document.body,"jqxwindows-modallist",k);g=k}else{a.data(document.body,"jqxwindows-modallist",new Array());g=new Array()}}else{if(m=="modal-show"){g.push(this.host)}else{var i=g.indexOf(this.host);if(i!=-1){g.splice(i,1)}}}n=this.modalZIndex;var l=this;a.each(g,function(q){if(this.data()){if(this.data().jqxWindow){var o=this.data().jqxWindow.instance;o._modalBackground.css("z-index",n);o.host.css("z-index",n+1);n+=2}}});a.data(document.body,"jqxwindow-modal",this.host);return}this.host.css("z-index",n);this._sortByStyle("z-index",e)},_validateProperties:function(){try{this._validateSize();this._validateAnimationProperties();this._validateInteractionProperties();this._validateModalProperties();if(!this.position){throw new Error(this._invalidArgumentExceptions.invalidPosition)}if(isNaN(this.closeButtonSize)||parseInt(this.closeButtonSize)<0){throw new Error(this._invalidArgumentExceptions.invalidCloseButtonSize)}if(isNaN(this.collapseButtonSize)||parseInt(this.collapseButtonSize)<0){throw new Error(this._invalidArgumentExceptions.invalidCollapseButtonSize)}}catch(e){alert(e)}},_validateModalProperties:function(){if(this.modalOpacity<0||this.modalOpacity>1){throw new Error(this._invalidArgumentExceptions.invalidModalOpacity)}if(this.isModal&&!this._singleModalCheck()){throw new Error(this._invalidArgumentExceptions.invalidIsModal)}},_validateSize:function(){this._validateSizeLimits();if(this.height!=="auto"&&isNaN(parseInt(this.height))){throw new Error(this._invalidArgumentExceptions.invalidHeight)}if(this.width!=="auto"&&isNaN(parseInt(this.width))){throw new Error(this._invalidArgumentExceptions.invalidWidth)}if(this.height!=="auto"&&this.height<this.minHeight){this.height=this.minHeight}if(this.width<this.minWidth){this.width=this.minWidth}if(this.height!=="auto"&&this.height>this.maxHeight){this.height=this.maxHeight}if(this.width>this.maxWidth){this.width=this.maxWidth}if(this.dragArea===null){return}if(this.dragArea&&((this.dragArea.height!==null&&this.host.height()>this.dragArea.height)||(parseInt(this.height,10)>this.dragArea.height))||(this.dragArea.width!==null&&this.width>this.dragArea.width)||(this.maxHeight>this.dragArea.height||this.maxWidth>this.dragArea.width)){}},_validateSizeLimits:function(){if(this.maxHeight==null){this.maxHeight=9999}if(this.minWidth==null){this.minWidth=0}if(this.maxWidth==null){this.maxWidth=9999}if(this.minHeight==null){this.minHeight=0}if(isNaN(parseInt(this.minHeight))){throw new Error(this._invalidArgumentExceptions.invalidMinHeight)}if(isNaN(parseInt(this.maxHeight))){throw new Error(this._invalidArgumentExceptions.invalidMaxHeight)}if(isNaN(parseInt(this.minWidth))){throw new Error(this._invalidArgumentExceptions.invalidMinWidth)}if(isNaN(parseInt(this.maxWidth))){throw new Error(this._invalidArgumentExceptions.invalidMaxWidth)}if(this.minHeight>this.maxHeight){throw new Error(this._invalidArgumentExceptions.invalidMinHeight)}if(this.minWidth>this.maxWidth){throw new Error(this._invalidArgumentExceptions.invalidMinWidth)}},_validateAnimationProperties:function(){if(this.animationType!=="fade"&&this.animationType!=="slide"&&this.animationType!=="combined"&&this.animationType!=="none"){throw new Error(this._invalidArgumentExceptions.invalidAnimationType)}if(isNaN(parseInt(this.closeAnimationDuration),10)||this.closeAnimationDuration<0){throw new Error(this._invalidArgumentExceptions.invalidCloseAnimationDuration)}if(isNaN(parseInt(this.showAnimationDuration),10)||this.showAnimationDuration<0){throw new Error(this._invalidArgumentExceptions.invalidShowAnimationDuration)}},_validateInteractionProperties:function(){if(parseInt(this.keyCode,10)<0||parseInt(this.keyCode,10)>130&&this.keyCode!=="esc"){throw new Error(this._invalidArgumentExceptions.invalidKeyCode)}if(this.dragArea!==null&&(typeof this.dragArea.width==="undefined"||typeof this.dragArea.height==="undefined"||typeof this.dragArea.left==="undefined"||typeof this.dragArea.top==="undefined")){throw new Error(this._invalidArgumentExceptions.invalidDragArea)}if(!this.dialogResult||(!this.dialogResult.OK&&!this.dialogResult.Cancel&&!this.dialogResult.None)){throw new Error(this._invalidArgumentExceptions.invalidDialogResult)}if(this.closeButtonAction!=="hide"&&this.closeButtonAction!=="close"){throw new Error(this._invalidArgumentExceptions.invalidCloseButtonAction)}},_singleModalCheck:function(){var e=a.data(document.body,"jqxwindows-list")||[],f=e.length;while(f){f-=1;if(a(e[f].attr("id")).length>0){if(a(e[f].attr("id")).jqxWindow("isModal")){return false}}}return true},_createStructure:function(){var e=this.host.children("DIV");if(e.length===1){this._header=a("<div>"+this.host.attr("caption")+"</div>");this.host.prepend(this._header);this.host.attr("caption","");this._content=a(e[0])}else{if(e.length===2){this._header=a(e[0]);this._content=a(e[1])}else{throw new Error("Invalid structure!")}}},_refresh:function(){this._render();this._addStyles();this._performLayout();this._removeEventHandlers();this._addEventHandlers();this._initializeResize()},_render:function(){this._addHeaderWrapper();this._addCloseButton();this._addCollapseButton();this._removeModal();this._makeModal()},_addHeaderWrapper:function(){if(!this._headerContentWrapper){this._header.wrapInner('<div style="float:left;"></div>');this._headerContentWrapper=this._header.children(0);if(this.headerHeight!==null){this._header.height(this.headerHeight)}}},_addCloseButton:function(){if(!this._closeButton){this._closeButtonWrapper=a('<div class="'+this.toThemeProperty("jqx-window-close-button-background")+'"></div>');this._closeButton=a('<div style="width: 100%; height: 100%;" class="'+this.toThemeProperty("jqx-window-close-button")+" "+this.toThemeProperty("jqx-icon-close")+'"></div>');this._closeButtonWrapper.append(this._closeButton);this._header.append(this._closeButtonWrapper)}},_addCollapseButton:function(){if(!this._collapseButton){this._collapseButtonWrapper=a('<div class="'+this.toThemeProperty("jqx-window-collapse-button-background")+'"></div>');this._collapseButton=a('<div style="width: 100%; height: 100%;" class="'+this.toThemeProperty("jqx-window-collapse-button")+" "+this.toThemeProperty("jqx-icon-arrow-up")+'"></div>');this._collapseButtonWrapper.append(this._collapseButton);this._header.append(this._collapseButtonWrapper)}},_removeModal:function(){if(!this.isModal&&typeof this._modalBackground==="object"&&this._modalBackground!==null&&this._modalBackground.length>=1){a("."+this.toThemeProperty("jqx-window-modal")).remove();this._modalBackground=null}},focus:function(){try{this.host.focus();var f=this;setTimeout(function(){f.host.focus()},10)}catch(e){}},_makeModal:function(){if(this.isModal&&(!this._modalBackground||this._modalBackground.length<1)){var g=a.data(document.body,"jqxwindows-list");if(g){this._removeFromArray(this.host,g);a.data(document.body,"jqxwindows-list",g)}this._modalBackground=a("<div></div>");this._modalBackground.addClass(this.toThemeProperty("jqx-window-modal"));this._setModalBackgroundStyles();a(document.body).append(this._modalBackground);this.addHandler(this._modalBackground,this._getEvent("click"),function(){return false});var f=this;var e=function(i,k){var h=a(i).parents().get();for(j=0;j<h.length;j++){if(a(h[j]).is(k)){return true}}return false};this.addHandler(this._modalBackground,"mouseup",function(h){f._stopResizing(f);h.preventDefault()});this.addHandler(this._modalBackground,"mousedown",function(i){var h=f._getTabbables();if(h.length>0){h[0].focus(1);setTimeout(function(){h[0].focus(1)},100)}i.preventDefault();return false});this.addHandler(a(document),"keydown.window"+this.element.id,function(l){if(l.keyCode!==9){return}var h=a.data(document.body,"jqxwindows-modallist");if(h.length>1){if(h[h.length-1][0]!=f.element){return}}var k=f._getTabbables();var m=null;var i=null;if(k.length>0){m=k[0];i=k[k.length-1]}if(l.target==f.element){return}if(m==null){return}if(!e(l.target,f.host)){m.focus(1);return false}if(l.target===i&&!l.shiftKey){m.focus(1);return false}else{if(l.target===m&&l.shiftKey){i.focus(1);return false}}})}},_addStyles:function(){this.host.addClass(this.toThemeProperty("jqx-rc-all"));this.host.addClass(this.toThemeProperty("jqx-window"));this.host.addClass(this.toThemeProperty("jqx-popup"));if(a.jqx.browser.msie){this.host.addClass(this.toThemeProperty("jqx-noshadow"))}this.host.addClass(this.toThemeProperty("jqx-widget"));this.host.addClass(this.toThemeProperty("jqx-widget-content"));this._header.addClass(this.toThemeProperty("jqx-window-header"));this._content.addClass(this.toThemeProperty("jqx-window-content"));this._header.addClass(this.toThemeProperty("jqx-widget-header"));this._content.addClass(this.toThemeProperty("jqx-widget-content"));this._header.addClass(this.toThemeProperty("jqx-disableselect"));this._header.addClass(this.toThemeProperty("jqx-rc-t"));this._content.addClass(this.toThemeProperty("jqx-rc-b"));if(!this.host.attr("tabindex")){this.element.tabIndex=0;this.host.children().css("tab-index",0)}this.host.attr("hideFocus","true").css("outline","none")},_performHeaderLayout:function(){this._handleHeaderButtons();this._header.css("position","relative");if(this.rtl){this._headerContentWrapper.css("direction","rtl");this._headerContentWrapper.css("float","right")}else{this._headerContentWrapper.css("direction","ltr");this._headerContentWrapper.css("float","left")}this._performHeaderCloseButtonLayout();this._performHeaderCollapseButtonLayout();this._centerElement(this._headerContentWrapper,this._header,"y","margin");if(this.headerHeight){this._centerElement(this._closeButtonWrapper,this._header,"y","margin");this._centerElement(this._collapseButtonWrapper,this._header,"y","margin")}},_handleHeaderButtons:function(){if(!this._closeButtonWrapper){return}if(!this.showCloseButton){this._closeButtonWrapper.css("visibility","hidden")}else{this._closeButtonWrapper.css("visibility","visible");this._closeButtonWrapper.width(this.closeButtonSize);this._closeButtonWrapper.height(this.closeButtonSize)}if(!this.showCollapseButton){this._collapseButtonWrapper.css("visibility","hidden")}else{this._collapseButtonWrapper.css("visibility","visible");this._collapseButtonWrapper.width(this.collapseButtonSize);this._collapseButtonWrapper.height(this.collapseButtonSize)}},_performHeaderCloseButtonLayout:function(){if(!this._closeButtonWrapper){return}var e=parseInt(this._header.css("padding-right"),10);if(!isNaN(e)){this._closeButtonWrapper.width(this._closeButton.width());if(!this.rtl){this._closeButtonWrapper.css("margin-right",e);this._closeButtonWrapper.css("margin-left","0px")}else{this._closeButtonWrapper.css("margin-left",e);this._closeButtonWrapper.css("margin-right","0px")}}if(!this.rtl){this._closeButtonWrapper.css({position:"absolute",right:"0px",left:""})}else{this._closeButtonWrapper.css({position:"absolute",left:"0px",right:""})}},_performHeaderCollapseButtonLayout:function(){if(!this._closeButtonWrapper){return}var e=parseInt(this._header.css("padding-right"),10);if(!isNaN(e)){this._collapseButtonWrapper.width(this.collapseButtonSize);this._collapseButtonWrapper.height(this.collapseButtonSize);if(!this.rtl){this._collapseButtonWrapper.css("margin-right",e);this._collapseButtonWrapper.css("margin-left","0px")}else{this._collapseButtonWrapper.css("margin-left",e);this._collapseButtonWrapper.css("margin-right","0px")}}if(!this.rtl){this._collapseButtonWrapper.css({position:"absolute",right:(this.showCloseButton)?this._closeButton.outerWidth(true):0,left:""})}else{this._collapseButtonWrapper.css({position:"absolute",left:(this.showCloseButton)?this._closeButton.outerWidth(true):0,right:""})}this._centerElement(this._collapseButton,this._collapseButton.parent(),"y")},_performWidgetLayout:function(){var e;if(this.width!=="auto"){this.host.css("width",this.width)}if(!this.collapsed){if(this.height!=="auto"){this.host.height(this.height)}else{this.host.height(this.host.height())}this.host.css("min-height",this.minHeight)}this._setChildrenLayout();e=this._validateMinSize();this.host.css({"max-height":this.maxHeight,"min-width":this.minWidth,"max-width":this.maxWidth});if(!e){this._setChildrenLayout()}},_setChildrenLayout:function(){this._header.width(this.host.width()-(this._header.outerWidth(true)-this._header.width()));this._content.width(this.host.width()-(this._content.outerWidth(true)-this._content.width()));this._content.height(this.host.height()-this._header.outerHeight(true)-(this._content.outerHeight(true)-this._content.height()))},_validateMinSize:function(){var f=true;if(this.minHeight<this._header.height()){this.minHeight=this._header.height();f=false}var h=this._header.children(0).outerWidth(true),e=this._header.children(1).outerWidth(true),g=h+e;if(this.minWidth<100){this.minWidth=Math.min(g,100);f=false}return f},_centerElement:function(h,f,e,g){if(typeof f.left==="number"&&typeof f.top==="number"&&typeof f.height==="number"&&typeof f.width==="number"){this._centerElementInArea(h,f,e)}else{this._centerElementInParent(h,f,e,g)}},_centerElementInParent:function(e,m,h,f){h=h.toLowerCase();if(f){f+="-"}else{f=""}if(h.indexOf("y")>=0){var g=e.outerHeight(true),k=m.height(),i=(Math.max(0,k-g))/2;e.css(f+"top",i+"px")}if(h.indexOf("x")>=0){var o=e.outerWidth(true);var n=m.width();var l=(Math.max(0,n-o))/2;e.css(f+"left",l+"px")}},_centerElementInArea:function(f,e,h){h=h.toLowerCase();if(h.indexOf("y")>=0){var g=f.outerHeight(true);var k=e.height;var i=(k-g)/2;f.css("top",i+e.top+"px")}if(h.indexOf("x")>=0){var n=f.outerWidth(true);var m=e.width;var l=(m-n)/2;f.css("left",l+e.left+"px")}},_removeEventHandlers:function(){this.removeHandler(this._header,this._getEvent("mousedown"));this.removeHandler(this._header,this._getEvent("mousemove"));this.removeHandler(this._header,"focus");this.removeHandler(a(document),this._getEvent("mousemove")+"."+this.host.attr("id"));this.removeHandler(a(document),this._getEvent("mouseup")+"."+this.host.attr("id"));this.removeHandler(this.host,"keydown");this.removeHandler(this._closeButton,this._getEvent("click"));this.removeHandler(this._closeButton,this._getEvent("mouseenter"));this.removeHandler(this._closeButton,this._getEvent("mouseleave"));this.removeHandler(this._collapseButton,this._getEvent("click"));this.removeHandler(this._collapseButton,this._getEvent("mouseenter"));this.removeHandler(this._collapseButton,this._getEvent("mouseleave"));this.removeHandler(this.host,this._getEvent("mousedown"));this.removeHandler(a(this.okButton),this._getEvent("click"),this._setDialogResultHandler);this.removeHandler(a(this.cancelButton),this._getEvent("click"),this._setDialogResultHandler);this.removeHandler(this._header,this._getEvent("mouseenter"));this.removeHandler(this._header,this._getEvent("mouseleave"));this.removeHandler(this.host,"resizing",this._windowResizeHandler)},_removeFromArray:function(e,g){var f=this._indexOf(e,g);if(f>=0){return g.splice(this._indexOf(e,g),1)}else{return g}},_sortByStyle:function(e,l){for(var h=0;h<l.length;h++){for(var f=l.length-1;f>h;f--){var m=l[f],k=l[f-1],g;if(parseInt(m.css(e),10)<parseInt(k.css(e),10)){g=m;l[f]=k;l[f-1]=g}}}},_initializeResize:function(){if(this.resizable){var e=this;this.initResize({target:this.host,alsoResize:e._content,maxWidth:e.maxWidth,minWidth:e.minWidth,maxHeight:e.maxHeight,minHeight:e.minHeight,indicatorSize:10,resizeParent:e.dragArea})}},_removeResize:function(){this.removeResize()},_getEvent:function(e){if(this._isTouchDevice){return this._touchEvents[e]}else{return e}},_addEventHandlers:function(){this._addDragDropHandlers();this._addCloseHandlers();this._addCollapseHandlers();this._addFocusHandlers();this._documentResizeHandlers();this._closeButtonHover();this._collapseButtonHover();this._addDialogButtonsHandlers();this._addHeaderHoverEffect();this._addResizeHandlers();var e=this;this.addHandler(this._header,this._getEvent("mousemove"),function(f){e._addHeaderCursorHandlers(e)})},_addResizeHandlers:function(){var e=this;this.addHandler(this.host,"resizing",this._windowResizeHandler,{self:this})},_windowResizeHandler:function(f){var e=f.data.self;e._header.width(e.host.width()-(e._header.outerWidth(true)-e._header.width()));e.width=f.args.width;e.height=f.args.height},_addHeaderHoverEffect:function(){var e=this;this.addHandler(this._header,this._getEvent("mouseenter"),function(){a(this).addClass(e.toThemeProperty("jqx-window-header-hover"))});this.addHandler(this._header,this._getEvent("mouseleave"),function(){a(this).removeClass(e.toThemeProperty("jqx-window-header-hover"))})},_addDialogButtonsHandlers:function(){if(this.okButton){this.addHandler(a(this.okButton),this._getEvent("click"),this._setDialogResultHandler,{self:this,result:"ok"})}if(this.cancelButton){this.addHandler(a(this.cancelButton),this._getEvent("click"),this._setDialogResultHandler,{self:this,result:"cancel"})}},_documentResizeHandlers:function(){var e=this;if(this.isModal){this.addHandler(a(window),"resize.window"+this.element.id,function(){if(typeof e._modalBackground==="object"&&e._modalBackground!==null){if(e.isOpen()){e._modalBackground.hide()}if(!e.restricter){e._modalBackground.width(e._getDocumentSize().width);e._modalBackground.height(e._getDocumentSize().height)}else{e._modalBackground.css("left",e.dragArea.left);e._modalBackground.css("top",e.dragArea.top);e._modalBackground.width(e.dragArea.width);e._modalBackground.height(e.dragArea.height)}if(e.isOpen()){e._modalBackground.show()}}})}},_setDialogResultHandler:function(f){var e=f.data.self;e._setDialogResult(f.data.result);e.closeWindow()},_setDialogResult:function(e){this.dialogResult.OK=false;this.dialogResult.None=false;this.dialogResult.Cancel=false;e=e.toLowerCase();switch(e){case"ok":this.dialogResult.OK=true;break;case"cancel":this.dialogResult.Cancel=true;break;default:this.dialogResult.None=true}},_getDocumentSize:function(){var e=a.jqx.browser.msie&&a.jqx.browser.version<9;var f=e?4:0;var g=f;if(document.body.scrollHeight>document.body.clientHeight&&e){f=this._SCROLL_WIDTH}if(document.body.scrollWidth>document.body.clientWidth&&e){g=this._SCROLL_WIDTH}return{width:a(document).width()-f,height:a(document).height()-g}},_closeButtonHover:function(){var e=this;this.addHandler(this._closeButton,this._getEvent("mouseenter"),function(){e._closeButton.addClass(e.toThemeProperty("jqx-window-close-button-hover"))});this.addHandler(this._closeButton,this._getEvent("mouseleave"),function(){e._closeButton.removeClass(e.toThemeProperty("jqx-window-close-button-hover"))})},_collapseButtonHover:function(){var e=this;this.addHandler(this._collapseButton,this._getEvent("mouseenter"),function(){e._collapseButton.addClass(e.toThemeProperty("jqx-window-collapse-button-hover"))});this.addHandler(this._collapseButton,this._getEvent("mouseleave"),function(){e._collapseButton.removeClass(e.toThemeProperty("jqx-window-collapse-button-hover"))})},_setModalBackgroundStyles:function(){if(this.isModal){this._modalBackground.fadeTo(0,this.modalOpacity);this._modalBackground.css({position:"absolute",top:"0px",left:"0px",width:this._getDocumentSize().width,height:this._getDocumentSize().height,"z-index":this.modalBackgroundZIndex});if(!this.autoOpen){this._modalBackground.css("display","none")}}},_addFocusHandlers:function(){var e=this;this.addHandler(this.host,this._getEvent("mousedown"),function(){if(!e.isModal){e.bringToFront()}})},_indexOf:function(f,g){for(var e=0;e<g.length;e++){if(g[e][0]===f[0]){return e}}return -1},_addCloseHandlers:function(){var e=this;this.addHandler(this._closeButton,this._getEvent("click"),function(f){return e._closeWindow(f)});if(this.keyboardCloseKey!=="none"){if(typeof this.keyboardCloseKey!=="number"&&this.keyboardCloseKey.toLowerCase()==="esc"){this.keyboardCloseKey=27}}this.addHandler(this.host,"keydown",function(f){if(f.keyCode===e.keyboardCloseKey&&e.keyboardCloseKey!=null&&e.keyboardCloseKey!="none"){e._closeWindow(f)}else{e._handleKeys(f)}},{self:this});this.addHandler(this.host,"keyup",function(f){if(!e.keyboardNavigation){return}if(e._moved){var i=e.host.coord();var h=i.left;var g=i.top;e._raiseEvent(3,h,g,h,g);e._moved=false}})},_handleKeys:function(f){if(!this.keyboardNavigation){return}if(!this._headerFocused){return}if(a(document.activeElement).ischildof(this._content)){return}var e=f.ctrlKey;var n=f.keyCode;var l=this.host.coord();var k=l.left;var m=l.top;var g=this._getDraggingArea();var h=this.host.width();var o=this.host.height();var p=true;var i=10;switch(n){case 37:if(!e){if(this.draggable){if(k-i>=0){this.move(k-i,m)}}}else{if(this.resizable){this.resize(h-i,o)}}p=false;break;case 38:if(!e){if(this.draggable){if(m-i>=0){this.move(k,m-i)}}}else{if(this.resizable){this.resize(h,o-i)}}p=false;break;case 39:if(!e){if(this.draggable){if(k+h+i<=g.width){this.move(k+i,m)}}}else{if(this.resizable){this.resize(h+i,o)}}p=false;break;case 40:if(!e){if(this.draggable){if(m+o+i<=g.height){this.move(k,m+i)}}}else{if(this.resizable){this.resize(h,o+i)}}p=false;break}if(!p){if(f.preventDefault){f.preventDefault()}if(f.stopPropagation){f.stopPropagation()}}return p},_addCollapseHandlers:function(){var e=this;this.addHandler(this._collapseButton,this._getEvent("click"),function(){if(!e.collapsed){e.collapse()}else{e.expand()}})},_closeWindow:function(e){this.closeWindow();return false},_addHeaderCursorHandlers:function(e){if(e.resizeArea&&e.resizable&&!e.collapsed){e._header.css("cursor",e._resizeWrapper.css("cursor"));return}else{if(e.draggable){e._header.css("cursor","move");return}}e._header.css("cursor","default");if(e._resizeWrapper&&e._resizeWrapper.length>0){e._resizeWrapper.css("cursor","default")}},_addDragDropHandlers:function(){if(this.draggable){var e=this;this.addHandler(this.host,"focus",function(){e._headerFocused=true});this.addHandler(this.host,"blur",function(){e._headerFocused=false});this.addHandler(this._header,"focus",function(){e._headerFocused=true;return false});this.addHandler(this._header,this._getEvent("mousedown"),function(k,i,l){if(i){k.pageX=i}if(l){k.pageY=l}e._headerMouseDownHandler(e,k);return true});this.addHandler(this._header,"dragstart",function(i){if(i.preventDefault){i.preventDefault()}return false});this.addHandler(this._header,this._getEvent("mousemove"),function(i){return e._headerMouseMoveHandler(e,i)});this.addHandler(a(document),this._getEvent("mousemove")+"."+this.host.attr("id"),function(i){return e._dragHandler(e,i)});this.addHandler(a(document),this._getEvent("mouseup")+"."+this.host.attr("id"),function(i){return e._dropHandler(e,i)});try{if(document.referrer!=""||window.frameElement){var h=null;if(window.top!=null&&window.top!=window.self){if(window.parent&&document.referrer){h=document.referrer}}if(h&&h.indexOf(document.location.host)!=-1){var g=function(i){e._dropHandler(e,i)};if(window.top.document.addEventListener){window.top.document.addEventListener("mouseup",g,false)}else{if(window.top.document.attachEvent){window.top.document.attachEvent("onmouseup",g)}}}}}catch(f){}}},_headerMouseDownHandler:function(f,g){if(!f.isModal){f.bringToFront()}if(f._resizeDirection==null){var h=a.jqx.mobile.getTouches(g);var i=h[0];var e=a.jqx.position(g);f._mousePosition.x=e.left;f._mousePosition.y=e.top;f._mouseDown=true;f._isDragging=false}},_headerMouseMoveHandler:function(f,i){if(f._mouseDown&&!f._isDragging){var k=a.jqx.mobile.getTouches(i);var l=k[0];var h=l.pageX,g=l.pageY;var e=a.jqx.position(i);h=e.left;g=e.top;if((h+3<f._mousePosition.x||h-3>f._mousePosition.x)||(g+3<f._mousePosition.y||g-3>f._mousePosition.y)){f._isDragging=true;f._mousePosition={x:h,y:g};f._windowPosition={x:f.host.coord().left,y:f.host.coord().top};a(document.body).addClass(f.toThemeProperty("jqx-disableselect"))}if(f._isTouchDevice){i.preventDefault();return true}return false}if(f._isDragging){if(f._isTouchDevice){i.preventDefault();return true}return false}return true},_dropHandler:function(g,k){var f=true;if(g._isDragging&&!g.isResizing&&!g._resizeDirection){var e=parseInt(g.host.css("left"),10),l=parseInt(g.host.css("top"),10),i=(g._isTouchDevice)?0:k.pageX,h=(g._isTouchDevice)?0:k.pageY;g.enableResize=g._enableResizeBackup;g._enableResizeBackup="undefined";g._raiseEvent(3,e,l,i,h);f=false;if(k.preventDefault!="undefined"){k.preventDefault()}if(k.originalEvent!=null){k.originalEvent.mouseHandled=true}if(k.stopPropagation!="undefined"){k.stopPropagation()}}g._isDragging=false;g._mouseDown=false;a(document.body).removeClass(g.toThemeProperty("jqx-disableselect"));return f},_dragHandler:function(p,h){if(p._isDragging&&!p.isResizing&&!p._resizeDirection){var o=(p._isTouchDevice)?h.originalEvent.which:h.which;if(typeof p._enableResizeBackup==="undefined"){p._enableResizeBackup=p.enableResize}p.enableResize=false;if(o===0&&a.jqx.browser.msie&&a.jqx.browser.version<8){return p._dropHandler(p,h)}var m=a.jqx.mobile.getTouches(h);var l=m[0];var n=a.jqx.position(h);var k=n.left,i=n.top,g=k-p._mousePosition.x,f=i-p._mousePosition.y,e=p._windowPosition.x+g,q=p._windowPosition.y+f;p.move(e,q,h);h.preventDefault();return false}return true},_validateCoordinates:function(e,l,i,k){var h=this._getDraggingArea();e=(e<h.left)?h.left:e;l=(l<h.top)?h.top:l;var f=this.host.outerWidth(true);var g=this.host.outerHeight(true);if(e+f>=h.width+h.left-2*k){e=h.width+h.left-f-k}if(l+g>=h.height+h.top-i){l=h.height+h.top-g-i}return{x:e,y:l}},_performLayout:function(){this._performHeaderLayout();this._performWidgetLayout()},_parseDragAreaAttributes:function(){if(this.dragArea!==null){this.dragArea.height=parseInt(this.dragArea.height,10);this.dragArea.width=parseInt(this.dragArea.width,10);this.dragArea.top=parseInt(this.dragArea.top,10);this.dragArea.left=parseInt(this.dragArea.left,10)}},_positionWindow:function(){this._parseDragAreaAttributes();if(this.position instanceof Array&&this.position.length===2&&typeof this.position[0]==="number"&&typeof this.position[1]==="number"){this.host.css({left:this.position[0],top:this.position[1]})}else{if(this.position instanceof Object){if(this.position.left){this.host.offset(this.position)}else{if(this.position.x!==undefined&&this.position.y!=undefined){this.host.css({left:this.position.x,top:this.position.y})}else{if(this.position.center){this._centerElement(this.host,this.position.center,"xy");var g=this.position.center.coord();var f=parseInt(this.host.css("left"));var e=parseInt(this.host.css("top"));this.host.css({left:f+g.left,top:e+g.top})}}}}else{this._positionFromLiteral()}}},_getDraggingArea:function(){var e={};e.left=((this.dragArea&&this.dragArea.left)?this.dragArea.left:0);e.top=((this.dragArea&&this.dragArea.top)?this.dragArea.top:0);e.width=((this.dragArea&&this.dragArea.width)?this.dragArea.width:this._getDocumentSize().width);e.height=((this.dragArea&&this.dragArea.height)?this.dragArea.height:this._getDocumentSize().height);return e},_positionFromLiteral:function(){if(!(this.position instanceof Array)){this.position=this.position.split(",")}var e=this.position.length,f=this._getDraggingArea();while(e){e-=1;this.position[e]=this.position[e].replace(/ /g,"");switch(this.position[e]){case"top":this.host.css("top",f.top);break;case"left":this.host.css("left",f.left);break;case"bottom":this.host.css("top",f.height-this.host.height()+f.top);break;case"right":this.host.css("left",f.left+f.width-this.host.width());break;default:if(!this.dragArea){f=a(window)}this._centerElement(this.host,f,"xy");break}}},_raiseEvent:function(g){var f=this._events[g],h=a.Event(f),e={};if(g===2||g===3){e.x=arguments[1];e.y=arguments[2];e.pageX=arguments[3];e.pageY=arguments[4]}if(f==="closed"||f==="close"){e.dialogResult=this.dialogResult}h.args=e;return this.host.trigger(h)},destroy:function(){this.removeHandler(a(window),"resize.window"+this.element.id);this._removeEventHandlers();this._destroy()},_destroy:function(){if(this.restricter){this.removeHandler(a(window),"resize."+this.element.id);this.removeHandler(a(window),"orientationchanged."+this.element.id);this.removeHandler(a(window),"orientationchange."+this.element.id)}this.host.remove();if(this._modalBackground!==null){this._modalBackground.remove()}},_toClose:function(f,e){return((f&&e[0]===this.element)||(e[0]!==this.element&&typeof e[0]==="object"))},propertyChangedHandler:function(e,f,h,g){this._validateProperties();switch(f){case"rtl":this._performLayout();break;case"dragArea":this._positionWindow();break;case"collapseButtonSize":this._performLayout();break;case"closeButtonSize":this._performLayout();break;case"isModal":this._refresh();this._fixWindowZIndex();break;case"keyboardCloseKey":this._removeEventHandlers();this._addEventHandlers();break;case"disabled":if(g){this.disable()}else{this.disabled=true;this.enable()}break;case"showCloseButton":case"showCollapseButton":this._performLayout();break;case"height":this._performLayout();break;case"width":this._performLayout();break;case"title":this.setTitle(g);this.title=g;break;case"content":this.setContent(g);break;case"draggable":this._removeEventHandlers();this._addEventHandlers();this._removeResize();this._initializeResize();break;case"resizable":this.enableResize=g;if(g){this._initializeResize()}else{this._removeResize()}break;case"position":this._positionWindow();break;case"modalOpacity":this._setModalBackgroundStyles();break;case"okButton":if(g){this._addDialogButtonsHandlers()}else{this.removeHandler(this.okButton)}break;case"cancelButton":if(g){this._addDialogButtonsHandlers()}else{this.removeHandler(this.cancelButton)}break;case"collapsed":if(g){if(!h){this.collapsed=false;this.collapse(0)}}else{if(h){this.collapsed=true;this.expand(0)}}case"theme":a.jqx.utilities.setTheme(h,g,this.host);break;case"enableResize":return;case"maxWidth":case"maxHeight":case"minWidth":case"minHeight":e._performLayout();e._removeResize();e._initializeResize();return;default:return}},collapse:function(g){if(!this.collapsed&&!this.host.is(":animated")){if(this.host.css("display")=="none"){return}var e=this,h=this._header.outerHeight(true),i=parseInt(this._header.css("border-bottom-width"),10),f=parseInt(this._header.css("margin-bottom"),10),g=!isNaN(parseInt(g))?g:this.collapseAnimationDuration;if(!isNaN(i)){h-=2*i}if(!isNaN(f)){h+=f}this._heightBeforeCollapse=this.host.height();this._minHeightBeforeCollapse=this.host.css("min-height");this.host.css("min-height",h);this.host.animate({height:h},g,function(){e.collapsed=true;e._collapseButton.addClass(e.toThemeProperty("jqx-window-collapse-button-collapsed"));e._collapseButton.addClass(e.toThemeProperty("jqx-icon-arrow-down"));e._content.css("display","none");e._raiseEvent(5);e._raiseEvent(9);a.jqx.aria(e,"aria-expanded",false)})}},expand:function(f){if(this.collapsed&&!this.host.is(":animated")){var e=this,f=!isNaN(parseInt(f))?f:this.collapseAnimationDuration;this.host.animate({height:this._heightBeforeCollapse},f,function(){e.collapsed=false;e.host.css("min-height",e._minHeightBeforeCollapse);e._collapseButton.removeClass(e.toThemeProperty("jqx-window-collapse-button-collapsed"));e._collapseButton.removeClass(e.toThemeProperty("jqx-icon-arrow-down"));e._content.css("display","block");e._raiseEvent(6);e._performWidgetLayout();e._raiseEvent(9);a.jqx.aria(e,"aria-expanded",true)})}},closeAll:function(h){var h=true;var g=a.data(document.body,"jqxwindows-list"),f=g.length,e=a.data(document.body,"jqxwindow-modal")||[];while(f){f-=1;if(this._toClose(h,g[f])){g[f].jqxWindow("closeWindow","close");g.splice(f,1)}}if(this._toClose(h,e)){e.jqxWindow("closeWindow","close");a.data(document.body,"jqxwindow-modal",[])}a.data(document.body,"jqxwindows-list",g)},setTitle:function(e){a.jqx.utilities.html(this._headerContentWrapper,e);this.title=e;this._performLayout()},setContent:function(f){this._contentInitialized=false;var e=this._content,g=false;while(!g){e.css("height","auto");e.css("width","auto");if(e.is(".jqx-window")){g=true}else{e=e.parent()}}a.jqx.utilities.html(this._content,f);this._performLayout()},disable:function(){this.disabled=true;this._removeEventHandlers();this._header.addClass(this.toThemeProperty("jqx-window-header-disabled"));this._closeButton.addClass(this.toThemeProperty("jqx-window-close-button-disabled"));this._collapseButton.addClass(this.toThemeProperty("jqx-window-collapse-button-disabled"));this._content.addClass(this.toThemeProperty("jqx-window-content-disabled"));this.host.addClass(this.toThemeProperty("jqx-window-disabled"));this.host.addClass(this.toThemeProperty("jqx-fill-state-disabled"));this._removeResize()},enable:function(){if(this.disabled){this._addEventHandlers();this._header.removeClass(this.toThemeProperty("jqx-window-header-disabled"));this._content.removeClass(this.toThemeProperty("jqx-window-content-disabled"));this._closeButton.removeClass(this.toThemeProperty("jqx-window-close-button-disabled"));this._collapseButton.removeClass(this.toThemeProperty("jqx-window-collapse-button-disabled"));this.host.removeClass(this.toThemeProperty("jqx-window-disabled"));this.host.removeClass(this.toThemeProperty("jqx-fill-state-disabled"));this.disabled=false;this._initializeResize()}},isOpen:function(){return this._visible},closeWindow:function(f){var e=this;f=(typeof f==="undefined")?this.closeButtonAction:f;this.hide(function(){if(f==="close"){e._destroy()}})},bringToFront:function(){var f=a.data(document.body,"jqxwindows-list");if(this.isModal){f=a.data(document.body,"jqxwindows-modallist");this._fixWindowZIndex("modal-hide");this._fixWindowZIndex("modal-show");return}var l=f[f.length-1],k=parseInt(l.css("z-index"),10),g=this._indexOf(this.host,f);for(var e=f.length-1;e>g;e-=1){var h=parseInt(f[e].css("z-index"),10)-1;f[e].css("z-index",h)}this.host.css("z-index",k);this._sortByStyle("z-index",f)},hide:function(h,g,e){if(this.closing){var f=this.closing();if(f==false){return}}g=g||this.closeAnimationDuration;switch(this.animationType){case"none":this.host.css("display","none");break;case"fade":this.host.fadeOut(g,function(){if(h instanceof Function){h()}});case"slide":this.host.slideUp(g,function(){if(h instanceof Function){h()}});case"combined":this.host.hide(g,function(){if(h instanceof Function){h()}})}this._visible=false;if(this.isModal){this._modalBackground.hide();this._fixWindowZIndex("modal-hide")}if(e!==true){this._raiseEvent(1);this._raiseEvent(8)}},open:function(f,e){this.show(f,e)},close:function(g,f,e){this.hide(g,f,e)},show:function(h,g){this._setDialogResult("none");g=g||this.showAnimationDuration;switch(this.animationType){case"none":this.host.css("display","block");break;case"fade":this.host.fadeIn(g,function(){if(h instanceof Function){h()}});break;case"slide":this.host.slideDown(g,function(){if(h instanceof Function){h()}});break;case"combined":this.host.show(g,function(){if(h instanceof Function){h()}});break}if(this.isModal){this._modalBackground.show();this._fixWindowZIndex("modal-show")}var f=this;if(!this._visible){if(g>150&&this.animationType!="none"){setTimeout(function(){if(!f._contentInitialized){if(f.initContent){f.initContent();f._contentInitialized=true}}f._raiseEvent(7);f._raiseEvent(9)},g-150)}else{if(!f._contentInitialized){if(f.initContent){f.initContent();f._contentInitialized=true}}this._raiseEvent(7);f._raiseEvent(9)}}this._visible=true;this._performLayout();if(this.autoFocus){var e=function(){if(!f._isTouchDevice){f._content.focus()}};e();setTimeout(function(){e()},100)}},_getTabbables:function(){var f=this._content.find("*");var e=new Array();a.each(f,function(){if(d(this)){e[e.length]=this}});return e},move:function(q,p,e,h){var g=0,f=0,n,k,i,q=parseInt(q,10),p=parseInt(p,10);if(a.jqx.browser.msie){if(a(window).width()>a(document).width()&&!this.dragArea){f=this._SCROLL_WIDTH}if(a(window).height()<a(document).height()&&document.documentElement.clientWidth>document.documentElement.scrollWidth&&!this.dragArea){g=this._SCROLL_WIDTH}}n=this._validateCoordinates(q,p,f,g);if(parseInt(this.host.css("left"),10)!==n.x||parseInt(this.host.css("top"),10)!==n.y){if(e){var m=a.jqx.mobile.getTouches(e);var l=m[0];var o=a.jqx.position(e);k=o.left;i=o.top}if(k==undefined){k=q}if(i==undefined){i=p}if(h!==false){this._raiseEvent(2,n.x,n.y,k,i)}}this.element.style.left=n.x+"px";this.element.style.top=n.y+"px";this._moved=true}});function c(g,e){var k=g.nodeName.toLowerCase();if("area"===k){var i=g.parentNode,h=i.name,f;if(!g.href||!h||i.nodeName.toLowerCase()!=="map"){return false}f=a("img[usemap=#"+h+"]")[0];return !!f&&b(f)}return(/input|select|textarea|button|object/.test(k)?!g.disabled:"a"==k?g.href||e:e)&&b(g)}function b(e){return !a(e).parents().andSelf().filter(function(){return a.css(this,"visibility")==="hidden"||a.expr.filters.hidden(this)}).length}function d(g){var e=a.attr(g,"tabindex"),f=isNaN(e);return(f||e>=0)&&c(g,!f)}}(jqxBaseFramework));
(function(b){var a=(function(c){return{resizeConfig:function(){this.resizeTarget=null;this.resizeIndicatorSize=5;this.resizeTargetChildren=null;this.isResizing=false;this.resizeArea=false;this.minWidth=1;this.maxWidth=100;this.minHeight=1;this.maxHeight=100;this.resizeParent=null;this.enableResize=true;this._cursorBackup;this._resizeEvents=["resizing","resized","resize"];this._resizeMouseDown=false;this._resizeCurrentMode=null;this._mouseResizePosition={};this._resizeMethods=null;this._SCROLL_WIDTH=21},_resizeExceptions:{invalidTarget:"Invalid target!",invalidMinHeight:"Invalid minimal height!",invalidMaxHeight:"Invalid maximum height!",invalidMinWidth:"Invalid minimum width!",invalidMaxWidth:"Invalid maximum width!",invalidIndicatorSize:"Invalid indicator size!",invalidSize:"Invalid size!"},removeResize:function(){if(this.resizeTarget){var f=c(this.resizeTarget.children(".jqx-resize"));f.detach();var e=f.children();this._removeResizeEventListeners();for(var d=0;d<e.length;d+=1){c(e[d]).detach();this.resizeTarget.append(e[d])}f.remove()}},initResize:function(d){this.resizeConfig();this.resizeTarget=c(d.target);this.resizeIndicatorSize=d.indicatorSize||10;this.maxWidth=d.maxWidth||100;this.minWidth=d.minWidth||1;this.maxHeight=d.maxHeight||100;this.minHeight=d.minHeight||1;this.resizeParent=d.resizeParent;this._parseResizeParentProperties();this._validateResizeProperties();this._validateResizeTargetDimensions();this._getChildren(this.resizeTarget.maxWidth,this.resizeTarget.minWidth,this.resizeTarget.maxHeight,this.resizeTarget.minHeight,d.alsoResize);this._refreshResize();this._cursorBackup=this.resizeTarget.css("cursor");if(this._cursorBackup==="auto"){this._cursorBackup="default"}},_validateResizeTargetDimensions:function(){this.resizeTarget.maxWidth=this.maxWidth;this.resizeTarget.minWidth=((3*this.resizeIndicatorSize>this.minWidth)?3*this.resizeIndicatorSize:this.minWidth);this.resizeTarget.maxHeight=this.maxHeight;this.resizeTarget.minHeight=((3*this.resizeIndicatorSize>this.minHeight)?3*this.resizeIndicatorSize:this.minHeight)},_parseResizeParentProperties:function(){if(this.resizeParent){this.resizeParent.left=parseInt(this.resizeParent.left,10);this.resizeParent.top=parseInt(this.resizeParent.top,10);this.resizeParent.width=parseInt(this.resizeParent.width,10);this.resizeParent.height=parseInt(this.resizeParent.height,10)}},_getChildren:function(h,e,g,i,d){this.resizeTargetChildren=c(d);this.resizeTargetChildren.toArray();var f=this.resizeTargetChildren.length;while(f){f-=1;this.resizeTargetChildren[f]=c(this.resizeTargetChildren[f])}},_refreshResize:function(){this._renderResize();this._performResizeLayout();this._removeResizeEventListeners();this._addResizeEventHandlers()},_renderResize:function(){this.resizeTarget.wrapInner(c("<div></div>"));this._resizeWrapper=this.resizeTarget.children(0);this._resizeWrapper.addClass("jqx-resize");this._resizeWrapper.addClass("jqx-rc-all");this._resizeWrapper.css("z-index",8000)},_performResizeLayout:function(){this._resizeWrapper.height(this.resizeTarget.height());this._resizeWrapper.width(this.resizeTarget.width())},_removeResizeEventListeners:function(){var d=this.resizeTarget.attr("id");this.removeHandler(this._resizeWrapper,"mousemove.resize"+d);this.removeHandler(this._resizeWrapper,"mousedown.resize"+d);this.removeHandler(c(document),"mousemove.resize"+d);this.removeHandler(c(document),"mouseup.resize"+d)},_addResizeEventHandlers:function(){var g=this.resizeTarget.attr("id");var d=this;this.addHandler(this._resizeWrapper,"mousemove.resize."+g,function(h){d._resizeCursorChangeHandler(d,h)});this.addHandler(this._resizeWrapper,"mousedown.resize."+g,function(h){d._resizeMouseDownHandler(d,h)});this.addHandler(c(document),"mousemove.resize."+g,function(h){return d._resizeHandler(d,h)});this.addHandler(c(document),"mouseup.resize."+g,function(h){d._stopResizing(d,h)});try{if(document.referrer!=""||window.frameElement){var f=function(h){d._stopResizing(d,h)};if(window.top.document.addEventListener){window.top.document.addEventListener("mouseup",f,false)}else{if(window.top.document.attachEvent){window.top.document.attachEvent("onmouseup",f)}}}}catch(e){}},_stopResizing:function(d,e){if(d.enableResize){if(d.isResizing){d._raiseResizeEvent(1)}d._resizeMouseDown=false;d.isResizing=false;d._resizeDirection=null;if(d.resizeTarget){d.resizeTarget.removeClass("jqx-disableselect")}}if(d._cursorBackup=="undefined"){d._cursorBackup="default"}if(d._resizeWrapper){d._resizeWrapper.css("cursor",d._cursorBackup)}},_resizeHandler:function(d,e){if(d.enableResize&&!d.collapsed){if(d.isResizing&&d._resizeDirection){if(e.which===0&&c.jqx.browser.msie&&c.jqx.browser.version<9){d._stopResizing(e)}d._performResize(e.pageX,e.pageY);return false}else{return d._resizeCaptureCursor(e.pageX,e.pageY)}}},_resizeCaptureCursor:function(e,d){if(this._resizeMouseDown&&!this.isResizing&&this._resizeDirection){if((e+3<this._mouseResizePosition.x||e-3>this._mouseResizePosition.x)||(d+3<this._mouseResizePosition.y||d-3>this._mouseResizePosition.y)){this._changeCursor(e-parseInt(this.resizeTarget.css("left")),d-parseInt(this.resizeTarget.css("top")));this._mouseResizePosition={x:e,y:d};this._prepareResizeMethods(this._resizeDirection);this._resizeBackupData();this.isResizing=true;this.resizeTarget.addClass("jqx-disableselect");return false}}},_resizeBackupData:function(){this.resizeTarget.lastWidth=this.resizeTarget.width();this.resizeTarget.lastHeight=this.resizeTarget.height();this.resizeTarget.x=parseInt(this.resizeTarget.css("left"),10);this.resizeTarget.y=parseInt(this.resizeTarget.css("top"),10);this._resizeBackupChildrenSize()},_resizeBackupChildrenSize:function(){var d=this.resizeTargetChildren.length,e;while(d){d-=1;e=this.resizeTargetChildren[d];this.resizeTargetChildren[d].lastWidth=e.width();this.resizeTargetChildren[d].lastHeight=e.height()}},_performResize:function(g,f){var e=g-this._mouseResizePosition.x,d=f-this._mouseResizePosition.y;if(this._resizeDirection){this._resize(this.resizeTarget,e,d)}},_resizeCursorChangeHandler:function(d,e){if(d.enableResize&&!d.collapsed){if(!d.isResizing){d._changeCursor(e.pageX-parseInt(d.resizeTarget.css("left")),e.pageY-parseInt(d.resizeTarget.css("top")))}}},_resizeMouseDownHandler:function(d,e){if(d.enableResize){if(d._resizeDirection!==null){d._resizeMouseDown=true;d._mouseResizePosition.x=e.pageX;d._mouseResizePosition.y=e.pageY;e.preventDefault()}}},_validateResizeProperties:function(){try{if(!this.resizeTarget||this.resizeTarget.length!==1){throw new Error(this._resizeExceptions.invalidTarget)}if(this.minHeight<0||isNaN(parseInt(this.minHeight))){throw new Error(this._resizeExceptions.invalidMinHeight)}if(this.maxHeight<=0||isNaN(parseInt(this.maxHeight))){throw new Error(this._resizeExceptions.invalidMaxHeight)}if(this.minWidth<0||isNaN(parseInt(this.minWidth))){throw new Error(this._resizeExceptions.invalidMinWidth)}if(this.maxWidth<0||isNaN(parseInt(this.maxWidth))){throw new Error(this._resizeExceptions.invalidMaxWidth)}if(this.resizeIndicatorSize<0||isNaN(parseInt(this.resizeIndicatorSize))){throw new Error(this._resizeExceptions.invalidIndicatorSize)}if(this.minHeight>this.maxHeight||this.minWidth>this.maxWidth){throw new Error(this._resizeExceptions.invalidSize)}}catch(d){alert(d)}},_changeCursor:function(d,e){if(this.isResizing||this._resizeMouseDown){return}this.resizeArea=true;if(d<=this.resizeIndicatorSize&&d>=0&&e<=this.resizeIndicatorSize&&e>0){this._resizeWrapper.css("cursor","nw-resize");this._resizeDirection="topleft"}else{if(e<=this.resizeIndicatorSize&&e>0&&d>=this.resizeTarget.width()-this.resizeIndicatorSize){this._resizeWrapper.css("cursor","ne-resize");this._resizeDirection="topright"}else{if(e>=this.resizeTarget.height()-this.resizeIndicatorSize&&e<this.resizeTarget.height()&&d<=this.resizeIndicatorSize&&d>=0){this._resizeWrapper.css("cursor","sw-resize");this._resizeDirection="bottomleft"}else{if(e>=this.resizeTarget.height()-this.resizeIndicatorSize&&e<this.resizeTarget.height()&&d>=this.resizeTarget.width()-this.resizeIndicatorSize&&d<this.resizeTarget.width()){this._resizeWrapper.css("cursor","se-resize");this._resizeDirection="bottomright"}else{if(d<=this.resizeIndicatorSize&&d>=0){this._resizeWrapper.css("cursor","e-resize");this._resizeDirection="left"}else{if(e<=this.resizeIndicatorSize&&e>0){this._resizeWrapper.css("cursor","n-resize");this._resizeDirection="top"}else{if(e>=this.resizeTarget.height()-this.resizeIndicatorSize&&e<this.resizeTarget.height()){this._resizeWrapper.css("cursor","n-resize");this._resizeDirection="bottom"}else{if(d>=this.resizeTarget.width()-this.resizeIndicatorSize&&d<this.resizeTarget.width()){this._resizeWrapper.css("cursor","e-resize");this._resizeDirection="right"}else{this._resizeWrapper.css("cursor",this._cursorBackup);this._resizeDirection=null;this.resizeArea=false}}}}}}}}},_prepareResizeMethods:function(d){this._resizeMethods=[];if(d.indexOf("left")>=0){this._resizeMethods.push(this._resizeLeft)}if(d.indexOf("top")>=0){this._resizeMethods.push(this._resizeTop)}if(d.indexOf("right")>=0){this._resizeMethods.push(this._resizeRight)}if(d.indexOf("bottom")>=0){this._resizeMethods.push(this._resizeBottom)}},_validateResize:function(g,d,h,f,e){if(h==="horizontal"||h==="both"){return this._validateWidth(g,f,e)}else{if(h==="vertical"||h==="both"){return this._validateHeight(d,f,e)}}return{result:false,fix:0}},_getParent:function(){if(this.resizeParent!==null&&this.resizeParent!=="undefined"&&this.resizeParent.height&&this.resizeParent.width&&this.resizeParent.top&&this.resizeParent.left){return this.resizeParent}return{left:0,top:0,width:c(document).width(),height:c(document).height()}},_validateHeight:function(f,k,i){var l=0,e=2,d=false,h=f,g=this._getParent();if(c(window).width()>c(document).width()&&c.jqx.browser.msie&&g.height===c(document).height()){l=this._SCROLL_WIDTH}if(i==="bottom"&&(f+k.position().top+l+e>g.height+g.top)){return{fix:g.height-k.position().top-l-e+g.top,result:false}}if(i==="top"&&k.lastHeight-f+k.y<g.top){return{fix:f+(k.lastHeight-f+k.y)-g.top,result:false}}if(f<k.minHeight){return{fix:k.minHeight,result:false}}if(f>k.maxHeight){return{fix:k.maxHeight,result:false}}return{result:true,fix:f}},_validateWidth:function(k,i,h){var l=0,e=2,d=false,g=k,f=this._getParent();if(c(window).height()<c(document).height()&&c.jqx.browser.msie&&document.documentElement.clientWidth>=document.documentElement.scrollWidth&&f.width===c(document).width()){l=this._SCROLL_WIDTH}if(h==="right"&&(k+i.position().left+l+e>f.width+f.left)){return{fix:f.width-i.position().left-l-e+f.left,result:false}}if(h==="left"&&(i.lastWidth-k+i.x<f.left)){return{fix:k+(i.lastWidth-k+i.x)-f.left,result:false}}if(k<i.minWidth){return{fix:i.minWidth,result:false}}if(k>i.maxWidth){return{fix:i.maxWidth,result:false}}return{result:true,fix:k}},_resize:function(h,e,d){var l=this._resizeDirection;var k=this._resizeMethods.length;for(var g=0;g<k;g++){if(this._resizeMethods[g] instanceof Function){var f={element:h,x:e,y:d,self:this};this._resizeMethods[g](f)}}this._performResizeLayout()},resize:function(g,d){if(this.resizable){var f=g-this.host.width();var e=d-this.host.height();var h="right";if(e!=0){h="bottom"}this._resizeDirection=h;this._prepareResizeMethods(this._resizeDirection);this._resizeBackupData();this.isResizing=true;this._resize(this.resizeTarget,f,e);this.isResizing=false}},_setResizeChildrenSize:function(e,f){var h=this.resizeTargetChildren.length;while(h){h--;if(f==="width"){var g=this.resizeTargetChildren[h].lastWidth-(this.resizeTarget.lastWidth-e);if(g<this.resizeTarget.maxWidth&&g>0){this.resizeTargetChildren[h].width(g)}}else{var d=this.resizeTargetChildren[h].lastHeight-(this.resizeTarget.lastHeight-e);if(d<this.resizeTarget.maxHeight&&d>0){this.resizeTargetChildren[h].height(d)}}}},_resizeRight:function(e){var f=e.element.lastWidth+e.x,d=e.self._validateResize(f,0,"horizontal",e.element,"right");if(!d.result){f=d.fix}if(e.element.width()!==f){e.self._setResizeChildrenSize(f,"width");e.element.width(f);e.self._raiseResizeEvent(0)}return f},_resizeLeft:function(f){var g=f.element.lastWidth-f.x,e=f.self._validateResize(g,0,"horizontal",f.element,"left"),d=f.element.x+f.x;if(!e.result){d=f.element.x+(f.element.lastWidth-e.fix);g=e.fix;return}if(f.element.width()!==g){f.self._setResizeChildrenSize(g,"width");f.element.width(g);f.element.css("left",d);f.self._raiseResizeEvent(0)}return g},_resizeBottom:function(f){var e=f.element.lastHeight+f.y,d=f.self._validateResize(0,e,"vertical",f.element,"bottom");if(!d.result){e=d.fix}if(f.element.height()!==e){f.self._setResizeChildrenSize(e,"height");f.element.height(e);f.self._raiseResizeEvent(0)}return e},_resizeTop:function(f){var e=f.element.lastHeight-f.y,d=f.self._validateResize(0,e,"vertical",f.element,"top"),g=f.element.y+f.y;if(!d.result){g=f.element.y+(f.element.lastHeight-d.fix);e=d.fix;return}if(f.element.height()!==e){f.self._setResizeChildrenSize(e,"height");f.element.height(e);f.element.css("top",g);f.self._raiseResizeEvent(0)}return e},_raiseResizeEvent:function(f){var e=this._resizeEvents[f],g=c.Event(e),d={};d.width=parseInt(this.resizeTarget[0].style.width);d.height=parseInt(this.resizeTarget[0].style.height);g.args=d;if(f==0){var e=this._resizeEvents[2],h=c.Event(e);h.args=d;this.resizeTarget.trigger(h)}return this.resizeTarget.trigger(g)}}}(jqxBaseFramework));
b.extend(b.jqx._jqxWindow.prototype,a)}(jqxBaseFramework));
